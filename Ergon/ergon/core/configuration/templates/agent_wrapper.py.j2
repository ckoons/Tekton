#!/usr/bin/env python
"""
Wrapper for the {{ agent.name }} agent.

Generated by Ergon on {{ now().strftime('%Y-%m-%d') }}
"""

import sys
import os
import logging
from typing import Dict, List, Optional, Any, Union
import json
import argparse

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('{{ agent.name }}_wrapper')

# Agent metadata
AGENT_INFO = {
    "name": "{{ agent.name }}",
    "description": """{{ agent.description }}""",
    "version": "{{ agent.version }}",
    "model": "{{ agent.model }}"
}

# Agent parameters
PARAMETERS = {{ agent_parameters|tojson }}

# User-provided parameters
USER_PARAMS = {{ params|tojson }}

# Create a custom system prompt by combining the agent's prompt with user parameters
SYSTEM_PROMPT = """{{ agent.system_prompt }}"""


def main():
    """Execute the agent with the configured parameters."""
    parser = argparse.ArgumentParser(description=AGENT_INFO["description"])
    parser.add_argument('--interactive', '-i', action='store_true', help='Run in interactive mode')
    parser.add_argument('--input', '-m', type=str, help='Input message for the agent')
    parser.add_argument('--show-config', action='store_true', help='Show the current configuration')
    parser.add_argument('--param', action='append', nargs=2, metavar=('NAME', 'VALUE'), 
                        help='Override a parameter (can be used multiple times)')
    
    args = parser.parse_args()
    
    # If show-config, display the configuration and exit
    if args.show_config:
        print(f"Agent: {AGENT_INFO['name']} (v{AGENT_INFO['version']})")
        print(f"Description: {AGENT_INFO['description']}")
        print(f"Model: {AGENT_INFO['model']}")
        print("\nParameters:")
        for name, param in PARAMETERS.items():
            value = USER_PARAMS.get(name, param.get('default_value', 'None'))
            print(f"  {name}: {value}")
            print(f"    Description: {param['description']}")
            print(f"    Type: {param['type']}")
            print(f"    Required: {param['required']}")
        return
    
    # Start with the configured parameters
    final_params = USER_PARAMS.copy()
    
    # Override with command-line parameters if provided
    if args.param:
        for name, value in args.param:
            # Try to parse the value based on the parameter type
            parsed_value = parse_value(value, PARAMETERS.get(name, {}).get('type', 'string'))
            final_params[name] = parsed_value
    
    try:
        # Import the agent runner
        from ergon.core.agents.runner import AgentRunner
        
        # Create the agent runner
        runner = AgentRunner()
        
        # Run the agent
        if args.interactive:
            run_interactive(runner, final_params)
        elif args.input:
            result = runner.run_agent(
                agent_name=AGENT_INFO["name"],
                model=AGENT_INFO["model"],
                system_prompt=SYSTEM_PROMPT,
                input_message=args.input,
                tools={{ agent.tools|tojson }},
                **final_params
            )
            print(result)
        else:
            parser.print_help()
            
    except ImportError as e:
        logger.error(f"Failed to import agent runner: {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Error executing agent: {e}")
        sys.exit(1)


def run_interactive(runner, params):
    """Run the agent in interactive mode.
    
    Args:
        runner: Agent runner
        params: Agent parameters
    """
    print(f"Starting interactive session with {AGENT_INFO['name']}...")
    print(f"Type 'exit' or 'quit' to end the session.")
    print()
    
    while True:
        try:
            user_input = input("You: ")
            
            if user_input.lower() in ('exit', 'quit'):
                break
            
            result = runner.run_agent(
                agent_name=AGENT_INFO["name"],
                model=AGENT_INFO["model"],
                system_prompt=SYSTEM_PROMPT,
                input_message=user_input,
                tools={{ agent.tools|tojson }},
                **params
            )
            
            print(f"\nAgent: {result}\n")
            
        except KeyboardInterrupt:
            print("\nSession ended.")
            break
        except Exception as e:
            logger.error(f"Error in interactive session: {e}")
            print(f"Error: {e}")


def parse_value(value: str, param_type: str) -> Any:
    """Parse a string value based on the parameter type.
    
    Args:
        value: String value to parse
        param_type: Type to parse as
        
    Returns:
        Parsed value
    """
    if param_type == 'string':
        return value
    elif param_type == 'integer':
        return int(value)
    elif param_type == 'float':
        return float(value)
    elif param_type == 'boolean':
        return value.lower() in ('true', 'yes', '1', 'y')
    elif param_type == 'array':
        return json.loads(value)
    elif param_type == 'object':
        return json.loads(value)
    else:
        return value


if __name__ == "__main__":
    main()