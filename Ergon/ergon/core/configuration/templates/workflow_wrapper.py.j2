#!/usr/bin/env python
"""
Wrapper for the {{ workflow.name }} workflow.

Generated by Ergon on {{ now().strftime('%Y-%m-%d') }}
"""

import sys
import os
import logging
from typing import Dict, List, Optional, Any, Union
import json
import argparse
import time

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('{{ workflow.name }}_wrapper')

# Workflow metadata
WORKFLOW_INFO = {
    "name": "{{ workflow.name }}",
    "description": """{{ workflow.description }}""",
    "version": "{{ workflow.version }}"
}

# Workflow definition
WORKFLOW_DEFINITION = {{ workflow.definition|tojson }}

# Workflow parameters
PARAMETERS = {{ workflow_parameters|tojson }}

# User-provided parameters
USER_PARAMS = {{ params|tojson }}


def main():
    """Execute the workflow with the configured parameters."""
    parser = argparse.ArgumentParser(description=WORKFLOW_INFO["description"])
    parser.add_argument('--show-config', action='store_true', help='Show the current configuration')
    parser.add_argument('--param', action='append', nargs=2, metavar=('NAME', 'VALUE'), 
                        help='Override a parameter (can be used multiple times)')
    parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose output')
    
    args = parser.parse_args()
    
    # Set logging level
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # If show-config, display the configuration and exit
    if args.show_config:
        print(f"Workflow: {WORKFLOW_INFO['name']} (v{WORKFLOW_INFO['version']})")
        print(f"Description: {WORKFLOW_INFO['description']}")
        print("\nWorkflow Definition:")
        print(json.dumps(WORKFLOW_DEFINITION, indent=2))
        print("\nParameters:")
        for name, param in PARAMETERS.items():
            value = USER_PARAMS.get(name, param.get('default_value', 'None'))
            print(f"  {name}: {value}")
            print(f"    Description: {param['description']}")
            print(f"    Type: {param['type']}")
            print(f"    Required: {param['required']}")
        return
    
    # Start with the configured parameters
    final_params = USER_PARAMS.copy()
    
    # Override with command-line parameters if provided
    if args.param:
        for name, value in args.param:
            # Try to parse the value based on the parameter type
            parsed_value = parse_value(value, PARAMETERS.get(name, {}).get('type', 'string'))
            final_params[name] = parsed_value
    
    try:
        # Import the workflow engine
        from ergon.core.flow.engine import WorkflowEngine
        
        # Create the workflow engine
        engine = WorkflowEngine()
        
        # Prepare the workflow with parameters
        workflow_with_params = prepare_workflow(WORKFLOW_DEFINITION, final_params)
        
        # Execute the workflow
        logger.info(f"Starting workflow execution: {WORKFLOW_INFO['name']}")
        start_time = time.time()
        
        result = engine.execute_workflow(workflow_with_params)
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        logger.info(f"Workflow execution completed in {execution_time:.2f} seconds")
        
        # Print the result
        print(json.dumps(result, indent=2, default=str))
        
    except ImportError as e:
        logger.error(f"Failed to import workflow engine: {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Error executing workflow: {e}")
        sys.exit(1)


def prepare_workflow(workflow_def: Dict[str, Any], params: Dict[str, Any]) -> Dict[str, Any]:
    """Prepare the workflow definition with the provided parameters.
    
    Args:
        workflow_def: Workflow definition
        params: Parameters to apply
        
    Returns:
        Updated workflow definition
    """
    # Deep copy the workflow definition
    import copy
    workflow = copy.deepcopy(workflow_def)
    
    # Replace parameter placeholders in the workflow
    def replace_params(obj):
        if isinstance(obj, dict):
            for key, value in obj.items():
                if isinstance(value, (dict, list)):
                    replace_params(value)
                elif isinstance(value, str) and value.startswith('{{') and value.endswith('}}'):
                    param_name = value[2:-2].strip()
                    if param_name in params:
                        obj[key] = params[param_name]
        elif isinstance(obj, list):
            for i, item in enumerate(obj):
                if isinstance(item, (dict, list)):
                    replace_params(item)
                elif isinstance(item, str) and item.startswith('{{') and item.endswith('}}'):
                    param_name = item[2:-2].strip()
                    if param_name in params:
                        obj[i] = params[param_name]
    
    replace_params(workflow)
    
    # Add the parameters to the workflow context
    if 'context' not in workflow:
        workflow['context'] = {}
    
    workflow['context']['parameters'] = params
    
    return workflow


def parse_value(value: str, param_type: str) -> Any:
    """Parse a string value based on the parameter type.
    
    Args:
        value: String value to parse
        param_type: Type to parse as
        
    Returns:
        Parsed value
    """
    if param_type == 'string':
        return value
    elif param_type == 'integer':
        return int(value)
    elif param_type == 'float':
        return float(value)
    elif param_type == 'boolean':
        return value.lower() in ('true', 'yes', '1', 'y')
    elif param_type == 'array':
        return json.loads(value)
    elif param_type == 'object':
        return json.loads(value)
    else:
        return value


if __name__ == "__main__":
    main()