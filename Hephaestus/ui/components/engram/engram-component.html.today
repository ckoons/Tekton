<!-- Engram Component - Memory and Knowledge Management -->
<!-- @landmark Component: Engram - Advanced memory and knowledge management system -->

<!-- Hidden radio inputs for CSS-first tab functionality -->
<!-- @landmark Navigation: CSS-first radio buttons for tab switching -->
<input type="radio" name="engram-tab" id="engram-tab-browse" checked style="display: none;">
<input type="radio" name="engram-tab" id="engram-tab-create" style="display: none;">
<input type="radio" name="engram-tab" id="engram-tab-search" style="display: none;">
<input type="radio" name="engram-tab" id="engram-tab-insights" style="display: none;">
<input type="radio" name="engram-tab" id="engram-tab-chat" style="display: none;">
<input type="radio" name="engram-tab" id="engram-tab-teamchat" style="display: none;">
<div class="engram" data-tekton-area="engram" data-tekton-component="engram" data-tekton-type="component-workspace" data-tekton-ai="engram-assistant" data-tekton-ai-ready="false">
    <!-- Component Header with Title -->
    <!-- @landmark Header: Component title and branding -->
    <div class="engram__header" data-tekton-zone="header" data-tekton-section="header">
        <div class="engram__title-container">
            <img src="/images/hexagon.jpg" alt="Tekton" class="engram__icon">
            <h2 class="engram__title">
                <span class="engram__title-main">Engram</span>
                <span class="engram__title-sub">Memory System</span>
            </h2>
        </div>
    </div>
    
    <!-- Engram Menu Bar with Tab Navigation -->
    <!-- @landmark Menu: Tab navigation for 6 memory management views -->
    <div class="engram__menu-bar" data-tekton-zone="menu" data-tekton-nav="component-menu">
        <div class="engram__tabs" data-tekton-zone="menu">
            <!-- Browse Tab -->
            <label for="engram-tab-browse" class="engram__tab" data-tab="browse" 
                 data-tekton-menu-item="Browse" 
                 data-tekton-menu-component="engram" 
                 data-tekton-menu-panel="browse-panel" 
                 data-tekton-nav-target="browse">
                <span class="engram__tab-label">Browse</span>
            </label>
            <!-- Create Tab -->
            <label for="engram-tab-create" class="engram__tab" data-tab="create" 
                 data-tekton-menu-item="Create" 
                 data-tekton-menu-component="engram" 
                 data-tekton-menu-panel="create-panel" 
                 data-tekton-nav-target="create">
                <span class="engram__tab-label">Create</span>
            </label>
            <!-- Search Tab -->
            <label for="engram-tab-search" class="engram__tab" data-tab="search" 
                 data-tekton-menu-item="Search" 
                 data-tekton-menu-component="engram" 
                 data-tekton-menu-panel="search-panel" 
                 data-tekton-nav-target="search">
                <span class="engram__tab-label">Search</span>
            </label>
            <!-- Insights Tab -->
            <label for="engram-tab-insights" class="engram__tab" data-tab="insights" 
                 data-tekton-menu-item="Insights" 
                 data-tekton-menu-component="engram" 
                 data-tekton-menu-panel="insights-panel" 
                 data-tekton-nav-target="insights">
                <span class="engram__tab-label">Insights</span>
            </label>
            <!-- Memory Chat Tab -->
            <label for="engram-tab-chat" class="engram__tab" data-tekton-chat="tab" data-tab="chat" 
                 data-tekton-menu-item="Memory Chat" 
                 data-tekton-menu-component="engram" 
                 data-tekton-menu-panel="chat-panel" 
                 data-tekton-nav-target="chat">
                <span class="engram__tab-label">Memory Chat</span>
            </label>
            <!-- Team Chat Tab -->
            <label for="engram-tab-teamchat" class="engram__tab" data-tekton-chat="tab" data-tab="teamchat" 
                 data-tekton-menu-item="Team Chat" 
                 data-tekton-menu-component="engram" 
                 data-tekton-menu-panel="teamchat-panel" 
                 data-tekton-nav-target="teamchat">
                <span class="engram__tab-label">Team Chat</span>
            </label>
        </div>
        <div class="engram__actions">
            <button id="clear-chat-btn" class="engram__action-button" style="display: none;" data-tekton-action="clear-chat" data-tekton-action-type="secondary">
                <span class="engram__button-label">Clear</span>
            </button>
        </div>
    </div>
    
    <!-- Engram Content Area -->
    <!-- @landmark Content: Main content area with 5 tab panels -->
    <div class="engram__content" data-tekton-zone="content" data-tekton-scrollable="true">
        <!-- Browse Tab (Default Active Tab) -->
        <!-- @landmark Panel: Browse - Card-based memory browser -->
        <div id="browse-panel" class="engram__panel" data-tekton-panel="browse" data-tekton-panel-for="Browse" data-tekton-panel-component="engram">
            <div class="engram__browse">
                <div class="engram__control-bar">
                    <div class="engram__browse-filters">
                        <select id="memory-type-filter" class="engram__filter-select" data-tekton-select="filter">
                            <option value="all">All Types</option>
                            <option value="conversation">Conversation</option>
                            <option value="document">Document</option>
                            <option value="knowledge">Knowledge</option>
                            <option value="task">Task</option>
                            <option value="note">Note</option>
                        </select>
                        <select id="memory-sharing-filter" class="engram__filter-select" data-tekton-select="filter">
                            <option value="all">All Memories</option>
                            <option value="private">Private</option>
                            <option value="shared">Shared</option>
                        </select>
                        <select id="filter-action" class="engram__filter-action" data-tekton-select="filter-action" onchange="engram.applySelectedFilter(this.value)">
                            <option value="">Apply Filter...</option>
                            <option value="type">Apply Type Filter</option>
                            <option value="sharing">Apply Sharing Filter</option>
                            <option value="all">Apply All Filters</option>
                        </select>
                    </div>
                    <div class="engram__browse-actions">
                        <button id="refresh-memories-btn" class="engram__action-button engram__action-button--primary" data-tekton-action="refresh" data-tekton-action-type="primary" onclick="engram.loadMemories()">Refresh</button>
                    </div>
                </div>
                
                <!-- Memory Cards Container -->
                <div class="engram__cards-container" id="memory-cards-container">
                    <!-- Cards will be populated dynamically -->
                    <div class="engram__loading" id="browse-loading" style="display: none;">
                        <div class="engram__loading-spinner"></div>
                        <p>Loading memories...</p>
                    </div>
                    
                    <!-- Sample memory cards for UI testing -->
                    <div class="engram__memory-card" data-memory-id="1" data-memory-type="conversation">
                        <div class="engram__card-header">
                            <h4 class="engram__card-title">Project Planning Discussion</h4>
                            <span class="engram__card-status engram__card-status--shared">Shared</span>
                        </div>
                        <div class="engram__card-meta">
                            <span class="engram__card-type">💬 Conversation</span>
                            <span class="engram__card-date">May 15, 2023</span>
                            <span class="engram__card-size">3.2 KB</span>
                        </div>
                        <div class="engram__card-preview">
                            <p>Discussion about the upcoming project milestones and resource allocation. Key points include frontend development timeline...</p>
                        </div>
                        <div class="engram__card-tags">
                            <span class="engram__tag">project-planning</span>
                            <span class="engram__tag">milestones</span>
                            <span class="engram__tag">team</span>
                        </div>
                        <div class="engram__card-actions">
                            <button class="engram__button engram__button--primary engram__button--small" 
                                    data-tekton-action="view-memory" 
                                    data-tekton-action-target="1"
                                    data-tekton-action-type="secondary"
                                    onclick="engram.viewMemory('1')">
                                View
                            </button>
                            <button class="engram__button engram__button--secondary engram__button--small" 
                                    data-tekton-action="edit-memory" 
                                    data-tekton-action-target="1"
                                    data-tekton-action-type="secondary"
                                    onclick="engram.editMemory('1')">
                                Edit
                            </button>
                            <button class="engram__button engram__button--danger engram__button--small" 
                                    data-tekton-action="delete-memory" 
                                    data-tekton-action-target="1"
                                    data-tekton-action-type="danger"
                                    onclick="engram.deleteMemory('1')">
                                Delete
                            </button>
                        </div>
                    </div>
                    
                    <div class="engram__memory-card" data-memory-id="2" data-memory-type="document">
                        <div class="engram__card-header">
                            <h4 class="engram__card-title">System Architecture Spec</h4>
                            <span class="engram__card-status engram__card-status--private">Private</span>
                        </div>
                        <div class="engram__card-meta">
                            <span class="engram__card-type">📄 Document</span>
                            <span class="engram__card-date">April 28, 2023</span>
                            <span class="engram__card-size">15.7 KB</span>
                        </div>
                        <div class="engram__card-preview">
                            <p>Comprehensive system architecture specification including microservices design, API contracts, and deployment strategy...</p>
                        </div>
                        <div class="engram__card-tags">
                            <span class="engram__tag">architecture</span>
                            <span class="engram__tag">technical-spec</span>
                            <span class="engram__tag">microservices</span>
                        </div>
                        <div class="engram__card-actions">
                            <button class="engram__button engram__button--primary engram__button--small" 
                                    data-tekton-action="view-memory" 
                                    data-tekton-action-target="2"
                                    data-tekton-action-type="secondary"
                                    onclick="engram.viewMemory('2')">
                                View
                            </button>
                            <button class="engram__button engram__button--secondary engram__button--small" 
                                    data-tekton-action="edit-memory" 
                                    data-tekton-action-target="2"
                                    data-tekton-action-type="secondary"
                                    onclick="engram.editMemory('2')">
                                Edit
                            </button>
                            <button class="engram__button engram__button--danger engram__button--small" 
                                    data-tekton-action="delete-memory" 
                                    data-tekton-action-target="2"
                                    data-tekton-action-type="danger"
                                    onclick="engram.deleteMemory('2')">
                                Delete
                            </button>
                        </div>
                    </div>
                    
                    <!-- Empty state (hidden by default) -->
                    <div class="engram__empty-state" id="browse-empty-state" style="display: none;">
                        <h3>No memories found</h3>
                        <p>Try adjusting your filters or create a new memory.</p>
                        <button class="engram__button engram__button--primary" 
                                onclick="document.getElementById('engram-tab-create').checked = true;">
                            Create Memory
                        </button>
                    </div>
                </div>
                
                <!-- Pagination -->
                <div class="engram__pagination" id="memory-pagination"></div>
            </div>
        </div>
        
        <!-- Search Tab -->
        <!-- @landmark Panel: Search - Advanced search interface with filters -->
        <div id="search-panel" class="engram__panel" data-tekton-panel="search" data-tekton-panel-for="Search" data-tekton-panel-component="engram">
            <div class="engram__search-interface">
                <div class="engram__search-controls">
                    <div class="engram__search-bar">
                        <input type="text" id="memory-search" class="engram__search-input engram__search-input--large" 
                               placeholder="Search across all memories (natural language or keywords)" data-tekton-input="search">
                        <select id="search-type" class="engram__search-select" data-tekton-select="option">
                            <option value="semantic">Semantic</option>
                            <option value="keyword">Keyword</option>
                            <option value="combined">Combined</option>
                        </select>
                        <button id="memory-search-btn" class="engram__search-button engram__search-button--primary" data-tekton-action="search-memory" data-tekton-action-type="primary" onclick="engram.searchMemories(); return false;">Search</button>
                    </div>
                    
                    <div class="engram__search-filters">
                        <div class="engram__filter-group">
                            <label class="engram__filter-label">Memory Types:</label>
                            <div class="engram__checkbox-group">
                                <label class="engram__checkbox">
                                    <input type="checkbox" checked> Conversations
                                </label>
                                <label class="engram__checkbox">
                                    <input type="checkbox" checked> Documents
                                </label>
                                <label class="engram__checkbox">
                                    <input type="checkbox" checked> Knowledge
                                </label>
                                <label class="engram__checkbox">
                                    <input type="checkbox" checked> Tasks
                                </label>
                            </div>
                        </div>
                        
                        <div class="engram__filter-group">
                            <label class="engram__filter-label">Date Range:</label>
                            <div class="engram__date-inputs">
                                <input type="date" class="engram__date-input" placeholder="From">
                                <span class="engram__date-separator">to</span>
                                <input type="date" class="engram__date-input" placeholder="To">
                            </div>
                        </div>
                        
                        <div class="engram__filter-group">
                            <label class="engram__filter-label">Relevance:</label>
                            <select class="engram__filter-select">
                                <option value="all">All Relevance Levels</option>
                                <option value="high">High</option>
                                <option value="medium">Medium</option>
                                <option value="low">Low</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="engram__search-results" id="search-results">
                    <div class="engram__results-header">
                        <h3 class="engram__results-title">Search Results</h3>
                        <div class="engram__results-count">15 results</div>
                        <select class="engram__sort-select">
                            <option value="relevance">Sort by Relevance</option>
                            <option value="date-new">Sort by Date (Newest)</option>
                            <option value="date-old">Sort by Date (Oldest)</option>
                            <option value="size">Sort by Size</option>
                        </select>
                    </div>
                    
                    <div class="engram__results-list">
                        <!-- Sample search results -->
                        <div class="engram__result-item">
                            <div class="engram__result-title">System Architecture Document</div>
                            <div class="engram__result-type">Document • May 10, 2023</div>
                            <div class="engram__result-snippet">
                                ...the <mark>system architecture</mark> follows a microservices approach with dedicated components for <mark>memory management</mark>...
                            </div>
                            <div class="engram__result-match">
                                <span class="engram__match-label">Match:</span>
                                <span class="engram__match-score">98% semantic match</span>
                            </div>
                        </div>
                        
                        <div class="engram__result-item">
                            <div class="engram__result-title">Memory System Design Meeting</div>
                            <div class="engram__result-type">Conversation • April 28, 2023</div>
                            <div class="engram__result-snippet">
                                ...discussed the <mark>memory architecture</mark> and decided on using a vector database for efficient semantic search capabilities...
                            </div>
                            <div class="engram__result-match">
                                <span class="engram__match-label">Match:</span>
                                <span class="engram__match-score">95% semantic match</span>
                            </div>
                        </div>
                        
                        <div class="engram__result-item">
                            <div class="engram__result-title">Memory Optimization Techniques</div>
                            <div class="engram__result-type">Knowledge • April 15, 2023</div>
                            <div class="engram__result-snippet">
                                ...various <mark>optimization techniques</mark> for the <mark>memory system</mark> including chunking strategies and embedding models...
                            </div>
                            <div class="engram__result-match">
                                <span class="engram__match-label">Match:</span>
                                <span class="engram__match-score">87% semantic match</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Create Tab -->
        <!-- @landmark Panel: Create - Create new memories with file upload -->
        <div id="create-panel" class="engram__panel" data-tekton-panel="create" data-tekton-panel-for="Create" data-tekton-panel-component="engram">
            <div class="engram__create">
                <h3 class="engram__section-title engram__section-title--far-left">Create New Memory</h3>
                
                <form id="create-memory-form" class="engram__create-form" onsubmit="engram.uploadMemory(event); return false;">
                    <div class="engram__form-group">
                        <label class="engram__form-label" for="memory-title">Title *</label>
                        <input type="text" id="memory-title" class="engram__form-input" placeholder="Enter memory title" required>
                    </div>
                    
                    <div class="engram__form-group">
                        <label class="engram__form-label" for="memory-type">Type *</label>
                        <select id="memory-type" class="engram__form-select">
                            <option value="conversation">Conversation</option>
                            <option value="document">Document</option>
                            <option value="knowledge">Knowledge</option>
                            <option value="task">Task</option>
                            <option value="note">Note</option>
                        </select>
                    </div>
                    
                    <div class="engram__form-group">
                        <label class="engram__form-label" for="memory-content">Content</label>
                        <textarea id="memory-content" class="engram__form-textarea" rows="8" placeholder="Enter memory content or upload a file"></textarea>
                    </div>
                    
                    <div class="engram__form-group">
                        <label class="engram__form-label">File Upload</label>
                        <div class="engram__file-upload-area" id="file-upload-area">
                            <input type="file" id="memory-file" class="engram__file-input" accept=".txt,.md,.json" style="display: none;" onchange="this.nextElementSibling.querySelector('.engram__upload-text').textContent = this.files[0] ? this.files[0].name : 'Click to upload or drag and drop';">
                            <label for="memory-file" class="engram__file-upload-label">
                                <span class="engram__upload-icon">📁</span>
                                <span class="engram__upload-text">Click to upload or drag and drop</span>
                                <span class="engram__upload-hint" id="file-name-display">.txt, .md, .json files</span>
                            </label>
                            <div class="engram__file-info" id="file-info" style="display: none;">
                                <span class="engram__file-name" id="file-name"></span>
                                <button class="engram__file-remove" id="file-remove">Remove</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="engram__form-group">
                        <label class="engram__form-label" for="memory-tags">Tags</label>
                        <input type="text" id="memory-tags" class="engram__form-input" placeholder="Enter tags separated by commas">
                    </div>
                    
                    <div class="engram__form-group">
                        <label class="engram__form-label" for="memory-description">Description</label>
                        <textarea id="memory-description" class="engram__form-textarea" rows="3" placeholder="Brief description (optional)"></textarea>
                    </div>
                    
                    <div class="engram__form-group">
                        <label class="engram__form-label">Sharing</label>
                        <div class="engram__radio-group">
                            <label class="engram__radio-label">
                                <input type="radio" name="memory-sharing" value="private" checked>
                                <span>Private</span>
                            </label>
                            <label class="engram__radio-label">
                                <input type="radio" name="memory-sharing" value="shared">
                                <span>Shared</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="engram__form-actions">
                        <button type="button" class="engram__button engram__button--clear" id="clear-form-btn" data-tekton-action="clear-form" data-tekton-action-type="secondary" onclick="document.getElementById('create-memory-form').reset(); return false;">
                            Clear
                        </button>
                        <button type="submit" class="engram__button engram__button--save" id="save-memory-btn" data-tekton-action="save-memory" data-tekton-action-type="primary">
                            Save Memory
                        </button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Insights Tab -->
        <!-- @landmark Panel: Insights - Emotional analysis and patterns -->
        <div id="insights-panel" class="engram__panel" data-tekton-panel="insights" data-tekton-panel-for="Insights" data-tekton-panel-component="engram">
            <div class="engram__insights">
                <div class="engram__insights-header">
                    <h3 class="engram__section-title">Memory Insights & Emotional Analysis</h3>
                    <div class="engram__insights-controls">
                        <button class="engram__button engram__button--secondary" id="refresh-insights-btn" data-tekton-action="refresh-insights" data-tekton-action-type="secondary" onclick="engram.loadInsights(); return false;">
                            Refresh Insights
                        </button>
                    </div>
                </div>
                
                <div class="engram__insights-container" id="insights-container">
                    <!-- Insights cards will be populated dynamically -->
                    <div class="engram__loading" id="insights-loading" style="display: none;">
                        <div class="engram__loading-spinner"></div>
                        <p>Analyzing memories...</p>
                    </div>
                    
                    <!-- Sample insight cards -->
                    <div class="engram__insight-card" data-insight="joy">
                        <div class="engram__insight-header">
                            <h4 class="engram__insight-title">😊 Joy</h4>
                            <span class="engram__insight-percentage">35%</span>
                        </div>
                        <div class="engram__insight-content">
                            <div class="engram__insight-count">86 memories</div>
                            <div class="engram__insight-keywords">happy, cheerful, delighted, pleased, glad, joyful, elated, excited, enthusiastic</div>
                        </div>
                        <div class="engram__insight-bar">
                            <div class="engram__insight-fill engram__insight-fill--joy" style="width: 35%"></div>
                        </div>
                        <button class="engram__button engram__button--small" data-tekton-action="view-insight" data-tekton-action-target="joy" onclick="engram.viewInsight('joy'); return false;">
                            View Memories
                        </button>
                    </div>
                    
                    <div class="engram__insight-card" data-insight="frustration">
                        <div class="engram__insight-header">
                            <h4 class="engram__insight-title">😤 Frustration</h4>
                            <span class="engram__insight-percentage">15%</span>
                        </div>
                        <div class="engram__insight-content">
                            <div class="engram__insight-count">37 memories</div>
                            <div class="engram__insight-keywords">frustrated, annoyed, irritated, upset, angry, mad, furious, exasperated</div>
                        </div>
                        <div class="engram__insight-bar">
                            <div class="engram__insight-fill engram__insight-fill--frustration" style="width: 15%"></div>
                        </div>
                        <button class="engram__button engram__button--small" data-tekton-action="view-insight" data-tekton-action-target="frustration" onclick="engram.viewInsight('frustration'); return false;">
                            View Memories
                        </button>
                    </div>
                    
                    <div class="engram__insight-card" data-insight="confusion">
                        <div class="engram__insight-header">
                            <h4 class="engram__insight-title">🤔 Confusion</h4>
                            <span class="engram__insight-percentage">20%</span>
                        </div>
                        <div class="engram__insight-content">
                            <div class="engram__insight-count">49 memories</div>
                            <div class="engram__insight-keywords">confused, puzzled, perplexed, bewildered, uncertain, unclear, lost, baffled</div>
                        </div>
                        <div class="engram__insight-bar">
                            <div class="engram__insight-fill engram__insight-fill--confusion" style="width: 20%"></div>
                        </div>
                        <button class="engram__button engram__button--small" data-tekton-action="view-insight" data-tekton-action-target="confusion" onclick="engram.viewInsight('confusion'); return false;">
                            View Memories
                        </button>
                    </div>
                    
                    <div class="engram__insight-card" data-insight="insight">
                        <div class="engram__insight-header">
                            <h4 class="engram__insight-title">💡 Insight</h4>
                            <span class="engram__insight-percentage">30%</span>
                        </div>
                        <div class="engram__insight-content">
                            <div class="engram__insight-count">74 memories</div>
                            <div class="engram__insight-keywords">insightful, thoughtful, enlightened, understanding, realization, discovery, aha, breakthrough</div>
                        </div>
                        <div class="engram__insight-bar">
                            <div class="engram__insight-fill engram__insight-fill--insight" style="width: 30%"></div>
                        </div>
                        <button class="engram__button engram__button--small" data-tekton-action="view-insight" data-tekton-action-target="insight" onclick="engram.viewInsight('insight'); return false;">
                            View Memories
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Chat Tab -->
        <!-- @landmark Panel: Memory Chat - Direct chat with memory-aware AI -->
        <div id="chat-panel" class="engram__panel" data-tekton-chat="panel" data-tekton-panel="chat" data-tekton-panel-for="Memory Chat" data-tekton-panel-component="engram">
            <div id="chat-messages" class="engram__chat-messages" data-tekton-chat="messages">
                <!-- Welcome message -->
                <div class="engram__message engram__message--system">
                    <div class="engram__message-content">
                        <div class="engram__message-text">
                            <h3 class="engram__message-title">Welcome to Engram Memory Chat</h3>
                            <p>You can ask questions about any memories in the system or request specific information. Try questions like:</p>
                            <ul>
                                <li>What do you know about [topic]?</li>
                                <li>Find information related to [keyword]</li>
                                <li>Summarize our recent discussions about [topic]</li>
                                <li>When did we last talk about [topic]?</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Team Chat Tab -->
        <!-- @landmark Panel: Team Chat - Collaborate with all Tekton AI assistants -->
        <div id="teamchat-panel" class="engram__panel" data-tekton-chat="panel" data-tekton-panel="teamchat" data-tekton-panel-for="Team Chat" data-tekton-panel-component="engram">
            <div id="teamchat-messages" class="engram__chat-messages" data-tekton-chat="messages">
                <!-- Welcome message -->
                <div class="engram__message engram__message--system">
                    <div class="engram__message-content">
                        <div class="engram__message-text">
                            <h3 class="engram__message-title">Tekton Team Chat</h3>
                            <p>This chat is shared across all Tekton components. Use this for team communication and coordination.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Footer with Chat Input - EXACTLY LIKE TERMA -->
    <div class="engram__footer" data-tekton-zone="footer">
        <div class="engram__chat-input-container" data-tekton-chat="input">
            <div class="engram__chat-prompt" data-tekton-chat="container">></div>
            <input type="text" id="engram-chat-input" class="engram__chat-input" data-tekton-chat="input" 
                   data-tekton-input="chat-input"
                   data-tekton-input-type="chat"
                   placeholder="Enter chat message for Engram memory chat, searching, or memory operations"
                   onkeydown="if(event.key === 'Enter' && !event.shiftKey) { event.preventDefault(); if(typeof engram_sendChat === 'function') engram_sendChat(); else console.error('engram_sendChat not found'); }">
            <button id="engram-send-button" class="engram__send-button"
                    data-tekton-action="send-message" 
                    data-tekton-action-type="primary">Send</button>
        </div>
    </div>
</div>

<!-- Add component-specific styles -->
<style>
    /* Engram component styles using BEM naming convention */
    
    /* Container */
    .engram {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
        background-color: var(--bg-primary, #1e1e2e);
        color: var(--text-primary, #f0f0f0);
        position: relative; /* Needed for footer positioning */
    }
    
    /* Header */
    .engram__header {
        display: flex;
        align-items: center;
        padding: 10px 16px;
        background-color: var(--bg-secondary, #252535);
        border-bottom: 1px solid var(--border-color, #444444);
        height: 50px; /* Match Athena's header height */
    }
    
    .engram__title-container {
        display: flex;
        align-items: center;
    }
    
    .engram__icon {
        height: 30px;
        width: auto;
        margin-right: 12px;
    }
    
    .engram__title {
        margin: 0;
        font-size: 1.2rem;
        font-weight: 500;
    }
    
    .engram__title-sub {
        margin-left: 8px;
        opacity: 0.8;
        font-weight: normal;
    }
    
    /* Menu Bar */
    .engram__menu-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 16px;
        background-color: var(--bg-secondary, #252535);
        border-bottom: 1px solid var(--border-color, #444444);
        height: 46px; /* Match Athena's menu bar height */
    }
    
    .engram__tabs {
        display: flex;
        gap: 8px;
    }
    
    .engram__tab {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid transparent;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__tab:hover {
        background-color: var(--bg-hover, #3a3a4a);
    }
    
    /* CSS-first navigation - radio button controls active state */
    #engram-tab-browse:checked ~ .engram .engram__tab[data-tab="browse"],
    #engram-tab-create:checked ~ .engram .engram__tab[data-tab="create"],
    #engram-tab-search:checked ~ .engram .engram__tab[data-tab="search"],
    #engram-tab-insights:checked ~ .engram .engram__tab[data-tab="insights"],
    #engram-tab-chat:checked ~ .engram .engram__tab[data-tab="chat"],
    #engram-tab-teamchat:checked ~ .engram .engram__tab[data-tab="teamchat"] {
        border-bottom-color: var(--color-primary, #9C27B0); /* Purple for Engram */
        font-weight: 500;
    }
    
    /* Active tab styling now handled by CSS-first selectors above */
    
    .engram__actions {
        display: flex;
        gap: 8px;
    }
    
    .engram__action-button {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 6px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__action-button:hover {
        background-color: var(--bg-hover, #3a3a4a);
    }
    
    /* Content Area */
    .engram__content {
        flex: 1;
        overflow: hidden;
        position: relative;
        margin-bottom: 70px; /* Space for footer */
    }
    
    .engram__panel {
        display: none;
        height: 100%;
        width: 100%;
        overflow: auto;
        position: relative;
    }
    
    /* CSS-first panel visibility */
    #engram-tab-browse:checked ~ .engram #browse-panel,
    #engram-tab-create:checked ~ .engram #create-panel,
    #engram-tab-search:checked ~ .engram #search-panel,
    #engram-tab-insights:checked ~ .engram #insights-panel,
    #engram-tab-chat:checked ~ .engram #chat-panel,
    #engram-tab-teamchat:checked ~ .engram #teamchat-panel {
        display: block;
    }
    
    /* Control Bar */
    .engram__control-bar {
        display: flex;
        justify-content: space-between;
        padding: 16px;
        background-color: var(--bg-secondary, #252535);
        border-bottom: 1px solid var(--border-color, #444444);
        height: 46px; /* Standard control bar height */
    }
    
    .engram__search-container {
        display: flex;
        gap: 8px;
    }
    
    .engram__search-input {
        padding: 8px 12px;
        min-width: 260px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__search-input--large {
        min-width: 400px;
    }
    
    .engram__filter-container {
        display: flex;
        gap: 8px;
    }
    
    .engram__filter-select {
        padding: 8px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__filter-button,
    .engram__search-button {
        padding: 8px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
    }
    
    .engram__search-button--primary {
        background-color: var(--color-primary, #9C27B0);
        border-color: var(--color-primary, #9C27B0);
        color: white;
    }
    
    /* Explorer Layout */
    .engram__explorer-layout {
        display: flex;
        height: calc(100% - 57px); /* Adjust based on control bar height */
    }
    
    .engram__collections-panel {
        width: 220px;
        padding: 16px;
        background-color: var(--bg-tertiary, #333345);
        border-right: 1px solid var(--border-color, #444444);
        overflow-y: auto;
    }
    
    .engram__memories-panel {
        flex: 2;
        display: flex;
        flex-direction: column;
        border-right: 1px solid var(--border-color, #444444);
    }
    
    .engram__memory-detail-panel {
        flex: 2;
        padding: 16px;
        overflow-y: auto;
    }
    
    .engram__panel-title {
        margin-top: 0;
        margin-bottom: 16px;
        font-size: 1.1rem;
        font-weight: 500;
    }
    
    .engram__collections-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    .engram__collection-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__collection-item:hover {
        background-color: var(--bg-hover, #3a3a4a);
    }
    
    .engram__collection-item--active {
        background-color: var(--color-primary, #9C27B0);
        border-color: var(--color-primary, #9C27B0);
    }
    
    .engram__collection-name {
        font-weight: 500;
    }
    
    .engram__collection-count {
        color: var(--text-secondary, #aaaaaa);
        font-size: 0.9em;
    }
    
    .engram__collection-item--active .engram__collection-count {
        color: rgba(255, 255, 255, 0.8);
    }
    
    /* Memories List */
    .engram__memories-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        border-bottom: 1px solid var(--border-color, #444444);
    }
    
    .engram__view-controls {
        display: flex;
        gap: 4px;
    }
    
    .engram__view-button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 36px;
        height: 36px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
    }
    
    .engram__view-button--active {
        background-color: var(--color-primary, #9C27B0);
        border-color: var(--color-primary, #9C27B0);
    }
    
    .engram__memories-list {
        flex: 1;
        padding: 16px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    .engram__memory-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background-color: var(--bg-secondary, #252535);
        border: 1px solid var(--border-color, #444444);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__memory-item:hover {
        background-color: var(--bg-hover, #3a3a4a);
    }
    
    .engram__memory-type-icon {
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--bg-tertiary, #333345);
        border-radius: 6px;
        font-size: 20px;
    }
    
    .engram__memory-details {
        flex: 1;
    }
    
    .engram__memory-name {
        font-weight: 500;
        margin-bottom: 4px;
    }
    
    .engram__memory-type {
        color: var(--text-secondary, #aaaaaa);
        font-size: 0.9em;
        margin-bottom: 4px;
    }
    
    .engram__memory-metadata {
        color: var(--text-secondary, #aaaaaa);
        font-size: 0.9em;
    }
    
    .engram__memory-actions {
        display: flex;
        gap: 8px;
    }
    
    .engram__memory-action-btn {
        padding: 4px 8px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
    }
    
    /* Memory Detail */
    .engram__detail-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }
    
    .engram__detail-actions {
        display: flex;
        gap: 8px;
    }
    
    .engram__detail-action-btn {
        padding: 6px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
    }
    
    .engram__preview-title {
        margin-top: 0;
        margin-bottom: 16px;
        font-size: 1.2rem;
    }
    
    .engram__preview-metadata {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 12px;
        margin-bottom: 20px;
        padding: 12px;
        background-color: var(--bg-tertiary, #333345);
        border-radius: 6px;
    }
    
    .engram__metadata-item {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }
    
    .engram__metadata-label {
        color: var(--text-secondary, #aaaaaa);
        font-size: 0.9em;
    }
    
    .engram__preview-content {
        margin-bottom: 20px;
        line-height: 1.5;
    }
    
    .engram__relations-title {
        margin-top: 0;
        margin-bottom: 8px;
        font-size: 1rem;
    }
    
    .engram__relations-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }
    
    .engram__relation-item {
        padding: 6px 10px;
        background-color: var(--bg-tertiary, #333345);
        border-radius: 16px;
        font-size: 0.9em;
        cursor: pointer;
    }
    
    .engram__relation-item:hover {
        background-color: var(--color-primary, #9C27B0);
    }
    
    /* Search Interface */
    .engram__search-interface {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .engram__search-controls {
        padding: 16px;
        background-color: var(--bg-secondary, #252535);
        border-bottom: 1px solid var(--border-color, #444444);
    }
    
    .engram__search-bar {
        display: flex;
        gap: 8px;
        margin-bottom: 16px;
    }
    
    .engram__search-select {
        padding: 8px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__search-filters {
        display: flex;
        gap: 20px;
    }
    
    .engram__filter-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    .engram__filter-label {
        font-weight: 500;
    }
    
    .engram__checkbox-group {
        display: flex;
        gap: 12px;
    }
    
    .engram__checkbox {
        display: flex;
        align-items: center;
        gap: 6px;
        cursor: pointer;
    }
    
    .engram__date-inputs {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .engram__date-input {
        padding: 8px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__date-separator {
        color: var(--text-secondary, #aaaaaa);
    }
    
    /* Search Results */
    .engram__search-results {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }
    
    .engram__results-header {
        display: flex;
        align-items: center;
        padding: 16px;
        border-bottom: 1px solid var(--border-color, #444444);
    }
    
    .engram__results-title {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 500;
    }
    
    .engram__results-count {
        margin-left: 12px;
        color: var(--text-secondary, #aaaaaa);
    }
    
    .engram__sort-select {
        margin-left: auto;
        padding: 6px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__results-list {
        flex: 1;
        padding: 16px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    .engram__result-item {
        padding: 16px;
        background-color: var(--bg-secondary, #252535);
        border: 1px solid var(--border-color, #444444);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__result-item:hover {
        background-color: var(--bg-hover, #3a3a4a);
    }
    
    .engram__result-title {
        font-weight: 500;
        margin-bottom: 4px;
        font-size: 1.05rem;
    }
    
    .engram__result-type {
        color: var(--text-secondary, #aaaaaa);
        font-size: 0.9em;
        margin-bottom: 8px;
    }
    
    .engram__result-snippet {
        margin-bottom: 8px;
        line-height: 1.5;
    }
    
    .engram__result-snippet mark {
        background-color: rgba(156, 39, 176, 0.3);
        color: inherit;
        border-radius: 3px;
        padding: 0 2px;
    }
    
    .engram__result-match {
        font-size: 0.9em;
    }
    
    .engram__match-label {
        color: var(--text-secondary, #aaaaaa);
    }
    
    .engram__match-score {
        color: var(--color-primary, #9C27B0);
        font-weight: 500;
    }
    
    /* Stats Dashboard */
    .engram__stats-dashboard {
        padding: 16px;
    }
    
    .engram__stats-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .engram__section-title {
        margin: 0;
        font-size: 1.2rem;
        font-weight: 500;
    }
    
    .engram__stats-controls {
        display: flex;
        gap: 12px;
    }
    
    .engram__stats-timeframe {
        padding: 8px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__stats-refresh-btn {
        padding: 8px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
    }
    
    .engram__stats-summary {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }
    
    .engram__stat-card {
        padding: 16px;
        background-color: var(--bg-secondary, #252535);
        border: 1px solid var(--border-color, #444444);
        border-radius: 8px;
        text-align: center;
    }
    
    .engram__stat-title {
        margin-bottom: 8px;
        color: var(--text-secondary, #aaaaaa);
    }
    
    .engram__stat-value {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 8px;
    }
    
    .engram__stat-trend {
        font-size: 0.9rem;
    }
    
    .engram__stat-trend--up {
        color: #4CAF50;
    }
    
    .engram__stat-trend--down {
        color: #F44336;
    }
    
    .engram__stat-trend--improved {
        color: #4CAF50;
    }
    
    .engram__stats-row {
        display: flex;
        gap: 16px;
        margin-bottom: 24px;
    }
    
    .engram__stats-column {
        flex: 1;
    }
    
    .engram__chart-container {
        padding: 16px;
        background-color: var(--bg-secondary, #252535);
        border: 1px solid var(--border-color, #444444);
        border-radius: 8px;
    }
    
    .engram__chart-container--full {
        width: 100%;
    }
    
    .engram__chart-title {
        margin-top: 0;
        margin-bottom: 16px;
        font-size: 1rem;
        font-weight: 500;
    }
    
    .engram__chart {
        height: 200px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .engram__chart-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 100%;
        background-color: var(--bg-tertiary, #333345);
        border-radius: 4px;
    }
    
    .engram__placeholder-text {
        color: var(--text-secondary, #aaaaaa);
    }
    
    .engram__stats-table-section {
        margin-top: 24px;
    }
    
    .engram__table-title {
        margin-top: 0;
        margin-bottom: 16px;
        font-size: 1rem;
        font-weight: 500;
    }
    
    .engram__stats-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .engram__stats-table th,
    .engram__stats-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid var(--border-color, #444444);
    }
    
    .engram__stats-table th {
        background-color: var(--bg-tertiary, #333345);
        font-weight: 500;
        color: var(--text-secondary, #aaaaaa);
    }
    
    /* Chat Messages - EXACTLY LIKE TERMA */
    .engram__chat-messages {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 70px; /* Height of the footer */
        overflow-y: auto;
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    /* Messages - Following Numa's styling pattern */
    .engram__message {
        margin-bottom: 12px;
        padding: 8px 12px;
        border-radius: 4px;
        background-color: transparent;
        position: relative;
    }
    
    .engram__message strong {
        display: inline-block;
        margin-right: 8px;
        font-weight: 600;
    }
    
    /* System messages */
    .engram__message--system {
        background-color: rgba(52, 168, 83, 0.05);
        border-left: 3px solid #34A853;
        font-style: italic;
    }
    
    .engram__message--system strong {
        color: #34A853;
    }
    
    /* User messages */
    .engram__message--user {
        background-color: rgba(76, 175, 80, 0.05);
        border-left: 3px solid #4CAF50;
        margin-left: 32px;
        align-self: flex-end;
    }
    
    .engram__message--user strong {
        color: #4CAF50;
    }
    
    /* AI messages */
    .engram__message--ai {
        background-color: rgba(52, 168, 83, 0.05);
        border-left: 3px solid #34A853;
        margin-right: 32px;
        align-self: flex-start;
    }
    
    .engram__message--ai strong {
        color: #34A853;
    }
    
    /* Message content styling */
    .engram__message-text ul {
        list-style: none;
        padding-left: 0;
        margin: 10px 0 0 0;
    }
    
    .engram__message-text ul li {
        padding: 4px 0;
        padding-left: 20px;
        position: relative;
    }
    
    .engram__message-text ul li:before {
        content: "•";
        color: #34A853;
        font-weight: bold;
        position: absolute;
        left: 0;
    }
    
    .engram__message-content {
        display: flex;
        flex-direction: column;
    }
    
    .engram__message-text {
        margin-bottom: 0.25rem;
    }
    
    .engram__message-title {
        margin-top: 0;
        margin-bottom: 0.5rem;
    }
    
    /* Chat Input - Fixed at bottom, always visible */
    /* Footer - EXACTLY LIKE TERMA */
    .engram__footer {
        background-color: var(--bg-secondary, #252535);
        border-top: 1px solid var(--border-color, #444444);
        padding: 12px 16px;
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 70px;
        z-index: 10;
        display: block !important;
    }
    
    .engram__chat-input-container {
        display: flex;
        align-items: center;
        gap: 12px;
        width: 100%;
    }
    
    .engram__chat-prompt {
        font-size: 18px;
        font-weight: bold;
        color: var(--color-primary, #9C27B0); /* Purple for Engram */
    }
    
    .engram__chat-input {
        flex: 1;
        height: 44px;
        padding: 8px 16px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444444);
        border-radius: 8px;
        color: var(--text-primary, #f0f0f0);
        font-size: 14px;
    }
    
    .engram__send-button {
        height: 44px;
        padding: 0 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--color-primary, #9C27B0); /* Purple for Engram */
        border: none;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__send-button:hover {
        background-color: #7B1FA2; /* Darker purple on hover */
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(156, 39, 176, 0.3);
    }
    
    .engram__send-button:active {
        transform: translateY(0);
        box-shadow: none;
    }
    
    /* Browse Tab - Card Layout */
    .engram__browse {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .engram__browse-filters {
        display: flex;
        gap: 12px;
        flex: 1;
    }
    
    .engram__browse-actions {
        display: flex;
        gap: 8px;
    }
    
    .engram__cards-container {
        flex: 1;
        padding: 16px;
        overflow-y: auto;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 16px;
    }
    
    .engram__memory-card {
        background-color: var(--bg-secondary, #252535);
        border: 1px solid var(--border-color, #444);
        border-radius: 8px;
        padding: 12px;
        transition: all 0.2s ease;
        display: flex;
        flex-direction: column;
        gap: 8px;
        max-height: 180px;
        overflow: hidden;
    }
    
    .engram__memory-card:hover {
        border-color: var(--color-primary, #9C27B0);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(156, 39, 176, 0.2);
    }
    
    .engram__card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }
    
    .engram__card-title {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 500;
        flex: 1;
    }
    
    .engram__card-status {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
        text-transform: uppercase;
    }
    
    .engram__card-status--private {
        background-color: rgba(255, 152, 0, 0.2);
        color: #ff9800;
    }
    
    .engram__card-status--shared {
        background-color: rgba(76, 175, 80, 0.2);
        color: #4caf50;
    }
    
    .engram__card-meta {
        display: flex;
        gap: 12px;
        font-size: 0.9rem;
        color: var(--text-secondary, #aaa);
    }
    
    .engram__card-preview {
        color: var(--text-primary, #f0f0f0);
        line-height: 1.3;
        font-size: 0.95rem;
        max-height: 2.6em;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
    
    .engram__card-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
    }
    
    .engram__tag {
        padding: 3px 8px;
        background-color: var(--bg-tertiary, #333345);
        border-radius: 12px;
        font-size: 0.8rem;
        color: var(--text-secondary, #aaa);
    }
    
    .engram__card-actions {
        display: flex;
        gap: 8px;
        margin-top: auto;
    }
    
    .engram__button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-weight: 500;
    }
    
    .engram__button--small {
        padding: 6px 12px;
        font-size: 0.9rem;
    }
    
    .engram__button--primary {
        background-color: var(--color-primary, #9C27B0);
        color: white;
    }
    
    .engram__button--primary:hover {
        background-color: #7B1FA2;
    }
    
    .engram__button--secondary {
        background-color: #2196F3;
        color: white;
    }
    
    .engram__button--secondary:hover {
        background-color: #1976D2;
    }
    
    .engram__button--danger {
        background-color: #f44336;
        color: white;
    }
    
    .engram__button--danger:hover {
        background-color: #d32f2f;
    }
    
    /* Additional button styles for refresh */
    .engram__action-button--primary {
        background-color: var(--color-primary, #0066FF);
        color: white;
        border-color: var(--color-primary, #0066FF);
    }
    
    .engram__action-button--primary:hover {
        background-color: var(--color-primary-hover, #0052CC);
        transform: translateY(-1px);
    }
    
    /* Section title alignment */
    .engram__section-title--far-left {
        margin-left: 20px; /* Far left positioning */
        padding-left: 0;
        margin-bottom: 30px;
        font-size: 1.3rem;
        font-weight: 500;
    }
    
    /* Filter action selector */
    .engram__filter-action {
        padding: 8px 16px;
        background-color: var(--bg-tertiary, #333345);
        color: var(--text-primary, #f0f0f0);
        border: 1px solid var(--border-color, #444);
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__button--clear {
        background-color: #4CAF50;
        color: white;
        margin-right: auto;
    }
    
    .engram__button--save {
        background-color: #2196F3;
        color: white;
    }
    
    /* Create Tab - Form Styles */
    .engram__create {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
    }
    
    .engram__create-form {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }
    
    .engram__form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    .engram__form-label {
        font-weight: 500;
        color: var(--text-primary, #f0f0f0);
    }
    
    .engram__form-input,
    .engram__form-select,
    .engram__form-textarea {
        padding: 10px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        font-size: 14px;
    }
    
    .engram__form-textarea {
        resize: vertical;
        min-height: 100px;
    }
    
    .engram__file-upload-area {
        border: 2px dashed var(--border-color, #444);
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        transition: all 0.2s ease;
    }
    
    .engram__file-upload-area:hover {
        border-color: var(--color-primary, #9C27B0);
        background-color: rgba(156, 39, 176, 0.05);
    }
    
    .engram__file-upload-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        cursor: pointer;
    }
    
    .engram__upload-icon {
        font-size: 2rem;
    }
    
    .engram__upload-hint {
        font-size: 0.9rem;
        color: var(--text-secondary, #aaa);
    }
    
    .engram__file-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        background-color: var(--bg-secondary, #252535);
        border-radius: 4px;
        margin-top: 12px;
    }
    
    .engram__file-remove {
        padding: 4px 8px;
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.8rem;
    }
    
    .engram__radio-group {
        display: flex;
        gap: 20px;
    }
    
    .engram__radio-label {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
    }
    
    .engram__form-actions {
        display: flex;
        gap: 12px;
        margin-top: 20px;
    }
    
    /* Insights Tab */
    .engram__insights {
        padding: 20px;
    }
    
    .engram__insights-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }
    
    .engram__insights-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
    }
    
    .engram__insight-card {
        background-color: var(--bg-secondary, #252535);
        border: 1px solid var(--border-color, #444);
        border-radius: 8px;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    .engram__insight-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .engram__insight-title {
        margin: 0;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .engram__insight-percentage {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--color-primary, #9C27B0);
    }
    
    .engram__insight-count {
        font-size: 1.1rem;
        font-weight: 500;
        margin-bottom: 8px;
    }
    
    .engram__insight-keywords {
        font-size: 0.9rem;
        color: var(--text-secondary, #aaa);
        line-height: 1.4;
    }
    
    .engram__insight-bar {
        height: 8px;
        background-color: var(--bg-tertiary, #333345);
        border-radius: 4px;
        overflow: hidden;
        margin: 8px 0;
    }
    
    .engram__insight-fill {
        height: 100%;
        transition: width 0.3s ease;
    }
    
    .engram__insight-fill--joy {
        background-color: #4caf50;
    }
    
    .engram__insight-fill--frustration {
        background-color: #f44336;
    }
    
    .engram__insight-fill--confusion {
        background-color: #ff9800;
    }
    
    .engram__insight-fill--insight {
        background-color: #2196f3;
    }
    
    /* Loading States */
    .engram__loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        color: var(--text-secondary, #aaa);
    }
    
    .engram__loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid var(--border-color, #444);
        border-top-color: var(--color-primary, #9C27B0);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 16px;
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    /* Empty State */
    .engram__empty-state {
        text-align: center;
        padding: 60px;
        color: var(--text-secondary, #aaa);
    }
    
    .engram__empty-state h3 {
        margin-bottom: 12px;
        color: var(--text-primary, #f0f0f0);
    }
    
    /* Pagination styles */
    .engram__pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        margin-top: 20px;
        padding: 20px 0;
    }
    
    .engram__page-btn {
        padding: 6px 12px;
        background-color: var(--bg-tertiary, #333345);
        border: 1px solid var(--border-color, #444);
        border-radius: 4px;
        color: var(--text-primary, #f0f0f0);
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .engram__page-btn:hover {
        background-color: var(--bg-hover, #3a3a4a);
        border-color: var(--border-hover, #555);
    }
    
    .engram__page-current {
        padding: 6px 12px;
        background-color: var(--color-primary, #9C27B0);
        color: white;
        border-radius: 4px;
    }
    
    /* Insight results styling */
    .engram__insight-results {
        margin-bottom: 20px;
        padding: 16px;
        background-color: var(--bg-secondary, #252535);
        border-radius: 8px;
        border: 1px solid var(--border-color, #444);
    }
    
    .engram__insight-emoji {
        font-size: 1.5em;
        margin-right: 8px;
    }
    
    .engram__insight-keywords {
        margin-top: 8px;
        font-size: 0.9rem;
        color: var(--text-secondary, #aaa);
    }
    
    .engram__search-result--joy {
        border-left: 3px solid #4CAF50;
    }
    
    .engram__search-result--frustration {
        border-left: 3px solid #f44336;
    }
    
    .engram__search-result--confusion {
        border-left: 3px solid #FF9800;
    }
    
    .engram__search-result--insight {
        border-left: 3px solid #FFC107;
    }
</style>

<script src="/scripts/tekton-urls.js"></script>
<script src="/scripts/shared/ai-chat.js"></script>
<script src="/scripts/engram/engram-component.js"></script>
<script type="text/javascript">
// Update clear button visibility based on active tab
function engram_updateClearButton() {
    const chatRadio = document.getElementById('engram-tab-chat');
    const teamchatRadio = document.getElementById('engram-tab-teamchat');
    const clearButton = document.getElementById('clear-chat-btn');
    
    if (clearButton) {
        if (chatRadio.checked || teamchatRadio.checked) {
            clearButton.style.display = 'block';
        } else {
            clearButton.style.display = 'none';
        }
    }
}

// Listen for tab changes
document.addEventListener('DOMContentLoaded', function() {
    const radioButtons = document.querySelectorAll('input[name="engram-tab"]');
    radioButtons.forEach(radio => {
        radio.addEventListener('change', engram_updateClearButton);
    });
    // Initial update
    engram_updateClearButton();
});

// Chat functionality - EXACTLY LIKE TERMA
function engram_sendChat() {
    console.log('[ENGRAM] sendChat called');
    const input = document.getElementById('engram-chat-input');
    if (!input) {
        console.error('[ENGRAM] Chat input not found');
        return;
    }
    
    const message = input.value.trim();
    console.log('[ENGRAM] Message:', message);
    
    if (!message) return;
    
    // Determine which tab is active using radio buttons
    const chatRadio = document.getElementById('engram-tab-chat');
    const teamchatRadio = document.getElementById('engram-tab-teamchat');
    console.log('[ENGRAM] Chat radio checked:', chatRadio.checked, 'Team chat radio checked:', teamchatRadio.checked);
    
    const chatType = chatRadio.checked ? 'chat' : (teamchatRadio.checked ? 'teamchat' : null);
    
    if (!chatType) {
        console.error('[ENGRAM] No chat tab is active');
        return;
    }
    
    const messagesContainerId = chatType === 'chat' ? 'chat-messages' : 'teamchat-messages';
    const messagesContainer = document.getElementById(messagesContainerId);
    
    // Add user message
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'engram__message engram__message--user';
    userMessageDiv.innerHTML = `<div class="engram__message-content"><div class="engram__message-text">${message}</div></div>`;
    messagesContainer.appendChild(userMessageDiv);
    
    // Clear input
    input.value = '';
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // Send to backend
    if (chatType === 'chat') {
        // Memory chat - use engram specialist
        if (window.AIChat) {
            window.AIChat.sendMessage('engram', message)
                .then(response => {
                    const aiMessageDiv = document.createElement('div');
                    aiMessageDiv.className = 'engram__message engram__message--ai';
                    aiMessageDiv.innerHTML = `<div class="engram__message-content"><div class="engram__message-text"><strong>Engram:</strong> ${response.content}</div></div>`;
                    messagesContainer.appendChild(aiMessageDiv);
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                })
                .catch(err => {
                    console.error('Failed to send message:', err);
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'engram__message engram__message--system';
                    errorDiv.innerHTML = `<div class="engram__message-content"><div class="engram__message-text"><strong>System:</strong> Failed to connect to Engram AI. Make sure aish MCP is running.</div></div>`;
                    messagesContainer.appendChild(errorDiv);
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                });
        } else {
            console.error('AIChat not available');
            const errorDiv = document.createElement('div');
            errorDiv.className = 'engram__message engram__message--system';
            errorDiv.innerHTML = `<div class="engram__message-content"><div class="engram__message-text"><strong>System:</strong> AI Chat service not available</div></div>`;
            messagesContainer.appendChild(errorDiv);
        }
    } else {
        // Team chat
        if (window.AIChat) {
            window.AIChat.teamChat(message, 'engram')
                .then(data => {
                    // Display team responses
                    if (data.responses && data.responses.length > 0) {
                        data.responses.forEach(resp => {
                            const aiMessageDiv = document.createElement('div');
                            aiMessageDiv.className = 'engram__message engram__message--ai';
                            const sender = resp.socket_id.replace('-ai', '').charAt(0).toUpperCase() + 
                                         resp.socket_id.replace('-ai', '').slice(1);
                            aiMessageDiv.innerHTML = `<div class="engram__message-content"><div class="engram__message-text"><strong>${sender}:</strong> ${resp.content}</div></div>`;
                            messagesContainer.appendChild(aiMessageDiv);
                        });
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    }
                })
                .catch(err => {
                    console.error('Failed to send team message:', err);
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'engram__message engram__message--system';
                    errorDiv.innerHTML = `<div class="engram__message-content"><div class="engram__message-text"><strong>System:</strong> Failed to send team message</div></div>`;
                    messagesContainer.appendChild(errorDiv);
                });
        }
    }
}

// Clear chat functionality - CSS-first aware
function engram_clearChat() {
    const chatRadio = document.getElementById('engram-tab-chat');
    const teamchatRadio = document.getElementById('engram-tab-teamchat');
    
    if (chatRadio.checked) {
        const messagesContainer = document.getElementById('chat-messages');
        // Keep the welcome message, remove all others
        const allMessages = messagesContainer.querySelectorAll('.engram__message');
        allMessages.forEach((msg, index) => {
            if (index > 0) msg.remove(); // Keep first system message
        });
    } else if (teamchatRadio.checked) {
        const messagesContainer = document.getElementById('teamchat-messages');
        // Keep the welcome message, remove all others  
        const allMessages = messagesContainer.querySelectorAll('.engram__message');
        allMessages.forEach((msg, index) => {
            if (index > 0) msg.remove(); // Keep first system message
        });
    }
}

// Add event listeners for buttons
document.addEventListener('DOMContentLoaded', function() {
    const sendButton = document.getElementById('engram-send-button');
    if (sendButton) {
        sendButton.addEventListener('click', engram_sendChat);
    }
    
    const clearButton = document.getElementById('clear-chat-btn');
    if (clearButton) {
        clearButton.addEventListener('click', engram_clearChat);
    }
});

// Tab switching function
function engram_switchTab(tabId) {
    // Force HTML panel visibility
    const htmlPanelElements = document.querySelectorAll('#html-panel');
    htmlPanelElements.forEach(panel => {
        if (panel) panel.style.display = 'block';
    });
    
    try {
        // Only select elements within engram component to avoid conflicts with other components
        const engramContainer = document.querySelector('.engram');
        if (!engramContainer) {
            console.error('[ENGRAM] Tab Switch: Cannot find engram container');
            return false;
        }
        
        // Update tab active state - ONLY WITHIN ENGRAM CONTAINER
        const tabs = engramContainer.querySelectorAll('.engram__tab');
        tabs.forEach(tab => {
            if (tab.getAttribute('data-tab') === tabId) {
                tab.classList.add('engram__tab--active');
            } else {
                tab.classList.remove('engram__tab--active');
            }
        });
        
        // Update panel visibility - ONLY WITHIN ENGRAM CONTAINER
        const panels = engramContainer.querySelectorAll('.engram__panel');
        panels.forEach(panel => {
            const panelId = panel.id;
            if (panelId === tabId + '-panel') {
                panel.style.display = 'block';
                panel.classList.add('engram__panel--active');
            } else {
                panel.style.display = 'none';
                panel.classList.remove('engram__panel--active');
            }
        });
        
        // Update clear button visibility for chat tabs
        const clearButton = engramContainer.querySelector('#clear-chat-btn');
        if (clearButton) {
            clearButton.style.display = (tabId === 'chat' || tabId === 'teamchat') ? 'block' : 'none';
        }
        
        // Update component state
        if (window.engramComponent) {
            window.engramComponent.state = window.engramComponent.state || {};
            window.engramComponent.state.activeTab = tabId;
            
            // Call component-specific methods if available
            if (typeof window.engramComponent.updateChatPlaceholder === 'function') {
                window.engramComponent.updateChatPlaceholder(tabId);
            }
            
            if (typeof window.engramComponent.loadTabContent === 'function') {
                window.engramComponent.loadTabContent(tabId);
            }
            
            if (typeof window.engramComponent.saveComponentState === 'function') {
                window.engramComponent.saveComponentState();
            }
        }
        
        // Debug log for instrumentation
        if (window.TektonDebug) {
            window.TektonDebug.debug('engram', 'Tab switched', { tabId: tabId });
        }
    } catch (err) {
        console.error('[ENGRAM] Error in tab switching:', err);
        if (window.TektonDebug) {
            window.TektonDebug.error('engram', 'Tab switch error', { tabId: tabId, error: err.message });
        }
    }
    
    return false; // Stop event propagation
};

// CLEAR CHAT FUNCTION
window.engram_clearChat = function() {
    console.log('[ENGRAM] Clear chat clicked');
    
    try {
        // Get active tab ID within engram container
        const engramContainer = document.querySelector('.engram');
        if (!engramContainer) {
            console.error('[ENGRAM] Clear Chat: Cannot find engram container');
            return false;
        }
        
        const activeTab = engramContainer.querySelector('.engram__tab--active');
        const tabId = activeTab ? activeTab.getAttribute('data-tab') : '';
        
        if (tabId === 'chat' || tabId === 'teamchat') {
            // Get message container within engram container only
            const panel = engramContainer.querySelector('#' + tabId + '-messages');
            if (panel) {
                // Keep welcome message
                const welcomeMsg = panel.querySelector('.engram__message--system');
                if (welcomeMsg) {
                    panel.innerHTML = '';
                    panel.appendChild(welcomeMsg);
                    console.log('[ENGRAM] Cleared chat, kept welcome message');
                    
                    if (window.TektonDebug) {
                        window.TektonDebug.info('engram', 'Chat cleared', { tabId: tabId, keepWelcome: true });
                    }
                } else {
                    panel.innerHTML = '';
                    console.log('[ENGRAM] Cleared chat completely');
                    
                    if (window.TektonDebug) {
                        window.TektonDebug.info('engram', 'Chat cleared', { tabId: tabId, keepWelcome: false });
                    }
                }
            }
        }
    } catch (err) {
        console.error('[ENGRAM] Error clearing chat:', err);
        if (window.TektonDebug) {
            window.TektonDebug.error('engram', 'Clear chat error', { error: err.message });
        }
    }
    
    return false; // Stop event propagation
};

// BASIC CHAT FUNCTIONALITY
function engram_setupBasicChat() {
    console.log('[ENGRAM] Setting up basic chat functionality');
    
    try {
        // Get references to elements within engram container only
        const engramContainer = document.querySelector('.engram');
        if (!engramContainer) {
            console.error('[ENGRAM] Setup Chat: Cannot find engram container');
            return;
        }
        
        const chatInput = engramContainer.querySelector('#chat-input');
        const sendButton = engramContainer.querySelector('#send-button');
        
        if (!chatInput || !sendButton) {
            console.error('[ENGRAM] Setup Chat: Cannot find chat input or send button');
            return;
        }
        
        // Send message function
        function sendMessage() {
            const messageText = chatInput.value.trim();
            if (!messageText) return;
            
            // Clear input
            chatInput.value = '';
            
            // Get active tab
            const activeTab = engramContainer.querySelector('.engram__tab--active');
            if (!activeTab) return;
            
            const tabId = activeTab.getAttribute('data-tab');
            
            // Find the right message container based on active tab
            let messagesContainer;
            if (tabId === 'chat') {
                messagesContainer = engramContainer.querySelector('#chat-messages');
            } else if (tabId === 'teamchat') {
                messagesContainer = engramContainer.querySelector('#teamchat-messages');
            } else {
                // If not on a chat tab, default to the memory chat
                messagesContainer = engramContainer.querySelector('#chat-messages');
            }
            
            if (!messagesContainer) {
                console.error('[ENGRAM] Cannot find messages container for tab:', tabId);
                return;
            }
            
            // Add user message
            const userMessageElement = document.createElement('div');
            userMessageElement.className = 'engram__message engram__message--user';
            userMessageElement.innerHTML = `
                <div class="engram__message-content">
                    <div class="engram__message-text">${messageText}</div>
                </div>
            `;
            messagesContainer.appendChild(userMessageElement);
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Debug log for instrumentation
            if (window.TektonDebug) {
                window.TektonDebug.info('engram', 'User message sent', { 
                    tabId: tabId, 
                    messageLength: messageText.length 
                });
            }
            
            // Placeholder for component-specific message handling
            if (window.engramComponent && typeof window.engramComponent.handleChatMessage === 'function') {
                // Let the component handle the response
                window.engramComponent.handleChatMessage(messageText, tabId);
            } else {
                // Simple placeholder response
                setTimeout(() => {
                    const aiMessageElement = document.createElement('div');
                    aiMessageElement.className = 'engram__message engram__message--ai';
                    aiMessageElement.innerHTML = `
                        <div class="engram__message-content">
                            <div class="engram__message-text">
                                This is a basic response to: "${messageText}"<br>
                                For full functionality, the Engram component script needs to be loaded.
                            </div>
                        </div>
                    `;
                    messagesContainer.appendChild(aiMessageElement);
                    
                    // Scroll to bottom again
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 500);
            }
        }
        
        // Add event listeners
        sendButton.addEventListener('click', function() {
            sendMessage();
        });
        
        chatInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        console.log('[ENGRAM] Basic chat functionality set up');
        
        if (window.TektonDebug) {
            window.TektonDebug.debug('engram', 'Basic chat functionality set up');
        }
    } catch (err) {
        console.error('[ENGRAM] Error setting up basic chat:', err);
        if (window.TektonDebug) {
            window.TektonDebug.error('engram', 'Setup chat error', { error: err.message });
        }
    }
}

// SETUP VIEW CONTROLS
function engram_setupViewControls() {
    console.log('[ENGRAM] Setting up view controls');
    
    try {
        // Get references to elements within engram container only
        const engramContainer = document.querySelector('.engram');
        if (!engramContainer) {
            console.error('[ENGRAM] Setup View Controls: Cannot find engram container');
            return;
        }
        
        // Explorer view controls (list/grid toggle)
        const viewButtons = engramContainer.querySelectorAll('.engram__view-button');
        const listView = engramContainer.querySelector('#memories-list-view');
        const gridView = engramContainer.querySelector('#memories-grid-view');
        
        if (viewButtons.length && listView && gridView) {
            viewButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const viewType = this.getAttribute('data-view');
                    
                    // Update button state
                    viewButtons.forEach(btn => {
                        btn.classList.remove('engram__view-button--active');
                    });
                    this.classList.add('engram__view-button--active');
                    
                    // Update view
                    if (viewType === 'list') {
                        listView.style.display = 'flex';
                        gridView.style.display = 'none';
                    } else if (viewType === 'grid') {
                        listView.style.display = 'none';
                        gridView.style.display = 'grid';
                    }
                    
                    console.log(`[ENGRAM] View switched to ${viewType}`);
                    
                    if (window.TektonDebug) {
                        window.TektonDebug.debug('engram', 'View switched', { viewType: viewType });
                    }
                });
            });
        }
        
        // Collection item selection
        const collectionItems = engramContainer.querySelectorAll('.engram__collection-item');
        
        if (collectionItems.length) {
            collectionItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Remove active state from all items
                    collectionItems.forEach(itm => {
                        itm.classList.remove('engram__collection-item--active');
                    });
                    
                    // Add active state to clicked item
                    this.classList.add('engram__collection-item--active');
                    
                    const collectionName = this.querySelector('.engram__collection-name').textContent;
                    console.log(`[ENGRAM] Collection selected: ${collectionName}`);
                    
                    if (window.TektonDebug) {
                        window.TektonDebug.debug('engram', 'Collection selected', { collection: collectionName });
                    }
                });
            });
        }
        
        // Memory item selection
        const memoryItems = engramContainer.querySelectorAll('.engram__memory-item');
        
        if (memoryItems.length) {
            memoryItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Add selected state (could use a class for styling)
                    memoryItems.forEach(mem => {
                        mem.style.borderColor = '';
                    });
                    
                    this.style.borderColor = 'var(--color-primary, #9C27B0)';
                    
                    const memoryName = this.querySelector('.engram__memory-name').textContent;
                    console.log(`[ENGRAM] Memory selected: ${memoryName}`);
                    
                    if (window.TektonDebug) {
                        window.TektonDebug.debug('engram', 'Memory selected', { memory: memoryName });
                    }
                });
            });
        }
        
        console.log('[ENGRAM] View controls set up');
        
        if (window.TektonDebug) {
            window.TektonDebug.debug('engram', 'View controls set up');
        }
    } catch (err) {
        console.error('[ENGRAM] Error setting up view controls:', err);
        if (window.TektonDebug) {
            window.TektonDebug.error('engram', 'Setup view controls error', { error: err.message });
        }
    }
}

// HTML PANEL PROTECTION
// Setup explicit protection for the HTML panel to prevent it being hidden
function engram_protectHtmlPanel() {
    const htmlPanel = document.getElementById('html-panel');
    if (!htmlPanel) {
        console.error('[ENGRAM] Cannot find HTML panel to protect');
        if (window.TektonDebug) {
            window.TektonDebug.warn('engram', 'HTML panel not found for protection');
        }
        return;
    }
    
    console.log('[ENGRAM] Protecting HTML panel from being hidden');
    htmlPanel.style.display = 'block'; // Force it to be visible
    
    // Store the original display value
    if (!htmlPanel.hasOwnProperty('_engramOriginalDisplay')) {
        Object.defineProperty(htmlPanel, '_engramOriginalDisplay', {
            value: 'block',
            writable: true,
            configurable: true
        });
    }
    
    // Only define the getter/setter if it hasn't already been defined by this component
    if (!htmlPanel.style._engramProtected) {
        // Mark the display property as protected by this component
        Object.defineProperty(htmlPanel.style, '_engramProtected', {
            value: true,
            writable: false,
            configurable: true
        });
        
        // Protect the display property
        Object.defineProperty(htmlPanel.style, 'display', {
            get: function() { 
                return htmlPanel._engramOriginalDisplay; 
            },
            set: function(value) {
                console.log(`[ENGRAM] Intercepted attempt to set HTML panel display to: ${value}`);
                if (value === 'none') {
                    console.log('[ENGRAM] Blocked attempt to hide HTML panel');
                    htmlPanel._engramOriginalDisplay = 'block';
                    
                    if (window.TektonDebug) {
                        window.TektonDebug.warn('engram', 'Blocked attempt to hide HTML panel');
                    }
                } else {
                    htmlPanel._engramOriginalDisplay = value;
                }
            },
            configurable: true
        });
    }
    
    if (window.TektonDebug) {
        window.TektonDebug.debug('engram', 'HTML panel protected');
    }
}

// LOAD COMPONENT
// Load after defining tab switching to ensure it's available
function engram_loadComponent() {
    console.log('[ENGRAM] Loading component script...');
    
    // Log debug info if debugging is available
    if (window.TektonDebug) {
        window.TektonDebug.info('engram', 'Component loading started');
    }
    
    // Setup basic UI interactions that don't require the full component
    engram_setupBasicChat();
    engram_setupViewControls();
    
    const timestamp = new Date().getTime();
    const scriptPath = `/scripts/engram/engram-component.js?t=${timestamp}`;
    
    const script = document.createElement('script');
    script.src = scriptPath;
    script.async = false;
    script.onload = function() {
        console.log('[ENGRAM] Component script loaded successfully');
        
        if (window.TektonDebug) {
            window.TektonDebug.info('engram', 'Component script loaded successfully');
        }
        
        if (window.engramComponent && typeof window.engramComponent.init === 'function') {
            try {
                window.engramComponent.init();
                console.log('[ENGRAM] Component initialized');
                
                if (window.TektonDebug) {
                    window.TektonDebug.info('engram', 'Component initialized successfully');
                }
            } catch (err) {
                console.error('[ENGRAM] Component initialization error:', err);
                
                if (window.TektonDebug) {
                    window.TektonDebug.error('engram', 'Component initialization error', { 
                        error: err.message,
                        stack: err.stack
                    });
                }
            }
        } else {
            console.warn('[ENGRAM] Component init function not found');
            
            if (window.TektonDebug) {
                window.TektonDebug.warn('engram', 'Component init function not found');
            }
        }
    };
    script.onerror = function() {
        console.error('[ENGRAM] Failed to load component script');
        
        if (window.TektonDebug) {
            window.TektonDebug.error('engram', 'Failed to load component script', {
                script: scriptPath
            });
        }
    };
    
    document.body.appendChild(script);
}

// SETUP DONE AFTER PAGE LOAD
// This ensures the functions are available before the tab events need them
window.addEventListener('DOMContentLoaded', function() {
    console.log('[ENGRAM] DOM loaded, setting up Engram component');
    
    if (window.TektonDebug) {
        window.TektonDebug.info('engram', 'DOM loaded, component setup starting');
    }
    
    // Protect HTML panel first to avoid race conditions
    engram_protectHtmlPanel();
    
    // Then load the component
    engram_loadComponent();
});

// IMMEDIATE PROTECTION
// In case the DOM is already loaded
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log('[ENGRAM] Document already loaded, setting up Engram component immediately');
    
    if (window.TektonDebug) {
        window.TektonDebug.info('engram', 'Document already loaded, setting up component immediately');
    }
    
    engram_protectHtmlPanel();
    engram_loadComponent();
}
</script>