{
  "component": "Athena",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/setup.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 1
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 1
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 58,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 7,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/__main__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 2
          },
          {
            "module": "sys",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 23,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/query_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the query engine.\n\nArgs:\n    engine: Reference to the knowledge engine",
            "args": [
              "self",
              "engine"
            ],
            "class": "QueryEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_mcp",
            "line": 61,
            "async": true,
            "decorators": [],
            "docstring": "Initialize MCP integration for the query engine.",
            "args": [
              "self"
            ],
            "class": "QueryEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Execute a query using the specified retrieval mode.\n\nArgs:\n    question: The query to execute\n    parameters: Query parameters including mode, limits, etc.\n    \nReturns:\n    Results dictionary with retrieved context and/or generated response",
            "args": [
              "self",
              "question",
              "parameters"
            ],
            "class": "QueryEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_naive_query",
            "line": 102,
            "async": true,
            "decorators": [],
            "docstring": "Simple keyword-based search without advanced knowledge graph integration.\n\nThis mode performs basic keyword matching against entity names and descriptions,\nwithout considering relationships or graph structure.\n\nArgs:\n    question: The query text\n    parameters: Query parameters\n    \nReturns:\n    Results dictionary",
            "args": [
              "self",
              "question",
              "parameters"
            ],
            "class": "QueryEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_local_query",
            "line": 162,
            "async": true,
            "decorators": [],
            "docstring": "Entity-focused retrieval that prioritizes relevant entities.\n\nThis mode focuses on finding the most relevant entities and their direct properties,\nwithout extensively exploring relationships between entities.\n\nArgs:\n    question: The query text\n    parameters: Query parameters\n    \nReturns:\n    Results dictionary",
            "args": [
              "self",
              "question",
              "parameters"
            ],
            "class": "QueryEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_global_query",
            "line": 266,
            "async": true,
            "decorators": [],
            "docstring": "Relationship-focused retrieval for understanding connections.\n\nThis mode prioritizes relationship paths and network structure\nover individual entity attributes.\n\nArgs:\n    question: The query text\n    parameters: Query parameters\n    \nReturns:\n    Results dictionary",
            "args": [
              "self",
              "question",
              "parameters"
            ],
            "class": "QueryEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_hybrid_query",
            "line": 440,
            "async": true,
            "decorators": [],
            "docstring": "Combined entity and relationship retrieval.\n\nThis mode balances both LOCAL and GLOBAL approaches, giving a more\ncomprehensive view of the knowledge graph.\n\nArgs:\n    question: The query text\n    parameters: Query parameters\n    \nReturns:\n    Results dictionary",
            "args": [
              "self",
              "question",
              "parameters"
            ],
            "class": "QueryEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_mix_query",
            "line": 493,
            "async": true,
            "decorators": [],
            "docstring": "Integrated graph and vector retrieval (most advanced mode).\n\nThis mode combines graph traversal with vector similarity search\nfor a comprehensive retrieval strategy.\n\nArgs:\n    question: The query text\n    parameters: Query parameters\n    \nReturns:\n    Results dictionary",
            "args": [
              "self",
              "question",
              "parameters"
            ],
            "class": "QueryEngine",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "QueryEngine",
            "line": 35,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Enhanced query engine for Athena knowledge graph.\n\nProvides multiple retrieval strategies inspired by LightRAG:\n- Naive: Simple keyword-based search\n- Local: Entity-focused retrieval\n- Global: Relationship-focused retrieval\n- Hybrid: Combined entity and relationship retrieval\n- Mix: Integrated graph and vector retrieval",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.utils.tooling.ToolRegistry",
            "from": "tekton.mcp.fastmcp.utils.tooling",
            "name": "ToolRegistry",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.core.query.modes.QueryParameters",
            "from": "tekton.core.query.modes",
            "name": "QueryParameters",
            "alias": null,
            "line": 24
          },
          {
            "module": "engine.KnowledgeEngine",
            "from": "engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 26
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 27
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 28
          },
          {
            "module": "mcp.register_query_tools",
            "from": "mcp",
            "name": "register_query_tools",
            "alias": null,
            "line": 31
          },
          {
            "module": "tekton.core.vector_store.get_vector_store",
            "from": "tekton.core.vector_store",
            "name": "get_vector_store",
            "alias": null,
            "line": 512
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "QueryEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/query_engine.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "QueryEngine.initialize_mcp",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/query_engine.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "QueryEngine.query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/query_engine.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "QueryEngine._local_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/query_engine.py",
            "line": 162,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "QueryEngine._global_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/query_engine.py",
            "line": 266,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 531,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a new relationship.\n\nArgs:\n    relationship_id: Unique identifier (UUID string)\n    relationship_type: Type of relationship (employs, contains, etc.)\n    source_id: Entity ID of the source entity\n    target_id: Entity ID of the target entity\n    properties: Dictionary of key-value properties\n    confidence: Confidence score (0.0 to 1.0)\n    source: Source of the relationship information",
            "args": [
              "self",
              "relationship_id",
              "relationship_type",
              "source_id",
              "target_id",
              "properties",
              "confidence",
              "source"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_property",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Add or update a property for this relationship.\n\nArgs:\n    key: Property name\n    value: Property value\n    confidence: Confidence in this property (0.0 to 1.0)",
            "args": [
              "self",
              "key",
              "value",
              "confidence"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_property",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Get a property value.\n\nArgs:\n    key: Property name\n    \nReturns:\n    Property value or None if not found",
            "args": [
              "self",
              "key"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_property_with_confidence",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Get a property value with its confidence score.\n\nArgs:\n    key: Property name\n    \nReturns:\n    Tuple of (value, confidence) or (None, 0.0) if not found",
            "args": [
              "self",
              "key"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_bidirectional",
            "line": 92,
            "async": false,
            "decorators": [],
            "docstring": "Set whether this relationship is bidirectional.\n\nArgs:\n    is_bidirectional: True if the relationship is bidirectional",
            "args": [
              "self",
              "is_bidirectional"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 101,
            "async": false,
            "decorators": [],
            "docstring": "Convert relationship to a dictionary representation.\n\nReturns:\n    Dictionary representation of the relationship",
            "args": [
              "self"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 122,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a relationship from a dictionary representation.\n\nArgs:\n    data: Dictionary representation of a relationship\n    \nReturns:\n    Relationship instance",
            "args": [
              "cls",
              "data"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__str__",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__repr__",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "Relationship",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Relationship",
            "line": 11,
            "methods": [
              "__init__",
              "add_property",
              "get_property",
              "get_property_with_confidence",
              "set_bidirectional",
              "to_dict",
              "from_dict",
              "__str__",
              "__repr__"
            ],
            "decorators": [],
            "docstring": "Represents an edge in the knowledge graph.\n\nRelationships connect entities and provide structured knowledge about\nhow entities relate to each other.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uuid",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Relationship.add_property",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 50,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Relationship.get_property",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Relationship.get_property_with_confidence",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Relationship.set_bidirectional",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 92,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Relationship.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 101,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Relationship.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/relationship.py",
            "line": 122,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 152,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "athena.core.engine.KnowledgeEngine",
            "from": "athena.core.engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 5
          },
          {
            "module": "athena.core.entity.Entity",
            "from": "athena.core.entity",
            "name": "Entity",
            "alias": null,
            "line": 6
          },
          {
            "module": "athena.core.relationship.Relationship",
            "from": "athena.core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 9,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 52,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the knowledge engine.\n\nArgs:\n    data_path: Path to store graph data (if using file-based adapter)",
            "args": [
              "self",
              "data_path"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 73,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the knowledge engine and database connection.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "KnowledgeEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": "Shut down the knowledge engine and close connections.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_entity",
            "line": 161,
            "async": true,
            "decorators": [],
            "docstring": "Add a new entity to the knowledge graph.\n\nArgs:\n    entity: Entity object to add\n    \nReturns:\n    Entity ID",
            "args": [
              "self",
              "entity"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 182,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve an entity by ID.\n\nArgs:\n    entity_id: Entity ID to retrieve\n    \nReturns:\n    Entity object or None if not found",
            "args": [
              "self",
              "entity_id"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing entity.\n\nArgs:\n    entity: Updated entity object\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "entity"
            ],
            "class": "KnowledgeEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 224,
            "async": true,
            "decorators": [],
            "docstring": "Delete an entity by ID.\n\nArgs:\n    entity_id: Entity ID to delete\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "entity_id"
            ],
            "class": "KnowledgeEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_relationship",
            "line": 246,
            "async": true,
            "decorators": [],
            "docstring": "Add a new relationship to the knowledge graph.\n\nArgs:\n    relationship: Relationship object to add\n    \nReturns:\n    Relationship ID",
            "args": [
              "self",
              "relationship"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationship",
            "line": 267,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve a relationship by ID.\n\nArgs:\n    relationship_id: Relationship ID to retrieve\n    \nReturns:\n    Relationship object or None if not found",
            "args": [
              "self",
              "relationship_id"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_relationship",
            "line": 287,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing relationship.\n\nArgs:\n    relationship: Updated relationship object\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "relationship"
            ],
            "class": "KnowledgeEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 309,
            "async": true,
            "decorators": [],
            "docstring": "Delete a relationship by ID.\n\nArgs:\n    relationship_id: Relationship ID to delete\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "relationship_id"
            ],
            "class": "KnowledgeEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_entities",
            "line": 331,
            "async": true,
            "decorators": [],
            "docstring": "Search for entities matching a query.\n\nArgs:\n    query: Search query\n    entity_type: Optional entity type to filter by\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching entities",
            "args": [
              "self",
              "query",
              "entity_type",
              "limit"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity_relationships",
            "line": 353,
            "async": true,
            "decorators": [],
            "docstring": "Get all relationships for an entity.\n\nArgs:\n    entity_id: Entity ID to query\n    relationship_type: Optional relationship type to filter by\n    direction: Direction of relationships ('outgoing', 'incoming', or 'both')\n    \nReturns:\n    List of (relationship, connected entity) tuples",
            "args": [
              "self",
              "entity_id",
              "relationship_type",
              "direction"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_query",
            "line": 378,
            "async": true,
            "decorators": [],
            "docstring": "Execute a raw graph query.\n\nArgs:\n    query: Query string in the graph database language (e.g., Cypher for Neo4j)\n    params: Query parameters\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_path",
            "line": 399,
            "async": true,
            "decorators": [],
            "docstring": "Find paths between two entities.\n\nArgs:\n    source_id: Source entity ID\n    target_id: Target entity ID\n    max_depth: Maximum path length\n    \nReturns:\n    List of paths, where each path is a list of alternating Entity and Relationship objects",
            "args": [
              "self",
              "source_id",
              "target_id",
              "max_depth"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_status",
            "line": 424,
            "async": true,
            "decorators": [],
            "docstring": "Get the status of the knowledge engine.\n\nReturns:\n    Status information dictionary",
            "args": [
              "self"
            ],
            "class": "KnowledgeEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_knowledge_engine",
            "line": 460,
            "async": true,
            "decorators": [],
            "docstring": "Get the global knowledge engine instance.\n\nReturns:\n    KnowledgeEngine instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "KnowledgeEngine",
            "line": 45,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Core knowledge graph engine for Athena.\n\nManages entity and relationship creation, querying, and inference.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 16
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 25
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 26
          },
          {
            "module": "graph.neo4j_adapter.Neo4jAdapter",
            "from": "graph.neo4j_adapter",
            "name": "Neo4jAdapter",
            "alias": "GraphAdapter",
            "line": 30
          },
          {
            "module": "hermes.utils.database_helper.DatabaseClient",
            "from": "hermes.utils.database_helper",
            "name": "DatabaseClient",
            "alias": null,
            "line": 35
          },
          {
            "module": "graph.memory_adapter.MemoryAdapter",
            "from": "graph.memory_adapter",
            "name": "MemoryAdapter",
            "alias": "GraphAdapter",
            "line": 40
          },
          {
            "module": "graph.neo4j_adapter.Neo4jAdapter",
            "from": "graph.neo4j_adapter",
            "name": "Neo4jAdapter",
            "alias": "GraphAdapter",
            "line": 95
          },
          {
            "module": "graph.memory_adapter.MemoryAdapter",
            "from": "graph.memory_adapter",
            "name": "MemoryAdapter",
            "alias": "GraphAdapter",
            "line": 99
          },
          {
            "module": "graph.memory_adapter.MemoryAdapter",
            "from": "graph.memory_adapter",
            "name": "MemoryAdapter",
            "alias": "GraphAdapter",
            "line": 102
          },
          {
            "module": "entity_manager.EntityManager",
            "from": "entity_manager",
            "name": "EntityManager",
            "alias": null,
            "line": 120
          },
          {
            "module": "query_engine.QueryEngine",
            "from": "query_engine",
            "name": "QueryEngine",
            "alias": null,
            "line": 121
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "KnowledgeEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 73,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.add_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 161,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 182,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 224,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 246,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.get_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.update_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 287,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 309,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 331,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 353,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 378,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.find_path",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 399,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KnowledgeEngine.get_status",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 424,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_knowledge_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/engine.py",
            "line": 460,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 469,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the entity manager.\n\nArgs:\n    engine: Reference to the knowledge engine",
            "args": [
              "self",
              "engine"
            ],
            "class": "EntityManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_mcp",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Initialize MCP integration for the entity manager.",
            "args": [
              "self"
            ],
            "class": "EntityManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "merge_entities",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Merge multiple entities into a single entity.\n\nArgs:\n    source_entities: List of entity IDs or names to merge\n    target_entity_name: Name for the merged entity\n    target_entity_type: Optional type for the merged entity\n    merge_strategies: Field-specific merge strategies\n    \nReturns:\n    Merged entity or None if operation failed",
            "args": [
              "self",
              "source_entities",
              "target_entity_name",
              "target_entity_type",
              "merge_strategies"
            ],
            "class": "EntityManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_resolve_entity",
            "line": 149,
            "async": true,
            "decorators": [],
            "docstring": "Resolve entity by ID or name.\n\nArgs:\n    entity_ref: Entity ID or name\n    \nReturns:\n    Entity object or None if not found",
            "args": [
              "self",
              "entity_ref"
            ],
            "class": "EntityManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_perform_merge",
            "line": 172,
            "async": true,
            "decorators": [],
            "docstring": "Perform the actual entity merging.\n\nArgs:\n    entities: List of entities to merge\n    target_name: Name for the merged entity\n    target_type: Type for the merged entity (optional)\n    strategies: Field-specific merge strategies\n    \nReturns:\n    Merged entity or None if operation failed",
            "args": [
              "self",
              "entities",
              "target_name",
              "target_type",
              "strategies"
            ],
            "class": "EntityManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_migrate_relationships",
            "line": 246,
            "async": true,
            "decorators": [],
            "docstring": "Migrate relationships from source entities to target entity.\n\nArgs:\n    source_entities: Source entities to migrate relationships from\n    target_entity: Target entity to migrate relationships to",
            "args": [
              "self",
              "source_entities",
              "target_entity"
            ],
            "class": "EntityManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "find_duplicate_entities",
            "line": 311,
            "async": true,
            "decorators": [],
            "docstring": "Find potential duplicate entities in the knowledge graph.\n\nArgs:\n    entity_type: Optional entity type to restrict search to\n    confidence_threshold: Minimum confidence for entity matching\n    max_results: Maximum number of duplicate groups to return\n    \nReturns:\n    List of entity groups that are potential duplicates",
            "args": [
              "self",
              "entity_type",
              "confidence_threshold",
              "max_results"
            ],
            "class": "EntityManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity_versions",
            "line": 333,
            "async": true,
            "decorators": [],
            "docstring": "Get all temporal versions of an entity.\n\nArgs:\n    entity_id: Entity ID to get versions for\n    \nReturns:\n    List of entity versions ordered by valid_from date",
            "args": [
              "self",
              "entity_id"
            ],
            "class": "EntityManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EntityMergeStrategy",
            "line": 33,
            "methods": [],
            "decorators": [],
            "docstring": "Merge strategy constants for entity field merging.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityManager",
            "line": 43,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Advanced entity management service.\n\nHandles sophisticated entity operations including:\n- Entity merging with configurable strategies\n- Entity disambiguation \n- Entity relationship maintenance\n- Entity versioning with temporal validity\n\nInspired by LightRAG's entity management capabilities to provide\na more sophisticated knowledge graph management system.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Literal",
            "from": "typing",
            "name": "Literal",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.utils.tooling.ToolRegistry",
            "from": "tekton.mcp.fastmcp.utils.tooling",
            "name": "ToolRegistry",
            "alias": null,
            "line": 19
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 24
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 25
          },
          {
            "module": "engine.KnowledgeEngine",
            "from": "engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 26
          },
          {
            "module": "mcp.register_entity_tools",
            "from": "mcp",
            "name": "register_entity_tools",
            "alias": null,
            "line": 29
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EntityMergeStrategy",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityManager",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 43,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EntityManager.initialize_mcp",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EntityManager.merge_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EntityManager._perform_merge",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 172,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EntityManager._migrate_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 246,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EntityManager.find_duplicate_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 311,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EntityManager.get_entity_versions",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity_manager.py",
            "line": 333,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 348,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a new entity.\n\nArgs:\n    entity_id: Unique identifier (UUID string)\n    entity_type: Type of entity (person, organization, concept, etc.)\n    name: Human-readable name or label\n    properties: Dictionary of key-value properties\n    confidence: Confidence score (0.0 to 1.0)\n    source: Source of the entity information",
            "args": [
              "self",
              "entity_id",
              "entity_type",
              "name",
              "properties",
              "confidence",
              "source"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_alias",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Add an alias/alternative name for this entity.\n\nArgs:\n    alias: Alternative name",
            "args": [
              "self",
              "alias"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_property",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Add or update a property for this entity.\n\nArgs:\n    key: Property name\n    value: Property value\n    confidence: Confidence in this property (0.0 to 1.0)",
            "args": [
              "self",
              "key",
              "value",
              "confidence"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_property",
            "line": 75,
            "async": false,
            "decorators": [],
            "docstring": "Get a property value.\n\nArgs:\n    key: Property name\n    \nReturns:\n    Property value or None if not found",
            "args": [
              "self",
              "key"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_property_with_confidence",
            "line": 88,
            "async": false,
            "decorators": [],
            "docstring": "Get a property value with its confidence score.\n\nArgs:\n    key: Property name\n    \nReturns:\n    Tuple of (value, confidence) or (None, 0.0) if not found",
            "args": [
              "self",
              "key"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_name",
            "line": 101,
            "async": false,
            "decorators": [],
            "docstring": "Update the entity's primary name.\n\nArgs:\n    name: New name",
            "args": [
              "self",
              "name"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": "Convert entity to a dictionary representation.\n\nReturns:\n    Dictionary representation of the entity",
            "args": [
              "self"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 136,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an entity from a dictionary representation.\n\nArgs:\n    data: Dictionary representation of an entity\n    \nReturns:\n    Entity instance",
            "args": [
              "cls",
              "data"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__str__",
            "line": 164,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__repr__",
            "line": 167,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "Entity",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Entity",
            "line": 11,
            "methods": [
              "__init__",
              "add_alias",
              "add_property",
              "get_property",
              "get_property_with_confidence",
              "update_name",
              "to_dict",
              "from_dict",
              "__str__",
              "__repr__"
            ],
            "decorators": [],
            "docstring": "Represents a node in the knowledge graph.\n\nEntities are the primary unit of knowledge in Athena, representing\npeople, concepts, objects, etc.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uuid",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Entity.add_alias",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 49,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Entity.add_property",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Entity.get_property",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 75,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Entity.get_property_with_confidence",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 88,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Entity.update_name",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 101,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Entity.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 116,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Entity.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/entity.py",
            "line": 136,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 168,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/athena_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "AthenaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 19,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Athena-specific services.",
            "args": [
              "self"
            ],
            "class": "AthenaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 27,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Athena-specific resources.",
            "args": [
              "self"
            ],
            "class": "AthenaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "AthenaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "AthenaComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AthenaComponent",
            "line": 12,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Athena knowledge graph component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 4
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 6
          },
          {
            "module": "athena.core.engine.get_knowledge_engine",
            "from": "athena.core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AthenaComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/athena_component.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AthenaComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/athena_component.py",
            "line": 36,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AthenaComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/athena_component.py",
            "line": 46,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 52,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/utils/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 3,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/models/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "EntityModel",
            "line": 12,
            "methods": [],
            "decorators": [],
            "docstring": "Pydantic model wrapper for Entity class",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 5
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 5
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 5
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 5
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 5
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 6
          },
          {
            "module": "pydantic.ConfigDict",
            "from": "pydantic",
            "name": "ConfigDict",
            "alias": null,
            "line": 6
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 7
          },
          {
            "module": "athena.core.entity.Entity",
            "from": "athena.core.entity",
            "name": "Entity",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EntityModel",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/models/__init__.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 19,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/scripts/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 3,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 3,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 51,
            "async": true,
            "decorators": [],
            "docstring": "Initialize component during startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 93,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 99,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 111,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "global_exception_handler",
            "line": 174,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": "Global exception handler for API",
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 183,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "health",
            "line": 93,
            "method": "@get",
            "async": true
          },
          {
            "name": "ready",
            "line": 99,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 111,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 183,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 24
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": "setup_component_logger",
            "line": 25
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 26
          },
          {
            "module": "endpoints.knowledge_graph.router",
            "from": "endpoints.knowledge_graph",
            "name": "router",
            "alias": "knowledge_router",
            "line": 38
          },
          {
            "module": "endpoints.entities.router",
            "from": "endpoints.entities",
            "name": "router",
            "alias": "entities_router",
            "line": 39
          },
          {
            "module": "endpoints.query.router",
            "from": "endpoints.query",
            "name": "router",
            "alias": "query_router",
            "line": 40
          },
          {
            "module": "endpoints.visualization.router",
            "from": "endpoints.visualization",
            "name": "router",
            "alias": "visualization_router",
            "line": 41
          },
          {
            "module": "endpoints.llm_integration.router",
            "from": "endpoints.llm_integration",
            "name": "router",
            "alias": "llm_router",
            "line": 42
          },
          {
            "module": "endpoints.mcp.mcp_router",
            "from": "endpoints.mcp",
            "name": "mcp_router",
            "alias": null,
            "line": 43
          },
          {
            "module": "athena.core.athena_component.AthenaComponent",
            "from": "athena.core.athena_component",
            "name": "AthenaComponent",
            "alias": null,
            "line": 46
          },
          {
            "module": "athena.core.mcp.hermes_bridge.AthenaMCPBridge",
            "from": "athena.core.mcp.hermes_bridge",
            "name": "AthenaMCPBridge",
            "alias": null,
            "line": 61
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 202
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
            "line": 51,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
            "line": 93,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "global_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/app.py",
            "line": 183,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 213,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/dependencies.py",
      "analysis": {
        "functions": [
          {
            "name": "get_client_id",
            "line": 19,
            "async": true,
            "decorators": [],
            "docstring": "Get client ID from header or use default.",
            "args": [
              "x_client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_knowledge_engine",
            "line": 25,
            "async": true,
            "decorators": [],
            "docstring": "Get knowledge engine instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity_manager",
            "line": 33,
            "async": true,
            "decorators": [],
            "docstring": "Get entity manager from knowledge engine.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_query_engine",
            "line": 40,
            "async": true,
            "decorators": [],
            "docstring": "Get query engine from knowledge engine.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "athena.core.engine.KnowledgeEngine",
            "from": "athena.core.engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 10
          },
          {
            "module": "athena.core.entity_manager.EntityManager",
            "from": "athena.core.entity_manager",
            "name": "EntityManager",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.core.query_engine.QueryEngine",
            "from": "athena.core.query_engine",
            "name": "QueryEngine",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_client_id",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/dependencies.py",
            "line": 19,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_knowledge_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/dependencies.py",
            "line": 25,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/dependencies.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_query_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/dependencies.py",
            "line": 40,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 43,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j_adapter.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "neo4j.adapter.Neo4jAdapter",
            "from": "neo4j.adapter",
            "name": "Neo4jAdapter",
            "alias": null,
            "line": 8
          },
          {
            "module": "neo4j.config.Neo4jConfig",
            "from": "neo4j.config",
            "name": "Neo4jConfig",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 12,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory_adapter.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "memory.MemoryAdapter",
            "from": "memory",
            "name": "MemoryAdapter",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 14,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Athena MCP Bridge.",
            "args": [
              "self",
              "knowledge_engine",
              "component_name"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 129,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 150,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from knowledge engine.",
            "args": [
              "self"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 170,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "AthenaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AthenaMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Athena's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Athena to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.core.mcp.get_all_tools",
            "from": "athena.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "athena.api.endpoints.mcp.process_request_func",
            "from": "athena.api.endpoints.mcp",
            "name": "process_request_func",
            "alias": null,
            "line": 91
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 92
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AthenaMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AthenaMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/hermes_bridge.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 195,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_entities",
            "line": 49,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Search for entities in the knowledge graph.\n\nArgs:\n    query: Search query\n    entity_type: Optional entity type to filter by\n    limit: Maximum number of results to return\n    min_confidence: Minimum confidence score for entities\n    entity_manager: Entity manager to use (injected)\n    \nReturns:\n    Search results",
            "args": [
              "query",
              "entity_type",
              "limit",
              "min_confidence",
              "entity_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_entity_by_id",
            "line": 118,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get an entity by its ID.\n\nArgs:\n    entity_id: ID of the entity to retrieve\n    entity_manager: Entity manager to use (injected)\n    \nReturns:\n    Entity details",
            "args": [
              "entity_id",
              "entity_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_entity_relationships",
            "line": 173,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get relationships for an entity.\n\nArgs:\n    entity_id: ID of the entity\n    direction: Relationship direction ('outgoing', 'incoming', or 'both')\n    relationship_type: Optional relationship type to filter by\n    limit: Maximum number of relationships to return\n    entity_manager: Entity manager to use (injected)\n    \nReturns:\n    Entity relationships",
            "args": [
              "entity_id",
              "direction",
              "relationship_type",
              "limit",
              "entity_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "find_entity_paths",
            "line": 248,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Find paths between entities in the knowledge graph.\n\nArgs:\n    source_id: ID of the source entity\n    target_id: ID of the target entity\n    max_depth: Maximum path depth\n    relationship_types: Optional list of relationship types to consider\n    entity_manager: Entity manager to use (injected)\n    \nReturns:\n    Paths between entities",
            "args": [
              "source_id",
              "target_id",
              "max_depth",
              "relationship_types",
              "entity_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "merge_entities",
            "line": 333,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Merge multiple entities into a single entity.\n\nArgs:\n    source_entities: List of entity IDs to merge\n    target_entity_name: Name for the merged entity\n    target_entity_type: Optional type for the merged entity\n    merge_strategies: Optional field-specific merge strategies\n    entity_manager: Entity manager to use (injected)\n    \nReturns:\n    Merged entity details",
            "args": [
              "source_entities",
              "target_entity_name",
              "target_entity_type",
              "merge_strategies",
              "entity_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "query_knowledge_graph",
            "line": 405,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Query the knowledge graph with a specific mode.\n\nArgs:\n    question: Query question\n    mode: Query mode ('naive', 'local', 'global', 'hybrid', or 'mix')\n    max_results: Maximum number of results\n    max_entities: Maximum number of entities to consider\n    relationship_depth: Maximum relationship depth for path-based queries\n    query_engine: Query engine to use (injected)\n    \nReturns:\n    Query results",
            "args": [
              "question",
              "mode",
              "max_results",
              "max_entities",
              "relationship_depth",
              "query_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "naive_query",
            "line": 481,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Simple keyword-based query of the knowledge graph.\n\nArgs:\n    question: Query question\n    max_results: Maximum number of results\n    query_engine: Query engine to use (injected)\n    \nReturns:\n    Query results",
            "args": [
              "question",
              "max_results",
              "query_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "local_query",
            "line": 515,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Entity-focused query of the knowledge graph.\n\nArgs:\n    question: Query question\n    max_results: Maximum number of results\n    max_entities: Maximum number of entities to consider\n    query_engine: Query engine to use (injected)\n    \nReturns:\n    Query results",
            "args": [
              "question",
              "max_results",
              "max_entities",
              "query_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "global_query",
            "line": 552,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Relationship-focused query of the knowledge graph.\n\nArgs:\n    question: Query question\n    max_results: Maximum number of results\n    max_entities: Maximum number of entities to consider\n    relationship_depth: Maximum relationship depth for path-based queries\n    query_engine: Query engine to use (injected)\n    \nReturns:\n    Query results",
            "args": [
              "question",
              "max_results",
              "max_entities",
              "relationship_depth",
              "query_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "hybrid_query",
            "line": 592,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Combined entity and relationship query of the knowledge graph.\n\nArgs:\n    question: Query question\n    max_results: Maximum number of results\n    max_entities: Maximum number of entities to consider\n    relationship_depth: Maximum relationship depth for path-based queries\n    query_engine: Query engine to use (injected)\n    \nReturns:\n    Query results",
            "args": [
              "question",
              "max_results",
              "max_entities",
              "relationship_depth",
              "query_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_entity_tools",
            "line": 623,
            "async": true,
            "decorators": [],
            "docstring": "Register entity management tools with the MCP service.",
            "args": [
              "entity_manager",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_query_tools",
            "line": 645,
            "async": true,
            "decorators": [],
            "docstring": "Register query tools with the MCP service.",
            "args": [
              "query_engine",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 667,
            "async": false,
            "decorators": [],
            "docstring": "Get all Athena MCP tools.",
            "args": [
              "knowledge_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_capabilities",
            "line": 693,
            "async": false,
            "decorators": [],
            "docstring": "Get all Athena MCP capabilities.",
            "args": [
              "knowledge_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "search_entities",
            "line": 49,
            "decorator": "@mcp_capability"
          },
          {
            "name": "search_entities",
            "line": 49,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_entity_by_id",
            "line": 118,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_entity_by_id",
            "line": 118,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_entity_relationships",
            "line": 173,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_entity_relationships",
            "line": 173,
            "decorator": "@mcp_tool"
          },
          {
            "name": "find_entity_paths",
            "line": 248,
            "decorator": "@mcp_capability"
          },
          {
            "name": "find_entity_paths",
            "line": 248,
            "decorator": "@mcp_tool"
          },
          {
            "name": "merge_entities",
            "line": 333,
            "decorator": "@mcp_capability"
          },
          {
            "name": "merge_entities",
            "line": 333,
            "decorator": "@mcp_tool"
          },
          {
            "name": "query_knowledge_graph",
            "line": 405,
            "decorator": "@mcp_capability"
          },
          {
            "name": "query_knowledge_graph",
            "line": 405,
            "decorator": "@mcp_tool"
          },
          {
            "name": "naive_query",
            "line": 481,
            "decorator": "@mcp_capability"
          },
          {
            "name": "naive_query",
            "line": 481,
            "decorator": "@mcp_tool"
          },
          {
            "name": "local_query",
            "line": 515,
            "decorator": "@mcp_capability"
          },
          {
            "name": "local_query",
            "line": 515,
            "decorator": "@mcp_tool"
          },
          {
            "name": "global_query",
            "line": 552,
            "decorator": "@mcp_capability"
          },
          {
            "name": "global_query",
            "line": 552,
            "decorator": "@mcp_tool"
          },
          {
            "name": "hybrid_query",
            "line": 592,
            "decorator": "@mcp_capability"
          },
          {
            "name": "hybrid_query",
            "line": 592,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 434
          },
          {
            "module": "tekton.core.query.modes.QueryParameters",
            "from": "tekton.core.query.modes",
            "name": "QueryParameters",
            "alias": null,
            "line": 434
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 673
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 699
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_entity_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 118,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 173,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "find_entity_paths",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 248,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "merge_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 333,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "query_knowledge_graph",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 405,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "naive_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 481,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "local_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 515,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "global_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 552,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "hybrid_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 592,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "register_entity_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 623,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_query_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 645,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 667,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/tools.py",
            "line": 693,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 724,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "capabilities.KnowledgeGraphCapability",
            "from": "capabilities",
            "name": "KnowledgeGraphCapability",
            "alias": null,
            "line": 9
          },
          {
            "module": "capabilities.QueryEngineCapability",
            "from": "capabilities",
            "name": "QueryEngineCapability",
            "alias": null,
            "line": 9
          },
          {
            "module": "capabilities.VisualizationCapability",
            "from": "capabilities",
            "name": "VisualizationCapability",
            "alias": null,
            "line": 9
          },
          {
            "module": "capabilities.IntegrationCapability",
            "from": "capabilities",
            "name": "IntegrationCapability",
            "alias": null,
            "line": 9
          },
          {
            "module": "tools.search_entities",
            "from": "tools",
            "name": "search_entities",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.get_entity_by_id",
            "from": "tools",
            "name": "get_entity_by_id",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.get_entity_relationships",
            "from": "tools",
            "name": "get_entity_relationships",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.find_entity_paths",
            "from": "tools",
            "name": "find_entity_paths",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.merge_entities",
            "from": "tools",
            "name": "merge_entities",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.query_knowledge_graph",
            "from": "tools",
            "name": "query_knowledge_graph",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.naive_query",
            "from": "tools",
            "name": "naive_query",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.local_query",
            "from": "tools",
            "name": "local_query",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.global_query",
            "from": "tools",
            "name": "global_query",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.hybrid_query",
            "from": "tools",
            "name": "hybrid_query",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.register_entity_tools",
            "from": "tools",
            "name": "register_entity_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.register_query_tools",
            "from": "tools",
            "name": "register_query_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.get_all_tools",
            "from": "tools",
            "name": "get_all_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "tools.get_all_capabilities",
            "from": "tools",
            "name": "get_all_capabilities",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 63,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "KnowledgeGraphCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 36,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "KnowledgeGraphCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 59,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "QueryEngineCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 74,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "QueryEngineCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 96,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "VisualizationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 108,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "VisualizationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 129,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "IntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 141,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "IntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "KnowledgeGraphCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for knowledge graph management and entity operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "QueryEngineCapability",
            "line": 51,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for advanced querying and graph analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "VisualizationCapability",
            "line": 88,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for knowledge graph visualization and export.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "IntegrationCapability",
            "line": 121,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for integration with other Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "KnowledgeGraphCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "KnowledgeGraphCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "KnowledgeGraphCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 36,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "QueryEngineCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 51,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "QueryEngineCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "QueryEngineCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 74,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "VisualizationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 88,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VisualizationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 96,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VisualizationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "IntegrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 121,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "IntegrationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 129,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "IntegrationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/mcp/capabilities.py",
            "line": 141,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 160,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
      "analysis": {
        "functions": [
          {
            "name": "from_env",
            "line": 29,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create configuration from environment variables.",
            "args": [
              "cls"
            ],
            "class": "Neo4jConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 42,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create configuration from dictionary.",
            "args": [
              "cls",
              "config_dict"
            ],
            "class": "Neo4jConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Convert configuration to dictionary.",
            "args": [
              "self"
            ],
            "class": "Neo4jConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_connection_config",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Get configuration for Neo4j connection.",
            "args": [
              "self"
            ],
            "class": "Neo4jConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_hermes_config",
            "line": 74,
            "async": false,
            "decorators": [],
            "docstring": "Get configuration for Hermes integration.",
            "args": [
              "self"
            ],
            "class": "Neo4jConfig",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Neo4jConfig",
            "line": 12,
            "methods": [
              "from_env",
              "from_dict",
              "to_dict",
              "get_connection_config",
              "get_hermes_config"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Configuration for Neo4j connection.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Neo4jConfig",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Neo4jConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Neo4jConfig.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
            "line": 42,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Neo4jConfig.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Neo4jConfig.get_connection_config",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Neo4jConfig.get_hermes_config",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/config.py",
            "line": 74,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 80,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Neo4j adapter.\n\nArgs:\n    data_path: Path for configuration (not used with Neo4j, but kept for interface compatibility)\n    **kwargs: Additional configuration options including Hermes integration settings",
            "args": [
              "self",
              "data_path"
            ],
            "class": "Neo4jAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the Neo4j graph database.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "Neo4jAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_graph_db_wrapper",
            "line": 111,
            "async": false,
            "decorators": [],
            "docstring": "Create a wrapper for direct Neo4j connection that mimics the Hermes interface.",
            "args": [
              "self"
            ],
            "class": "Neo4jAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_node",
            "line": 116,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "id",
              "labels",
              "properties"
            ],
            "class": "GraphDBWrapper",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_node",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "id"
            ],
            "class": "GraphDBWrapper",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_node",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "id"
            ],
            "class": "GraphDBWrapper",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_relationship",
            "line": 125,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "source_id",
              "target_id",
              "type",
              "properties"
            ],
            "class": "GraphDBWrapper",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 128,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": "GraphDBWrapper",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the Neo4j graph database.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_schema",
            "line": 158,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the graph schema with constraints.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_entity",
            "line": 186,
            "async": true,
            "decorators": [],
            "docstring": "Create a new entity in Neo4j.",
            "args": [
              "self",
              "entity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 205,
            "async": true,
            "decorators": [],
            "docstring": "Get an entity by ID.",
            "args": [
              "self",
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 209,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing entity.",
            "args": [
              "self",
              "entity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 213,
            "async": true,
            "decorators": [],
            "docstring": "Delete an entity by ID.",
            "args": [
              "self",
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_relationship",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "Create a new relationship.",
            "args": [
              "self",
              "relationship"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationship",
            "line": 227,
            "async": true,
            "decorators": [],
            "docstring": "Get a relationship by ID.",
            "args": [
              "self",
              "relationship_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_relationship",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing relationship.",
            "args": [
              "self",
              "relationship"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 235,
            "async": true,
            "decorators": [],
            "docstring": "Delete a relationship by ID.",
            "args": [
              "self",
              "relationship_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_entities",
            "line": 239,
            "async": true,
            "decorators": [],
            "docstring": "Search for entities matching a query.",
            "args": [
              "self",
              "query",
              "entity_type",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity_relationships",
            "line": 243,
            "async": true,
            "decorators": [],
            "docstring": "Get relationships for an entity.",
            "args": [
              "self",
              "entity_id",
              "relationship_type",
              "direction"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_query",
            "line": 247,
            "async": true,
            "decorators": [],
            "docstring": "Execute a raw Cypher query.",
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_paths",
            "line": 251,
            "async": true,
            "decorators": [],
            "docstring": "Find paths between two entities.",
            "args": [
              "self",
              "source_id",
              "target_id",
              "max_depth"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_entities",
            "line": 255,
            "async": true,
            "decorators": [],
            "docstring": "Count the number of entities in the graph.",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_relationships",
            "line": 259,
            "async": true,
            "decorators": [],
            "docstring": "Count the number of relationships in the graph.",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Neo4jAdapter",
            "line": 34,
            "methods": [
              "__init__",
              "_create_graph_db_wrapper"
            ],
            "decorators": [],
            "docstring": "Neo4j graph database adapter for Athena.\n\nProvides integration with Neo4j through the Hermes database services.\nImplements the same interface as the memory adapter for consistency.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "GraphDBWrapper",
            "line": 115,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "py2neo.Graph",
            "from": "py2neo",
            "name": "Graph",
            "alias": null,
            "line": 14
          },
          {
            "module": "neo4j.AsyncGraphDatabase",
            "from": "neo4j",
            "name": "AsyncGraphDatabase",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.database_manager.DatabaseBackend",
            "from": "hermes.core.database_manager",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.utils.database_helper.DatabaseClient",
            "from": "hermes.utils.database_helper",
            "name": "DatabaseClient",
            "alias": null,
            "line": 19
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 24
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 25
          },
          {
            "module": "config.Neo4jConfig",
            "from": "config",
            "name": "Neo4jConfig",
            "alias": null,
            "line": 26
          },
          {
            "module": "operations.create_entity",
            "from": "operations",
            "name": "create_entity",
            "alias": null,
            "line": 27
          },
          {
            "module": "operations.get_entity",
            "from": "operations",
            "name": "get_entity",
            "alias": null,
            "line": 27
          },
          {
            "module": "operations.update_entity",
            "from": "operations",
            "name": "update_entity",
            "alias": null,
            "line": 27
          },
          {
            "module": "operations.delete_entity",
            "from": "operations",
            "name": "delete_entity",
            "alias": null,
            "line": 27
          },
          {
            "module": "operations.create_relationship",
            "from": "operations",
            "name": "create_relationship",
            "alias": null,
            "line": 28
          },
          {
            "module": "operations.get_relationship",
            "from": "operations",
            "name": "get_relationship",
            "alias": null,
            "line": 28
          },
          {
            "module": "operations.update_relationship",
            "from": "operations",
            "name": "update_relationship",
            "alias": null,
            "line": 28
          },
          {
            "module": "operations.delete_relationship",
            "from": "operations",
            "name": "delete_relationship",
            "alias": null,
            "line": 28
          },
          {
            "module": "operations.search_entities",
            "from": "operations",
            "name": "search_entities",
            "alias": null,
            "line": 29
          },
          {
            "module": "operations.get_entity_relationships",
            "from": "operations",
            "name": "get_entity_relationships",
            "alias": null,
            "line": 29
          },
          {
            "module": "operations.execute_query",
            "from": "operations",
            "name": "execute_query",
            "alias": null,
            "line": 29
          },
          {
            "module": "operations.find_paths",
            "from": "operations",
            "name": "find_paths",
            "alias": null,
            "line": 29
          },
          {
            "module": "operations.count_entities",
            "from": "operations",
            "name": "count_entities",
            "alias": null,
            "line": 30
          },
          {
            "module": "operations.count_relationships",
            "from": "operations",
            "name": "count_relationships",
            "alias": null,
            "line": 30
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Neo4jAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 34,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Neo4jAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "GraphDBWrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 115,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GraphDBWrapper.add_node",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDBWrapper.get_node",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDBWrapper.delete_node",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDBWrapper.add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDBWrapper.query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "initialize_schema",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 158,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 205,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 209,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 213,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 227,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 235,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 239,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 243,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 247,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "find_paths",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 251,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "count_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 255,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "count_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/adapter.py",
            "line": 259,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 261,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "adapter.Neo4jAdapter",
            "from": "adapter",
            "name": "Neo4jAdapter",
            "alias": null,
            "line": 8
          },
          {
            "module": "config.Neo4jConfig",
            "from": "config",
            "name": "Neo4jConfig",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 15,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "operations.create_entity",
            "from": "operations",
            "name": "create_entity",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.get_entity",
            "from": "operations",
            "name": "get_entity",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.update_entity",
            "from": "operations",
            "name": "update_entity",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.delete_entity",
            "from": "operations",
            "name": "delete_entity",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.create_relationship",
            "from": "operations",
            "name": "create_relationship",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.get_relationship",
            "from": "operations",
            "name": "get_relationship",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.update_relationship",
            "from": "operations",
            "name": "update_relationship",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.delete_relationship",
            "from": "operations",
            "name": "delete_relationship",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.search_entities",
            "from": "operations",
            "name": "search_entities",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.get_entity_relationships",
            "from": "operations",
            "name": "get_entity_relationships",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.execute_query",
            "from": "operations",
            "name": "execute_query",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.find_paths",
            "from": "operations",
            "name": "find_paths",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.count_entities",
            "from": "operations",
            "name": "count_entities",
            "alias": null,
            "line": 8
          },
          {
            "module": "operations.count_relationships",
            "from": "operations",
            "name": "count_relationships",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 58,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/persistence.py",
      "analysis": {
        "functions": [
          {
            "name": "load_data",
            "line": 17,
            "async": true,
            "decorators": [],
            "docstring": "Load graph data from persistence files.\n\nArgs:\n    adapter: The memory adapter instance",
            "args": [
              "adapter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "save_data",
            "line": 57,
            "async": true,
            "decorators": [],
            "docstring": "Save graph data to persistence files.\n\nArgs:\n    adapter: The memory adapter instance",
            "args": [
              "adapter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 12
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "load_data",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/persistence.py",
            "line": 17,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "save_data",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/persistence.py",
            "line": 57,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 92,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/path_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "find_paths",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Find paths between two entities.\n\nArgs:\n    adapter: The memory adapter instance\n    source_id: Source entity ID\n    target_id: Target entity ID\n    max_depth: Maximum path length\n    \nReturns:\n    List of paths, where each path is a list of alternating Entity and Relationship objects",
            "args": [
              "adapter",
              "source_id",
              "target_id",
              "max_depth"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "networkx",
            "alias": "nx",
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 11
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "find_paths",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/path_ops.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 69,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/entity_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "create_entity",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Create a new entity in the graph.\n\nArgs:\n    adapter: The memory adapter instance\n    entity: Entity to create\n    \nReturns:\n    Entity ID",
            "args": [
              "adapter",
              "entity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 29,
            "async": true,
            "decorators": [],
            "docstring": "Get an entity by ID.\n\nArgs:\n    adapter: The memory adapter instance\n    entity_id: Entity ID\n    \nReturns:\n    Entity or None if not found",
            "args": [
              "adapter",
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Update an entity.\n\nArgs:\n    adapter: The memory adapter instance\n    entity: Updated entity\n    \nReturns:\n    True if successful",
            "args": [
              "adapter",
              "entity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 68,
            "async": true,
            "decorators": [],
            "docstring": "Delete an entity.\n\nArgs:\n    adapter: The memory adapter instance\n    entity_id: Entity ID to delete\n    \nReturns:\n    True if successful",
            "args": [
              "adapter",
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/entity_ops.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/entity_ops.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/entity_ops.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/entity_ops.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 84,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the memory adapter.\n\nArgs:\n    data_path: Path to store persistence files\n    **kwargs: Additional configuration options",
            "args": [
              "self",
              "data_path"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 60,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the graph database.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the graph database.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_schema",
            "line": 95,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the graph schema.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_entity",
            "line": 106,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "entity"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "entity_id"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 112,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "entity"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 115,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "entity_id"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_relationship",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "relationship"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationship",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "relationship_id"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_relationship",
            "line": 125,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "relationship"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 128,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "relationship_id"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_entities",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "query",
              "entity_type",
              "limit"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity_relationships",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "entity_id",
              "relationship_type",
              "direction"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_query",
            "line": 138,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_paths",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "source_id",
              "target_id",
              "max_depth"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_entities",
            "line": 146,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_relationships",
            "line": 149,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MemoryAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryAdapter",
            "line": 38,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "In-memory graph database adapter using NetworkX.\n\nProvides a simple implementation of the graph database interface\nwith optional file persistence for testing and development.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "networkx",
            "alias": "nx",
            "line": 12
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 14
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 15
          },
          {
            "module": "persistence.load_data",
            "from": "persistence",
            "name": "load_data",
            "alias": null,
            "line": 16
          },
          {
            "module": "persistence.save_data",
            "from": "persistence",
            "name": "save_data",
            "alias": null,
            "line": 16
          },
          {
            "module": "entity_ops.create_entity",
            "from": "entity_ops",
            "name": "create_entity",
            "alias": null,
            "line": 17
          },
          {
            "module": "entity_ops.get_entity",
            "from": "entity_ops",
            "name": "get_entity",
            "alias": null,
            "line": 17
          },
          {
            "module": "entity_ops.update_entity",
            "from": "entity_ops",
            "name": "update_entity",
            "alias": null,
            "line": 17
          },
          {
            "module": "entity_ops.delete_entity",
            "from": "entity_ops",
            "name": "delete_entity",
            "alias": null,
            "line": 17
          },
          {
            "module": "relationship_ops.create_relationship",
            "from": "relationship_ops",
            "name": "create_relationship",
            "alias": null,
            "line": 23
          },
          {
            "module": "relationship_ops.get_relationship",
            "from": "relationship_ops",
            "name": "get_relationship",
            "alias": null,
            "line": 23
          },
          {
            "module": "relationship_ops.update_relationship",
            "from": "relationship_ops",
            "name": "update_relationship",
            "alias": null,
            "line": 23
          },
          {
            "module": "relationship_ops.delete_relationship",
            "from": "relationship_ops",
            "name": "delete_relationship",
            "alias": null,
            "line": 23
          },
          {
            "module": "query_ops.search_entities",
            "from": "query_ops",
            "name": "search_entities",
            "alias": null,
            "line": 29
          },
          {
            "module": "query_ops.get_entity_relationships",
            "from": "query_ops",
            "name": "get_entity_relationships",
            "alias": null,
            "line": 29
          },
          {
            "module": "query_ops.execute_query",
            "from": "query_ops",
            "name": "execute_query",
            "alias": null,
            "line": 29
          },
          {
            "module": "path_ops.find_paths",
            "from": "path_ops",
            "name": "find_paths",
            "alias": null,
            "line": 34
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 60,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.initialize_schema",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 106,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 112,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 115,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.create_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.get_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.update_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 132,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 135,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 138,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.find_paths",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.count_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 146,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryAdapter.count_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/adapter.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 150,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "adapter.MemoryAdapter",
            "from": "adapter",
            "name": "MemoryAdapter",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 10,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/relationship_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "create_relationship",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Create a new relationship in the graph.\n\nArgs:\n    adapter: The memory adapter instance\n    relationship: Relationship to create\n    \nReturns:\n    Relationship ID",
            "args": [
              "adapter",
              "relationship"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationship",
            "line": 34,
            "async": true,
            "decorators": [],
            "docstring": "Get a relationship by ID.\n\nArgs:\n    adapter: The memory adapter instance\n    relationship_id: Relationship ID\n    \nReturns:\n    Relationship or None if not found",
            "args": [
              "adapter",
              "relationship_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_relationship",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Update a relationship.\n\nArgs:\n    adapter: The memory adapter instance\n    relationship: Updated relationship\n    \nReturns:\n    True if successful",
            "args": [
              "adapter",
              "relationship"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 75,
            "async": true,
            "decorators": [],
            "docstring": "Delete a relationship.\n\nArgs:\n    adapter: The memory adapter instance\n    relationship_id: Relationship ID to delete\n    \nReturns:\n    True if successful",
            "args": [
              "adapter",
              "relationship_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/relationship_ops.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/relationship_ops.py",
            "line": 34,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/relationship_ops.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/relationship_ops.py",
            "line": 75,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 92,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/query_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "search_entities",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Search for entities matching a query.\n\nArgs:\n    adapter: The memory adapter instance\n    query: Search query\n    entity_type: Optional entity type filter\n    limit: Maximum number of results\n    \nReturns:\n    List of matching entities",
            "args": [
              "adapter",
              "query",
              "entity_type",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_entity_relationships",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Get relationships for an entity.\n\nArgs:\n    adapter: The memory adapter instance\n    entity_id: Entity ID\n    relationship_type: Optional relationship type filter\n    direction: Relationship direction ('outgoing', 'incoming', or 'both')\n    \nReturns:\n    List of (relationship, connected entity) tuples",
            "args": [
              "adapter",
              "entity_id",
              "relationship_type",
              "direction"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "execute_query",
            "line": 107,
            "async": true,
            "decorators": [],
            "docstring": "Execute a raw query.\n\nNote: For the in-memory adapter, this is a stub that logs the query and returns an empty result.\n\nArgs:\n    query: Query string\n    params: Query parameters\n    \nReturns:\n    Query results",
            "args": [
              "query",
              "params"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "entity.Entity",
            "from": "entity",
            "name": "Entity",
            "alias": null,
            "line": 10
          },
          {
            "module": "relationship.Relationship",
            "from": "relationship",
            "name": "Relationship",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/query_ops.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/query_ops.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/memory/query_ops.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 121,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/path_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "find_paths",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Find paths between two entities.",
            "args": [
              "client",
              "source_id",
              "target_id",
              "max_depth",
              "entity_class",
              "relationship_class"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "find_paths",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/path_ops.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 88,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/entity_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "create_entity",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Create a new entity in Neo4j.",
            "args": [
              "client",
              "entity_id",
              "labels",
              "properties"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 47,
            "async": true,
            "decorators": [],
            "docstring": "Get an entity by ID.",
            "args": [
              "client",
              "entity_id",
              "entity_class"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 87,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing entity.",
            "args": [
              "client",
              "entity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 126,
            "async": true,
            "decorators": [],
            "docstring": "Delete an entity by ID.",
            "args": [
              "client",
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/entity_ops.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/entity_ops.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/entity_ops.py",
            "line": 87,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/entity_ops.py",
            "line": 126,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 146,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "entity_ops.create_entity",
            "from": "entity_ops",
            "name": "create_entity",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity_ops.get_entity",
            "from": "entity_ops",
            "name": "get_entity",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity_ops.update_entity",
            "from": "entity_ops",
            "name": "update_entity",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity_ops.delete_entity",
            "from": "entity_ops",
            "name": "delete_entity",
            "alias": null,
            "line": 7
          },
          {
            "module": "relationship_ops.create_relationship",
            "from": "relationship_ops",
            "name": "create_relationship",
            "alias": null,
            "line": 14
          },
          {
            "module": "relationship_ops.get_relationship",
            "from": "relationship_ops",
            "name": "get_relationship",
            "alias": null,
            "line": 14
          },
          {
            "module": "relationship_ops.update_relationship",
            "from": "relationship_ops",
            "name": "update_relationship",
            "alias": null,
            "line": 14
          },
          {
            "module": "relationship_ops.delete_relationship",
            "from": "relationship_ops",
            "name": "delete_relationship",
            "alias": null,
            "line": 14
          },
          {
            "module": "query_ops.search_entities",
            "from": "query_ops",
            "name": "search_entities",
            "alias": null,
            "line": 21
          },
          {
            "module": "query_ops.get_entity_relationships",
            "from": "query_ops",
            "name": "get_entity_relationships",
            "alias": null,
            "line": 21
          },
          {
            "module": "query_ops.execute_query",
            "from": "query_ops",
            "name": "execute_query",
            "alias": null,
            "line": 21
          },
          {
            "module": "path_ops.find_paths",
            "from": "path_ops",
            "name": "find_paths",
            "alias": null,
            "line": 27
          },
          {
            "module": "count_ops.count_entities",
            "from": "count_ops",
            "name": "count_entities",
            "alias": null,
            "line": 29
          },
          {
            "module": "count_ops.count_relationships",
            "from": "count_ops",
            "name": "count_relationships",
            "alias": null,
            "line": 29
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 59,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/relationship_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "create_relationship",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Create a new relationship.",
            "args": [
              "client",
              "source_id",
              "target_id",
              "rel_type",
              "properties"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationship",
            "line": 53,
            "async": true,
            "decorators": [],
            "docstring": "Get a relationship by ID.",
            "args": [
              "client",
              "relationship_id",
              "relationship_class"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_relationship",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing relationship.",
            "args": [
              "client",
              "relationship"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Delete a relationship by ID.",
            "args": [
              "client",
              "relationship_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/relationship_ops.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/relationship_ops.py",
            "line": 53,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/relationship_ops.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/relationship_ops.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 163,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/query_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "search_entities",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Search for entities matching a query.",
            "args": [
              "client",
              "query",
              "entity_type",
              "limit",
              "entity_class"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_entity_relationships",
            "line": 66,
            "async": true,
            "decorators": [],
            "docstring": "Get relationships for an entity.",
            "args": [
              "client",
              "entity_id",
              "relationship_type",
              "direction",
              "relationship_class",
              "entity_class"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "execute_query",
            "line": 174,
            "async": true,
            "decorators": [],
            "docstring": "Execute a raw Cypher query.",
            "args": [
              "client",
              "query",
              "params"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/query_ops.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/query_ops.py",
            "line": 66,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/query_ops.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/count_ops.py",
      "analysis": {
        "functions": [
          {
            "name": "count_entities",
            "line": 11,
            "async": true,
            "decorators": [],
            "docstring": "Count the number of entities in the graph.",
            "args": [
              "client"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_relationships",
            "line": 32,
            "async": true,
            "decorators": [],
            "docstring": "Count the number of relationships in the graph.",
            "args": [
              "client"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "count_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/count_ops.py",
            "line": 11,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "count_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/core/graph/neo4j/operations/count_ops.py",
            "line": 32,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 51,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the adapter.\n\nArgs:\n    component_id: Component identifier for Hermes\n    hermes_url: URL of the Hermes server (None for env var)\n    auto_register: Whether to auto-register with Hermes",
            "args": [
              "self",
              "component_id",
              "hermes_url",
              "auto_register"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 61,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the adapter and register with Hermes if enabled.",
            "args": [
              "self"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 75,
            "async": true,
            "decorators": [],
            "docstring": "Register this component with Hermes.\n\nReturns:\n    True if registration successful",
            "args": [
              "self"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "unregister_from_hermes",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Unregister this component from Hermes.\n\nReturns:\n    True if unregistration successful",
            "args": [
              "self"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_entity",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Add a new entity to the knowledge graph.\n\nArgs:\n    entity_type: Type of entity (person, organization, etc.)\n    name: Name of the entity\n    properties: Additional properties for the entity\n    confidence: Confidence in this entity (0.0 to 1.0)\n    source: Source of the entity information\n    \nReturns:\n    Entity ID",
            "args": [
              "self",
              "entity_type",
              "name",
              "properties",
              "confidence",
              "source"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_relationship",
            "line": 266,
            "async": true,
            "decorators": [],
            "docstring": "Add a new relationship to the knowledge graph.\n\nArgs:\n    source_id: Source entity ID\n    relationship_type: Type of relationship\n    target_id: Target entity ID\n    properties: Additional properties for the relationship\n    confidence: Confidence in this relationship (0.0 to 1.0)\n    source: Source of the relationship information\n    \nReturns:\n    Relationship ID",
            "args": [
              "self",
              "source_id",
              "relationship_type",
              "target_id",
              "properties",
              "confidence",
              "source"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_fact",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Verify a fact against the knowledge graph.\n\nArgs:\n    fact: Fact to verify (as a string)\n    confidence_threshold: Confidence threshold for verification\n    \nReturns:\n    Verification result with supporting evidence",
            "args": [
              "self",
              "fact",
              "confidence_threshold"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 356,
            "async": true,
            "decorators": [],
            "docstring": "Execute a raw Cypher query against the knowledge graph.\n\nArgs:\n    cypher_query: Cypher query string\n    params: Query parameters\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "cypher_query",
              "params"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_connections",
            "line": 373,
            "async": true,
            "decorators": [],
            "docstring": "Find connections between two entities by name.\n\nArgs:\n    entity_name: Source entity name\n    target_name: Target entity name\n    max_depth: Maximum path length\n    \nReturns:\n    List of paths connecting the entities",
            "args": [
              "self",
              "entity_name",
              "target_name",
              "max_depth"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_entity_graph",
            "line": 419,
            "async": true,
            "decorators": [],
            "docstring": "Get a subgraph centered on a specific entity.\n\nArgs:\n    entity_id: Center entity ID\n    depth: Depth of relationships to include\n    \nReturns:\n    Entity graph with nodes and edges",
            "args": [
              "self",
              "entity_id",
              "depth"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 474,
            "async": true,
            "decorators": [],
            "docstring": "Shut down the adapter and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesKnowledgeAdapter",
            "line": 35,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Knowledge adapter for integrating with the Hermes ecosystem.\n\nProvides a standard interface for other components to access\nAthena's knowledge graph functionality.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 19
          },
          {
            "module": "core.entity.Entity",
            "from": "core.entity",
            "name": "Entity",
            "alias": null,
            "line": 21
          },
          {
            "module": "core.relationship.Relationship",
            "from": "core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 22
          },
          {
            "module": "core.engine.get_knowledge_engine",
            "from": "core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 23
          },
          {
            "module": "hermes.utils.registration_helper.register_component",
            "from": "hermes.utils.registration_helper",
            "name": "register_component",
            "alias": null,
            "line": 27
          },
          {
            "module": "hermes.utils.registration_helper.unregister_component",
            "from": "hermes.utils.registration_helper",
            "name": "unregister_component",
            "alias": null,
            "line": 27
          },
          {
            "module": "hermes.utils.database_helper.DatabaseClient",
            "from": "hermes.utils.database_helper",
            "name": "DatabaseClient",
            "alias": null,
            "line": 28
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesKnowledgeAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 75,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.unregister_from_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.add_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 266,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.verify_fact",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 356,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.find_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 373,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.get_entity_graph",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 419,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/knowledge_adapter.py",
            "line": 474,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 480,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/register_capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "register_component",
            "line": 25,
            "async": true,
            "decorators": [],
            "docstring": "Mock register component.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_capability",
            "line": 30,
            "async": true,
            "decorators": [],
            "docstring": "Mock register capability.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_capabilities",
            "line": 37,
            "async": true,
            "decorators": [],
            "docstring": "Register Athena capabilities with Hermes.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesClient",
            "line": 22,
            "methods": [],
            "decorators": [],
            "docstring": "Mock Hermes client for testing.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.api.client.HermesClient",
            "from": "hermes.api.client",
            "name": "HermesClient",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesClient",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/register_capabilities.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesClient.register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/register_capabilities.py",
            "line": 25,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.register_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/register_capabilities.py",
            "line": 30,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/register_capabilities.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 129,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the adapter.\n\nArgs:\n    component_id: Component identifier for Hermes",
            "args": [
              "self",
              "component_id"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 35,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the adapter.",
            "args": [
              "self"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_fact",
            "line": 41,
            "async": true,
            "decorators": [],
            "docstring": "Verify a fact against the knowledge graph.\n\nArgs:\n    fact: Fact to verify (as a string)\n    confidence_threshold: Confidence threshold for verification\n    \nReturns:\n    Tuple of (is_verified, supporting_entity)",
            "args": [
              "self",
              "fact",
              "confidence_threshold"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "extract_entities",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Extract entities from text.\n\nArgs:\n    text: Text to extract entities from\n    entity_types: Optional list of entity types to extract\n    \nReturns:\n    List of extracted entities",
            "args": [
              "self",
              "text",
              "entity_types"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "enrich_memory",
            "line": 112,
            "async": true,
            "decorators": [],
            "docstring": "Enrich memory with knowledge from the graph.\n\nArgs:\n    memory_content: Memory content to enrich\n    \nReturns:\n    Enriched memory with knowledge metadata",
            "args": [
              "self",
              "memory_content"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_related_knowledge",
            "line": 153,
            "async": true,
            "decorators": [],
            "docstring": "Get knowledge related to a specific entity.\n\nArgs:\n    entity_id: Entity ID to get related knowledge for\n    max_depth: Maximum depth of relationship traversal\n    \nReturns:\n    Dictionary of related entities and relationships",
            "args": [
              "self",
              "entity_id",
              "max_depth"
            ],
            "class": "HermesKnowledgeAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesKnowledgeAdapter",
            "line": 17,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Knowledge adapter for integrating with Hermes memory system.\n\nEnables fact verification and knowledge-grounded memory operations\nthrough integration with Hermes memory systems.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "core.entity.Entity",
            "from": "core.entity",
            "name": "Entity",
            "alias": null,
            "line": 11
          },
          {
            "module": "core.relationship.Relationship",
            "from": "core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.engine.get_knowledge_engine",
            "from": "core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesKnowledgeAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
            "line": 35,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.verify_fact",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
            "line": 41,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.extract_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.enrich_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
            "line": 112,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HermesKnowledgeAdapter.get_related_knowledge",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/integrations/hermes/memory_adapter.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 200,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/query.py",
      "analysis": {
        "functions": [
          {
            "name": "execute_query",
            "line": 22,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a query using the specified retrieval mode.\n\nSupports multiple query modes:\n- naive: Simple keyword-based search without advanced knowledge graph integration\n- local: Entity-focused retrieval that prioritizes relevant entities\n- global: Relationship-focused retrieval for understanding connections\n- hybrid: Combined entity and relationship retrieval\n- mix: Integrated graph and vector retrieval (most advanced)",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_query_modes",
            "line": 67,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about available query modes.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "execute_query",
            "line": 22,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_available_query_modes",
            "line": 67,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.core.query.modes.QueryParameters",
            "from": "tekton.core.query.modes",
            "name": "QueryParameters",
            "alias": null,
            "line": 10
          },
          {
            "module": "athena.api.models.query.QueryRequest",
            "from": "athena.api.models.query",
            "name": "QueryRequest",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.api.models.query.QueryResponse",
            "from": "athena.api.models.query",
            "name": "QueryResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.core.engine.get_knowledge_engine",
            "from": "athena.core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 16
          },
          {
            "module": "athena.core.query_engine.QueryEngine",
            "from": "athena.core.query_engine",
            "name": "QueryEngine",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/query.py",
            "line": 22,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_available_query_modes",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/query.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 99,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
      "analysis": {
        "functions": [
          {
            "name": "get_engine",
            "line": 25,
            "async": true,
            "decorators": [],
            "docstring": "Dependency to get the knowledge engine.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_status",
            "line": 30,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the status of the knowledge graph.",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_entity",
            "line": 37,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new entity in the knowledge graph.",
            "args": [
              "entity_data",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 50,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get an entity by ID.",
            "args": [
              "entity_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 61,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing entity.",
            "args": [
              "entity_id",
              "entity_data",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 81,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete an entity.",
            "args": [
              "entity_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "search_entities",
            "line": 92,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Search for entities matching a query.",
            "args": [
              "query",
              "entity_type",
              "limit",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_relationship",
            "line": 105,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new relationship between entities.",
            "args": [
              "relationship_data",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationship",
            "line": 118,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a relationship by ID.",
            "args": [
              "relationship_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_relationship",
            "line": 129,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing relationship.",
            "args": [
              "relationship_id",
              "relationship_data",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 149,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a relationship.",
            "args": [
              "relationship_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_entity_relationships",
            "line": 160,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get relationships for an entity.",
            "args": [
              "entity_id",
              "relationship_type",
              "direction",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_query",
            "line": 185,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a raw Cypher query.",
            "args": [
              "query_data",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_path",
            "line": 203,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Find paths between two entities.",
            "args": [
              "source_id",
              "target_id",
              "max_depth",
              "engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_stats",
            "line": 231,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get statistics about the knowledge graph.",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "get_status",
            "line": 30,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_entity",
            "line": 37,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_entity",
            "line": 50,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_entity",
            "line": 61,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_entity",
            "line": 81,
            "method": "@delete",
            "async": true
          },
          {
            "name": "search_entities",
            "line": 92,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_relationship",
            "line": 105,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_relationship",
            "line": 118,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_relationship",
            "line": 129,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_relationship",
            "line": 149,
            "method": "@delete",
            "async": true
          },
          {
            "name": "get_entity_relationships",
            "line": 160,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_query",
            "line": 185,
            "method": "@post",
            "async": true
          },
          {
            "name": "find_path",
            "line": 203,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_stats",
            "line": 231,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.engine.get_knowledge_engine",
            "from": "core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 14
          },
          {
            "module": "core.engine.KnowledgeEngine",
            "from": "core.engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 14
          },
          {
            "module": "core.entity.Entity",
            "from": "core.entity",
            "name": "Entity",
            "alias": null,
            "line": 15
          },
          {
            "module": "core.relationship.Relationship",
            "from": "core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 25,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_status",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 30,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 92,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 118,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "get_entity_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 160,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 185,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "find_path",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 203,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/knowledge_graph.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 242,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 10,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "initialize_templates",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Initialize prompt templates for Athena.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_knowledge_context",
            "line": 207,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Get relevant knowledge context for a query from the knowledge graph.\n\nThis endpoint retrieves entities, relationships, and structured context\nthat are relevant to the given query, to be used for enhancing LLM responses.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "knowledge_chat",
            "line": 257,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Generate a knowledge-enhanced chat response using the LLM.\n\nThis endpoint enhances the LLM response with information from the knowledge graph.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream_knowledge_chat",
            "line": 323,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Stream a knowledge-enhanced chat response using the LLM.\n\nThis endpoint enhances the LLM response with information from the knowledge graph\nand streams the response as it's generated.",
            "args": [
              "request",
              "background_tasks"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_stream",
            "line": 332,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_stream_chunk",
            "line": 365,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "chunk"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "extract_entities",
            "line": 416,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Extract entities from text using the LLM.\n\nThis endpoint uses the LLM to identify and extract entities from the provided text.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "infer_relationships",
            "line": 487,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Infer relationships between entities using the LLM.\n\nThis endpoint uses the LLM to identify and infer relationships between the provided entities.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "explain_entity",
            "line": 570,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Generate an explanation of an entity using the LLM.\n\nThis endpoint uses the LLM to generate a comprehensive explanation of the specified entity.",
            "args": [
              "entity_id",
              "model",
              "provider"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "translate_query",
            "line": 639,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Translate a natural language query to a graph query language (Cypher).\n\nThis endpoint uses the LLM to convert natural language queries into executable graph queries.",
            "args": [
              "query",
              "model",
              "provider"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "get_knowledge_context",
            "line": 207,
            "method": "@post",
            "async": true
          },
          {
            "name": "knowledge_chat",
            "line": 257,
            "method": "@post",
            "async": true
          },
          {
            "name": "stream_knowledge_chat",
            "line": 323,
            "method": "@post",
            "async": true
          },
          {
            "name": "extract_entities",
            "line": 416,
            "method": "@post",
            "async": true
          },
          {
            "name": "infer_relationships",
            "line": 487,
            "method": "@post",
            "async": true
          },
          {
            "name": "explain_entity",
            "line": 570,
            "method": "@post",
            "async": true
          },
          {
            "name": "translate_query",
            "line": 639,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.BackgroundTasks",
            "from": "fastapi",
            "name": "BackgroundTasks",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.responses.StreamingResponse",
            "from": "fastapi.responses",
            "name": "StreamingResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 15
          },
          {
            "module": "athena.api.models.llm.KnowledgeContextRequest",
            "from": "athena.api.models.llm",
            "name": "KnowledgeContextRequest",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.KnowledgeContextResponse",
            "from": "athena.api.models.llm",
            "name": "KnowledgeContextResponse",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.KnowledgeChatRequest",
            "from": "athena.api.models.llm",
            "name": "KnowledgeChatRequest",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.KnowledgeChatResponse",
            "from": "athena.api.models.llm",
            "name": "KnowledgeChatResponse",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.EntityExtractionRequest",
            "from": "athena.api.models.llm",
            "name": "EntityExtractionRequest",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.EntityExtractionResponse",
            "from": "athena.api.models.llm",
            "name": "EntityExtractionResponse",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.RelationshipInferenceRequest",
            "from": "athena.api.models.llm",
            "name": "RelationshipInferenceRequest",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.api.models.llm.RelationshipInferenceResponse",
            "from": "athena.api.models.llm",
            "name": "RelationshipInferenceResponse",
            "alias": null,
            "line": 24
          },
          {
            "module": "athena.core.engine.get_knowledge_engine",
            "from": "athena.core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 34
          },
          {
            "module": "athena.core.entity.Entity",
            "from": "athena.core.entity",
            "name": "Entity",
            "alias": null,
            "line": 35
          },
          {
            "module": "athena.core.relationship.Relationship",
            "from": "athena.core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 36
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "initialize_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_knowledge_context",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 207,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "knowledge_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 257,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "stream_knowledge_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 323,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "generate_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 332,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_stream_chunk",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 365,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "extract_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 416,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "infer_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 487,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "explain_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 570,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "translate_query",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/llm_integration.py",
            "line": 639,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 693,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/visualization.py",
      "analysis": {
        "functions": [
          {
            "name": "get_visualization_data",
            "line": 25,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get visualization data for the knowledge graph.\n\nThis endpoint provides data structured for visualization in D3.js or similar tools.",
            "args": [
              "limit",
              "entity_type",
              "relationship_type",
              "min_confidence",
              "center_node",
              "depth",
              "layout"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_subgraph",
            "line": 104,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a subgraph around a specific entity.\n\nThis endpoint retrieves a subgraph centered on the specified entity,\nincluding all connected entities up to the specified depth.",
            "args": [
              "entity_id",
              "depth",
              "relationship_type",
              "min_confidence",
              "layout"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_custom_visualization",
            "line": 138,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a custom visualization based on specific requirements.\n\nThis endpoint allows for more complex filtering and customization\nof the graph visualization.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_available_layouts",
            "line": 206,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a list of available graph layout algorithms.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_node_subgraph",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "Helper function to get a subgraph around a center node.\n\nArgs:\n    center_node: ID of the central entity\n    depth: How many relationship hops to include\n    relationship_type: Filter relationships by type\n    min_confidence: Minimum confidence threshold for relationships\n    \nReturns:\n    Dictionary with entities and relationships lists",
            "args": [
              "center_node",
              "depth",
              "relationship_type",
              "min_confidence"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "get_visualization_data",
            "line": 25,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_subgraph",
            "line": 104,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_custom_visualization",
            "line": 138,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_available_layouts",
            "line": 206,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "athena.api.models.visualization.GraphVisualizationRequest",
            "from": "athena.api.models.visualization",
            "name": "GraphVisualizationRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.api.models.visualization.GraphVisualizationResponse",
            "from": "athena.api.models.visualization",
            "name": "GraphVisualizationResponse",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.api.models.visualization.SubgraphRequest",
            "from": "athena.api.models.visualization",
            "name": "SubgraphRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.api.models.visualization.SubgraphResponse",
            "from": "athena.api.models.visualization",
            "name": "SubgraphResponse",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.api.models.visualization.VisualizationLayout",
            "from": "athena.api.models.visualization",
            "name": "VisualizationLayout",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.core.engine.get_knowledge_engine",
            "from": "athena.core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_visualization_data",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/visualization.py",
            "line": 25,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_subgraph",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/visualization.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_custom_visualization",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/visualization.py",
            "line": 138,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_available_layouts",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/visualization.py",
            "line": 206,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_node_subgraph",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/visualization.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 285,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
      "analysis": {
        "functions": [
          {
            "name": "process_message",
            "line": 77,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Process an MCP request through Athena.\n\nThis endpoint accepts MCP requests and processes them using Athena's knowledge graph capabilities.",
            "args": [
              "request",
              "knowledge_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities_func",
            "line": 164,
            "async": true,
            "decorators": [],
            "docstring": "Get Athena MCP capabilities.",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools_func",
            "line": 168,
            "async": true,
            "decorators": [],
            "docstring": "Get Athena MCP tools.",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_request_func",
            "line": 172,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP request.",
            "args": [
              "engine",
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "entity_search_handler",
            "line": 230,
            "async": true,
            "decorators": [],
            "docstring": "Handle SearchEntities tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity_handler",
            "line": 267,
            "async": true,
            "decorators": [],
            "docstring": "Handle GetEntityById tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationships_handler",
            "line": 293,
            "async": true,
            "decorators": [],
            "docstring": "Handle GetEntityRelationships tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_paths_handler",
            "line": 336,
            "async": true,
            "decorators": [],
            "docstring": "Handle FindEntityPaths tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "merge_entities_handler",
            "line": 389,
            "async": true,
            "decorators": [],
            "docstring": "Handle MergeEntities tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_handler",
            "line": 427,
            "async": true,
            "decorators": [],
            "docstring": "Handle QueryKnowledgeGraph tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "naive_query_handler",
            "line": 470,
            "async": true,
            "decorators": [],
            "docstring": "Handle NaiveQuery tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "local_query_handler",
            "line": 491,
            "async": true,
            "decorators": [],
            "docstring": "Handle LocalQuery tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "global_query_handler",
            "line": 514,
            "async": true,
            "decorators": [],
            "docstring": "Handle GlobalQuery tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "hybrid_query_handler",
            "line": 539,
            "async": true,
            "decorators": [],
            "docstring": "Handle HybridQuery tool requests.",
            "args": [
              "engine",
              "entity_manager",
              "query_engine",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AthenaMCPRequest",
            "line": 64,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for Athena MCP API.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AthenaMCPResponse",
            "line": 69,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for Athena MCP API.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "process_message",
            "line": 77,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPResponse",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPResponse",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_tool",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_tool",
            "alias": null,
            "line": 33
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_processor",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_processor",
            "alias": null,
            "line": 33
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.MCPProcessingError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "MCPProcessingError",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.create_mcp_router",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "create_mcp_router",
            "alias": null,
            "line": 35
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_standard_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_standard_mcp_endpoints",
            "alias": null,
            "line": 35
          },
          {
            "module": "athena.api.dependencies.get_knowledge_engine",
            "from": "athena.api.dependencies",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 44
          },
          {
            "module": "athena.core.engine.KnowledgeEngine",
            "from": "athena.core.engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 45
          },
          {
            "module": "athena.core.entity_manager.EntityManager",
            "from": "athena.core.entity_manager",
            "name": "EntityManager",
            "alias": null,
            "line": 46
          },
          {
            "module": "athena.core.query_engine.QueryEngine",
            "from": "athena.core.query_engine",
            "name": "QueryEngine",
            "alias": null,
            "line": 47
          },
          {
            "module": "athena.core.mcp.get_all_tools",
            "from": "athena.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 50
          },
          {
            "module": "athena.core.mcp.get_all_capabilities",
            "from": "athena.core.mcp",
            "name": "get_all_capabilities",
            "alias": null,
            "line": 50
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 120
          },
          {
            "module": "tekton.core.query.modes.QueryParameters",
            "from": "tekton.core.query.modes",
            "name": "QueryParameters",
            "alias": null,
            "line": 120
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 439
          },
          {
            "module": "tekton.core.query.modes.QueryParameters",
            "from": "tekton.core.query.modes",
            "name": "QueryParameters",
            "alias": null,
            "line": 439
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AthenaMCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 64,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AthenaMCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 69,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_capabilities_func",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 164,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_tools_func",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 168,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "process_request_func",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 172,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "entity_search_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 230,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_relationships_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 293,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "find_paths_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 336,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "merge_entities_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 389,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 427,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "naive_query_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 470,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "local_query_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 491,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "global_query_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 514,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "hybrid_query_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/mcp.py",
            "line": 539,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 578,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
      "analysis": {
        "functions": [
          {
            "name": "create_entity",
            "line": 25,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new entity in the knowledge graph.",
            "args": [
              "entity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entity",
            "line": 45,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get an entity by ID.",
            "args": [
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entity",
            "line": 58,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing entity.",
            "args": [
              "entity_id",
              "entity_update"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_entity",
            "line": 82,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete an entity by ID.",
            "args": [
              "entity_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "search_entities",
            "line": 101,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Search for entities matching the query.",
            "args": [
              "query",
              "entity_type",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "merge_entities",
            "line": 116,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Merge multiple entities into a single entity.\n\nThis endpoint allows merging multiple entities with various strategies\nfor handling field conflicts.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_duplicates",
            "line": 139,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Find potential duplicate entities in the knowledge graph.",
            "args": [
              "entity_type",
              "confidence_threshold",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "create_entity",
            "line": 25,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_entity",
            "line": 45,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_entity",
            "line": 58,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_entity",
            "line": 82,
            "method": "@delete",
            "async": true
          },
          {
            "name": "search_entities",
            "line": 101,
            "method": "@get",
            "async": true
          },
          {
            "name": "merge_entities",
            "line": 116,
            "method": "@post",
            "async": true
          },
          {
            "name": "find_duplicates",
            "line": 139,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.core.query.modes.QueryParameters",
            "from": "tekton.core.query.modes",
            "name": "QueryParameters",
            "alias": null,
            "line": 10
          },
          {
            "module": "athena.api.models.entity.EntityCreate",
            "from": "athena.api.models.entity",
            "name": "EntityCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.api.models.entity.EntityResponse",
            "from": "athena.api.models.entity",
            "name": "EntityResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.api.models.entity.EntityMergeRequest",
            "from": "athena.api.models.entity",
            "name": "EntityMergeRequest",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.api.models.entity.EntityMergeResponse",
            "from": "athena.api.models.entity",
            "name": "EntityMergeResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.api.models.entity.EntitySearchResult",
            "from": "athena.api.models.entity",
            "name": "EntitySearchResult",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.core.engine.get_knowledge_engine",
            "from": "athena.core.engine",
            "name": "get_knowledge_engine",
            "alias": null,
            "line": 19
          },
          {
            "module": "athena.core.entity_manager.EntityManager",
            "from": "athena.core.entity_manager",
            "name": "EntityManager",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 25,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 45,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 82,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "search_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 101,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "merge_entities",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "find_duplicates",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/endpoints/entities.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 159,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/query.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "QueryRequest",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for query execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "QueryResponse",
            "line": 61,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for query execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Literal",
            "from": "typing",
            "name": "Literal",
            "alias": null,
            "line": 7
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.core.query.modes.QueryMode",
            "from": "tekton.core.query.modes",
            "name": "QueryMode",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "QueryRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/query.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "QueryResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/query.py",
            "line": 61,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 71,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "entity.EntityCreate",
            "from": "entity",
            "name": "EntityCreate",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity.EntityResponse",
            "from": "entity",
            "name": "EntityResponse",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity.EntityUpdate",
            "from": "entity",
            "name": "EntityUpdate",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity.EntitySearchResult",
            "from": "entity",
            "name": "EntitySearchResult",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity.EntityMergeRequest",
            "from": "entity",
            "name": "EntityMergeRequest",
            "alias": null,
            "line": 7
          },
          {
            "module": "entity.EntityMergeResponse",
            "from": "entity",
            "name": "EntityMergeResponse",
            "alias": null,
            "line": 7
          },
          {
            "module": "query.QueryRequest",
            "from": "query",
            "name": "QueryRequest",
            "alias": null,
            "line": 16
          },
          {
            "module": "query.QueryResponse",
            "from": "query",
            "name": "QueryResponse",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 30,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "KnowledgeContextRequest",
            "line": 16,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for retrieving knowledge context.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "KnowledgeContextResponse",
            "line": 24,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for knowledge context.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "KnowledgeChatRequest",
            "line": 37,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for knowledge-enhanced chat.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "KnowledgeChatResponse",
            "line": 47,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for knowledge-enhanced chat.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityExtractionRequest",
            "line": 60,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for entity extraction.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityExtractionResponse",
            "line": 69,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for entity extraction.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RelationshipInferenceRequest",
            "line": 81,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for relationship inference.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RelationshipInferenceResponse",
            "line": 90,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for relationship inference.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "QueryTranslationRequest",
            "line": 102,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for natural language query translation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "QueryTranslationResponse",
            "line": 110,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for query translation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.ConfigDict",
            "from": "pydantic",
            "name": "ConfigDict",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "athena.core.entity.Entity",
            "from": "athena.core.entity",
            "name": "Entity",
            "alias": null,
            "line": 13
          },
          {
            "module": "athena.core.relationship.Relationship",
            "from": "athena.core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "KnowledgeContextRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "KnowledgeContextResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "KnowledgeChatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "KnowledgeChatResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityExtractionRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 60,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityExtractionResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 69,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RelationshipInferenceRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 81,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RelationshipInferenceResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 90,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "QueryTranslationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 102,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "QueryTranslationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/llm.py",
            "line": 110,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 116,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "VisualizationLayout",
            "line": 17,
            "methods": [],
            "decorators": [],
            "docstring": "Graph layout algorithms.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "GraphVisualizationRequest",
            "line": 26,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for custom graph visualization.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "GraphVisualizationResponse",
            "line": 39,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for graph visualization data.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SubgraphRequest",
            "line": 49,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for subgraph visualization.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SubgraphResponse",
            "line": 59,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for subgraph visualization.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExportFormat",
            "line": 71,
            "methods": [],
            "decorators": [],
            "docstring": "Export format options.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExportRequest",
            "line": 81,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for graph export.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.ConfigDict",
            "from": "pydantic",
            "name": "ConfigDict",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "athena.core.entity.Entity",
            "from": "athena.core.entity",
            "name": "Entity",
            "alias": null,
            "line": 14
          },
          {
            "module": "athena.core.relationship.Relationship",
            "from": "athena.core.relationship",
            "name": "Relationship",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VisualizationLayout",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "GraphVisualizationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "GraphVisualizationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 39,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SubgraphRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 49,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SubgraphResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 59,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExportFormat",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 71,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExportRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/visualization.py",
            "line": 81,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 88,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
      "analysis": {
        "functions": [
          {
            "name": "to_domain_entity",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Convert API model to domain entity.",
            "args": [
              "self",
              "entity_id"
            ],
            "class": "EntityCreate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_domain_entity",
            "line": 59,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert domain entity to API response model.",
            "args": [
              "cls",
              "entity"
            ],
            "class": "EntityResponse",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EntityBase",
            "line": 14,
            "methods": [],
            "decorators": [],
            "docstring": "Base model for entity data.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityCreate",
            "line": 20,
            "methods": [
              "to_domain_entity"
            ],
            "decorators": [],
            "docstring": "Request model for entity creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityUpdate",
            "line": 43,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for entity updates.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityResponse",
            "line": 49,
            "methods": [
              "from_domain_entity"
            ],
            "decorators": [],
            "docstring": "Response model for entity data.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntitySearchResult",
            "line": 73,
            "methods": [],
            "decorators": [],
            "docstring": "Search result for entities.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityMergeRequest",
            "line": 79,
            "methods": [],
            "decorators": [],
            "docstring": "Request for merging entities.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EntityMergeResponse",
            "line": 98,
            "methods": [],
            "decorators": [],
            "docstring": "Response after merging entities.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "athena.core.entity.Entity",
            "from": "athena.core.entity",
            "name": "Entity",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EntityBase",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EntityCreate.to_domain_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "EntityUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 43,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 49,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EntityResponse.from_domain_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "EntitySearchResult",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 73,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityMergeRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EntityMergeResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Athena/athena/api/models/entity.py",
            "line": 98,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 101,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 54,
    "total_functions": 252,
    "total_classes": 48,
    "total_landmarks": 277,
    "patterns": [
      "fastapi",
      "singleton",
      "async",
      "error_handling",
      "mcp",
      "websocket"
    ],
    "api_endpoints": 39,
    "mcp_tools": 20
  }
}