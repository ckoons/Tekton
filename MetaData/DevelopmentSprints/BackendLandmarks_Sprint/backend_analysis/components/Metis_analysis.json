{
  "component": "Metis",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/setup.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 3
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 3
          },
          {
            "module": "os",
            "alias": null,
            "line": 4
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 35,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/config.py",
      "analysis": {
        "functions": [
          {
            "name": "get_config",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Get the configuration for Metis.\n\nReturns:\n    Dict[str, Any]: Configuration dictionary with all settings",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.utils.port_config.get_metis_port",
            "from": "tekton.utils.port_config",
            "name": "get_metis_port",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.utils.port_config.get_hermes_port",
            "from": "tekton.utils.port_config",
            "name": "get_hermes_port",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.utils.port_config.get_telos_port",
            "from": "tekton.utils.port_config",
            "name": "get_telos_port",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.utils.port_config.get_prometheus_port",
            "from": "tekton.utils.port_config",
            "name": "get_prometheus_port",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_config",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/config.py",
            "line": 46,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 80,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "core.mcp.tools.analyze_task_complexity",
            "from": "core.mcp.tools",
            "name": "analyze_task_complexity",
            "alias": null,
            "line": 2
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 3,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/__main__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 2
          },
          {
            "module": "sys",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 23,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/examples/ai_features_demo.py",
      "analysis": {
        "functions": [
          {
            "name": "demo_ai_features",
            "line": 28,
            "async": true,
            "decorators": [],
            "docstring": "Demonstrate Metis AI features",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.core.task_manager.TaskManager",
            "from": "metis.core.task_manager",
            "name": "TaskManager",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 18
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 19
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 19
          },
          {
            "module": "metis.core.mcp.tools.get_task_manager",
            "from": "metis.core.mcp.tools",
            "name": "get_task_manager",
            "alias": null,
            "line": 20
          },
          {
            "module": "metis.core.mcp.tools.decompose_task",
            "from": "metis.core.mcp.tools",
            "name": "decompose_task",
            "alias": null,
            "line": 20
          },
          {
            "module": "metis.core.mcp.tools.analyze_task_complexity",
            "from": "metis.core.mcp.tools",
            "name": "analyze_task_complexity",
            "alias": null,
            "line": 20
          },
          {
            "module": "metis.core.mcp.tools.suggest_task_order",
            "from": "metis.core.mcp.tools",
            "name": "suggest_task_order",
            "alias": null,
            "line": 20
          },
          {
            "module": "metis.core.mcp.tools.generate_subtasks",
            "from": "metis.core.mcp.tools",
            "name": "generate_subtasks",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "demo_ai_features",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/examples/ai_features_demo.py",
            "line": 28,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 200,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/telos_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Telos client.",
            "args": [
              "self"
            ],
            "class": "TelosClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_session",
            "line": 30,
            "async": true,
            "decorators": [],
            "docstring": "Get or create an aiohttp session for HTTP requests.",
            "args": [
              "self"
            ],
            "class": "TelosClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_requirement",
            "line": 36,
            "async": true,
            "decorators": [],
            "docstring": "Get a requirement from Telos by ID.\n\nArgs:\n    requirement_id: ID of the requirement to get\n    \nReturns:\n    Optional[Dict[str, Any]]: Requirement data if found, None otherwise",
            "args": [
              "self",
              "requirement_id"
            ],
            "class": "TelosClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_requirements",
            "line": 69,
            "async": true,
            "decorators": [],
            "docstring": "Search for requirements in Telos.\n\nArgs:\n    query: Search query\n    status: Filter by status\n    category: Filter by category\n    page: Page number\n    page_size: Page size\n    \nReturns:\n    Tuple[List[Dict[str, Any]], int]: List of requirements and total count",
            "args": [
              "self",
              "query",
              "status",
              "category",
              "page",
              "page_size"
            ],
            "class": "TelosClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_requirement_reference",
            "line": 129,
            "async": true,
            "decorators": [],
            "docstring": "Create a requirement reference from a Telos requirement.\n\nArgs:\n    requirement_id: ID of the requirement\n    \nReturns:\n    Optional[RequirementRef]: Requirement reference if created, None otherwise",
            "args": [
              "self",
              "requirement_id"
            ],
            "class": "TelosClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 156,
            "async": true,
            "decorators": [],
            "docstring": "Close the HTTP session.",
            "args": [
              "self"
            ],
            "class": "TelosClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TelosClient",
            "line": 17,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with the Telos requirements management system.\n\nThis class provides methods for retrieving requirements from Telos\nand synchronizing them with tasks in Metis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "aiohttp",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "metis.utils.hermes_helper.hermes_client",
            "from": "metis.utils.hermes_helper",
            "name": "hermes_client",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.config.config",
            "from": "metis.config",
            "name": "config",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.models.requirement.RequirementRef",
            "from": "metis.models.requirement",
            "name": "RequirementRef",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TelosClient",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/telos_integration.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TelosClient.get_requirement",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/telos_integration.py",
            "line": 36,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TelosClient.search_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/telos_integration.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "TelosClient.create_requirement_reference",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/telos_integration.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TelosClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/telos_integration.py",
            "line": 156,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 164,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
      "analysis": {
        "functions": [
          {
            "name": "create_standard_factor",
            "line": 89,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a standard complexity factor.\n\nArgs:\n    factor_key: Key of standard factor to create\n    score: Initial score for the factor (1-5)\n    \nReturns:\n    ComplexityFactor: Created factor\n    \nRaises:\n    ValueError: If factor_key is not a standard factor",
            "args": [
              "factor_key",
              "score"
            ],
            "class": "ComplexityAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 112,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a complexity template from a standard template.\n\nArgs:\n    template_key: Key of standard template to create\n    \nReturns:\n    ComplexityTemplate: Created template\n    \nRaises:\n    ValueError: If template_key is not a standard template",
            "args": [
              "template_key"
            ],
            "class": "ComplexityAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_score_from_template",
            "line": 145,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a complexity score from a standard template.\n\nArgs:\n    template_key: Key of standard template to use\n    \nReturns:\n    ComplexityScore: Created score\n    \nRaises:\n    ValueError: If template_key is not a standard template",
            "args": [
              "template_key"
            ],
            "class": "ComplexityAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_empty_score",
            "line": 162,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create an empty complexity score.\n\nReturns:\n    ComplexityScore: Empty score",
            "args": [],
            "class": "ComplexityAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "estimate_from_requirements",
            "line": 172,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Estimate complexity based on number of requirements, their complexity,\nand number of dependencies.\n\nArgs:\n    num_requirements: Number of requirements\n    requirement_complexity: Average complexity of requirements (1-5)\n    dependencies: Number of dependencies\n    \nReturns:\n    Tuple[ComplexityScore, str]: Complexity score and explanation",
            "args": [
              "num_requirements",
              "requirement_complexity",
              "dependencies"
            ],
            "class": "ComplexityAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComplexityAnalyzer",
            "line": 80,
            "methods": [
              "create_standard_factor",
              "create_template",
              "create_score_from_template",
              "create_empty_score",
              "estimate_from_requirements"
            ],
            "decorators": [],
            "docstring": "Analyzer for evaluating task complexity.\n\nThis class provides tools for creating and managing complexity scores\nfor tasks, making consistent complexity evaluations easier.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "metis.models.complexity.ComplexityFactor",
            "from": "metis.models.complexity",
            "name": "ComplexityFactor",
            "alias": null,
            "line": 9
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 9
          },
          {
            "module": "metis.models.complexity.ComplexityTemplate",
            "from": "metis.models.complexity",
            "name": "ComplexityTemplate",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ComplexityAnalyzer",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
            "line": 80,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComplexityAnalyzer.create_standard_factor",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
            "line": 89,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityAnalyzer.create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
            "line": 112,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityAnalyzer.create_score_from_template",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
            "line": 145,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityAnalyzer.create_empty_score",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
            "line": 162,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityAnalyzer.estimate_from_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/complexity.py",
            "line": 172,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 222,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "metis.core.task_manager.TaskManager",
            "from": "metis.core.task_manager",
            "name": "TaskManager",
            "alias": null,
            "line": 3
          },
          {
            "module": "metis.core.storage.InMemoryStorage",
            "from": "metis.core.storage",
            "name": "InMemoryStorage",
            "alias": null,
            "line": 4
          },
          {
            "module": "metis.core.complexity.ComplexityAnalyzer",
            "from": "metis.core.complexity",
            "name": "ComplexityAnalyzer",
            "alias": null,
            "line": 5
          },
          {
            "module": "metis.core.dependency.DependencyResolver",
            "from": "metis.core.dependency",
            "name": "DependencyResolver",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.core.telos_integration.TelosClient",
            "from": "metis.core.telos_integration",
            "name": "TelosClient",
            "alias": null,
            "line": 7
          },
          {
            "module": "metis.core.telos_integration.telos_client",
            "from": "metis.core.telos_integration",
            "name": "telos_client",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 16,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 13,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the connection manager.",
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 18,
            "async": true,
            "decorators": [],
            "docstring": "Connect a new WebSocket client.\n\nArgs:\n    websocket: WebSocket connection\n    client_id: Client ID",
            "args": [
              "self",
              "websocket",
              "client_id"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Disconnect a WebSocket client.\n\nArgs:\n    client_id: Client ID",
            "args": [
              "self",
              "client_id"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect_all",
            "line": 42,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect all WebSocket clients.",
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "subscribe",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe a client to event types.\n\nArgs:\n    client_id: Client ID\n    event_types: List of event types to subscribe to",
            "args": [
              "self",
              "client_id",
              "event_types"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "unsubscribe",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Unsubscribe a client from event types.\n\nArgs:\n    client_id: Client ID\n    event_types: List of event types to unsubscribe from",
            "args": [
              "self",
              "client_id",
              "event_types"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "broadcast",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast a message to all connected clients.\n\nArgs:\n    message: Message to broadcast (should have 'event' and data fields)",
            "args": [
              "self",
              "message"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "broadcast_to_subscribers",
            "line": 105,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast an event to all subscribed clients.\n\nArgs:\n    event_type: Event type\n    data: Event data",
            "args": [
              "self",
              "event_type",
              "data"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ConnectionManager",
            "line": 10,
            "methods": [
              "__init__",
              "disconnect",
              "subscribe",
              "unsubscribe"
            ],
            "decorators": [],
            "docstring": "Manager for WebSocket connections.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 2
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 4
          },
          {
            "module": "logging",
            "alias": null,
            "line": 5
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ConnectionManager",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 10,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ConnectionManager.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 18,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.disconnect_all",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 42,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 54,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ConnectionManager.unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.broadcast",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.broadcast_to_subscribers",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/connection_manager.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 135,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the TaskManager.\n\nArgs:\n    storage: Optional storage implementation (defaults to InMemoryStorage)",
            "args": [
              "self",
              "storage"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 52,
            "async": true,
            "decorators": [],
            "docstring": "Create a new task.\n\nArgs:\n    task_data: Dictionary of task data\n    \nReturns:\n    Task: Created task\n    \nRaises:\n    ValueError: If task data is invalid",
            "args": [
              "self",
              "task_data"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Get a task by ID.\n\nArgs:\n    task_id: ID of the task to retrieve\n    \nReturns:\n    Optional[Task]: Task if found, None otherwise",
            "args": [
              "self",
              "task_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Update a task by ID.\n\nArgs:\n    task_id: ID of the task to update\n    updates: Dictionary of field updates\n    \nReturns:\n    Optional[Task]: Updated task if found, None otherwise\n    \nRaises:\n    ValueError: If updates are invalid",
            "args": [
              "self",
              "task_id",
              "updates"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_task",
            "line": 120,
            "async": true,
            "decorators": [],
            "docstring": "Delete a task by ID.\n\nArgs:\n    task_id: ID of the task to delete\n    \nReturns:\n    bool: True if task was deleted, False if not found\n    \nRaises:\n    ValueError: If task cannot be deleted due to dependencies",
            "args": [
              "self",
              "task_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tasks",
            "line": 149,
            "async": true,
            "decorators": [],
            "docstring": "List tasks with optional filtering.\n\nArgs:\n    status: Filter by status\n    priority: Filter by priority\n    assignee: Filter by assignee\n    tag: Filter by tag\n    search: Search term for title/description\n    page: Page number (1-based)\n    page_size: Number of items per page\n    \nReturns:\n    Tuple[List[Task], int]: List of tasks and total count",
            "args": [
              "self",
              "status",
              "priority",
              "assignee",
              "tag",
              "search",
              "page",
              "page_size"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_subtask",
            "line": 186,
            "async": true,
            "decorators": [],
            "docstring": "Add a subtask to a task.\n\nArgs:\n    task_id: ID of the parent task\n    subtask_data: Dictionary of subtask data\n    \nReturns:\n    Optional[Subtask]: Created subtask if parent task exists, None otherwise\n    \nRaises:\n    ValueError: If subtask data is invalid",
            "args": [
              "self",
              "task_id",
              "subtask_data"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_subtask",
            "line": 221,
            "async": true,
            "decorators": [],
            "docstring": "Update a subtask.\n\nArgs:\n    task_id: ID of the parent task\n    subtask_id: ID of the subtask to update\n    updates: Dictionary of field updates\n    \nReturns:\n    Optional[Subtask]: Updated subtask if found, None otherwise\n    \nRaises:\n    ValueError: If updates are invalid",
            "args": [
              "self",
              "task_id",
              "subtask_id",
              "updates"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_subtask",
            "line": 261,
            "async": true,
            "decorators": [],
            "docstring": "Remove a subtask from a task.\n\nArgs:\n    task_id: ID of the parent task\n    subtask_id: ID of the subtask to remove\n    \nReturns:\n    bool: True if subtask was removed, False if not found",
            "args": [
              "self",
              "task_id",
              "subtask_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_requirement_ref",
            "line": 294,
            "async": true,
            "decorators": [],
            "docstring": "Add a requirement reference to a task.\n\nArgs:\n    task_id: ID of the task\n    req_ref_data: Dictionary of requirement reference data\n    \nReturns:\n    Optional[RequirementRef]: Created reference if task exists, None otherwise\n    \nRaises:\n    ValueError: If reference data is invalid",
            "args": [
              "self",
              "task_id",
              "req_ref_data"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_requirement_ref",
            "line": 331,
            "async": true,
            "decorators": [],
            "docstring": "Update a requirement reference.\n\nArgs:\n    task_id: ID of the task\n    ref_id: ID of the requirement reference to update\n    updates: Dictionary of field updates\n    \nReturns:\n    Optional[RequirementRef]: Updated reference if found, None otherwise\n    \nRaises:\n    ValueError: If updates are invalid",
            "args": [
              "self",
              "task_id",
              "ref_id",
              "updates"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_requirement_ref",
            "line": 371,
            "async": true,
            "decorators": [],
            "docstring": "Remove a requirement reference from a task.\n\nArgs:\n    task_id: ID of the task\n    ref_id: ID of the requirement reference to remove\n    \nReturns:\n    bool: True if reference was removed, False if not found",
            "args": [
              "self",
              "task_id",
              "ref_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_dependency",
            "line": 404,
            "async": true,
            "decorators": [],
            "docstring": "Create a new dependency between tasks.\n\nArgs:\n    dependency_data: Dictionary of dependency data\n    \nReturns:\n    Dependency: Created dependency\n    \nRaises:\n    ValueError: If dependency data is invalid or would create a cycle",
            "args": [
              "self",
              "dependency_data"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dependency",
            "line": 438,
            "async": true,
            "decorators": [],
            "docstring": "Get a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to retrieve\n    \nReturns:\n    Optional[Dependency]: Dependency if found, None otherwise",
            "args": [
              "self",
              "dependency_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_dependency",
            "line": 450,
            "async": true,
            "decorators": [],
            "docstring": "Update a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to update\n    updates: Dictionary of field updates\n    \nReturns:\n    Optional[Dependency]: Updated dependency if found, None otherwise\n    \nRaises:\n    ValueError: If updates are invalid",
            "args": [
              "self",
              "dependency_id",
              "updates"
            ],
            "class": "TaskManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_dependency",
            "line": 485,
            "async": true,
            "decorators": [],
            "docstring": "Delete a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to delete\n    \nReturns:\n    bool: True if dependency was deleted, False if not found",
            "args": [
              "self",
              "dependency_id"
            ],
            "class": "TaskManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_dependencies",
            "line": 519,
            "async": true,
            "decorators": [],
            "docstring": "List dependencies with optional filtering.\n\nArgs:\n    task_id: Filter by source or target task ID\n    dependency_type: Filter by dependency type\n    \nReturns:\n    List[Dependency]: List of matching dependencies",
            "args": [
              "self",
              "task_id",
              "dependency_type"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_blocking_tasks",
            "line": 539,
            "async": true,
            "decorators": [],
            "docstring": "List tasks that block a given task.\n\nArgs:\n    task_id: ID of the task to check\n    \nReturns:\n    List[Task]: List of tasks that block the specified task",
            "args": [
              "self",
              "task_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_dependent_tasks",
            "line": 551,
            "async": true,
            "decorators": [],
            "docstring": "List tasks that depend on a given task.\n\nArgs:\n    task_id: ID of the task to check\n    \nReturns:\n    List[Task]: List of tasks that depend on the specified task",
            "args": [
              "self",
              "task_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "bulk_create_tasks",
            "line": 565,
            "async": true,
            "decorators": [],
            "docstring": "Create multiple tasks in a batch.\n\nArgs:\n    tasks_data: List of task data dictionaries\n    \nReturns:\n    List[Task]: List of created tasks\n    \nRaises:\n    ValueError: If any task data is invalid",
            "args": [
              "self",
              "tasks_data"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "bulk_update_tasks",
            "line": 586,
            "async": true,
            "decorators": [],
            "docstring": "Update multiple tasks in a batch.\n\nArgs:\n    updates_map: Dictionary mapping task IDs to update dictionaries\n    \nReturns:\n    Dict[str, Optional[Task]]: Dictionary mapping task IDs to updated tasks\n    \nRaises:\n    ValueError: If any updates are invalid",
            "args": [
              "self",
              "updates_map"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_event_handler",
            "line": 611,
            "async": false,
            "decorators": [],
            "docstring": "Register an event handler for a specific event type.\n\nArgs:\n    event_type: Type of event to handle\n    handler: Callback function to handle the event",
            "args": [
              "self",
              "event_type",
              "handler"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_event_handler",
            "line": 624,
            "async": false,
            "decorators": [],
            "docstring": "Unregister an event handler.\n\nArgs:\n    event_type: Type of event\n    handler: Handler to unregister\n    \nReturns:\n    bool: True if handler was found and removed, False otherwise",
            "args": [
              "self",
              "event_type",
              "handler"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_fire_event",
            "line": 644,
            "async": true,
            "decorators": [],
            "docstring": "Fire an event to all registered handlers.\n\nArgs:\n    event_type: Type of event\n    data: Event data",
            "args": [
              "self",
              "event_type",
              "data"
            ],
            "class": "TaskManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "save",
            "line": 667,
            "async": true,
            "decorators": [],
            "docstring": "Save the current state to a file.\n\nArgs:\n    filepath: Path to save the file\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "filepath"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load",
            "line": 679,
            "async": true,
            "decorators": [],
            "docstring": "Load state from a file.\n\nArgs:\n    filepath: Path to the file\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "filepath"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_auto_save",
            "line": 691,
            "async": true,
            "decorators": [],
            "docstring": "Auto-save if backup path is set.",
            "args": [
              "self"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "import_requirement",
            "line": 699,
            "async": true,
            "decorators": [],
            "docstring": "Import a requirement from Telos as a requirement reference.\n\nArgs:\n    requirement_id: ID of the requirement to import\n    task_id: Optional task ID to add the reference to\n    \nReturns:\n    Tuple[Optional[RequirementRef], Optional[Task]]: \n        Created reference and task if successful, None otherwise",
            "args": [
              "self",
              "requirement_id",
              "task_id"
            ],
            "class": "TaskManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "import_requirement_as_task",
            "line": 733,
            "async": true,
            "decorators": [],
            "docstring": "Import a requirement from Telos as a new task.\n\nArgs:\n    requirement_id: ID of the requirement to import\n    \nReturns:\n    Optional[Task]: Created task if successful, None otherwise",
            "args": [
              "self",
              "requirement_id"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_telos_requirements",
            "line": 772,
            "async": true,
            "decorators": [],
            "docstring": "Search for requirements in Telos.\n\nArgs:\n    query: Search query\n    status: Filter by status\n    category: Filter by category\n    page: Page number\n    page_size: Page size\n    \nReturns:\n    Tuple[List[Dict[str, Any]], int]: List of requirements and total count",
            "args": [
              "self",
              "query",
              "status",
              "category",
              "page",
              "page_size"
            ],
            "class": "TaskManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskManager",
            "line": 27,
            "methods": [
              "__init__",
              "register_event_handler",
              "unregister_event_handler"
            ],
            "decorators": [],
            "docstring": "Task Manager for Metis.\n\nThis class provides the core business logic for managing tasks in Metis,\nincluding CRUD operations, dependency management, and task querying.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.models.dependency.Dependency",
            "from": "metis.models.dependency",
            "name": "Dependency",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.models.dependency.DependencyManager",
            "from": "metis.models.dependency",
            "name": "DependencyManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.models.subtask.Subtask",
            "from": "metis.models.subtask",
            "name": "Subtask",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 18
          },
          {
            "module": "metis.models.requirement.RequirementRef",
            "from": "metis.models.requirement",
            "name": "RequirementRef",
            "alias": null,
            "line": 19
          },
          {
            "module": "metis.core.storage.InMemoryStorage",
            "from": "metis.core.storage",
            "name": "InMemoryStorage",
            "alias": null,
            "line": 20
          },
          {
            "module": "metis.core.telos_integration.telos_client",
            "from": "metis.core.telos_integration",
            "name": "telos_client",
            "alias": null,
            "line": 711
          },
          {
            "module": "metis.core.telos_integration.telos_client",
            "from": "metis.core.telos_integration",
            "name": "telos_client",
            "alias": null,
            "line": 743
          },
          {
            "module": "metis.core.telos_integration.telos_client",
            "from": "metis.core.telos_integration",
            "name": "telos_client",
            "alias": null,
            "line": 793
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskManager",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskManager.create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.delete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.list_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.add_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.update_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 221,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.remove_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 261,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.add_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 294,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.update_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 331,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.remove_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 371,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.create_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 404,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.get_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 438,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.update_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 450,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.delete_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 485,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.list_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 519,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.list_blocking_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 539,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.list_dependent_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 551,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.bulk_create_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 565,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.bulk_update_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 586,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.register_event_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 611,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskManager.unregister_event_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 624,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskManager.save",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 667,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.load",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 679,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.import_requirement",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 699,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.import_requirement_as_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 733,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskManager.search_telos_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_manager.py",
            "line": 772,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 801,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
      "analysis": {
        "functions": [
          {
            "name": "get_execution_order",
            "line": 22,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Determine a valid execution order for a set of tasks based on dependencies.\n\nArgs:\n    tasks: List of tasks\n    \nReturns:\n    List[str]: List of task IDs in valid execution order\n    \nRaises:\n    ValueError: If there are cyclic dependencies",
            "args": [
              "tasks"
            ],
            "class": "DependencyResolver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_dependency_issues",
            "line": 47,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Check for dependency issues in a set of tasks.\n\nArgs:\n    tasks: List of tasks\n    \nReturns:\n    List[Dict[str, Any]]: List of issues with their descriptions",
            "args": [
              "tasks"
            ],
            "class": "DependencyResolver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_critical_path",
            "line": 85,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Determine the critical path through the task dependency graph.\n\nThe critical path is the sequence of tasks that must be completed\nto finish the project in the minimum amount of time.\n\nArgs:\n    tasks: List of tasks\n    \nReturns:\n    List[str]: List of task IDs in the critical path\n    \nRaises:\n    ValueError: If there are cyclic dependencies",
            "args": [
              "tasks"
            ],
            "class": "DependencyResolver",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "calculate_earliest_finish",
            "line": 112,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "task_id"
            ],
            "class": "DependencyResolver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "calculate_latest_finish",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "task_id"
            ],
            "class": "DependencyResolver",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_check_cycles",
            "line": 217,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Check for cycles in the dependency graph.\n\nArgs:\n    graph: Dependency graph (task_id -> list of dependency IDs)\n    \nRaises:\n    ValueError: If cycles are detected, with description of the cycle",
            "args": [
              "graph"
            ],
            "class": "DependencyResolver",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "dfs",
            "line": 231,
            "async": false,
            "decorators": [],
            "docstring": "DFS helper function to detect cycles.",
            "args": [
              "node"
            ],
            "class": "DependencyResolver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_topological_sort",
            "line": 258,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Perform a topological sort on the dependency graph.\n\nArgs:\n    graph: Dependency graph (task_id -> list of dependency IDs)\n    \nReturns:\n    List[str]: Task IDs in topological order",
            "args": [
              "graph"
            ],
            "class": "DependencyResolver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "dfs",
            "line": 271,
            "async": false,
            "decorators": [],
            "docstring": "DFS helper function for topological sort.",
            "args": [
              "node"
            ],
            "class": "DependencyResolver",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DependencyResolver",
            "line": 13,
            "methods": [
              "get_execution_order",
              "check_dependency_issues",
              "get_critical_path",
              "_check_cycles",
              "_topological_sort"
            ],
            "decorators": [],
            "docstring": "Resolver for task dependencies.\n\nThis class provides tools for resolving task dependencies, determining\ntask execution order, and detecting dependency issues.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "metis.models.dependency.Dependency",
            "from": "metis.models.dependency",
            "name": "Dependency",
            "alias": null,
            "line": 9
          },
          {
            "module": "metis.models.dependency.DependencyManager",
            "from": "metis.models.dependency",
            "name": "DependencyManager",
            "alias": null,
            "line": 9
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DependencyResolver",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DependencyResolver.get_execution_order",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DependencyResolver.check_dependency_issues",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 47,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DependencyResolver.get_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 85,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DependencyResolver.calculate_earliest_finish",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 112,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DependencyResolver.calculate_latest_finish",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 166,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DependencyResolver._check_cycles",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 217,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DependencyResolver.dfs",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 231,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DependencyResolver.dfs",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/dependency.py",
            "line": 271,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 288,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the in-memory storage.",
            "args": [
              "self"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Create a new task in storage.\n\nArgs:\n    task: Task to create\n    \nReturns:\n    Task: Created task with ID assigned",
            "args": [
              "self",
              "task"
            ],
            "class": "InMemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 63,
            "async": false,
            "decorators": [],
            "docstring": "Get a task by ID.\n\nArgs:\n    task_id: ID of the task to retrieve\n    \nReturns:\n    Optional[Task]: Task if found, None otherwise",
            "args": [
              "self",
              "task_id"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 76,
            "async": false,
            "decorators": [],
            "docstring": "Update a task by ID.\n\nArgs:\n    task_id: ID of the task to update\n    updates: Dictionary of field updates\n    \nReturns:\n    Optional[Task]: Updated task if found, None otherwise",
            "args": [
              "self",
              "task_id",
              "updates"
            ],
            "class": "InMemoryStorage",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_task",
            "line": 105,
            "async": false,
            "decorators": [],
            "docstring": "Delete a task by ID.\n\nArgs:\n    task_id: ID of the task to delete\n    \nReturns:\n    bool: True if task was found and deleted, False otherwise",
            "args": [
              "self",
              "task_id"
            ],
            "class": "InMemoryStorage",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "list_tasks",
            "line": 137,
            "async": false,
            "decorators": [],
            "docstring": "List tasks with optional filtering.\n\nArgs:\n    status: Filter by status\n    priority: Filter by priority\n    assignee: Filter by assignee\n    tag: Filter by tag\n    search: Search term for title/description\n    page: Page number (1-based)\n    page_size: Number of items per page\n    \nReturns:\n    Tuple[List[Task], int]: List of tasks and total count",
            "args": [
              "self",
              "status",
              "priority",
              "assignee",
              "tag",
              "search",
              "page",
              "page_size"
            ],
            "class": "InMemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_dependency",
            "line": 203,
            "async": false,
            "decorators": [],
            "docstring": "Create a new dependency in storage.\n\nArgs:\n    dependency: Dependency to create\n    \nReturns:\n    Dependency: Created dependency with ID assigned",
            "args": [
              "self",
              "dependency"
            ],
            "class": "InMemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_dependency",
            "line": 245,
            "async": false,
            "decorators": [],
            "docstring": "Get a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to retrieve\n    \nReturns:\n    Optional[Dependency]: Dependency if found, None otherwise",
            "args": [
              "self",
              "dependency_id"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_dependency",
            "line": 258,
            "async": false,
            "decorators": [],
            "docstring": "Update a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to update\n    updates: Dictionary of field updates\n    \nReturns:\n    Optional[Dependency]: Updated dependency if found, None otherwise",
            "args": [
              "self",
              "dependency_id",
              "updates"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "delete_dependency",
            "line": 285,
            "async": false,
            "decorators": [],
            "docstring": "Delete a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to delete\n    \nReturns:\n    bool: True if dependency was found and deleted, False otherwise",
            "args": [
              "self",
              "dependency_id"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_dependencies",
            "line": 310,
            "async": false,
            "decorators": [],
            "docstring": "List dependencies with optional filtering.\n\nArgs:\n    task_id: Filter by source or target task ID\n    dependency_type: Filter by dependency type\n    \nReturns:\n    List[Dependency]: List of matching dependencies",
            "args": [
              "self",
              "task_id",
              "dependency_type"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_blocking_tasks",
            "line": 344,
            "async": false,
            "decorators": [],
            "docstring": "List tasks that block a given task.\n\nArgs:\n    task_id: ID of the task to check\n    \nReturns:\n    List[Task]: List of tasks that block the specified task",
            "args": [
              "self",
              "task_id"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_dependent_tasks",
            "line": 361,
            "async": false,
            "decorators": [],
            "docstring": "List tasks that depend on a given task.\n\nArgs:\n    task_id: ID of the task to check\n    \nReturns:\n    List[Task]: List of tasks that depend on the specified task",
            "args": [
              "self",
              "task_id"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_to_file",
            "line": 382,
            "async": false,
            "decorators": [],
            "docstring": "Save the current state to a JSON file.\n\nArgs:\n    filepath: Path to save the JSON file\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "filepath"
            ],
            "class": "InMemoryStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_from_file",
            "line": 409,
            "async": false,
            "decorators": [],
            "docstring": "Load state from a JSON file.\n\nArgs:\n    filepath: Path to the JSON file\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "filepath"
            ],
            "class": "InMemoryStorage",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "InMemoryStorage",
            "line": 22,
            "methods": [
              "__init__",
              "create_task",
              "get_task",
              "update_task",
              "delete_task",
              "list_tasks",
              "create_dependency",
              "get_dependency",
              "update_dependency",
              "delete_dependency",
              "list_dependencies",
              "list_blocking_tasks",
              "list_dependent_tasks",
              "save_to_file",
              "load_from_file"
            ],
            "decorators": [],
            "docstring": "In-memory storage implementation for Metis.\n\nThis class provides an in-memory storage solution for tasks and their\nrelated data. It's useful for development, testing, and deployments\nthat don't require persistent storage.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "json",
            "alias": null,
            "line": 12
          },
          {
            "module": "threading",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.models.dependency.Dependency",
            "from": "metis.models.dependency",
            "name": "Dependency",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.models.subtask.Subtask",
            "from": "metis.models.subtask",
            "name": "Subtask",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.models.requirement.RequirementRef",
            "from": "metis.models.requirement",
            "name": "RequirementRef",
            "alias": null,
            "line": 18
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 19
          },
          {
            "module": "metis.models.dependency.DependencyManager",
            "from": "metis.models.dependency",
            "name": "DependencyManager",
            "alias": null,
            "line": 226
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "InMemoryStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 63,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 76,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.delete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 105,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.list_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 137,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.create_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 203,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.get_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 245,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.update_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 258,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.delete_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 285,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.list_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 310,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.list_blocking_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 344,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.list_dependent_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 361,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.save_to_file",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 382,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "InMemoryStorage.load_from_file",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/storage.py",
            "line": 409,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 443,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/metis_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 25,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Metis-specific services.",
            "args": [
              "self"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_register_event_handlers",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Register event handlers for task manager.",
            "args": [
              "self"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_task_created",
            "line": 76,
            "async": true,
            "decorators": [],
            "docstring": "Handle task created event.",
            "args": [
              "self",
              "task"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_task_updated",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Handle task updated event.",
            "args": [
              "self",
              "task"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_task_deleted",
            "line": 92,
            "async": true,
            "decorators": [],
            "docstring": "Handle task deleted event.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_task_completed",
            "line": 100,
            "async": true,
            "decorators": [],
            "docstring": "Handle task completed event.",
            "args": [
              "self",
              "task"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 108,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Metis-specific resources.",
            "args": [
              "self"
            ],
            "class": "MetisComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 152,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "MetisComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MetisComponent",
            "line": 13,
            "methods": [
              "__init__",
              "_register_event_handlers",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Metis task management component with WebSocket and MCP support.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 4
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.core.task_manager.TaskManager",
            "from": "metis.core.task_manager",
            "name": "TaskManager",
            "alias": null,
            "line": 7
          },
          {
            "module": "metis.core.connection_manager.ConnectionManager",
            "from": "metis.core.connection_manager",
            "name": "ConnectionManager",
            "alias": null,
            "line": 8
          },
          {
            "module": "metis.core.mcp.tools",
            "alias": "mcp_tools",
            "line": 9
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 28
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MetisComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/metis_component.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetisComponent._component_specific_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/metis_component.py",
            "line": 108,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MetisComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/metis_component.py",
            "line": 135,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetisComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/metis_component.py",
            "line": 152,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 164,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Metis LLM Adapter.\n\nArgs:\n    adapter_url: URL for the LLM adapter service (defaults to Rhetor port)",
            "args": [
              "self",
              "adapter_url"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 85,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates for Metis",
            "args": [
              "self"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_register_core_templates",
            "line": 117,
            "async": false,
            "decorators": [],
            "docstring": "Register core templates for task management",
            "args": [
              "self"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_client",
            "line": 224,
            "async": true,
            "decorators": [],
            "docstring": "Get or initialize the LLM client\n\nReturns:\n    Initialized TektonLLMClient",
            "args": [
              "self"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decompose_task",
            "line": 243,
            "async": true,
            "decorators": [],
            "docstring": "Decompose a task into subtasks using AI.\n\nArgs:\n    task_title: Title of the task to decompose\n    task_description: Detailed description of the task\n    depth: Maximum decomposition depth\n    max_subtasks: Maximum number of subtasks to generate\n    model: LLM model to use (optional)\n    \nReturns:\n    Dictionary containing decomposed subtasks and metadata",
            "args": [
              "self",
              "task_title",
              "task_description",
              "depth",
              "max_subtasks",
              "model"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_task_complexity",
            "line": 328,
            "async": true,
            "decorators": [],
            "docstring": "Analyze task complexity using AI.\n\nArgs:\n    task_title: Title of the task\n    task_description: Task description\n    subtasks: List of subtasks (optional)\n    model: LLM model to use (optional)\n    \nReturns:\n    Dictionary containing complexity analysis",
            "args": [
              "self",
              "task_title",
              "task_description",
              "subtasks",
              "model"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "suggest_task_order",
            "line": 415,
            "async": true,
            "decorators": [],
            "docstring": "Suggest optimal task execution order.\n\nArgs:\n    tasks: List of tasks with their properties\n    dependencies: List of task dependencies\n    model: LLM model to use (optional)\n    \nReturns:\n    Dictionary containing execution order suggestions",
            "args": [
              "self",
              "tasks",
              "dependencies",
              "model"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "test_connection",
            "line": 494,
            "async": true,
            "decorators": [],
            "docstring": "Test the connection to the LLM service.\n\nReturns:\n    Dictionary with connection status and available models",
            "args": [
              "self"
            ],
            "class": "MetisLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MetisLLMAdapter",
            "line": 33,
            "methods": [
              "__init__",
              "_load_templates",
              "_register_core_templates"
            ],
            "decorators": [],
            "docstring": "LLM Adapter for Metis task management.\n\nThis class provides AI-powered capabilities for task decomposition,\ncomplexity analysis, and intelligent task management.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MetisLLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetisLLMAdapter._load_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
            "line": 85,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MetisLLMAdapter.decompose_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
            "line": 243,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisLLMAdapter.analyze_task_complexity",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
            "line": 328,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisLLMAdapter.suggest_task_order",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
            "line": 415,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisLLMAdapter.test_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/llm_adapter.py",
            "line": 494,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 524,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_decomposer.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the task decomposer.\n\nArgs:\n    llm_adapter: LLM adapter instance (creates new if not provided)",
            "args": [
              "self",
              "llm_adapter"
            ],
            "class": "TaskDecomposer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decompose_task",
            "line": 40,
            "async": true,
            "decorators": [],
            "docstring": "Decompose a task into subtasks using AI.\n\nArgs:\n    task: The task to decompose\n    depth: Maximum decomposition depth (1-5)\n    max_subtasks: Maximum subtasks to create (1-20)\n    auto_create: Whether to automatically create subtasks\n    \nReturns:\n    Dictionary containing decomposition results",
            "args": [
              "self",
              "task",
              "depth",
              "max_subtasks",
              "auto_create"
            ],
            "class": "TaskDecomposer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_subtask_from_data",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Create a Subtask object from decomposition data.\n\nArgs:\n    task_id: Parent task ID\n    subtask_data: Subtask data from LLM\n    order: Execution order\n    \nReturns:\n    Subtask object",
            "args": [
              "self",
              "task_id",
              "subtask_data",
              "order"
            ],
            "class": "TaskDecomposer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_decomposition_quality",
            "line": 157,
            "async": true,
            "decorators": [],
            "docstring": "Analyze the quality of a task decomposition.\n\nArgs:\n    task: The parent task\n    subtasks: List of subtasks\n    \nReturns:\n    Quality analysis results",
            "args": [
              "self",
              "task",
              "subtasks"
            ],
            "class": "TaskDecomposer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_assess_coverage",
            "line": 219,
            "async": false,
            "decorators": [],
            "docstring": "Assess how well subtasks cover the parent task scope.",
            "args": [
              "self",
              "task",
              "subtasks"
            ],
            "class": "TaskDecomposer",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_assess_granularity",
            "line": 236,
            "async": false,
            "decorators": [],
            "docstring": "Assess if subtasks are appropriately sized.",
            "args": [
              "self",
              "subtasks"
            ],
            "class": "TaskDecomposer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_assess_balance",
            "line": 249,
            "async": false,
            "decorators": [],
            "docstring": "Assess if subtasks are well-balanced in effort.",
            "args": [
              "self",
              "subtasks"
            ],
            "class": "TaskDecomposer",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskDecomposer",
            "line": 22,
            "methods": [
              "__init__",
              "_create_subtask_from_data",
              "_assess_coverage",
              "_assess_granularity",
              "_assess_balance"
            ],
            "decorators": [],
            "docstring": "AI-powered task decomposition engine.\n\nThis class handles the intelligent breakdown of tasks into subtasks\nusing LLM capabilities.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.core.llm_adapter.MetisLLMAdapter",
            "from": "metis.core.llm_adapter",
            "name": "MetisLLMAdapter",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.models.subtask.Subtask",
            "from": "metis.models.subtask",
            "name": "Subtask",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskDecomposer",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_decomposer.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskDecomposer.decompose_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_decomposer.py",
            "line": 40,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskDecomposer.analyze_decomposition_quality",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_decomposer.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskDecomposer._assess_coverage",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/task_decomposer.py",
            "line": 219,
            "priority": "medium",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 269,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "get_port",
            "line": 9,
            "async": false,
            "decorators": [],
            "docstring": "Get component port from environment variables",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_service_url",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": "Get service URL - placeholder",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "metis.utils.hermes_helper.HermesClient",
            "from": "metis.utils.hermes_helper",
            "name": "HermesClient",
            "alias": null,
            "line": 26
          },
          {
            "module": "metis.utils.hermes_helper.hermes_client",
            "from": "metis.utils.hermes_helper",
            "name": "hermes_client",
            "alias": null,
            "line": 26
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_port",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/__init__.py",
            "line": 9,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_service_url",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/__init__.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 36,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes client.\n\nArgs:\n    service_name: Name of this service",
            "args": [
              "self",
              "service_name"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_session",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Get or create an aiohttp session for HTTP requests.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 49,
            "async": true,
            "decorators": [],
            "docstring": "Register the service with Hermes.\n\nReturns:\n    bool: True if registration succeeded, False otherwise",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deregister",
            "line": 101,
            "async": true,
            "decorators": [],
            "docstring": "Deregister the service from Hermes.\n\nReturns:\n    bool: True if deregistration succeeded, False otherwise",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "send_heartbeat",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": "Send a heartbeat to Hermes to indicate the service is still alive.\n\nReturns:\n    bool: True if heartbeat succeeded, False otherwise",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_service",
            "line": 161,
            "async": true,
            "decorators": [],
            "docstring": "Get information about a specific service from Hermes.\n\nArgs:\n    service_name: Name of the service to get\n    \nReturns:\n    Optional[Dict[str, Any]]: Service information if found, None otherwise",
            "args": [
              "self",
              "service_name"
            ],
            "class": "HermesClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "discover_services",
            "line": 193,
            "async": true,
            "decorators": [],
            "docstring": "Discover services registered with Hermes.\n\nArgs:\n    capability: Optional capability to filter services\n    \nReturns:\n    List[Dict[str, Any]]: List of service information",
            "args": [
              "self",
              "capability"
            ],
            "class": "HermesClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_service_url",
            "line": 227,
            "async": true,
            "decorators": [],
            "docstring": "Get the base URL for a service by name.\n\nArgs:\n    service_name: Name of the service\n    \nReturns:\n    Optional[str]: Service URL if found, None otherwise",
            "args": [
              "self",
              "service_name"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "heartbeat_task",
            "line": 246,
            "async": true,
            "decorators": [],
            "docstring": "Background task to send periodic heartbeats to Hermes.\n\nThis method should be run as a background task to maintain\nregistration with Hermes.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 261,
            "async": true,
            "decorators": [],
            "docstring": "Close the HTTP session.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesClient",
            "line": 18,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with the Hermes service registry.\n\nThis class provides methods for registering with Hermes,\ndiscovering other services, and sending/receiving messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.config.config",
            "from": "metis.config",
            "name": "config",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesClient",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesClient.register",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.deregister",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 101,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "HermesClient.send_heartbeat",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 132,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.get_service",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 161,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.discover_services",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 193,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.get_service_url",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 227,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.heartbeat_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 246,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/utils/hermes_helper.py",
            "line": 261,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 269,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
      "analysis": {
        "functions": [
          {
            "name": "status_must_be_valid",
            "line": 45,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that the status is a valid TaskStatus value.",
            "args": [
              "cls",
              "v"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "priority_must_be_valid",
            "line": 53,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that the priority is a valid Priority value.",
            "args": [
              "cls",
              "v"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Update the task status with validation.\n\nArgs:\n    new_status: New status value\n    \nReturns:\n    bool: True if status was updated, False if transition was invalid\n    \nRaises:\n    ValueError: If the new status is not a valid TaskStatus value",
            "args": [
              "self",
              "new_status"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update",
            "line": 85,
            "async": false,
            "decorators": [],
            "docstring": "Update task fields with validation.\n\nArgs:\n    updates: Dictionary of field updates",
            "args": [
              "self",
              "updates"
            ],
            "class": "Task",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add_subtask",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": "Add a subtask to the task.\n\nArgs:\n    subtask: Subtask to add",
            "args": [
              "self",
              "subtask"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_subtask",
            "line": 128,
            "async": false,
            "decorators": [],
            "docstring": "Update a subtask by ID.\n\nArgs:\n    subtask_id: ID of the subtask to update\n    updates: Dictionary of field updates\n    \nReturns:\n    bool: True if subtask was found and updated, False otherwise",
            "args": [
              "self",
              "subtask_id",
              "updates"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "remove_subtask",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Remove a subtask by ID.\n\nArgs:\n    subtask_id: ID of the subtask to remove\n    \nReturns:\n    bool: True if subtask was found and removed, False otherwise",
            "args": [
              "self",
              "subtask_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_requirement_ref",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": "Add a requirement reference to the task.\n\nArgs:\n    req_ref: Requirement reference to add",
            "args": [
              "self",
              "req_ref"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_requirement_ref",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Update a requirement reference by ID.\n\nArgs:\n    ref_id: ID of the requirement reference to update\n    updates: Dictionary of field updates\n    \nReturns:\n    bool: True if reference was found and updated, False otherwise",
            "args": [
              "self",
              "ref_id",
              "updates"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "remove_requirement_ref",
            "line": 196,
            "async": false,
            "decorators": [],
            "docstring": "Remove a requirement reference by ID.\n\nArgs:\n    ref_id: ID of the requirement reference to remove\n    \nReturns:\n    bool: True if reference was found and removed, False otherwise",
            "args": [
              "self",
              "ref_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "has_dependency",
            "line": 214,
            "async": false,
            "decorators": [],
            "docstring": "Check if task has a dependency on another task.\n\nArgs:\n    task_id: ID of the dependency task to check\n    \nReturns:\n    bool: True if task has this dependency, False otherwise",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_dependency",
            "line": 226,
            "async": false,
            "decorators": [],
            "docstring": "Add a dependency to the task.\n\nArgs:\n    task_id: ID of the task to depend on\n    \nReturns:\n    bool: True if dependency was added, False if it already existed",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_dependency",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": "Remove a dependency from the task.\n\nArgs:\n    task_id: ID of the dependency to remove\n    \nReturns:\n    bool: True if dependency was removed, False if it wasn't found",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_progress",
            "line": 260,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the progress of the task based on subtasks.\n\nReturns:\n    float: Progress percentage (0-100)",
            "args": [
              "self"
            ],
            "class": "Task",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Task",
            "line": 19,
            "methods": [
              "status_must_be_valid",
              "priority_must_be_valid",
              "update_status",
              "update",
              "add_subtask",
              "update_subtask",
              "remove_subtask",
              "add_requirement_ref",
              "update_requirement_ref",
              "remove_requirement_ref",
              "has_dependency",
              "add_dependency",
              "remove_dependency",
              "get_progress"
            ],
            "decorators": [],
            "docstring": "Core Task model for Metis.\n\nTasks are the primary unit of work in the Metis system, representing\ndiscrete pieces of work that need to be completed.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 11
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.subtask.Subtask",
            "from": "metis.models.subtask",
            "name": "Subtask",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.models.requirement.RequirementRef",
            "from": "metis.models.requirement",
            "name": "RequirementRef",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Task.status_must_be_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 45,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.priority_must_be_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 53,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.update",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 85,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "Task.add_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.update_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 128,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Task.remove_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.add_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 166,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.update_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 176,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Task.remove_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.has_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 214,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.add_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 226,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.remove_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 243,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.get_progress",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/task.py",
            "line": 260,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 280,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
      "analysis": {
        "functions": [
          {
            "name": "allowed_transitions",
            "line": 26,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get allowed status transitions.\n\nReturns:\n    Dict[str, List[str]]: Dictionary of current status to allowed next statuses",
            "args": [
              "cls"
            ],
            "class": "TaskStatus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_valid_transition",
            "line": 43,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Check if a status transition is valid.\n\nArgs:\n    current: Current task status\n    next_status: Proposed next status\n    \nReturns:\n    bool: True if transition is valid, False otherwise",
            "args": [
              "cls",
              "current",
              "next_status"
            ],
            "class": "TaskStatus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_score",
            "line": 85,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert complexity level to numeric score for calculations.\n\nArgs:\n    level: Complexity level string\n    \nReturns:\n    int: Numeric score representing complexity (1-5)",
            "args": [
              "cls",
              "level"
            ],
            "class": "ComplexityLevel",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_score",
            "line": 105,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert numeric score to complexity level.\n\nArgs:\n    score: Numeric score (1-5)\n    \nReturns:\n    str: Complexity level string",
            "args": [
              "cls",
              "score"
            ],
            "class": "ComplexityLevel",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskStatus",
            "line": 12,
            "methods": [
              "allowed_transitions",
              "is_valid_transition"
            ],
            "decorators": [],
            "docstring": "Task status enum representing the current state of a task.\n\nUsing string values for serialization compatibility.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Priority",
            "line": 61,
            "methods": [],
            "decorators": [],
            "docstring": "Task priority enum representing the importance of a task.\n\nUsing string values for serialization compatibility.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityLevel",
            "line": 72,
            "methods": [
              "to_score",
              "from_score"
            ],
            "decorators": [],
            "docstring": "Complexity level enum representing the difficulty of a task.\n\nUsing string values for serialization compatibility.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.auto",
            "from": "enum",
            "name": "auto",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskStatus.allowed_transitions",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskStatus.is_valid_transition",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 43,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Priority",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 61,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComplexityLevel",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 72,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComplexityLevel.to_score",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 85,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityLevel.from_score",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/enums.py",
            "line": 105,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 124,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/requirement.py",
      "analysis": {
        "functions": [
          {
            "name": "update",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Update requirement reference fields.\n\nArgs:\n    updates: Dictionary of field updates",
            "args": [
              "self",
              "updates"
            ],
            "class": "RequirementRef",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RequirementRef",
            "line": 15,
            "methods": [
              "update"
            ],
            "decorators": [],
            "docstring": "Reference to a requirement from another system (e.g., Telos).\n\nThis model allows tasks to be linked to external requirements, providing\ntraceability between requirements and implementation tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RequirementSyncStatus",
            "line": 47,
            "methods": [],
            "decorators": [],
            "docstring": "Status of requirement synchronization with external systems.\n\nTracks the last synchronization time and status for auditing and\ntroubleshooting purposes.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RequirementRef",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/requirement.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RequirementRef.update",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/requirement.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "RequirementSyncStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/requirement.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 61,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
      "analysis": {
        "functions": [
          {
            "name": "calculate_weighted_score",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the weighted score for this factor.\n\nReturns:\n    float: Weighted score (score * weight)",
            "args": [
              "self"
            ],
            "class": "ComplexityFactor",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_factor",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": "Add a complexity factor and recalculate the overall score.\n\nArgs:\n    factor: Complexity factor to add",
            "args": [
              "self",
              "factor"
            ],
            "class": "ComplexityScore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_factor",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Update a complexity factor by ID and recalculate the overall score.\n\nArgs:\n    factor_id: ID of the factor to update\n    updates: Dictionary of field updates\n    \nReturns:\n    bool: True if factor was found and updated, False otherwise",
            "args": [
              "self",
              "factor_id",
              "updates"
            ],
            "class": "ComplexityScore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "remove_factor",
            "line": 89,
            "async": false,
            "decorators": [],
            "docstring": "Remove a complexity factor by ID and recalculate the overall score.\n\nArgs:\n    factor_id: ID of the factor to remove\n    \nReturns:\n    bool: True if factor was found and removed, False otherwise",
            "args": [
              "self",
              "factor_id"
            ],
            "class": "ComplexityScore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "recalculate",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Recalculate the overall complexity score and level.\n\nThis method computes a weighted average of all factors\nand updates the overall score and complexity level.",
            "args": [
              "self"
            ],
            "class": "ComplexityScore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_score",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Create a ComplexityScore instance from this template.\n\nReturns:\n    ComplexityScore: New complexity score with factors from this template",
            "args": [
              "self"
            ],
            "class": "ComplexityTemplate",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComplexityFactor",
            "line": 17,
            "methods": [
              "calculate_weighted_score"
            ],
            "decorators": [],
            "docstring": "A single factor contributing to task complexity.\n\nEach factor has a name, weight, and score that contributes to\nthe overall complexity score of a task.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityScore",
            "line": 41,
            "methods": [
              "add_factor",
              "update_factor",
              "remove_factor",
              "recalculate"
            ],
            "decorators": [],
            "docstring": "Overall complexity score for a task.\n\nCombines multiple complexity factors to produce an overall\nscore and complexity level.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityTemplate",
            "line": 136,
            "methods": [
              "create_score"
            ],
            "decorators": [],
            "docstring": "Template for predefined complexity factors.\n\nUsed to create consistent complexity scores for similar tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.models.enums.ComplexityLevel",
            "from": "metis.models.enums",
            "name": "ComplexityLevel",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ComplexityFactor",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComplexityFactor.calculate_weighted_score",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ComplexityScore",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComplexityScore.add_factor",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 55,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityScore.update_factor",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityScore.remove_factor",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 89,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComplexityScore.recalculate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ComplexityTemplate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 136,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComplexityTemplate.create_score",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/complexity.py",
            "line": 149,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 163,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/subtask.py",
      "analysis": {
        "functions": [
          {
            "name": "update",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Update subtask fields.\n\nArgs:\n    updates: Dictionary of field updates",
            "args": [
              "self",
              "updates"
            ],
            "class": "Subtask",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_subtasks",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Create subtask instances from this template.\n\nReturns:\n    List[Subtask]: List of subtasks created from the template",
            "args": [
              "self"
            ],
            "class": "SubtaskTemplate",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Subtask",
            "line": 18,
            "methods": [
              "update"
            ],
            "decorators": [],
            "docstring": "Subtask model representing a smaller unit of work within a parent task.\n\nSubtasks have simplified attributes compared to full tasks and are\nalways associated with a parent task.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SubtaskTemplate",
            "line": 59,
            "methods": [
              "create_subtasks"
            ],
            "decorators": [],
            "docstring": "Template for creating a set of related subtasks.\n\nUsed to create consistent subtask structures for similar tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/subtask.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Subtask.update",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/subtask.py",
            "line": 36,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SubtaskTemplate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/subtask.py",
            "line": 59,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SubtaskTemplate.create_subtasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/subtask.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 90,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 3
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 3
          },
          {
            "module": "metis.models.enums.ComplexityLevel",
            "from": "metis.models.enums",
            "name": "ComplexityLevel",
            "alias": null,
            "line": 3
          },
          {
            "module": "metis.models.complexity.ComplexityFactor",
            "from": "metis.models.complexity",
            "name": "ComplexityFactor",
            "alias": null,
            "line": 4
          },
          {
            "module": "metis.models.complexity.ComplexityScore",
            "from": "metis.models.complexity",
            "name": "ComplexityScore",
            "alias": null,
            "line": 4
          },
          {
            "module": "metis.models.complexity.ComplexityTemplate",
            "from": "metis.models.complexity",
            "name": "ComplexityTemplate",
            "alias": null,
            "line": 4
          },
          {
            "module": "metis.models.subtask.Subtask",
            "from": "metis.models.subtask",
            "name": "Subtask",
            "alias": null,
            "line": 5
          },
          {
            "module": "metis.models.subtask.SubtaskTemplate",
            "from": "metis.models.subtask",
            "name": "SubtaskTemplate",
            "alias": null,
            "line": 5
          },
          {
            "module": "metis.models.requirement.RequirementRef",
            "from": "metis.models.requirement",
            "name": "RequirementRef",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.models.requirement.RequirementSyncStatus",
            "from": "metis.models.requirement",
            "name": "RequirementSyncStatus",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.models.dependency.Dependency",
            "from": "metis.models.dependency",
            "name": "Dependency",
            "alias": null,
            "line": 7
          },
          {
            "module": "metis.models.dependency.DependencyType",
            "from": "metis.models.dependency",
            "name": "DependencyType",
            "alias": null,
            "line": 7
          },
          {
            "module": "metis.models.dependency.DependencyManager",
            "from": "metis.models.dependency",
            "name": "DependencyManager",
            "alias": null,
            "line": 7
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 36,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
      "analysis": {
        "functions": [
          {
            "name": "update",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Update dependency fields.\n\nArgs:\n    updates: Dictionary of field updates",
            "args": [
              "self",
              "updates"
            ],
            "class": "Dependency",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_new_dependency",
            "line": 61,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Validate that a new dependency would not create a circular reference.\n\nArgs:\n    dependencies: Existing dependencies\n    source_id: Source task ID for the new dependency\n    target_id: Target task ID for the new dependency\n    \nReturns:\n    bool: True if the dependency is valid, False if it would create a cycle",
            "args": [
              "dependencies",
              "source_id",
              "target_id"
            ],
            "class": "DependencyManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "is_cyclic_util",
            "line": 99,
            "async": false,
            "decorators": [],
            "docstring": "Helper function for cycle detection.",
            "args": [
              "node"
            ],
            "class": "DependencyManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_blocking_tasks",
            "line": 124,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Get the IDs of tasks that block a given task.\n\nArgs:\n    dependencies: List of all dependencies\n    task_id: ID of the task to check\n    \nReturns:\n    List[str]: List of task IDs that block the specified task",
            "args": [
              "dependencies",
              "task_id"
            ],
            "class": "DependencyManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dependent_tasks",
            "line": 145,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Get the IDs of tasks that depend on a given task.\n\nArgs:\n    dependencies: List of all dependencies\n    task_id: ID of the task to check\n    \nReturns:\n    List[str]: List of task IDs that depend on the specified task",
            "args": [
              "dependencies",
              "task_id"
            ],
            "class": "DependencyManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DependencyType",
            "line": 15,
            "methods": [],
            "decorators": [],
            "docstring": "String enum-like constants for dependency types.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Dependency",
            "line": 22,
            "methods": [
              "update"
            ],
            "decorators": [],
            "docstring": "Model representing a dependency between two tasks.\n\nDependencies define relationships between tasks and may constrain\nwhen tasks can be started or completed.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyManager",
            "line": 52,
            "methods": [
              "validate_new_dependency",
              "get_blocking_tasks",
              "get_dependent_tasks"
            ],
            "decorators": [],
            "docstring": "Manager for handling task dependencies.\n\nProvides functionality for managing dependencies between tasks,\nincluding detection of circular dependencies.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DependencyType",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Dependency.update",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 37,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "DependencyManager",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 52,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DependencyManager.validate_new_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 61,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DependencyManager.is_cyclic_util",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 99,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DependencyManager.get_blocking_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 124,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DependencyManager.get_dependent_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/models/dependency.py",
            "line": 145,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 163,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the TaskController.\n\nArgs:\n    task_manager: TaskManager instance for business logic",
            "args": [
              "self",
              "task_manager"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 45,
            "async": true,
            "decorators": [],
            "docstring": "Create a new task.\n\nArgs:\n    task_create: Task creation schema\n    \nReturns:\n    TaskResponse: Created task\n    \nRaises:\n    HTTPException: If task creation fails",
            "args": [
              "self",
              "task_create"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 78,
            "async": true,
            "decorators": [],
            "docstring": "Get a task by ID.\n\nArgs:\n    task_id: ID of the task to retrieve\n    \nReturns:\n    TaskDetailResponse: Task detail response\n    \nRaises:\n    HTTPException: If task is not found",
            "args": [
              "self",
              "task_id"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 104,
            "async": true,
            "decorators": [],
            "docstring": "Update a task by ID.\n\nArgs:\n    task_id: ID of the task to update\n    task_update: Task update schema\n    \nReturns:\n    TaskResponse: Updated task\n    \nRaises:\n    HTTPException: If task is not found or update fails",
            "args": [
              "self",
              "task_id",
              "task_update"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_task",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Delete a task by ID.\n\nArgs:\n    task_id: ID of the task to delete\n    \nReturns:\n    ApiResponse: Success response\n    \nRaises:\n    HTTPException: If task is not found or delete fails",
            "args": [
              "self",
              "task_id"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tasks",
            "line": 179,
            "async": true,
            "decorators": [],
            "docstring": "List tasks with optional filtering.\n\nArgs:\n    status: Filter by status\n    priority: Filter by priority\n    assignee: Filter by assignee\n    tag: Filter by tag\n    search: Search term for title/description\n    page: Page number\n    page_size: Page size\n    \nReturns:\n    TaskListResponse: List of tasks and metadata",
            "args": [
              "self",
              "status",
              "priority",
              "assignee",
              "tag",
              "search",
              "page",
              "page_size"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_subtask",
            "line": 234,
            "async": true,
            "decorators": [],
            "docstring": "Add a subtask to a task.\n\nArgs:\n    task_id: ID of the parent task\n    subtask_create: Subtask creation schema\n    \nReturns:\n    TaskResponse: Updated task with new subtask\n    \nRaises:\n    HTTPException: If task is not found or subtask creation fails",
            "args": [
              "self",
              "task_id",
              "subtask_create"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_subtask",
            "line": 276,
            "async": true,
            "decorators": [],
            "docstring": "Update a subtask.\n\nArgs:\n    task_id: ID of the parent task\n    subtask_id: ID of the subtask to update\n    subtask_update: Subtask update schema\n    \nReturns:\n    TaskResponse: Updated task\n    \nRaises:\n    HTTPException: If task or subtask is not found or update fails",
            "args": [
              "self",
              "task_id",
              "subtask_id",
              "subtask_update"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_subtask",
            "line": 321,
            "async": true,
            "decorators": [],
            "docstring": "Remove a subtask from a task.\n\nArgs:\n    task_id: ID of the parent task\n    subtask_id: ID of the subtask to remove\n    \nReturns:\n    TaskResponse: Updated task\n    \nRaises:\n    HTTPException: If task or subtask is not found or removal fails",
            "args": [
              "self",
              "task_id",
              "subtask_id"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_requirement_ref",
            "line": 357,
            "async": true,
            "decorators": [],
            "docstring": "Add a requirement reference to a task.\n\nArgs:\n    task_id: ID of the task\n    req_ref_create: Requirement reference creation schema\n    \nReturns:\n    TaskResponse: Updated task with new requirement reference\n    \nRaises:\n    HTTPException: If task is not found or reference creation fails",
            "args": [
              "self",
              "task_id",
              "req_ref_create"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_requirement_ref",
            "line": 401,
            "async": true,
            "decorators": [],
            "docstring": "Update a requirement reference.\n\nArgs:\n    task_id: ID of the task\n    ref_id: ID of the requirement reference to update\n    req_ref_update: Requirement reference update schema\n    \nReturns:\n    TaskResponse: Updated task\n    \nRaises:\n    HTTPException: If task or reference is not found or update fails",
            "args": [
              "self",
              "task_id",
              "ref_id",
              "req_ref_update"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_requirement_ref",
            "line": 446,
            "async": true,
            "decorators": [],
            "docstring": "Remove a requirement reference from a task.\n\nArgs:\n    task_id: ID of the task\n    ref_id: ID of the requirement reference to remove\n    \nReturns:\n    TaskResponse: Updated task\n    \nRaises:\n    HTTPException: If task or reference is not found or removal fails",
            "args": [
              "self",
              "task_id",
              "ref_id"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_dependency",
            "line": 482,
            "async": true,
            "decorators": [],
            "docstring": "Create a new dependency between tasks.\n\nArgs:\n    dependency_create: Dependency creation schema\n    \nReturns:\n    DependencyResponse: Created dependency\n    \nRaises:\n    HTTPException: If dependency creation fails",
            "args": [
              "self",
              "dependency_create"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dependency",
            "line": 515,
            "async": true,
            "decorators": [],
            "docstring": "Get a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to retrieve\n    \nReturns:\n    DependencyResponse: Dependency response\n    \nRaises:\n    HTTPException: If dependency is not found",
            "args": [
              "self",
              "dependency_id"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_dependency",
            "line": 538,
            "async": true,
            "decorators": [],
            "docstring": "Update a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to update\n    dependency_update: Dependency update schema\n    \nReturns:\n    DependencyResponse: Updated dependency\n    \nRaises:\n    HTTPException: If dependency is not found or update fails",
            "args": [
              "self",
              "dependency_id",
              "dependency_update"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_dependency",
            "line": 579,
            "async": true,
            "decorators": [],
            "docstring": "Delete a dependency by ID.\n\nArgs:\n    dependency_id: ID of the dependency to delete\n    \nReturns:\n    ApiResponse: Success response\n    \nRaises:\n    HTTPException: If dependency is not found or delete fails",
            "args": [
              "self",
              "dependency_id"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_dependencies",
            "line": 610,
            "async": true,
            "decorators": [],
            "docstring": "List dependencies with optional filtering.\n\nArgs:\n    task_id: Filter by source or target task ID\n    dependency_type: Filter by dependency type\n    \nReturns:\n    DependencyListResponse: List of dependencies",
            "args": [
              "self",
              "task_id",
              "dependency_type"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_task_to_response",
            "line": 650,
            "async": false,
            "decorators": [],
            "docstring": "Convert a Task model to a TaskResponse schema.\n\nArgs:\n    task: Task model\n    \nReturns:\n    TaskResponse: Task response schema",
            "args": [
              "self",
              "task"
            ],
            "class": "TaskController",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_dependency_to_response",
            "line": 741,
            "async": false,
            "decorators": [],
            "docstring": "Convert a Dependency model to a DependencyResponse schema.\n\nArgs:\n    dependency: Dependency model\n    \nReturns:\n    DependencyResponse: Dependency response schema",
            "args": [
              "self",
              "dependency"
            ],
            "class": "TaskController",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskController",
            "line": 25,
            "methods": [
              "__init__",
              "_task_to_response",
              "_dependency_to_response"
            ],
            "decorators": [],
            "docstring": "Controller for task-related API endpoints.\n\nThis class provides methods for handling task-related API requests,\ntranslating between API schemas and core models, and delegating to\nthe TaskManager for business logic.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.status",
            "from": "fastapi",
            "name": "status",
            "alias": null,
            "line": 9
          },
          {
            "module": "metis.core.task_manager.TaskManager",
            "from": "metis.core.task_manager",
            "name": "TaskManager",
            "alias": null,
            "line": 11
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.models.dependency.Dependency",
            "from": "metis.models.dependency",
            "name": "Dependency",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.models.subtask.Subtask",
            "from": "metis.models.subtask",
            "name": "Subtask",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.requirement.RequirementRef",
            "from": "metis.models.requirement",
            "name": "RequirementRef",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.api.schemas.TaskCreate",
            "from": "metis.api.schemas",
            "name": "TaskCreate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.TaskUpdate",
            "from": "metis.api.schemas",
            "name": "TaskUpdate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.TaskResponse",
            "from": "metis.api.schemas",
            "name": "TaskResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.TaskListResponse",
            "from": "metis.api.schemas",
            "name": "TaskListResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.TaskDetailResponse",
            "from": "metis.api.schemas",
            "name": "TaskDetailResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.DependencyCreate",
            "from": "metis.api.schemas",
            "name": "DependencyCreate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.DependencyUpdate",
            "from": "metis.api.schemas",
            "name": "DependencyUpdate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.DependencyResponse",
            "from": "metis.api.schemas",
            "name": "DependencyResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.DependencyListResponse",
            "from": "metis.api.schemas",
            "name": "DependencyListResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.SubtaskCreate",
            "from": "metis.api.schemas",
            "name": "SubtaskCreate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.SubtaskUpdate",
            "from": "metis.api.schemas",
            "name": "SubtaskUpdate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.RequirementRefCreate",
            "from": "metis.api.schemas",
            "name": "RequirementRefCreate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.RequirementRefUpdate",
            "from": "metis.api.schemas",
            "name": "RequirementRefUpdate",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.ApiResponse",
            "from": "metis.api.schemas",
            "name": "ApiResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.api.schemas.SubtaskResponse",
            "from": "metis.api.schemas",
            "name": "SubtaskResponse",
            "alias": null,
            "line": 661
          },
          {
            "module": "metis.api.schemas.RequirementRefResponse",
            "from": "metis.api.schemas",
            "name": "RequirementRefResponse",
            "alias": null,
            "line": 661
          },
          {
            "module": "metis.api.schemas.ComplexityScoreResponse",
            "from": "metis.api.schemas",
            "name": "ComplexityScoreResponse",
            "alias": null,
            "line": 661
          },
          {
            "module": "metis.api.schemas.ComplexityFactorResponse",
            "from": "metis.api.schemas",
            "name": "ComplexityFactorResponse",
            "alias": null,
            "line": 694
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskController",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskController.create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 45,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.delete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.list_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 179,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.add_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 234,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.update_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 276,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.remove_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 321,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.add_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 357,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.update_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 401,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.remove_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 446,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.create_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 482,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.get_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 515,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.update_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 538,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.delete_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 579,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TaskController.list_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/controllers.py",
            "line": 610,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 759,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "metis.api.app.app",
            "from": "metis.api.app",
            "name": "app",
            "alias": null,
            "line": 3
          },
          {
            "module": "metis.api.routes.router",
            "from": "metis.api.routes",
            "name": "router",
            "alias": null,
            "line": 4
          },
          {
            "module": "metis.api.controllers.TaskController",
            "from": "metis.api.controllers",
            "name": "TaskController",
            "alias": null,
            "line": 5
          },
          {
            "module": "metis.api.schemas.TaskCreate",
            "from": "metis.api.schemas",
            "name": "TaskCreate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.TaskUpdate",
            "from": "metis.api.schemas",
            "name": "TaskUpdate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.TaskResponse",
            "from": "metis.api.schemas",
            "name": "TaskResponse",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.TaskListResponse",
            "from": "metis.api.schemas",
            "name": "TaskListResponse",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.TaskDetailResponse",
            "from": "metis.api.schemas",
            "name": "TaskDetailResponse",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.DependencyCreate",
            "from": "metis.api.schemas",
            "name": "DependencyCreate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.DependencyUpdate",
            "from": "metis.api.schemas",
            "name": "DependencyUpdate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.DependencyResponse",
            "from": "metis.api.schemas",
            "name": "DependencyResponse",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.DependencyListResponse",
            "from": "metis.api.schemas",
            "name": "DependencyListResponse",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.SubtaskCreate",
            "from": "metis.api.schemas",
            "name": "SubtaskCreate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.SubtaskUpdate",
            "from": "metis.api.schemas",
            "name": "SubtaskUpdate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.RequirementRefCreate",
            "from": "metis.api.schemas",
            "name": "RequirementRefCreate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.RequirementRefUpdate",
            "from": "metis.api.schemas",
            "name": "RequirementRefUpdate",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.ApiResponse",
            "from": "metis.api.schemas",
            "name": "ApiResponse",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.WebSocketMessage",
            "from": "metis.api.schemas",
            "name": "WebSocketMessage",
            "alias": null,
            "line": 6
          },
          {
            "module": "metis.api.schemas.WebSocketRegistration",
            "from": "metis.api.schemas",
            "name": "WebSocketRegistration",
            "alias": null,
            "line": 6
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 35,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_task_status",
            "line": 81,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get overall task management status.\n\nReturns:\n    Dictionary containing task management status and statistics",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_task_workflow",
            "line": 119,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a predefined task management workflow.\n\nArgs:\n    workflow_name: Name of the workflow to execute\n    parameters: Parameters for the workflow\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_name",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_task_with_subtasks_workflow",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Create a main task with multiple subtasks.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_import_and_analyze_requirement_workflow",
            "line": 193,
            "async": true,
            "decorators": [],
            "docstring": "Import a requirement from Telos and analyze its complexity.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_batch_update_tasks_workflow",
            "line": 220,
            "async": true,
            "decorators": [],
            "docstring": "Update multiple tasks in batch.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_analyze_project_complexity_workflow",
            "line": 249,
            "async": true,
            "decorators": [],
            "docstring": "Analyze complexity for all tasks in a project.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPRequest",
            "line": 31,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 37,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "get_task_status",
            "line": 81,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_task_workflow",
            "line": 119,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.mcp.fastmcp.server.FastMCPServer",
            "from": "tekton.mcp.fastmcp.server",
            "name": "FastMCPServer",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_mcp_endpoints",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.FastMCPError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "FastMCPError",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.core.mcp.tools.task_management_tools",
            "from": "metis.core.mcp.tools",
            "name": "task_management_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.core.mcp.tools.dependency_management_tools",
            "from": "metis.core.mcp.tools",
            "name": "dependency_management_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.core.mcp.tools.analytics_tools",
            "from": "metis.core.mcp.tools",
            "name": "analytics_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.core.mcp.tools.telos_integration_tools",
            "from": "metis.core.mcp.tools",
            "name": "telos_integration_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "metis.core.mcp.capabilities.TaskManagementCapability",
            "from": "metis.core.mcp.capabilities",
            "name": "TaskManagementCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "metis.core.mcp.capabilities.DependencyManagementCapability",
            "from": "metis.core.mcp.capabilities",
            "name": "DependencyManagementCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "metis.core.mcp.capabilities.TaskAnalyticsCapability",
            "from": "metis.core.mcp.capabilities",
            "name": "TaskAnalyticsCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "metis.core.mcp.capabilities.TelosIntegrationCapability",
            "from": "metis.core.mcp.capabilities",
            "name": "TelosIntegrationCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "metis.api.routes.task_manager",
            "from": "metis.api.routes",
            "name": "task_manager",
            "alias": null,
            "line": 90
          },
          {
            "module": "metis.core.mcp.tools.create_task",
            "from": "metis.core.mcp.tools",
            "name": "create_task",
            "alias": null,
            "line": 167
          },
          {
            "module": "metis.core.mcp.tools.add_subtask",
            "from": "metis.core.mcp.tools",
            "name": "add_subtask",
            "alias": null,
            "line": 167
          },
          {
            "module": "metis.core.mcp.tools.import_requirement_as_task",
            "from": "metis.core.mcp.tools",
            "name": "import_requirement_as_task",
            "alias": null,
            "line": 195
          },
          {
            "module": "metis.core.mcp.tools.analyze_task_complexity",
            "from": "metis.core.mcp.tools",
            "name": "analyze_task_complexity",
            "alias": null,
            "line": 195
          },
          {
            "module": "metis.core.mcp.tools.update_task",
            "from": "metis.core.mcp.tools",
            "name": "update_task",
            "alias": null,
            "line": 222
          },
          {
            "module": "metis.core.mcp.tools.list_tasks",
            "from": "metis.core.mcp.tools",
            "name": "list_tasks",
            "alias": null,
            "line": 222
          },
          {
            "module": "metis.core.mcp.tools.list_tasks",
            "from": "metis.core.mcp.tools",
            "name": "list_tasks",
            "alias": null,
            "line": 251
          },
          {
            "module": "metis.core.mcp.tools.analyze_task_complexity",
            "from": "metis.core.mcp.tools",
            "name": "analyze_task_complexity",
            "alias": null,
            "line": 251
          },
          {
            "module": "metis.core.mcp.tools.get_task_statistics",
            "from": "metis.core.mcp.tools",
            "name": "get_task_statistics",
            "alias": null,
            "line": 251
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/fastmcp_endpoints.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/fastmcp_endpoints.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_task_status",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/fastmcp_endpoints.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_task_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/fastmcp_endpoints.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 280,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
      "analysis": {
        "functions": [
          {
            "name": "status_must_be_valid",
            "line": 169,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that the status is a valid TaskStatus value.",
            "args": [
              "cls",
              "v"
            ],
            "class": "TaskCreate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "priority_must_be_valid",
            "line": 177,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that the priority is a valid Priority value.",
            "args": [
              "cls",
              "v"
            ],
            "class": "TaskCreate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "status_must_be_valid",
            "line": 198,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that the status is a valid TaskStatus value.",
            "args": [
              "cls",
              "v"
            ],
            "class": "TaskUpdate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "priority_must_be_valid",
            "line": 206,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that the priority is a valid Priority value.",
            "args": [
              "cls",
              "v"
            ],
            "class": "TaskUpdate",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ApiResponse",
            "line": 18,
            "methods": [],
            "decorators": [],
            "docstring": "Base model for API responses with standard fields.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SubtaskCreate",
            "line": 25,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for creating a new subtask.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SubtaskUpdate",
            "line": 33,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for updating a subtask.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SubtaskResponse",
            "line": 41,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for subtask response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityFactorCreate",
            "line": 53,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for creating a complexity factor.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityFactorUpdate",
            "line": 62,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for updating a complexity factor.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityFactorResponse",
            "line": 71,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for complexity factor response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComplexityScoreResponse",
            "line": 81,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for complexity score response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RequirementRefCreate",
            "line": 92,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for creating a requirement reference.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RequirementRefUpdate",
            "line": 102,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for updating a requirement reference.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RequirementRefResponse",
            "line": 112,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for requirement reference response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyCreate",
            "line": 126,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for creating a dependency between tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyUpdate",
            "line": 134,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for updating a dependency.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyResponse",
            "line": 140,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for dependency response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskCreate",
            "line": 152,
            "methods": [
              "status_must_be_valid",
              "priority_must_be_valid"
            ],
            "decorators": [],
            "docstring": "Schema for creating a new task.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskUpdate",
            "line": 184,
            "methods": [
              "status_must_be_valid",
              "priority_must_be_valid"
            ],
            "decorators": [],
            "docstring": "Schema for updating a task.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskResponse",
            "line": 213,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for task response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskListResponse",
            "line": 234,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for task list response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskDetailResponse",
            "line": 242,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for detailed task response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyListResponse",
            "line": 247,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for dependency list response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskQueryParams",
            "line": 253,
            "methods": [],
            "decorators": [],
            "docstring": "Query parameters for filtering tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebSocketMessage",
            "line": 265,
            "methods": [],
            "decorators": [],
            "docstring": "Base schema for WebSocket messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebSocketRegistration",
            "line": 271,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for WebSocket registration messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.models.enums.ComplexityLevel",
            "from": "metis.models.enums",
            "name": "ComplexityLevel",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ApiResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SubtaskCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SubtaskUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SubtaskResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComplexityFactorCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 53,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComplexityFactorUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 62,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComplexityFactorResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 71,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComplexityScoreResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 81,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RequirementRefCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 92,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RequirementRefUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 102,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RequirementRefResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 112,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DependencyCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 126,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DependencyUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 134,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DependencyResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 140,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 152,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskCreate.status_must_be_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 169,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskCreate.priority_must_be_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 177,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TaskUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 184,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskUpdate.status_must_be_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 198,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskUpdate.priority_must_be_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 206,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TaskResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 213,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 234,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskDetailResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 242,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DependencyListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 247,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskQueryParams",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 253,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebSocketMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 265,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebSocketRegistration",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/schemas.py",
            "line": 271,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 274,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Initialize component during startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 93,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 105,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 145,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint for Metis API.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 158,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint following Tekton standards.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 165,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time updates.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "http_exception_handler",
            "line": 269,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": "Custom handler for HTTPException to provide consistent response format.",
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "global_exception_handler",
            "line": 283,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": "Generic exception handler to catch all unhandled exceptions.",
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "ready",
            "line": 93,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 105,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 145,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 158,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 165,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.status",
            "from": "fastapi",
            "name": "status",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 18
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 19
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 19
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 19
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 19
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 19
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 20
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 29
          },
          {
            "module": "shared.api.documentation.get_openapi_configuration",
            "from": "shared.api.documentation",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.api.endpoints.create_ready_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.endpoints.create_discovery_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.endpoints.EndpointInfo",
            "from": "shared.api.endpoints",
            "name": "EndpointInfo",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.routers.create_standard_routers",
            "from": "shared.api.routers",
            "name": "create_standard_routers",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.routers.mount_standard_routers",
            "from": "shared.api.routers",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 34
          },
          {
            "module": "metis.core.metis_component.MetisComponent",
            "from": "metis.core.metis_component",
            "name": "MetisComponent",
            "alias": null,
            "line": 37
          },
          {
            "module": "metis.api.routes.router",
            "from": "metis.api.routes",
            "name": "router",
            "alias": "api_router",
            "line": 38
          },
          {
            "module": "metis.api.schemas.WebSocketMessage",
            "from": "metis.api.schemas",
            "name": "WebSocketMessage",
            "alias": null,
            "line": 39
          },
          {
            "module": "metis.api.schemas.WebSocketRegistration",
            "from": "metis.api.schemas",
            "name": "WebSocketRegistration",
            "alias": null,
            "line": 39
          },
          {
            "module": "metis.api.fastmcp_endpoints.mcp_router",
            "from": "metis.api.fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 40
          },
          {
            "module": "metis.core.mcp.hermes_bridge.MetisMCPBridge",
            "from": "metis.core.mcp.hermes_bridge",
            "name": "MetisMCPBridge",
            "alias": null,
            "line": 60
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 167
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 295
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 93,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 158,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "http_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 269,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "global_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/app.py",
            "line": 283,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 306,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
      "analysis": {
        "functions": [
          {
            "name": "get_task_controller",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Get the TaskController instance from the component.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 49,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new task.",
            "args": [
              "task_create",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 64,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a task by ID.",
            "args": [
              "task_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 79,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a task.",
            "args": [
              "task_update",
              "task_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_task",
            "line": 95,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a task.",
            "args": [
              "task_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_tasks",
            "line": 110,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List tasks with filtering.",
            "args": [
              "status",
              "priority",
              "assignee",
              "tag",
              "search",
              "page",
              "page_size",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_subtask",
            "line": 141,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add a subtask to a task.",
            "args": [
              "subtask_create",
              "task_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_subtask",
            "line": 157,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a subtask.",
            "args": [
              "subtask_update",
              "task_id",
              "subtask_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_subtask",
            "line": 174,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Remove a subtask from a task.",
            "args": [
              "task_id",
              "subtask_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "add_requirement_ref",
            "line": 192,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add a requirement reference to a task.",
            "args": [
              "req_ref_create",
              "task_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_requirement_ref",
            "line": 208,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a requirement reference.",
            "args": [
              "req_ref_update",
              "task_id",
              "ref_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_requirement_ref",
            "line": 225,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Remove a requirement reference from a task.",
            "args": [
              "task_id",
              "ref_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "create_dependency",
            "line": 244,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a dependency between tasks.",
            "args": [
              "dependency_create",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dependency",
            "line": 259,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a dependency by ID.",
            "args": [
              "dependency_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_dependency",
            "line": 274,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a dependency.",
            "args": [
              "dependency_update",
              "dependency_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_dependency",
            "line": 290,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a dependency.",
            "args": [
              "dependency_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_dependencies",
            "line": 305,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List dependencies with filtering.",
            "args": [
              "task_id",
              "dependency_type",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_task_dependencies",
            "line": 324,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List dependencies for a specific task.",
            "args": [
              "task_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_telos_requirements",
            "line": 341,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Search for requirements in Telos.",
            "args": [
              "query",
              "status",
              "category",
              "page",
              "page_size",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "import_requirement_as_task",
            "line": 375,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Import a requirement from Telos as a new task.",
            "args": [
              "requirement_id",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decompose_task",
            "line": 401,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Decompose a task into subtasks using AI.",
            "args": [
              "task_id",
              "depth",
              "max_subtasks",
              "auto_create",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_task_complexity",
            "line": 432,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze task complexity using AI.",
            "args": [
              "task_id",
              "include_subtasks",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "suggest_task_order",
            "line": 461,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Suggest optimal task execution order using AI.",
            "args": [
              "task_ids",
              "status_filter",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_telos_requirement_ref",
            "line": 490,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add a reference to a Telos requirement to a task.",
            "args": [
              "task_id",
              "requirement_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decompose_task",
            "line": 524,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Decompose a task into subtasks using AI.",
            "args": [
              "task_id",
              "depth",
              "max_subtasks",
              "auto_create",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_task_complexity",
            "line": 555,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze task complexity using AI.",
            "args": [
              "task_id",
              "include_subtasks",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "suggest_task_order",
            "line": 584,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Suggest optimal task execution order using AI.",
            "args": [
              "task_ids",
              "status_filter",
              "controller"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "create_task",
            "line": 49,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_task",
            "line": 64,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_task",
            "line": 79,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_task",
            "line": 95,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_tasks",
            "line": 110,
            "method": "@get",
            "async": true
          },
          {
            "name": "add_subtask",
            "line": 141,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_subtask",
            "line": 157,
            "method": "@put",
            "async": true
          },
          {
            "name": "remove_subtask",
            "line": 174,
            "method": "@delete",
            "async": true
          },
          {
            "name": "add_requirement_ref",
            "line": 192,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_requirement_ref",
            "line": 208,
            "method": "@put",
            "async": true
          },
          {
            "name": "remove_requirement_ref",
            "line": 225,
            "method": "@delete",
            "async": true
          },
          {
            "name": "create_dependency",
            "line": 244,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_dependency",
            "line": 259,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_dependency",
            "line": 274,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_dependency",
            "line": 290,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_dependencies",
            "line": 305,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_task_dependencies",
            "line": 324,
            "method": "@get",
            "async": true
          },
          {
            "name": "search_telos_requirements",
            "line": 341,
            "method": "@get",
            "async": true
          },
          {
            "name": "import_requirement_as_task",
            "line": 375,
            "method": "@post",
            "async": true
          },
          {
            "name": "decompose_task",
            "line": 401,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_task_complexity",
            "line": 432,
            "method": "@post",
            "async": true
          },
          {
            "name": "suggest_task_order",
            "line": 461,
            "method": "@post",
            "async": true
          },
          {
            "name": "add_telos_requirement_ref",
            "line": 490,
            "method": "@post",
            "async": true
          },
          {
            "name": "decompose_task",
            "line": 524,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_task_complexity",
            "line": 555,
            "method": "@post",
            "async": true
          },
          {
            "name": "suggest_task_order",
            "line": 584,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.status",
            "from": "fastapi",
            "name": "status",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 9
          },
          {
            "module": "metis.api.controllers.TaskController",
            "from": "metis.api.controllers",
            "name": "TaskController",
            "alias": null,
            "line": 11
          },
          {
            "module": "metis.api.schemas.TaskCreate",
            "from": "metis.api.schemas",
            "name": "TaskCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.TaskUpdate",
            "from": "metis.api.schemas",
            "name": "TaskUpdate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.TaskResponse",
            "from": "metis.api.schemas",
            "name": "TaskResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.TaskListResponse",
            "from": "metis.api.schemas",
            "name": "TaskListResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.TaskDetailResponse",
            "from": "metis.api.schemas",
            "name": "TaskDetailResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.DependencyCreate",
            "from": "metis.api.schemas",
            "name": "DependencyCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.DependencyUpdate",
            "from": "metis.api.schemas",
            "name": "DependencyUpdate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.DependencyResponse",
            "from": "metis.api.schemas",
            "name": "DependencyResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.DependencyListResponse",
            "from": "metis.api.schemas",
            "name": "DependencyListResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.SubtaskCreate",
            "from": "metis.api.schemas",
            "name": "SubtaskCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.SubtaskUpdate",
            "from": "metis.api.schemas",
            "name": "SubtaskUpdate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.RequirementRefCreate",
            "from": "metis.api.schemas",
            "name": "RequirementRefCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.RequirementRefUpdate",
            "from": "metis.api.schemas",
            "name": "RequirementRefUpdate",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.ApiResponse",
            "from": "metis.api.schemas",
            "name": "ApiResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.WebSocketMessage",
            "from": "metis.api.schemas",
            "name": "WebSocketMessage",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.api.schemas.WebSocketRegistration",
            "from": "metis.api.schemas",
            "name": "WebSocketRegistration",
            "alias": null,
            "line": 12
          },
          {
            "module": "metis.core.mcp.tools.decompose_task",
            "from": "metis.core.mcp.tools",
            "name": "decompose_task",
            "alias": "mcp_decompose_task",
            "line": 19
          },
          {
            "module": "metis.core.mcp.tools.analyze_task_complexity",
            "from": "metis.core.mcp.tools",
            "name": "analyze_task_complexity",
            "alias": "mcp_analyze_complexity",
            "line": 438
          },
          {
            "module": "metis.core.mcp.tools.suggest_task_order",
            "from": "metis.core.mcp.tools",
            "name": "suggest_task_order",
            "alias": "mcp_suggest_order",
            "line": 467
          },
          {
            "module": "metis.api.controllers.TaskController",
            "from": "metis.api.controllers",
            "name": "TaskController",
            "alias": null,
            "line": 510
          },
          {
            "module": "metis.core.mcp.tools.analyze_task_complexity",
            "from": "metis.core.mcp.tools",
            "name": "analyze_task_complexity",
            "alias": "mcp_analyze_complexity",
            "line": 561
          },
          {
            "module": "metis.core.mcp.tools.suggest_task_order",
            "from": "metis.core.mcp.tools",
            "name": "suggest_task_order",
            "alias": "mcp_suggest_order",
            "line": 590
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_task_controller",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 110,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 141,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "remove_subtask",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "add_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 192,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 208,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "remove_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "create_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 259,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 274,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 290,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 305,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_task_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 324,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_telos_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 341,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "import_requirement_as_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 375,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "decompose_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 401,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_task_complexity",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 432,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "suggest_task_order",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 461,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_telos_requirement_ref",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 490,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "decompose_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 524,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_task_complexity",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 555,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "suggest_task_order",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/routes.py",
            "line": 584,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 603,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Metis MCP Bridge.",
            "args": [
              "self",
              "task_manager",
              "component_name"
            ],
            "class": "MetisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 33,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "MetisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 73,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "MetisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 88,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "MetisMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 101,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "MetisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 125,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "MetisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 146,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from Metis task manager.",
            "args": [
              "self"
            ],
            "class": "MetisMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 180,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "MetisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MetisMCPBridge",
            "line": 18,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Metis's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Metis to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.core.mcp.tools.task_management_tools",
            "from": "metis.core.mcp.tools",
            "name": "task_management_tools",
            "alias": null,
            "line": 51
          },
          {
            "module": "metis.core.mcp.tools.dependency_management_tools",
            "from": "metis.core.mcp.tools",
            "name": "dependency_management_tools",
            "alias": null,
            "line": 51
          },
          {
            "module": "metis.core.mcp.tools.analytics_tools",
            "from": "metis.core.mcp.tools",
            "name": "analytics_tools",
            "alias": null,
            "line": 51
          },
          {
            "module": "metis.core.mcp.tools.telos_integration_tools",
            "from": "metis.core.mcp.tools",
            "name": "telos_integration_tools",
            "alias": null,
            "line": 51
          },
          {
            "module": "metis.api.routes.task_manager",
            "from": "metis.api.routes",
            "name": "task_manager",
            "alias": "tm",
            "line": 150
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MetisMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetisMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 73,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 101,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/hermes_bridge.py",
            "line": 180,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 188,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "get_task_manager",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Get or create TaskManager instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_llm_adapter",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Get or create LLM adapter instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task_decomposer",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Get or create TaskDecomposer instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decompose_task",
            "line": 48,
            "async": true,
            "decorators": [],
            "docstring": "Decompose a task into subtasks using AI.\n\nArgs:\n    task_id: ID of the task to decompose\n    depth: Maximum decomposition depth (1-5)\n    max_subtasks: Maximum number of subtasks to create (1-20)\n    auto_create: Whether to automatically create subtasks\n    \nReturns:\n    Dictionary containing decomposition results",
            "args": [
              "task_id",
              "depth",
              "max_subtasks",
              "auto_create"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_task_complexity",
            "line": 103,
            "async": true,
            "decorators": [],
            "docstring": "Analyze task complexity using AI.\n\nArgs:\n    task_id: ID of the task to analyze\n    include_subtasks: Whether to include subtasks in analysis\n    \nReturns:\n    Dictionary containing complexity analysis",
            "args": [
              "task_id",
              "include_subtasks"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "suggest_task_order",
            "line": 167,
            "async": true,
            "decorators": [],
            "docstring": "Suggest optimal task execution order.\n\nArgs:\n    task_ids: List of specific task IDs to order (None for all)\n    status_filter: Filter tasks by status (e.g., \"pending\")\n    \nReturns:\n    Dictionary containing execution order suggestions",
            "args": [
              "task_ids",
              "status_filter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_subtasks",
            "line": 242,
            "async": true,
            "decorators": [],
            "docstring": "Generate subtasks from a description without requiring an existing task.\n\nArgs:\n    title: Title for the task\n    description: Description to generate subtasks from\n    parent_task_id: Optional parent task to attach subtasks to\n    auto_create_task: Whether to create a new task if parent_task_id is None\n    \nReturns:\n    Dictionary containing generated subtasks",
            "args": [
              "title",
              "description",
              "parent_task_id",
              "auto_create_task"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "detect_dependencies",
            "line": 322,
            "async": true,
            "decorators": [],
            "docstring": "Detect potential dependencies between tasks using AI.\n\nArgs:\n    task_ids: List of task IDs to analyze (None for all)\n    auto_create: Whether to automatically create detected dependencies\n    \nReturns:\n    Dictionary containing detected dependencies",
            "args": [
              "task_ids",
              "auto_create"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 556,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MetisTaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decompose_task",
            "line": 561,
            "async": true,
            "decorators": [],
            "docstring": "Decompose a task using AI.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "MetisTaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_complexity",
            "line": 565,
            "async": true,
            "decorators": [],
            "docstring": "Analyze task complexity.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "MetisTaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "suggest_order",
            "line": 569,
            "async": true,
            "decorators": [],
            "docstring": "Suggest task execution order.",
            "args": [
              "self"
            ],
            "class": "MetisTaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_subtasks",
            "line": 573,
            "async": true,
            "decorators": [],
            "docstring": "Generate subtasks from description.",
            "args": [
              "self",
              "title",
              "description"
            ],
            "class": "MetisTaskManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "detect_dependencies",
            "line": 577,
            "async": true,
            "decorators": [],
            "docstring": "Detect task dependencies.",
            "args": [
              "self"
            ],
            "class": "MetisTaskManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MetisTaskManager",
            "line": 553,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "MCP-enabled task manager with AI capabilities.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "metis.core.task_manager.TaskManager",
            "from": "metis.core.task_manager",
            "name": "TaskManager",
            "alias": null,
            "line": 13
          },
          {
            "module": "metis.core.llm_adapter.MetisLLMAdapter",
            "from": "metis.core.llm_adapter",
            "name": "MetisLLMAdapter",
            "alias": null,
            "line": 14
          },
          {
            "module": "metis.core.task_decomposer.TaskDecomposer",
            "from": "metis.core.task_decomposer",
            "name": "TaskDecomposer",
            "alias": null,
            "line": 15
          },
          {
            "module": "metis.models.enums.TaskStatus",
            "from": "metis.models.enums",
            "name": "TaskStatus",
            "alias": null,
            "line": 16
          },
          {
            "module": "metis.models.task.Task",
            "from": "metis.models.task",
            "name": "Task",
            "alias": null,
            "line": 274
          },
          {
            "module": "metis.models.enums.Priority",
            "from": "metis.models.enums",
            "name": "Priority",
            "alias": null,
            "line": 275
          },
          {
            "module": "metis.models.dependency.Dependency",
            "from": "metis.models.dependency",
            "name": "Dependency",
            "alias": null,
            "line": 391
          },
          {
            "module": "metis.models.dependency.DependencyType",
            "from": "metis.models.dependency",
            "name": "DependencyType",
            "alias": null,
            "line": 391
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_task_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_llm_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_task_decomposer",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decompose_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 48,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_task_complexity",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "suggest_task_order",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 167,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "generate_subtasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 242,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "detect_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 322,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "MetisTaskManager",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 553,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetisTaskManager.decompose_task",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 561,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisTaskManager.analyze_complexity",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 565,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisTaskManager.suggest_order",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 569,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisTaskManager.generate_subtasks",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 573,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetisTaskManager.detect_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/tools.py",
            "line": 577,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 579,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "tools.*",
            "from": "tools",
            "name": "*",
            "alias": null,
            "line": 7
          },
          {
            "module": "capabilities.*",
            "from": "capabilities",
            "name": "*",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 15,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/capabilities.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "TaskManagementCapability",
            "line": 16,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for basic task CRUD operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyManagementCapability",
            "line": 28,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for task dependency management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskAnalyticsCapability",
            "line": 40,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for task analysis and reporting.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TelosIntegrationCapability",
            "line": 52,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for Telos requirements integration.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/capabilities.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DependencyManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/capabilities.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskAnalyticsCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/capabilities.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TelosIntegrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/core/mcp/capabilities.py",
            "line": 52,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 56,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Metis/metis/api/endpoints/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 35,
    "total_functions": 230,
    "total_classes": 56,
    "total_landmarks": 252,
    "patterns": [
      "fastapi",
      "singleton",
      "async",
      "error_handling",
      "mcp",
      "websocket"
    ],
    "api_endpoints": 32,
    "mcp_tools": 0
  }
}