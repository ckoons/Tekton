{
  "component": "Prometheus",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/setup.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 6
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 6
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 47,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/examples/client_usage.py",
      "analysis": {
        "functions": [
          {
            "name": "demonstrate_planning_capabilities",
            "line": 29,
            "async": true,
            "decorators": [],
            "docstring": "Demonstrate the planning capabilities of Prometheus.\n\nArgs:\n    client: PrometheusClient instance",
            "args": [
              "client"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "demonstrate_retrospective_capabilities",
            "line": 182,
            "async": true,
            "decorators": [],
            "docstring": "Demonstrate the retrospective capabilities of Epimethius.\n\nArgs:\n    client: PrometheusClient instance\n    plan_id: ID of the plan to analyze\n    task_ids: IDs of the tasks in the plan",
            "args": [
              "client",
              "plan_id",
              "task_ids"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 294,
            "async": true,
            "decorators": [],
            "docstring": "Main function to demonstrate Prometheus/Epimethius capabilities.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 11
          },
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "prometheus.client.PrometheusClient",
            "from": "prometheus.client",
            "name": "PrometheusClient",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "demonstrate_planning_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/examples/client_usage.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "demonstrate_retrospective_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/examples/client_usage.py",
            "line": 182,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/examples/client_usage.py",
            "line": 294,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 328,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Prometheus/Epimethius client.\n\nArgs:\n    base_url: Base URL for the Prometheus/Epimethius API (default: from GlobalConfig)\n    session: aiohttp ClientSession (a new one will be created if not provided)\n    timeout: Request timeout in seconds\n    max_retries: Maximum number of retries for failed requests\n    retry_delay: Delay between retries in seconds",
            "args": [
              "self",
              "base_url",
              "session",
              "timeout",
              "max_retries",
              "retry_delay"
            ],
            "class": "PrometheusClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_session",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Get the aiohttp session, creating a new one if necessary.\n\nReturns:\n    aiohttp ClientSession",
            "args": [
              "self"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 86,
            "async": true,
            "decorators": [],
            "docstring": "Close the aiohttp session if it was created by this client.",
            "args": [
              "self"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_request",
            "line": 92,
            "async": true,
            "decorators": [],
            "docstring": "Make a request to the Prometheus/Epimethius API.\n\nArgs:\n    method: HTTP method (GET, POST, PUT, DELETE)\n    endpoint: API endpoint\n    params: Query parameters\n    data: Request body\n    headers: HTTP headers\n    \nReturns:\n    Response data as dictionary\n    \nRaises:\n    aiohttp.ClientError: If the request fails",
            "args": [
              "self",
              "method",
              "endpoint",
              "params",
              "data",
              "headers"
            ],
            "class": "PrometheusClient",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "health_check",
            "line": 159,
            "async": true,
            "decorators": [],
            "docstring": "Check the health of the Prometheus/Epimethius service.\n\nReturns:\n    Health check response",
            "args": [
              "self"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_plan",
            "line": 170,
            "async": true,
            "decorators": [],
            "docstring": "Create a new plan.\n\nArgs:\n    name: Plan name\n    description: Plan description\n    start_date: Start date (ISO format)\n    end_date: End date (ISO format)\n    tags: List of tags\n    metadata: Additional metadata\n    \nReturns:\n    Plan ID",
            "args": [
              "self",
              "name",
              "description",
              "start_date",
              "end_date",
              "tags",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_plan",
            "line": 205,
            "async": true,
            "decorators": [],
            "docstring": "Get a plan by ID.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Plan details",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_plan",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "Update a plan.\n\nArgs:\n    plan_id: Plan ID\n    name: New plan name\n    description: New plan description\n    start_date: New start date (ISO format)\n    end_date: New end date (ISO format)\n    tags: New list of tags\n    metadata: New additional metadata\n    \nReturns:\n    Updated plan details",
            "args": [
              "self",
              "plan_id",
              "name",
              "description",
              "start_date",
              "end_date",
              "tags",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_plan",
            "line": 258,
            "async": true,
            "decorators": [],
            "docstring": "Delete a plan.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Deletion status",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_plans",
            "line": 270,
            "async": true,
            "decorators": [],
            "docstring": "List plans.\n\nArgs:\n    limit: Maximum number of plans to return\n    offset: Offset for pagination\n    tag: Filter by tag\n    search: Search term\n    \nReturns:\n    List of plans",
            "args": [
              "self",
              "limit",
              "offset",
              "tag",
              "search"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_task",
            "line": 300,
            "async": true,
            "decorators": [],
            "docstring": "Add a task to a plan.\n\nArgs:\n    plan_id: Plan ID\n    name: Task name\n    description: Task description\n    duration: Task duration\n    duration_unit: Duration unit (days, hours, etc.)\n    assigned_to: Resource ID assigned to the task\n    dependencies: List of task IDs that this task depends on\n    status: Task status (pending, in_progress, completed, blocked)\n    priority: Task priority (low, medium, high, critical)\n    tags: List of tags\n    metadata: Additional metadata\n    \nReturns:\n    Task ID",
            "args": [
              "self",
              "plan_id",
              "name",
              "description",
              "duration",
              "duration_unit",
              "assigned_to",
              "dependencies",
              "status",
              "priority",
              "tags",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 353,
            "async": true,
            "decorators": [],
            "docstring": "Update a task.\n\nArgs:\n    plan_id: Plan ID\n    task_id: Task ID\n    name: New task name\n    description: New task description\n    duration: New task duration\n    duration_unit: New duration unit\n    assigned_to: New resource ID assigned to the task\n    dependencies: New list of task IDs that this task depends on\n    status: New task status\n    priority: New task priority\n    tags: New list of tags\n    metadata: New additional metadata\n    \nReturns:\n    Updated task details",
            "args": [
              "self",
              "plan_id",
              "task_id",
              "name",
              "description",
              "duration",
              "duration_unit",
              "assigned_to",
              "dependencies",
              "status",
              "priority",
              "tags",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 412,
            "async": true,
            "decorators": [],
            "docstring": "Get a task by ID.\n\nArgs:\n    plan_id: Plan ID\n    task_id: Task ID\n    \nReturns:\n    Task details",
            "args": [
              "self",
              "plan_id",
              "task_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_task",
            "line": 425,
            "async": true,
            "decorators": [],
            "docstring": "Delete a task.\n\nArgs:\n    plan_id: Plan ID\n    task_id: Task ID\n    \nReturns:\n    Deletion status",
            "args": [
              "self",
              "plan_id",
              "task_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tasks",
            "line": 438,
            "async": true,
            "decorators": [],
            "docstring": "List tasks in a plan.\n\nArgs:\n    plan_id: Plan ID\n    limit: Maximum number of tasks to return\n    offset: Offset for pagination\n    status: Filter by status\n    assigned_to: Filter by assigned resource\n    search: Search term\n    \nReturns:\n    List of tasks",
            "args": [
              "self",
              "plan_id",
              "limit",
              "offset",
              "status",
              "assigned_to",
              "search"
            ],
            "class": "PrometheusClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_task_progress",
            "line": 474,
            "async": true,
            "decorators": [],
            "docstring": "Update task progress.\n\nArgs:\n    plan_id: Plan ID\n    task_id: Task ID\n    status: Task status (pending, in_progress, completed, blocked)\n    actual_start_date: Actual start date (ISO format)\n    actual_end_date: Actual end date (ISO format)\n    actual_duration: Actual duration\n    actual_duration_unit: Actual duration unit\n    completion_percentage: Completion percentage (0-100)\n    notes: Progress notes\n    \nReturns:\n    Updated task details",
            "args": [
              "self",
              "plan_id",
              "task_id",
              "status",
              "actual_start_date",
              "actual_end_date",
              "actual_duration",
              "actual_duration_unit",
              "completion_percentage",
              "notes"
            ],
            "class": "PrometheusClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add_resource",
            "line": 527,
            "async": true,
            "decorators": [],
            "docstring": "Add a resource to a plan.\n\nArgs:\n    plan_id: Plan ID\n    name: Resource name\n    type: Resource type (human, equipment, etc.)\n    skills: List of skills\n    availability: Availability (0.0 to 1.0, where 1.0 is full-time)\n    cost_rate: Cost rate\n    metadata: Additional metadata\n    \nReturns:\n    Resource ID",
            "args": [
              "self",
              "plan_id",
              "name",
              "type",
              "skills",
              "availability",
              "cost_rate",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_resource",
            "line": 566,
            "async": true,
            "decorators": [],
            "docstring": "Update a resource.\n\nArgs:\n    plan_id: Plan ID\n    resource_id: Resource ID\n    name: New resource name\n    type: New resource type\n    skills: New list of skills\n    availability: New availability\n    cost_rate: New cost rate\n    metadata: New additional metadata\n    \nReturns:\n    Updated resource details",
            "args": [
              "self",
              "plan_id",
              "resource_id",
              "name",
              "type",
              "skills",
              "availability",
              "cost_rate",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_resource",
            "line": 609,
            "async": true,
            "decorators": [],
            "docstring": "Get a resource by ID.\n\nArgs:\n    plan_id: Plan ID\n    resource_id: Resource ID\n    \nReturns:\n    Resource details",
            "args": [
              "self",
              "plan_id",
              "resource_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_resource",
            "line": 622,
            "async": true,
            "decorators": [],
            "docstring": "Delete a resource.\n\nArgs:\n    plan_id: Plan ID\n    resource_id: Resource ID\n    \nReturns:\n    Deletion status",
            "args": [
              "self",
              "plan_id",
              "resource_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_resources",
            "line": 635,
            "async": true,
            "decorators": [],
            "docstring": "List resources in a plan.\n\nArgs:\n    plan_id: Plan ID\n    limit: Maximum number of resources to return\n    offset: Offset for pagination\n    type: Filter by type\n    skill: Filter by skill\n    search: Search term\n    \nReturns:\n    List of resources",
            "args": [
              "self",
              "plan_id",
              "limit",
              "offset",
              "type",
              "skill",
              "search"
            ],
            "class": "PrometheusClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "calculate_critical_path",
            "line": 671,
            "async": true,
            "decorators": [],
            "docstring": "Calculate the critical path for a plan.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Critical path analysis",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_timeline",
            "line": 683,
            "async": true,
            "decorators": [],
            "docstring": "Generate a timeline for a plan.\n\nArgs:\n    plan_id: Plan ID\n    format: Timeline format (default, gantt, etc.)\n    include_resources: Whether to include resources in the timeline\n    \nReturns:\n    Timeline data",
            "args": [
              "self",
              "plan_id",
              "format",
              "include_resources"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_plan_summary",
            "line": 707,
            "async": true,
            "decorators": [],
            "docstring": "Get a summary of a plan.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Plan summary",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_plan_analysis",
            "line": 719,
            "async": true,
            "decorators": [],
            "docstring": "Generate an LLM-powered analysis of a plan.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Plan analysis",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_retrospective",
            "line": 733,
            "async": true,
            "decorators": [],
            "docstring": "Create a retrospective for a plan.\n\nArgs:\n    plan_id: Plan ID\n    name: Retrospective name\n    description: Retrospective description\n    date: Retrospective date (ISO format)\n    participants: List of participant names\n    tags: List of tags\n    metadata: Additional metadata\n    \nReturns:\n    Retrospective ID",
            "args": [
              "self",
              "plan_id",
              "name",
              "description",
              "date",
              "participants",
              "tags",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_retrospective",
            "line": 771,
            "async": true,
            "decorators": [],
            "docstring": "Get a retrospective by ID.\n\nArgs:\n    retrospective_id: Retrospective ID\n    \nReturns:\n    Retrospective details",
            "args": [
              "self",
              "retrospective_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_retrospectives",
            "line": 783,
            "async": true,
            "decorators": [],
            "docstring": "List retrospectives.\n\nArgs:\n    plan_id: Filter by plan ID\n    limit: Maximum number of retrospectives to return\n    offset: Offset for pagination\n    tag: Filter by tag\n    search: Search term\n    \nReturns:\n    List of retrospectives",
            "args": [
              "self",
              "plan_id",
              "limit",
              "offset",
              "tag",
              "search"
            ],
            "class": "PrometheusClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_retrospective_feedback",
            "line": 817,
            "async": true,
            "decorators": [],
            "docstring": "Add feedback to a retrospective.\n\nArgs:\n    retrospective_id: Retrospective ID\n    type: Feedback type (positive, negative, neutral)\n    description: Feedback description\n    source: Feedback source (who provided it)\n    priority: Feedback priority (low, medium, high)\n    metadata: Additional metadata\n    \nReturns:\n    Feedback ID",
            "args": [
              "self",
              "retrospective_id",
              "type",
              "description",
              "source",
              "priority",
              "metadata"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_retrospective_feedback",
            "line": 853,
            "async": true,
            "decorators": [],
            "docstring": "Get feedback by ID.\n\nArgs:\n    retrospective_id: Retrospective ID\n    feedback_id: Feedback ID\n    \nReturns:\n    Feedback details",
            "args": [
              "self",
              "retrospective_id",
              "feedback_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_retrospective_feedback",
            "line": 873,
            "async": true,
            "decorators": [],
            "docstring": "List feedback for a retrospective.\n\nArgs:\n    retrospective_id: Retrospective ID\n    type: Filter by feedback type\n    source: Filter by feedback source\n    priority: Filter by feedback priority\n    \nReturns:\n    List of feedback",
            "args": [
              "self",
              "retrospective_id",
              "type",
              "source",
              "priority"
            ],
            "class": "PrometheusClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_variance_analysis",
            "line": 906,
            "async": true,
            "decorators": [],
            "docstring": "Generate variance analysis for a plan.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Variance analysis",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_performance_metrics",
            "line": 918,
            "async": true,
            "decorators": [],
            "docstring": "Generate performance metrics for a plan.\n\nArgs:\n    plan_id: Plan ID\n    \nReturns:\n    Performance metrics",
            "args": [
              "self",
              "plan_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_improvement_suggestions",
            "line": 930,
            "async": true,
            "decorators": [],
            "docstring": "Generate improvement suggestions based on a retrospective.\n\nArgs:\n    retrospective_id: Retrospective ID\n    max_suggestions: Maximum number of suggestions to generate\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "self",
              "retrospective_id",
              "max_suggestions"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_retrospective_summary",
            "line": 957,
            "async": true,
            "decorators": [],
            "docstring": "Generate an LLM-powered summary of a retrospective.\n\nArgs:\n    retrospective_id: Retrospective ID\n    \nReturns:\n    Retrospective summary",
            "args": [
              "self",
              "retrospective_id"
            ],
            "class": "PrometheusClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prometheus_client",
            "line": 973,
            "async": true,
            "decorators": [],
            "docstring": "Get a Prometheus/Epimethius client, optionally discovering the service via Hermes.\n\nArgs:\n    base_url: Base URL for the Prometheus/Epimethius API\n    component_id: Component ID for service discovery\n    \nReturns:\n    PrometheusClient instance\n    \nRaises:\n    ValueError: If the service couldn't be found",
            "args": [
              "base_url",
              "component_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PrometheusClient",
            "line": 19,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for the Prometheus/Epimethius Planning System.\n\nThis client provides methods for interacting with both the forward-looking\nplanning (Prometheus) and retrospective analysis (Epimethius) capabilities.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 14
          },
          {
            "module": "aiohttp.ClientSession",
            "from": "aiohttp",
            "name": "ClientSession",
            "alias": null,
            "line": 15
          },
          {
            "module": "aiohttp.ClientTimeout",
            "from": "aiohttp",
            "name": "ClientTimeout",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 48
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 996
          },
          {
            "module": "tekton.utils.component_client.get_component_endpoint",
            "from": "tekton.utils.component_client",
            "name": "get_component_endpoint",
            "alias": null,
            "line": 1007
          },
          {
            "module": "hermes.api.client.HermesClient",
            "from": "hermes.api.client",
            "name": "HermesClient",
            "alias": null,
            "line": 1010
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PrometheusClient",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PrometheusClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 86,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient._request",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 92,
            "priority": "medium",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusClient.health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 159,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.create_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.get_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 205,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.update_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusClient.delete_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.list_plans",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 270,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.add_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 300,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 353,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusClient.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 412,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.delete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 425,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.list_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 438,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.update_task_progress",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 474,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusClient.add_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 527,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.update_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 566,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusClient.get_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 609,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.delete_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 622,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.list_resources",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 635,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.calculate_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 671,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.generate_timeline",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 683,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.get_plan_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 707,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.generate_plan_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 719,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.create_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 733,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.get_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 771,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.list_retrospectives",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 783,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.add_retrospective_feedback",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 817,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.get_retrospective_feedback",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 853,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.list_retrospective_feedback",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 873,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.generate_variance_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 906,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.generate_performance_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 918,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.generate_improvement_suggestions",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 930,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusClient.generate_retrospective_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 957,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_prometheus_client",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/client.py",
            "line": 973,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 1036,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 8,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/__main__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 2
          },
          {
            "module": "sys",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 23,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 0,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/critical_path.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the critical path analyzer.",
            "args": [
              "self"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_plan",
            "line": 37,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a plan to determine the critical path and related metrics.\n\nArgs:\n    plan: The project plan to analyze\n    \nReturns:\n    Dictionary containing critical path and related metrics",
            "args": [
              "self",
              "plan"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_build_task_graph",
            "line": 82,
            "async": false,
            "decorators": [],
            "docstring": "Build a directed graph from the plan's tasks and dependencies.\n\nArgs:\n    plan: The project plan\n    \nReturns:\n    A NetworkX directed graph representing the tasks and dependencies",
            "args": [
              "self",
              "plan"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_calculate_earliest_times",
            "line": 128,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the earliest start and finish times for each task.\n\nUses a forward pass through the network.",
            "args": [
              "self"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_latest_times",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the latest start and finish times for each task.\n\nUses a backward pass through the network.",
            "args": [
              "self"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_slack",
            "line": 199,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the slack time for each task.\n\nSlack is the amount of time a task can be delayed without delaying the project.",
            "args": [
              "self"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_identify_critical_path",
            "line": 212,
            "async": false,
            "decorators": [],
            "docstring": "Identify the critical path through the network.\n\nThe critical path consists of tasks with zero slack.\n\nReturns:\n    List of task IDs in the critical path",
            "args": [
              "self"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_path_duration",
            "line": 236,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the total duration of a path.\n\nArgs:\n    path: List of task IDs in the path\n    \nReturns:\n    Total duration of the path in hours",
            "args": [
              "self",
              "path"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_identify_bottlenecks",
            "line": 248,
            "async": false,
            "decorators": [],
            "docstring": "Identify potential bottlenecks in the plan.\n\nBottlenecks are tasks on the critical path with high dependency counts\nor long durations relative to the average.\n\nReturns:\n    List of bottleneck tasks with reasons",
            "args": [
              "self"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_task_duration_hours",
            "line": 296,
            "async": false,
            "decorators": [],
            "docstring": "Get the duration of a task in hours.\n\nArgs:\n    task: The task object\n    \nReturns:\n    Duration in hours",
            "args": [
              "self",
              "task"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "visualize",
            "line": 320,
            "async": false,
            "decorators": [],
            "docstring": "Generate a visualization of the critical path.\n\nArgs:\n    filename: The filename to save the visualization\n    \nReturns:\n    Path to the saved visualization",
            "args": [
              "self",
              "filename"
            ],
            "class": "CriticalPathAnalyzer",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "CriticalPathAnalyzer",
            "line": 18,
            "methods": [
              "__init__",
              "_build_task_graph",
              "_calculate_earliest_times",
              "_calculate_latest_times",
              "_calculate_slack",
              "_identify_critical_path",
              "_calculate_path_duration",
              "_identify_bottlenecks",
              "_get_task_duration_hours",
              "visualize"
            ],
            "decorators": [],
            "docstring": "Analyzer for calculating critical path and related metrics.\n\nThe critical path is the sequence of tasks that determines the minimum \nduration of the project. If any task on the critical path is delayed, \nthe entire project will be delayed.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "networkx",
            "alias": "nx",
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.plan.Plan",
            "from": "models.plan",
            "name": "Plan",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.task.Task",
            "from": "models.task",
            "name": "Task",
            "alias": null,
            "line": 14
          },
          {
            "module": "matplotlib.pyplot",
            "alias": "plt",
            "line": 331
          },
          {
            "module": "matplotlib",
            "alias": "mpl",
            "line": 332
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "CriticalPathAnalyzer",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/critical_path.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CriticalPathAnalyzer.analyze_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/critical_path.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CriticalPathAnalyzer._build_task_graph",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/critical_path.py",
            "line": 82,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "CriticalPathAnalyzer._identify_bottlenecks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/critical_path.py",
            "line": 248,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "CriticalPathAnalyzer.visualize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/critical_path.py",
            "line": 320,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 388,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the planning engine.\n\nArgs:\n    component_id: Unique identifier for this component",
            "args": [
              "self",
              "component_id"
            ],
            "class": "PlanningEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the planning engine with latent reasoning capabilities.\n\nArgs:\n    data_dir: Optional directory for persisted thoughts\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "data_dir"
            ],
            "class": "PlanningEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_plan",
            "line": 75,
            "async": true,
            "decorators": [],
            "docstring": "Create a plan for the given objective using latent reasoning when appropriate.\n\nArgs:\n    objective: The objective to plan for\n    context: Optional additional context for planning\n    complexity_threshold: Threshold for using latent reasoning\n    max_iterations: Maximum reasoning iterations for complex plans\n    \nReturns:\n    Dictionary with the plan and reasoning details",
            "args": [
              "self",
              "objective",
              "context",
              "complexity_threshold",
              "max_iterations"
            ],
            "class": "PlanningEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_plan_iteration",
            "line": 115,
            "async": true,
            "decorators": [],
            "docstring": "Process a single planning iteration.\n\nIn a real implementation, this would typically call an LLM or other\nplanning algorithm. For this example, we'll simulate refinement.\n\nArgs:\n    input_content: The input for this planning iteration\n    \nReturns:\n    Refined planning content",
            "args": [
              "self",
              "input_content"
            ],
            "class": "PlanningEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_assess_complexity",
            "line": 208,
            "async": true,
            "decorators": [],
            "docstring": "Assess the complexity of an objective to determine if latent reasoning is needed.\n\nArgs:\n    input_content: The planning input to assess\n    \nReturns:\n    Complexity score between 0 and 1",
            "args": [
              "self",
              "input_content"
            ],
            "class": "PlanningEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_format_planning_input",
            "line": 254,
            "async": false,
            "decorators": [],
            "docstring": "Format the planning input from objective and context.",
            "args": [
              "self",
              "objective",
              "context"
            ],
            "class": "PlanningEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_format_plan_response",
            "line": 274,
            "async": false,
            "decorators": [],
            "docstring": "Format the planning result for the response.",
            "args": [
              "self",
              "result",
              "objective"
            ],
            "class": "PlanningEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 299,
            "async": true,
            "decorators": [],
            "docstring": "Clean up resources.",
            "args": [
              "self"
            ],
            "class": "PlanningEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 306,
            "async": true,
            "decorators": [],
            "docstring": "Example usage of the planning engine.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PlanningEngine",
            "line": 25,
            "methods": [
              "__init__",
              "_format_planning_input",
              "_format_plan_response"
            ],
            "decorators": [],
            "docstring": "Planning engine with latent space reasoning capabilities.\n\nThis class uses the latent reasoning framework to iteratively refine\nplans based on objectives and context.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.core.latent_reasoning.LatentReasoningMixin",
            "from": "tekton.core.latent_reasoning",
            "name": "LatentReasoningMixin",
            "alias": null,
            "line": 22
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PlanningEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PlanningEngine.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PlanningEngine.create_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
            "line": 75,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PlanningEngine._format_planning_input",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
            "line": 254,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PlanningEngine.close",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
            "line": 299,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/planning_engine.py",
            "line": 306,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 350,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/prometheus_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize Prometheus component.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 34,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Prometheus-specific components.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_mcp",
            "line": 52,
            "async": true,
            "decorators": [],
            "docstring": "Initialize MCP bridge for Prometheus.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 65,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Prometheus-specific components.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_component_health",
            "line": 81,
            "async": false,
            "decorators": [],
            "docstring": "Get Prometheus-specific health information.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Get Prometheus capabilities.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Get Prometheus metadata for registration.",
            "args": [
              "self"
            ],
            "class": "PrometheusComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PrometheusComponent",
            "line": 17,
            "methods": [
              "__init__",
              "_get_component_health",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Prometheus planning system component.\n\nImplements strategic planning and retrospective analysis capabilities\nfollowing Tekton's standardized component patterns.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 10
          },
          {
            "module": "prometheus.core.planning_engine.PlanningEngine",
            "from": "prometheus.core.planning_engine",
            "name": "PlanningEngine",
            "alias": null,
            "line": 11
          },
          {
            "module": "prometheus.api.fastmcp_endpoints.fastmcp_server",
            "from": "prometheus.api.fastmcp_endpoints",
            "name": "fastmcp_server",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PrometheusComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/prometheus_component.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PrometheusComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/prometheus_component.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PrometheusComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/prometheus_component.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 110,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/telos_connector.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Telos connector.\n\nArgs:\n    telos_url: URL of the Telos API (defaults to environment variable)",
            "args": [
              "self",
              "telos_url"
            ],
            "class": "TelosConnector",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the connector.\n\nReturns:\n    True if initialization was successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "TelosConnector",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_requirements",
            "line": 94,
            "async": true,
            "decorators": [],
            "docstring": "Get requirements for a project.\n\nArgs:\n    project_id: ID of the project\n    filters: Optional filters to apply\n    \nReturns:\n    List of requirements",
            "args": [
              "self",
              "project_id",
              "filters"
            ],
            "class": "TelosConnector",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_project",
            "line": 147,
            "async": true,
            "decorators": [],
            "docstring": "Get information about a project.\n\nArgs:\n    project_id: ID of the project\n    \nReturns:\n    Project information or None if not found",
            "args": [
              "self",
              "project_id"
            ],
            "class": "TelosConnector",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_plan_from_requirements",
            "line": 192,
            "async": true,
            "decorators": [],
            "docstring": "Create a plan from requirements.\n\nArgs:\n    project_id: ID of the project\n    plan_name: Name for the plan\n    methodology: Methodology for the plan\n    \nReturns:\n    Plan data generated from requirements",
            "args": [
              "self",
              "project_id",
              "plan_name",
              "methodology"
            ],
            "class": "TelosConnector",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TelosConnector",
            "line": 25,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Connector for interacting with the Telos requirements management component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 19
          },
          {
            "module": "telos.client.get_telos_client",
            "from": "telos.client",
            "name": "get_telos_client",
            "alias": null,
            "line": 56
          },
          {
            "module": "tekton.utils.component_client.ComponentClient",
            "from": "tekton.utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 69
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 85
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 124
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 172
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 223
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 223
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 224
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TelosConnector",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/telos_connector.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TelosConnector.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/telos_connector.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TelosConnector.get_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/telos_connector.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "TelosConnector.get_project",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/telos_connector.py",
            "line": 147,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "TelosConnector.create_plan_from_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/telos_connector.py",
            "line": 192,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 329,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 5,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Rhetor adapter.\n\nArgs:\n    rhetor_url: URL of the Rhetor API (defaults to environment variable)",
            "args": [
              "self",
              "rhetor_url"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the adapter.\n\nReturns:\n    True if initialization was successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_prompt",
            "line": 94,
            "async": true,
            "decorators": [],
            "docstring": "Generate a prompt for a task.\n\nArgs:\n    task: Description of the task\n    context: Optional context information\n    \nReturns:\n    Generated prompt",
            "args": [
              "self",
              "task",
              "context"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_prompt",
            "line": 147,
            "async": false,
            "decorators": [],
            "docstring": "Generate a fallback prompt if Rhetor is unavailable.\n\nArgs:\n    task: Description of the task\n    context: Optional context information\n    \nReturns:\n    Fallback prompt",
            "args": [
              "self",
              "task",
              "context"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "breakdown_tasks",
            "line": 170,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to breakdown requirements into tasks.\n\nArgs:\n    requirements: List of requirement data\n    \nReturns:\n    List of task data",
            "args": [
              "self",
              "requirements"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_parse_task_breakdown",
            "line": 242,
            "async": false,
            "decorators": [],
            "docstring": "Parse task breakdown from LLM response.\n\nArgs:\n    analysis: Analysis from LLM\n    requirements: Original requirements list\n    \nReturns:\n    List of task data",
            "args": [
              "self",
              "analysis",
              "requirements"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_tasks",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback tasks from requirements if LLM fails.\n\nArgs:\n    requirements: List of requirement data\n    \nReturns:\n    List of task data",
            "args": [
              "self",
              "requirements"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_retrospective",
            "line": 293,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to analyze retrospective data.\n\nArgs:\n    retrospective_data: Retrospective data\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "retrospective_data"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_retro_analysis",
            "line": 400,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback retrospective analysis if LLM fails.\n\nArgs:\n    retrospective_data: Retrospective data\n    \nReturns:\n    Fallback analysis",
            "args": [
              "self",
              "retrospective_data"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_improvements",
            "line": 451,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to generate improvement suggestions from performance data.\n\nArgs:\n    performance_data: Performance data\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "self",
              "performance_data"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_parse_improvement_suggestions",
            "line": 538,
            "async": false,
            "decorators": [],
            "docstring": "Parse improvement suggestions from LLM response.\n\nArgs:\n    analysis: Analysis from LLM\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "self",
              "analysis"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_improvements",
            "line": 554,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback improvement suggestions if LLM fails.\n\nArgs:\n    performance_data: Performance data\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "self",
              "performance_data"
            ],
            "class": "RhetorLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RhetorLLMAdapter",
            "line": 25,
            "methods": [
              "__init__",
              "_generate_fallback_prompt",
              "_parse_task_breakdown",
              "_generate_fallback_tasks",
              "_generate_fallback_retro_analysis",
              "_parse_improvement_suggestions",
              "_generate_fallback_improvements"
            ],
            "decorators": [],
            "docstring": "Adapter for interacting with the Rhetor LLM component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 19
          },
          {
            "module": "rhetor.client.get_rhetor_prompt_client",
            "from": "rhetor.client",
            "name": "get_rhetor_prompt_client",
            "alias": null,
            "line": 56
          },
          {
            "module": "tekton.utils.component_client.ComponentClient",
            "from": "tekton.utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 69
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 85
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 124
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 218
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 269
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 270
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 372
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 410
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 514
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 564
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 565
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RhetorLLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorLLMAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorLLMAdapter.generate_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorLLMAdapter.breakdown_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorLLMAdapter.analyze_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
            "line": 293,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorLLMAdapter.generate_improvements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/rhetor_adapter.py",
            "line": 451,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 609,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Engram connector.\n\nArgs:\n    engram_url: URL of the Engram API (defaults to environment variable)",
            "args": [
              "self",
              "engram_url"
            ],
            "class": "EngramConnector",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the connector.\n\nReturns:\n    True if initialization was successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "EngramConnector",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "store_execution_record",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Store an execution record in Engram.\n\nArgs:\n    execution_record: Execution record data\n    \nReturns:\n    True if storage was successful, False otherwise",
            "args": [
              "self",
              "execution_record"
            ],
            "class": "EngramConnector",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "store_retrospective",
            "line": 140,
            "async": true,
            "decorators": [],
            "docstring": "Store a retrospective in Engram.\n\nArgs:\n    retrospective: Retrospective data\n    \nReturns:\n    True if storage was successful, False otherwise",
            "args": [
              "self",
              "retrospective"
            ],
            "class": "EngramConnector",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_historical_data",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve historical data from Engram.\n\nArgs:\n    filters: Filters to apply to the search\n    \nReturns:\n    Dictionary with historical data",
            "args": [
              "self",
              "filters"
            ],
            "class": "EngramConnector",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_search_memories",
            "line": 248,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories of a specific type.\n\nArgs:\n    memory_type: Type of memory to search for\n    search_query: Search query\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "memory_type",
              "search_query"
            ],
            "class": "EngramConnector",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EngramConnector",
            "line": 25,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Connector for interacting with the Engram memory component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.utils.component_client.ComponentClient",
            "from": "tekton.utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 56
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 72
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 119
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 179
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 282
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EngramConnector",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EngramConnector.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramConnector.store_execution_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EngramConnector.store_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
            "line": 140,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EngramConnector.get_historical_data",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EngramConnector._search_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/engram_connector.py",
            "line": 248,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 305,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/hermes_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "register_with_hermes",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Register a component with Hermes.\n\nArgs:\n    component_id: ID of the component\n    component_name: Name of the component\n    component_type: Type of the component\n    capabilities: List of capabilities\n    endpoint: API endpoint for the component\n    description: Optional description of the component\n    dependencies: Optional list of dependencies\n    hermes_url: Optional URL of Hermes API\n    additional_metadata: Optional additional metadata\n    \nReturns:\n    True if registration was successful, False otherwise",
            "args": [
              "component_id",
              "component_name",
              "component_type",
              "capabilities",
              "endpoint",
              "description",
              "dependencies",
              "hermes_url",
              "additional_metadata"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "prometheus_capabilities",
            "line": 134,
            "async": true,
            "decorators": [],
            "docstring": "Get Prometheus forward planning capabilities.\n\nReturns:\n    List of capability definitions",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "epimethius_capabilities",
            "line": 201,
            "async": true,
            "decorators": [],
            "docstring": "Get Epimethius retrospective analysis capabilities.\n\nReturns:\n    List of capability definitions",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.utils.hermes_registration.register_component",
            "from": "tekton.utils.hermes_registration",
            "name": "register_component",
            "alias": null,
            "line": 46
          },
          {
            "module": "sys",
            "alias": null,
            "line": 76
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 77
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 86
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/hermes_helper.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "prometheus_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/hermes_helper.py",
            "line": 134,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "epimethius_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/hermes_helper.py",
            "line": 201,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 256,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM adapter.\n\nArgs:\n    adapter_url: URL for the LLM adapter service",
            "args": [
              "self",
              "adapter_url"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 87,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates for Prometheus",
            "args": [
              "self"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_register_core_templates",
            "line": 120,
            "async": false,
            "decorators": [],
            "docstring": "Register core prompt templates for Prometheus",
            "args": [
              "self"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_client",
            "line": 302,
            "async": true,
            "decorators": [],
            "docstring": "Get or initialize the LLM client\n\nReturns:\n    Initialized TektonLLMClient",
            "args": [
              "self"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_text",
            "line": 317,
            "async": true,
            "decorators": [],
            "docstring": "Generate text from the LLM\n\nArgs:\n    prompt: The prompt to send to the LLM\n    system_prompt: Optional system prompt\n    model: LLM model to use (defaults to configured default)\n    temperature: Temperature parameter for generation\n    max_tokens: Maximum tokens to generate\n    streaming: Whether to stream the response\n    \nReturns:\n    If streaming=False, returns the complete response as a string\n    If streaming=True, returns an async generator yielding response chunks",
            "args": [
              "self",
              "prompt",
              "system_prompt",
              "model",
              "temperature",
              "max_tokens",
              "streaming"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream_generator",
            "line": 360,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "breakdown_tasks",
            "line": 385,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to breakdown requirements into tasks.\n\nArgs:\n    requirements: List of requirement data\n    \nReturns:\n    List of task data",
            "args": [
              "self",
              "requirements"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_tasks",
            "line": 459,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback tasks from requirements if LLM fails.\n\nArgs:\n    requirements: List of requirement data\n    \nReturns:\n    List of task data",
            "args": [
              "self",
              "requirements"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_retrospective",
            "line": 490,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to analyze retrospective data.\n\nArgs:\n    retrospective_data: Retrospective data\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "retrospective_data"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_retro_analysis",
            "line": 570,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback retrospective analysis if LLM fails.\n\nArgs:\n    retrospective_data: Retrospective data\n    \nReturns:\n    Fallback analysis",
            "args": [
              "self",
              "retrospective_data"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_improvements",
            "line": 621,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to generate improvement suggestions from performance data.\n\nArgs:\n    performance_data: Performance data\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "self",
              "performance_data"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_improvements",
            "line": 710,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback improvement suggestions if LLM fails.\n\nArgs:\n    performance_data: Performance data\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "self",
              "performance_data"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_risks",
            "line": 764,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to analyze project risks.\n\nArgs:\n    project_data: Project data including tasks, timeline, and resources\n    \nReturns:\n    List of identified risks with mitigation strategies",
            "args": [
              "self",
              "project_data"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_calculate_severity",
            "line": 857,
            "async": false,
            "decorators": [],
            "docstring": "Calculate risk severity based on impact and probability.\n\nArgs:\n    impact: Impact level (high, medium, low)\n    probability: Probability level (high, medium, low)\n    \nReturns:\n    Severity level (critical, high, medium, low)",
            "args": [
              "self",
              "impact",
              "probability"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_generate_fallback_risks",
            "line": 888,
            "async": false,
            "decorators": [],
            "docstring": "Generate fallback risks if LLM fails.\n\nArgs:\n    project_data: Project data\n    \nReturns:\n    List of generic risks",
            "args": [
              "self",
              "project_data"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_critical_path",
            "line": 945,
            "async": true,
            "decorators": [],
            "docstring": "Use LLM to analyze the critical path through a project.\n\nArgs:\n    tasks: List of project tasks\n    \nReturns:\n    Critical path analysis",
            "args": [
              "self",
              "tasks"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_fallback_response",
            "line": 1015,
            "async": false,
            "decorators": [],
            "docstring": "Provide a fallback response when the LLM service is unavailable.\n\nReturns:\n    A helpful error message",
            "args": [
              "self"
            ],
            "class": "PrometheusLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PrometheusLLMAdapter",
            "line": 35,
            "methods": [
              "__init__",
              "_load_templates",
              "_register_core_templates",
              "_generate_fallback_tasks",
              "_generate_fallback_retro_analysis",
              "_generate_fallback_improvements",
              "_calculate_severity",
              "_generate_fallback_risks",
              "_get_fallback_response"
            ],
            "decorators": [],
            "docstring": "LLM Adapter for Prometheus planning system.\n\nThis adapter provides an interface for LLM operations using the enhanced\ntekton-llm-client features for template management, streaming, and response handling.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PrometheusLLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter._load_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 87,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.generate_text",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 317,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.stream_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 360,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.breakdown_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 385,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.analyze_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 490,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.generate_improvements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 621,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.analyze_risks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 764,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusLLMAdapter.analyze_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/utils/llm_adapter.py",
            "line": 945,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 1028,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "metric_id",
              "name",
              "description",
              "value",
              "metric_type",
              "unit",
              "timestamp",
              "context",
              "source",
              "source_id",
              "metadata"
            ],
            "class": "PerformanceMetric",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Convert the performance metric to a dictionary.",
            "args": [
              "self"
            ],
            "class": "PerformanceMetric",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 60,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a performance metric from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "PerformanceMetric",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 87,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new performance metric with a generated ID.\n\nArgs:\n    name: Name of the metric\n    description: Description of the metric\n    value: Value of the metric\n    metric_type: Type of the metric\n    unit: Optional unit of the metric\n    timestamp: Optional timestamp (defaults to now)\n    context: Optional context\n    source: Optional source\n    source_id: Optional source ID\n    metadata: Optional metadata\n    \nReturns:\n    A new PerformanceMetric instance",
            "args": [
              "name",
              "description",
              "value",
              "metric_type",
              "unit",
              "timestamp",
              "context",
              "source",
              "source_id",
              "metadata"
            ],
            "class": "PerformanceMetric",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 136,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "series_id",
              "name",
              "description",
              "metric_type",
              "unit",
              "data_points",
              "aggregation_method",
              "source",
              "source_id",
              "metadata"
            ],
            "class": "MetricSeries",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": "Convert the metric series to a dictionary.",
            "args": [
              "self"
            ],
            "class": "MetricSeries",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 180,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a metric series from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "MetricSeries",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_data_point",
            "line": 203,
            "async": false,
            "decorators": [],
            "docstring": "Add a data point to the series.",
            "args": [
              "self",
              "timestamp",
              "value",
              "context"
            ],
            "class": "MetricSeries",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_data_points",
            "line": 212,
            "async": false,
            "decorators": [],
            "docstring": "Get data points within a time range.\n\nArgs:\n    start_time: Optional start time\n    end_time: Optional end time\n    \nReturns:\n    List of data points",
            "args": [
              "self",
              "start_time",
              "end_time"
            ],
            "class": "MetricSeries",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "calculate_aggregation",
            "line": 237,
            "async": false,
            "decorators": [],
            "docstring": "Calculate an aggregation of the series.\n\nArgs:\n    method: Aggregation method (defaults to self.aggregation_method)\n    \nReturns:\n    Aggregated value",
            "args": [
              "self",
              "method"
            ],
            "class": "MetricSeries",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 281,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new metric series with a generated ID.\n\nArgs:\n    name: Name of the series\n    description: Description of the series\n    metric_type: Type of the metric\n    unit: Optional unit\n    aggregation_method: Optional aggregation method\n    source: Optional source\n    source_id: Optional source ID\n    metadata: Optional metadata\n    \nReturns:\n    A new MetricSeries instance",
            "args": [
              "name",
              "description",
              "metric_type",
              "unit",
              "aggregation_method",
              "source",
              "source_id",
              "metadata"
            ],
            "class": "MetricSeries",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 324,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "analysis_id",
              "name",
              "description",
              "analysis_type",
              "metrics",
              "series",
              "results",
              "recommendations",
              "source",
              "source_id",
              "metadata"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 352,
            "async": false,
            "decorators": [],
            "docstring": "Convert the performance analysis to a dictionary.",
            "args": [
              "self"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 371,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a performance analysis from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_metric",
            "line": 395,
            "async": false,
            "decorators": [],
            "docstring": "Add a metric to the analysis.",
            "args": [
              "self",
              "metric_id"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_series",
            "line": 401,
            "async": false,
            "decorators": [],
            "docstring": "Add a metric series to the analysis.",
            "args": [
              "self",
              "series_id"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_results",
            "line": 407,
            "async": false,
            "decorators": [],
            "docstring": "Update the analysis results.",
            "args": [
              "self",
              "results"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_recommendation",
            "line": 412,
            "async": false,
            "decorators": [],
            "docstring": "Add a recommendation to the analysis.",
            "args": [
              "self",
              "title",
              "description",
              "priority",
              "action_items"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 424,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new performance analysis with a generated ID.\n\nArgs:\n    name: Name of the analysis\n    description: Description of the analysis\n    analysis_type: Type of the analysis\n    metrics: Optional list of metric IDs\n    series: Optional list of metric series IDs\n    results: Optional results\n    recommendations: Optional recommendations\n    source: Optional source\n    source_id: Optional source ID\n    metadata: Optional metadata\n    \nReturns:\n    A new PerformanceAnalysis instance",
            "args": [
              "name",
              "description",
              "analysis_type",
              "metrics",
              "series",
              "results",
              "recommendations",
              "source",
              "source_id",
              "metadata"
            ],
            "class": "PerformanceAnalysis",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PerformanceMetric",
            "line": 12,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for a performance metric.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MetricSeries",
            "line": 133,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_data_point",
              "get_data_points",
              "calculate_aggregation",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for a series of metrics over time.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PerformanceAnalysis",
            "line": 321,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_metric",
              "add_series",
              "update_results",
              "add_recommendation",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for a performance analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PerformanceMetric",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PerformanceMetric.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 42,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetric.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 60,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetric.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MetricSeries",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 133,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetricSeries.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 162,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetricSeries.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 180,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetricSeries.add_data_point",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 203,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetricSeries.get_data_points",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 212,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetricSeries.calculate_aggregation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 237,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MetricSeries.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 281,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PerformanceAnalysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 321,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 352,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 371,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.add_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 395,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.add_series",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 401,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.update_results",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 407,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.add_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 412,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceAnalysis.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/metrics.py",
            "line": 424,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 467,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "requirement_id",
              "name",
              "description",
              "resource_type",
              "quantity",
              "unit",
              "priority",
              "metadata"
            ],
            "class": "ResourceRequirement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Convert the resource requirement to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ResourceRequirement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 53,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a resource requirement from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ResourceRequirement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "milestone_id",
              "name",
              "description",
              "target_date",
              "criteria",
              "status",
              "actual_date",
              "metadata"
            ],
            "class": "Milestone",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 99,
            "async": false,
            "decorators": [],
            "docstring": "Convert the milestone to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Milestone",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 115,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a milestone from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Milestone",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "plan_id",
              "name",
              "description",
              "start_date",
              "end_date",
              "methodology",
              "tasks",
              "milestones",
              "requirements",
              "metadata"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 169,
            "async": false,
            "decorators": [],
            "docstring": "Convert the plan to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 190,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a plan from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Plan",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_version",
            "line": 228,
            "async": false,
            "decorators": [],
            "docstring": "Update the plan version and updated_at timestamp.",
            "args": [
              "self"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_task",
            "line": 233,
            "async": false,
            "decorators": [],
            "docstring": "Add a task to the plan.",
            "args": [
              "self",
              "task"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_milestone",
            "line": 238,
            "async": false,
            "decorators": [],
            "docstring": "Add a milestone to the plan.",
            "args": [
              "self",
              "milestone"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_requirement",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": "Add a requirement to the plan.",
            "args": [
              "self",
              "requirement_id"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_task",
            "line": 249,
            "async": false,
            "decorators": [],
            "docstring": "Remove a task from the plan.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 257,
            "async": false,
            "decorators": [],
            "docstring": "Get a task by ID.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_milestone",
            "line": 261,
            "async": false,
            "decorators": [],
            "docstring": "Get a milestone by ID.",
            "args": [
              "self",
              "milestone_id"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 268,
            "async": false,
            "decorators": [],
            "docstring": "Update a task in the plan.",
            "args": [
              "self",
              "task"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_milestone",
            "line": 276,
            "async": false,
            "decorators": [],
            "docstring": "Update a milestone in the plan.",
            "args": [
              "self",
              "milestone"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_path",
            "line": 285,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the critical path of the plan.\n\nReturns:\n    List of task IDs in the critical path.",
            "args": [
              "self"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_completion_percentage",
            "line": 297,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the completion percentage of the plan.\n\nReturns:\n    Completion percentage between 0 and 1.",
            "args": [
              "self"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 312,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new plan with a generated ID.\n\nArgs:\n    name: Name of the plan\n    description: Description of the plan\n    start_date: Start date of the plan\n    end_date: End date of the plan\n    methodology: Methodology to use (e.g., \"agile\", \"waterfall\")\n    requirements: Optional list of requirement IDs\n    metadata: Optional metadata\n    \nReturns:\n    A new Plan instance",
            "args": [
              "name",
              "description",
              "start_date",
              "end_date",
              "methodology",
              "requirements",
              "metadata"
            ],
            "class": "Plan",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ResourceRequirement",
            "line": 12,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "Resource requirement model for planning system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Milestone",
            "line": 74,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "Milestone model representing a significant point in a plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Plan",
            "line": 139,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_version",
              "add_task",
              "add_milestone",
              "add_requirement",
              "remove_task",
              "get_task",
              "get_milestone",
              "update_task",
              "update_milestone",
              "get_critical_path",
              "calculate_completion_percentage",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Plan model representing a project plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ResourceRequirement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ResourceRequirement.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 37,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResourceRequirement.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 53,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Milestone",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 74,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Milestone.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 99,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Milestone.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 115,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 139,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Plan.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 169,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 190,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.update_version",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 228,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.add_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 233,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.add_milestone",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 238,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.add_requirement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 243,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.remove_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 249,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 257,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.get_milestone",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 261,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 268,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.update_milestone",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 276,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.get_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 285,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.calculate_completion_percentage",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 297,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Plan.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/plan.py",
            "line": 312,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 346,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "task_id",
              "name",
              "description",
              "status",
              "priority",
              "estimated_effort",
              "actual_effort",
              "assigned_resources",
              "dependencies",
              "requirements",
              "start_date",
              "end_date",
              "metadata"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Convert the task to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 70,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a task from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Task",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 103,
            "async": false,
            "decorators": [],
            "docstring": "Update the task status.",
            "args": [
              "self",
              "status"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_progress",
            "line": 115,
            "async": false,
            "decorators": [],
            "docstring": "Update the task progress.",
            "args": [
              "self",
              "progress"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_dependency",
            "line": 128,
            "async": false,
            "decorators": [],
            "docstring": "Add a dependency to the task.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_dependency",
            "line": 134,
            "async": false,
            "decorators": [],
            "docstring": "Remove a dependency from the task.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "assign_resource",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": "Assign a resource to the task.",
            "args": [
              "self",
              "resource_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unassign_resource",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Unassign a resource from the task.",
            "args": [
              "self",
              "resource_id"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_blocked",
            "line": 156,
            "async": false,
            "decorators": [],
            "docstring": "Check if the task is blocked by dependencies.\n\nArgs:\n    completed_tasks: Set of completed task IDs\n    \nReturns:\n    True if the task is blocked, False otherwise",
            "args": [
              "self",
              "completed_tasks"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_earliest_start",
            "line": 171,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the earliest start date based on dependencies.\n\nArgs:\n    task_end_dates: Dictionary mapping task IDs to end dates\n    \nReturns:\n    Earliest possible start date",
            "args": [
              "self",
              "task_end_dates"
            ],
            "class": "Task",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 194,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new task with a generated ID.\n\nArgs:\n    name: Name of the task\n    description: Description of the task\n    priority: Priority of the task\n    estimated_effort: Estimated effort for the task\n    assigned_resources: Optional list of assigned resource IDs\n    dependencies: Optional list of dependency task IDs\n    requirements: Optional list of requirement IDs\n    start_date: Optional start date\n    end_date: Optional end date\n    metadata: Optional metadata\n    \nReturns:\n    A new Task instance",
            "args": [
              "name",
              "description",
              "priority",
              "estimated_effort",
              "assigned_resources",
              "dependencies",
              "requirements",
              "start_date",
              "end_date",
              "metadata"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Task",
            "line": 12,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "update_progress",
              "add_dependency",
              "remove_dependency",
              "assign_resource",
              "unassign_resource",
              "is_blocked",
              "calculate_earliest_start",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Task model representing a work item in a plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Task.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 48,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 103,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.update_progress",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 115,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.add_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 128,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.remove_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 134,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.assign_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 142,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.unassign_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.is_blocked",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 156,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.calculate_earliest_start",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 171,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/task.py",
            "line": 194,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 238,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "entry_id",
              "entity_id",
              "entity_type",
              "start_date",
              "end_date",
              "status",
              "dependencies",
              "metadata"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 52,
            "async": false,
            "decorators": [],
            "docstring": "Convert the timeline entry to a dictionary.",
            "args": [
              "self"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 68,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a timeline entry from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_dates",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Update the start and end dates.",
            "args": [
              "self",
              "start_date",
              "end_date"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 100,
            "async": false,
            "decorators": [],
            "docstring": "Update the status.",
            "args": [
              "self",
              "status"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_dependency",
            "line": 105,
            "async": false,
            "decorators": [],
            "docstring": "Add a dependency.",
            "args": [
              "self",
              "entry_id"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_dependency",
            "line": 111,
            "async": false,
            "decorators": [],
            "docstring": "Remove a dependency.",
            "args": [
              "self",
              "entry_id"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "duration_days",
            "line": 119,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the duration in days.",
            "args": [
              "self"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 126,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new timeline entry with a generated ID.\n\nArgs:\n    entity_id: ID of the entity (task or milestone)\n    entity_type: Type of the entity (\"task\" or \"milestone\")\n    start_date: Start date\n    end_date: End date\n    status: Status of the entry\n    dependencies: Optional list of dependency entry IDs\n    metadata: Optional metadata\n    \nReturns:\n    A new TimelineEntry instance",
            "args": [
              "entity_id",
              "entity_type",
              "start_date",
              "end_date",
              "status",
              "dependencies",
              "metadata"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "timeline_id",
              "plan_id",
              "entries",
              "critical_path",
              "metadata"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 183,
            "async": false,
            "decorators": [],
            "docstring": "Convert the timeline to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 197,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a timeline from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Timeline",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_version",
            "line": 223,
            "async": false,
            "decorators": [],
            "docstring": "Update the timeline version and updated_at timestamp.",
            "args": [
              "self"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_entry",
            "line": 228,
            "async": false,
            "decorators": [],
            "docstring": "Add an entry to the timeline.",
            "args": [
              "self",
              "entry"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_entry",
            "line": 233,
            "async": false,
            "decorators": [],
            "docstring": "Remove an entry from the timeline.",
            "args": [
              "self",
              "entry_id"
            ],
            "class": "Timeline",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_entry",
            "line": 248,
            "async": false,
            "decorators": [],
            "docstring": "Get an entry by ID.",
            "args": [
              "self",
              "entry_id"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_entry_by_entity",
            "line": 252,
            "async": false,
            "decorators": [],
            "docstring": "Get an entry by entity ID and type.",
            "args": [
              "self",
              "entity_id",
              "entity_type"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_entry",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "Update an entry in the timeline.",
            "args": [
              "self",
              "entry"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_critical_path",
            "line": 267,
            "async": false,
            "decorators": [],
            "docstring": "Update the critical path.",
            "args": [
              "self",
              "critical_path"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_critical_path",
            "line": 272,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the critical path of the timeline.\n\nReturns:\n    List of entry IDs in the critical path.",
            "args": [
              "self"
            ],
            "class": "Timeline",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_start_date",
            "line": 310,
            "async": false,
            "decorators": [],
            "docstring": "Get the earliest start date in the timeline.",
            "args": [
              "self"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_end_date",
            "line": 316,
            "async": false,
            "decorators": [],
            "docstring": "Get the latest end date in the timeline.",
            "args": [
              "self"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_duration_days",
            "line": 322,
            "async": false,
            "decorators": [],
            "docstring": "Get the total duration of the timeline in days.",
            "args": [
              "self"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 331,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new timeline with a generated ID.\n\nArgs:\n    plan_id: ID of the plan\n    metadata: Optional metadata\n    \nReturns:\n    A new Timeline instance",
            "args": [
              "plan_id",
              "metadata"
            ],
            "class": "Timeline",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TimelineEvent",
            "line": 14,
            "methods": [],
            "decorators": [],
            "docstring": "Event on a timeline representing a significant occurrence or action.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TimelineEntry",
            "line": 27,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_dates",
              "update_status",
              "add_dependency",
              "remove_dependency",
              "duration_days",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Timeline entry representing a scheduled task or milestone.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Timeline",
            "line": 163,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_version",
              "add_entry",
              "remove_entry",
              "get_entry",
              "get_entry_by_entity",
              "update_entry",
              "update_critical_path",
              "calculate_critical_path",
              "get_start_date",
              "get_end_date",
              "get_duration_days",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Timeline model representing the schedule for a plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TimelineEvent",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TimelineEntry",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TimelineEntry.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 52,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.update_dates",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 100,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.add_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 105,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.remove_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 111,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.duration_days",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 119,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TimelineEntry.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Timeline",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 163,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Timeline.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 183,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 197,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.update_version",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 223,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.add_entry",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 228,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.remove_entry",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 233,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.get_entry",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 248,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.get_entry_by_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 252,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.update_entry",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 259,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.update_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 267,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.calculate_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 272,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "Timeline.get_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 310,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.get_end_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 316,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.get_duration_days",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 322,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Timeline.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/timeline.py",
            "line": 331,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 347,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "issue_id",
              "title",
              "description",
              "severity",
              "related_task_ids",
              "status",
              "resolution",
              "reported_by",
              "reported_date",
              "resolved_date",
              "metadata"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 45,
            "async": false,
            "decorators": [],
            "docstring": "Convert the execution issue to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 64,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an execution issue from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "resolve",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Resolve the issue.",
            "args": [
              "self",
              "resolution",
              "resolved_date"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mitigate",
            "line": 100,
            "async": false,
            "decorators": [],
            "docstring": "Mitigate the issue without fully resolving it.",
            "args": [
              "self",
              "resolution",
              "resolved_date"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reopen",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Reopen the issue.",
            "args": [
              "self"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 114,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new execution issue with a generated ID.\n\nArgs:\n    title: Title of the issue\n    description: Description of the issue\n    severity: Severity of the issue\n    related_task_ids: Optional list of related task IDs\n    reported_by: Optional reporter identifier\n    metadata: Optional metadata\n    \nReturns:\n    A new ExecutionIssue instance",
            "args": [
              "title",
              "description",
              "severity",
              "related_task_ids",
              "reported_by",
              "metadata"
            ],
            "class": "ExecutionIssue",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "task_id",
              "status",
              "progress",
              "actual_start_date",
              "actual_end_date",
              "actual_effort",
              "assigned_resources",
              "blockers",
              "notes",
              "metadata"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 182,
            "async": false,
            "decorators": [],
            "docstring": "Convert the task execution record to a dictionary.",
            "args": [
              "self"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 201,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a task execution record from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 231,
            "async": false,
            "decorators": [],
            "docstring": "Update the status.",
            "args": [
              "self",
              "status",
              "notes"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_progress",
            "line": 254,
            "async": false,
            "decorators": [],
            "docstring": "Update the progress.",
            "args": [
              "self",
              "progress",
              "notes"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "start_task",
            "line": 281,
            "async": false,
            "decorators": [],
            "docstring": "Start the task.",
            "args": [
              "self",
              "start_date"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete_task",
            "line": 297,
            "async": false,
            "decorators": [],
            "docstring": "Complete the task.",
            "args": [
              "self",
              "end_date",
              "actual_effort"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_blocker",
            "line": 314,
            "async": false,
            "decorators": [],
            "docstring": "Add a blocker issue.",
            "args": [
              "self",
              "issue_id"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_blocker",
            "line": 329,
            "async": false,
            "decorators": [],
            "docstring": "Remove a blocker issue.",
            "args": [
              "self",
              "issue_id"
            ],
            "class": "TaskExecutionRecord",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 356,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "milestone_id",
              "status",
              "actual_date",
              "notes",
              "metadata"
            ],
            "class": "MilestoneRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 376,
            "async": false,
            "decorators": [],
            "docstring": "Convert the milestone record to a dictionary.",
            "args": [
              "self"
            ],
            "class": "MilestoneRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 390,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a milestone record from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "MilestoneRecord",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 414,
            "async": false,
            "decorators": [],
            "docstring": "Update the status.",
            "args": [
              "self",
              "status",
              "notes"
            ],
            "class": "MilestoneRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 432,
            "async": false,
            "decorators": [],
            "docstring": "Mark the milestone as completed.",
            "args": [
              "self",
              "actual_date",
              "notes"
            ],
            "class": "MilestoneRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "miss",
            "line": 447,
            "async": false,
            "decorators": [],
            "docstring": "Mark the milestone as missed.",
            "args": [
              "self",
              "notes"
            ],
            "class": "MilestoneRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 465,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "record_id",
              "plan_id",
              "record_date",
              "task_records",
              "milestone_records",
              "issues_encountered",
              "metadata"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 485,
            "async": false,
            "decorators": [],
            "docstring": "Convert the execution record to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 501,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an execution record from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ExecutionRecord",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_task_record",
            "line": 540,
            "async": false,
            "decorators": [],
            "docstring": "Add a task execution record.",
            "args": [
              "self",
              "task_record"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_milestone_record",
            "line": 545,
            "async": false,
            "decorators": [],
            "docstring": "Add a milestone record.",
            "args": [
              "self",
              "milestone_record"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_issue",
            "line": 550,
            "async": false,
            "decorators": [],
            "docstring": "Add an execution issue.",
            "args": [
              "self",
              "issue"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task_record",
            "line": 555,
            "async": false,
            "decorators": [],
            "docstring": "Get a task execution record by task ID.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_milestone_record",
            "line": 559,
            "async": false,
            "decorators": [],
            "docstring": "Get a milestone record by milestone ID.",
            "args": [
              "self",
              "milestone_id"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_completion_percentage",
            "line": 563,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the overall completion percentage of the plan.\n\nReturns:\n    Completion percentage between 0 and 1.",
            "args": [
              "self"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_variance",
            "line": 576,
            "async": false,
            "decorators": [],
            "docstring": "Calculate variance between plan and actual execution.\n\nArgs:\n    plan: The planned data to compare against\n    \nReturns:\n    Dictionary with variance metrics",
            "args": [
              "self",
              "plan"
            ],
            "class": "ExecutionRecord",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 628,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new execution record with a generated ID.\n\nArgs:\n    plan_id: ID of the plan\n    record_date: Optional record date (defaults to now)\n    metadata: Optional metadata\n    \nReturns:\n    A new ExecutionRecord instance",
            "args": [
              "plan_id",
              "record_date",
              "metadata"
            ],
            "class": "ExecutionRecord",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ExecutionIssue",
            "line": 14,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "resolve",
              "mitigate",
              "reopen",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for issues encountered during execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskExecutionRecord",
            "line": 148,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "update_progress",
              "start_task",
              "complete_task",
              "add_blocker",
              "remove_blocker"
            ],
            "decorators": [],
            "docstring": "Record of actual execution data for a task.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MilestoneRecord",
            "line": 353,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "complete",
              "miss"
            ],
            "decorators": [],
            "docstring": "Record of actual achievement of a milestone.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionRecord",
            "line": 462,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_task_record",
              "add_milestone_record",
              "add_issue",
              "get_task_record",
              "get_milestone_record",
              "calculate_completion_percentage",
              "calculate_variance",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Record of actual execution data for a plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "plan.Plan",
            "from": "plan",
            "name": "Plan",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ExecutionIssue",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionIssue.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 45,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionIssue.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionIssue.resolve",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 93,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionIssue.mitigate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 100,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionIssue.reopen",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionIssue.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TaskExecutionRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 148,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 182,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 201,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 231,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.update_progress",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 254,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.start_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 281,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.complete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 297,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.add_blocker",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 314,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TaskExecutionRecord.remove_blocker",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 329,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MilestoneRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 353,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MilestoneRecord.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 376,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MilestoneRecord.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 390,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MilestoneRecord.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 414,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MilestoneRecord.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 432,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MilestoneRecord.miss",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 447,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ExecutionRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 462,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 485,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 501,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.add_task_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 540,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.add_milestone_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 545,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.add_issue",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 550,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.get_task_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 555,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.get_milestone_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 559,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.calculate_completion_percentage",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 563,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.calculate_variance",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 576,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionRecord.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/execution.py",
            "line": 628,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 650,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "improvement_id",
              "title",
              "description",
              "source",
              "source_id",
              "priority",
              "status",
              "assignees",
              "due_date",
              "implementation_plan",
              "verification_criteria",
              "tags",
              "metadata"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Convert the improvement to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 80,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an improvement from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Improvement",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": "Update the improvement status with history tracking.\n\nArgs:\n    new_status: New status\n    comment: Optional comment about the status change",
            "args": [
              "self",
              "new_status",
              "comment"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "assign_to",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": "Assign the improvement to a person.",
            "args": [
              "self",
              "assignee"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unassign_from",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Unassign the improvement from a person.",
            "args": [
              "self",
              "assignee"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_priority",
            "line": 157,
            "async": false,
            "decorators": [],
            "docstring": "Update the priority of the improvement.",
            "args": [
              "self",
              "priority"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_due_date",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": "Update the due date of the improvement.",
            "args": [
              "self",
              "due_date"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_tag",
            "line": 167,
            "async": false,
            "decorators": [],
            "docstring": "Add a tag to the improvement.",
            "args": [
              "self",
              "tag"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_tag",
            "line": 173,
            "async": false,
            "decorators": [],
            "docstring": "Remove a tag from the improvement.",
            "args": [
              "self",
              "tag"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_implementation_plan",
            "line": 181,
            "async": false,
            "decorators": [],
            "docstring": "Set the implementation plan for the improvement.",
            "args": [
              "self",
              "plan"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_verification_criteria",
            "line": 186,
            "async": false,
            "decorators": [],
            "docstring": "Set the verification criteria for the improvement.",
            "args": [
              "self",
              "criteria"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_overdue",
            "line": 191,
            "async": false,
            "decorators": [],
            "docstring": "Check if the improvement is overdue.",
            "args": [
              "self"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 198,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new improvement with a generated ID.\n\nArgs:\n    title: Title of the improvement\n    description: Description of the improvement\n    source: Source of the improvement\n    source_id: Optional ID of the source\n    priority: Optional priority\n    assignees: Optional list of assignees\n    due_date: Optional due date\n    implementation_plan: Optional implementation plan\n    verification_criteria: Optional verification criteria\n    tags: Optional list of tags\n    metadata: Optional metadata\n    \nReturns:\n    A new Improvement instance",
            "args": [
              "title",
              "description",
              "source",
              "source_id",
              "priority",
              "assignees",
              "due_date",
              "implementation_plan",
              "verification_criteria",
              "tags",
              "metadata"
            ],
            "class": "Improvement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 250,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "recommendation_id",
              "improvement_id",
              "title",
              "description",
              "source",
              "priority",
              "status",
              "implementation_details",
              "estimated_effort",
              "estimated_impact",
              "tags",
              "metadata"
            ],
            "class": "ImprovementRecommendation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 287,
            "async": false,
            "decorators": [],
            "docstring": "Convert the recommendation to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ImprovementRecommendation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 308,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a recommendation from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ImprovementRecommendation",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 335,
            "async": false,
            "decorators": [],
            "docstring": "Update the recommendation status with history tracking.\n\nArgs:\n    new_status: New status\n    comment: Optional comment about the status change",
            "args": [
              "self",
              "new_status",
              "comment"
            ],
            "class": "ImprovementRecommendation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 354,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new recommendation with a generated ID.\n\nArgs:\n    improvement_id: ID of the associated improvement\n    title: Title of the recommendation\n    description: Description of the recommendation\n    source: Source of the recommendation\n    priority: Optional priority\n    implementation_details: Optional implementation details\n    estimated_effort: Optional effort estimation\n    estimated_impact: Optional impact estimation\n    tags: Optional list of tags\n    metadata: Optional metadata\n    \nReturns:\n    A new ImprovementRecommendation instance",
            "args": [
              "improvement_id",
              "title",
              "description",
              "source",
              "priority",
              "implementation_details",
              "estimated_effort",
              "estimated_impact",
              "tags",
              "metadata"
            ],
            "class": "ImprovementRecommendation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 403,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "pattern_id",
              "name",
              "description",
              "category",
              "frequency",
              "related_improvements",
              "suggested_actions",
              "tags",
              "metadata"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 427,
            "async": false,
            "decorators": [],
            "docstring": "Convert the improvement pattern to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 444,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an improvement pattern from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "increment_frequency",
            "line": 466,
            "async": false,
            "decorators": [],
            "docstring": "Increment the frequency of the pattern.",
            "args": [
              "self"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_related_improvement",
            "line": 471,
            "async": false,
            "decorators": [],
            "docstring": "Add a related improvement.",
            "args": [
              "self",
              "improvement_id"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_suggested_action",
            "line": 477,
            "async": false,
            "decorators": [],
            "docstring": "Add a suggested action.",
            "args": [
              "self",
              "action"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_suggested_action",
            "line": 483,
            "async": false,
            "decorators": [],
            "docstring": "Remove a suggested action.",
            "args": [
              "self",
              "action"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_tag",
            "line": 491,
            "async": false,
            "decorators": [],
            "docstring": "Add a tag to the pattern.",
            "args": [
              "self",
              "tag"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_tag",
            "line": 497,
            "async": false,
            "decorators": [],
            "docstring": "Remove a tag from the pattern.",
            "args": [
              "self",
              "tag"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 506,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new improvement pattern with a generated ID.\n\nArgs:\n    name: Name of the pattern\n    description: Description of the pattern\n    category: Category of the pattern\n    related_improvements: Optional list of related improvement IDs\n    suggested_actions: Optional list of suggested actions\n    tags: Optional list of tags\n    metadata: Optional metadata\n    \nReturns:\n    A new ImprovementPattern instance",
            "args": [
              "name",
              "description",
              "category",
              "related_improvements",
              "suggested_actions",
              "tags",
              "metadata"
            ],
            "class": "ImprovementPattern",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Improvement",
            "line": 12,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "assign_to",
              "unassign_from",
              "update_priority",
              "update_due_date",
              "add_tag",
              "remove_tag",
              "set_implementation_plan",
              "set_verification_criteria",
              "is_overdue",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for an improvement item identified from retrospectives.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementRecommendation",
            "line": 247,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for a recommendation related to an improvement.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementPattern",
            "line": 400,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "increment_frequency",
              "add_related_improvement",
              "add_suggested_action",
              "remove_suggested_action",
              "add_tag",
              "remove_tag",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for a pattern of improvements identified across multiple retrospectives or projects.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Improvement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Improvement.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 56,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 80,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 116,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.assign_to",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 143,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.unassign_from",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 149,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.update_priority",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 157,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.update_due_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 162,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.add_tag",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 167,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.remove_tag",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 173,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.set_implementation_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 181,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.set_verification_criteria",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 186,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.is_overdue",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 191,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Improvement.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 198,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ImprovementRecommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 247,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ImprovementRecommendation.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 287,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementRecommendation.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 308,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementRecommendation.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 335,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementRecommendation.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 354,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ImprovementPattern",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 400,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 427,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 444,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.increment_frequency",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 466,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.add_related_improvement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 471,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.add_suggested_action",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 477,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.remove_suggested_action",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 483,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.add_tag",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 491,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.remove_tag",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 497,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ImprovementPattern.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/improvement.py",
            "line": 506,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 540,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "item_id",
              "content",
              "category",
              "votes",
              "author",
              "related_task_ids",
              "metadata"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Convert the retrospective item to a dictionary.",
            "args": [
              "self"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 52,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a retrospective item from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_vote",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Add a vote for this item.",
            "args": [
              "self"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_vote",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Remove a vote from this item.",
            "args": [
              "self"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_content",
            "line": 85,
            "async": false,
            "decorators": [],
            "docstring": "Update the content of the item.",
            "args": [
              "self",
              "content"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_category",
            "line": 90,
            "async": false,
            "decorators": [],
            "docstring": "Update the category of the item.",
            "args": [
              "self",
              "category"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 96,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new retrospective item with a generated ID.\n\nArgs:\n    content: Content of the item\n    category: Category of the item\n    author: Optional author identifier\n    related_task_ids: Optional list of related task IDs\n    metadata: Optional metadata\n    \nReturns:\n    A new RetroItem instance",
            "args": [
              "content",
              "category",
              "author",
              "related_task_ids",
              "metadata"
            ],
            "class": "RetroItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 130,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "action_id",
              "title",
              "description",
              "assignees",
              "due_date",
              "status",
              "priority",
              "related_retro_items",
              "metadata"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 159,
            "async": false,
            "decorators": [],
            "docstring": "Convert the action item to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 178,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an action item from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ActionItem",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 208,
            "async": false,
            "decorators": [],
            "docstring": "Update the status of the action item.",
            "args": [
              "self",
              "status",
              "comment"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "assign_to",
            "line": 226,
            "async": false,
            "decorators": [],
            "docstring": "Assign the action item to a person.",
            "args": [
              "self",
              "assignee"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unassign_from",
            "line": 232,
            "async": false,
            "decorators": [],
            "docstring": "Unassign the action item from a person.",
            "args": [
              "self",
              "assignee"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_due_date",
            "line": 240,
            "async": false,
            "decorators": [],
            "docstring": "Update the due date of the action item.",
            "args": [
              "self",
              "due_date"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_priority",
            "line": 245,
            "async": false,
            "decorators": [],
            "docstring": "Update the priority of the action item.",
            "args": [
              "self",
              "priority"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_overdue",
            "line": 250,
            "async": false,
            "decorators": [],
            "docstring": "Check if the action item is overdue.",
            "args": [
              "self"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 257,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new action item with a generated ID.\n\nArgs:\n    title: Title of the action item\n    description: Description of the action item\n    assignees: Optional list of assignees\n    due_date: Optional due date\n    priority: Optional priority\n    related_retro_items: Optional list of related retrospective item IDs\n    metadata: Optional metadata\n    \nReturns:\n    A new ActionItem instance",
            "args": [
              "title",
              "description",
              "assignees",
              "due_date",
              "priority",
              "related_retro_items",
              "metadata"
            ],
            "class": "ActionItem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 297,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "retro_id",
              "plan_id",
              "name",
              "date",
              "format",
              "facilitator",
              "participants",
              "items",
              "action_items",
              "status",
              "metadata"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 325,
            "async": false,
            "decorators": [],
            "docstring": "Convert the retrospective to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 344,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a retrospective from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Retrospective",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_item",
            "line": 382,
            "async": false,
            "decorators": [],
            "docstring": "Add a retrospective item.",
            "args": [
              "self",
              "item"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_item",
            "line": 387,
            "async": false,
            "decorators": [],
            "docstring": "Remove a retrospective item.",
            "args": [
              "self",
              "item_id"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_item",
            "line": 396,
            "async": false,
            "decorators": [],
            "docstring": "Get a retrospective item by ID.",
            "args": [
              "self",
              "item_id"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_action_item",
            "line": 403,
            "async": false,
            "decorators": [],
            "docstring": "Add an action item.",
            "args": [
              "self",
              "action_item"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_action_item",
            "line": 408,
            "async": false,
            "decorators": [],
            "docstring": "Remove an action item.",
            "args": [
              "self",
              "action_id"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_action_item",
            "line": 417,
            "async": false,
            "decorators": [],
            "docstring": "Get an action item by ID.",
            "args": [
              "self",
              "action_id"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 424,
            "async": false,
            "decorators": [],
            "docstring": "Update the status of the retrospective.",
            "args": [
              "self",
              "status"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 429,
            "async": false,
            "decorators": [],
            "docstring": "Start the retrospective.",
            "args": [
              "self"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "finalize",
            "line": 435,
            "async": false,
            "decorators": [],
            "docstring": "Finalize the retrospective.",
            "args": [
              "self"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_items_by_category",
            "line": 440,
            "async": false,
            "decorators": [],
            "docstring": "Get retrospective items by category.",
            "args": [
              "self",
              "category"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_top_voted_items",
            "line": 444,
            "async": false,
            "decorators": [],
            "docstring": "Get the top voted retrospective items.",
            "args": [
              "self",
              "limit"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_incomplete_action_items",
            "line": 449,
            "async": false,
            "decorators": [],
            "docstring": "Get incomplete action items.",
            "args": [
              "self"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_action_items_by_priority",
            "line": 454,
            "async": false,
            "decorators": [],
            "docstring": "Get action items by priority.",
            "args": [
              "self",
              "priority"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 459,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new retrospective with a generated ID.\n\nArgs:\n    plan_id: ID of the plan\n    name: Name of the retrospective\n    format: Format of the retrospective\n    facilitator: Facilitator of the retrospective\n    date: Optional date of the retrospective (defaults to now)\n    participants: Optional list of participants\n    metadata: Optional metadata\n    \nReturns:\n    A new Retrospective instance",
            "args": [
              "plan_id",
              "name",
              "format",
              "facilitator",
              "date",
              "participants",
              "metadata"
            ],
            "class": "Retrospective",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 500,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": null,
            "args": [
              "self",
              "analysis_id",
              "retro_id",
              "created_at",
              "updated_at",
              "insights",
              "metrics",
              "recommendations",
              "comparison_data",
              "metadata"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 523,
            "async": false,
            "decorators": [],
            "docstring": "Convert the retrospective analysis to a dictionary.",
            "args": [
              "self"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 539,
            "async": false,
            "decorators": [
              "@classmethod",
              "@log_function"
            ],
            "docstring": "Create a retrospective analysis from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_insight",
            "line": 556,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Add an insight to the analysis.",
            "args": [
              "self",
              "category",
              "description",
              "severity",
              "related_items"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_recommendation",
            "line": 571,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Add a recommendation to the analysis.",
            "args": [
              "self",
              "recommendation"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_metrics",
            "line": 579,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update the metrics with new data.",
            "args": [
              "self",
              "new_metrics"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "compare_with_previous",
            "line": 586,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Compare with a previous retrospective and update comparison data.",
            "args": [
              "self",
              "previous_retro_data"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 614,
            "async": false,
            "decorators": [
              "@staticmethod",
              "@log_function"
            ],
            "docstring": "Create a new retrospective analysis with a generated ID.\n\nArgs:\n    retro_id: ID of the retrospective being analyzed\n    metrics: Optional initial metrics\n    \nReturns:\n    A new RetrospectiveAnalysis instance",
            "args": [
              "retro_id",
              "metrics"
            ],
            "class": "RetrospectiveAnalysis",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 638,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Initialize performance metrics.\n\nArgs:\n    metrics_id: Unique identifier for the metrics\n    retro_id: ID of the related retrospective\n    created_at: Creation timestamp\n    updated_at: Last update timestamp\n    velocity: Team velocity (story points per time period)\n    completion_rate: Task completion rate (0.0-1.0)\n    average_task_duration: Average time to complete tasks\n    story_points_completed: Total story points completed\n    tasks_completed: Number of tasks completed\n    blockers_count: Number of blockers encountered\n    lead_time: Average lead time (concept to delivery)\n    cycle_time: Average cycle time (work start to completion)\n    team_satisfaction: Team satisfaction score (0.0-10.0)\n    custom_metrics: Any additional custom metrics\n    historical_data: Historical performance data for trend analysis\n    metadata: Additional metadata",
            "args": [
              "self",
              "metrics_id",
              "retro_id",
              "created_at",
              "updated_at",
              "velocity",
              "completion_rate",
              "average_task_duration",
              "story_points_completed",
              "tasks_completed",
              "blockers_count",
              "lead_time",
              "cycle_time",
              "team_satisfaction",
              "custom_metrics",
              "historical_data",
              "metadata"
            ],
            "class": "PerformanceMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 696,
            "async": false,
            "decorators": [],
            "docstring": "Convert the performance metrics to a dictionary.",
            "args": [
              "self"
            ],
            "class": "PerformanceMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 719,
            "async": false,
            "decorators": [
              "@classmethod",
              "@log_function"
            ],
            "docstring": "Create performance metrics from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "PerformanceMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_historical_data_point",
            "line": 743,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Add a historical data point for trend analysis.",
            "args": [
              "self",
              "data_point"
            ],
            "class": "PerformanceMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_custom_metric",
            "line": 752,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Add or update a custom metric.",
            "args": [
              "self",
              "name",
              "value"
            ],
            "class": "PerformanceMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_trend",
            "line": 759,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Calculate trend data for a specific metric.\n\nArgs:\n    metric_name: Name of the metric to analyze\n    \nReturns:\n    Trend analysis data",
            "args": [
              "self",
              "metric_name"
            ],
            "class": "PerformanceMetrics",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 806,
            "async": false,
            "decorators": [
              "@staticmethod",
              "@log_function"
            ],
            "docstring": "Create new performance metrics with a generated ID.\n\nArgs:\n    retro_id: ID of the retrospective\n    \nReturns:\n    A new PerformanceMetrics instance",
            "args": [
              "retro_id"
            ],
            "class": "PerformanceMetrics",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RetroItem",
            "line": 14,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_vote",
              "remove_vote",
              "update_content",
              "update_category",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for an item in a retrospective.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionItem",
            "line": 127,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "assign_to",
              "unassign_from",
              "update_due_date",
              "update_priority",
              "is_overdue",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for an action item from a retrospective.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Retrospective",
            "line": 294,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_item",
              "remove_item",
              "get_item",
              "add_action_item",
              "remove_action_item",
              "get_action_item",
              "update_status",
              "start",
              "finalize",
              "get_items_by_category",
              "get_top_voted_items",
              "get_incomplete_action_items",
              "get_action_items_by_priority",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for a project retrospective.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RetrospectiveAnalysis",
            "line": 496,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_insight",
              "add_recommendation",
              "update_metrics",
              "compare_with_previous",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for analyzing retrospective data and generating insights.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PerformanceMetrics",
            "line": 634,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_historical_data_point",
              "add_custom_metric",
              "calculate_trend",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Model for tracking and analyzing performance metrics from retrospectives.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RetroItem",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RetroItem.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 37,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetroItem.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 52,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetroItem.add_vote",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetroItem.remove_vote",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 77,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetroItem.update_content",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 85,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetroItem.update_category",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 90,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetroItem.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 96,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ActionItem",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 127,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ActionItem.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 159,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 178,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 208,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.assign_to",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 226,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.unassign_from",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 232,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.update_due_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 240,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.update_priority",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 245,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.is_overdue",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 250,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionItem.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 257,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 294,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Retrospective.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 325,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 344,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.add_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 382,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.remove_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 387,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.get_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 396,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.add_action_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 403,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.remove_action_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 408,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.get_action_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 417,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 424,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.start",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 429,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.finalize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 435,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.get_items_by_category",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 440,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.get_top_voted_items",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 444,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.get_incomplete_action_items",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 449,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.get_action_items_by_priority",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 454,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Retrospective.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 459,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "RetrospectiveAnalysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 496,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 523,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 539,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.add_insight",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 556,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.add_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 571,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.update_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 579,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.compare_with_previous",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 586,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetrospectiveAnalysis.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 614,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PerformanceMetrics",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 634,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PerformanceMetrics.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 696,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetrics.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 719,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetrics.add_historical_data_point",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 743,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetrics.add_custom_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 752,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetrics.calculate_trend",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 759,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PerformanceMetrics.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/retrospective.py",
            "line": 806,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 821,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "resource_id",
              "name",
              "resource_type",
              "capacity",
              "skills",
              "availability",
              "cost_rate",
              "metadata"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Convert the resource to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 53,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a resource from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_skill",
            "line": 74,
            "async": false,
            "decorators": [],
            "docstring": "Add a skill to the resource.",
            "args": [
              "self",
              "skill"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_skill",
            "line": 80,
            "async": false,
            "decorators": [],
            "docstring": "Remove a skill from the resource.",
            "args": [
              "self",
              "skill"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_capacity",
            "line": 88,
            "async": false,
            "decorators": [],
            "docstring": "Update the resource capacity.",
            "args": [
              "self",
              "capacity"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_availability",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Update the resource availability.",
            "args": [
              "self",
              "availability"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_cost_rate",
            "line": 98,
            "async": false,
            "decorators": [],
            "docstring": "Update the resource cost rate.",
            "args": [
              "self",
              "cost_rate"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "has_skill",
            "line": 103,
            "async": false,
            "decorators": [],
            "docstring": "Check if the resource has a skill.",
            "args": [
              "self",
              "skill"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_cost",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the cost for a given number of hours.\n\nArgs:\n    hours: Number of hours to calculate cost for\n    \nReturns:\n    Cost for the given hours",
            "args": [
              "self",
              "hours"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 122,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new resource with a generated ID.\n\nArgs:\n    name: Name of the resource\n    resource_type: Type of resource\n    capacity: Capacity of the resource\n    skills: Optional list of skills\n    availability: Optional availability dictionary\n    cost_rate: Optional cost rate\n    metadata: Optional metadata\n    \nReturns:\n    A new Resource instance",
            "args": [
              "name",
              "resource_type",
              "capacity",
              "skills",
              "availability",
              "cost_rate",
              "metadata"
            ],
            "class": "Resource",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "allocation_id",
              "resource_id",
              "task_id",
              "start_date",
              "end_date",
              "allocated_hours",
              "allocation_type",
              "status",
              "metadata"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 186,
            "async": false,
            "decorators": [],
            "docstring": "Convert the allocation to a dictionary.",
            "args": [
              "self"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 203,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create an allocation from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_status",
            "line": 229,
            "async": false,
            "decorators": [],
            "docstring": "Update the allocation status.",
            "args": [
              "self",
              "status"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_hours",
            "line": 234,
            "async": false,
            "decorators": [],
            "docstring": "Update the allocated hours.",
            "args": [
              "self",
              "allocated_hours"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_utilization",
            "line": 239,
            "async": false,
            "decorators": [],
            "docstring": "Calculate resource utilization percentage.\n\nArgs:\n    available_hours: Total available hours for the resource\n    \nReturns:\n    Utilization percentage (0.0 to 1.0+)",
            "args": [
              "self",
              "available_hours"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_new",
            "line": 254,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a new resource allocation with a generated ID.\n\nArgs:\n    resource_id: ID of the resource\n    task_id: ID of the task\n    start_date: Start date of allocation\n    end_date: End date of allocation\n    allocated_hours: Number of hours allocated\n    allocation_type: Type of allocation\n    status: Status of allocation\n    metadata: Optional metadata\n    \nReturns:\n    A new ResourceAllocation instance",
            "args": [
              "resource_id",
              "task_id",
              "start_date",
              "end_date",
              "allocated_hours",
              "allocation_type",
              "status",
              "metadata"
            ],
            "class": "ResourceAllocation",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Resource",
            "line": 12,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "add_skill",
              "remove_skill",
              "update_capacity",
              "update_availability",
              "update_cost_rate",
              "has_skill",
              "calculate_cost",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Resource model representing a resource that can be assigned to tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResourceAllocation",
            "line": 159,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict",
              "update_status",
              "update_hours",
              "calculate_utilization",
              "create_new"
            ],
            "decorators": [],
            "docstring": "Resource allocation model representing the assignment of a resource to a task.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Resource.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 37,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 53,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.add_skill",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 74,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.remove_skill",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 80,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.update_capacity",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 88,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.update_availability",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 93,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.update_cost_rate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 98,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.has_skill",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 103,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.calculate_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Resource.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 122,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ResourceAllocation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 159,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ResourceAllocation.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 186,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResourceAllocation.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 203,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResourceAllocation.update_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 229,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResourceAllocation.update_hours",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 234,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResourceAllocation.calculate_utilization",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 239,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResourceAllocation.create_new",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/resource.py",
            "line": 254,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 291,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/models/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 5,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
      "analysis": {
        "functions": [
          {
            "name": "lifespan",
            "line": 55,
            "async": true,
            "decorators": [
              "@asynccontextmanager"
            ],
            "docstring": "Context manager for FastAPI application lifespan events.\n\nArgs:\n    app: FastAPI application",
            "args": [
              "app"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_app",
            "line": 154,
            "async": false,
            "decorators": [],
            "docstring": "Create the FastAPI application.\n\nReturns:\n    FastAPI application",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 189,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_exception_handler",
            "line": 244,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": null,
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "general_exception_handler",
            "line": 255,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": null,
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 269,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": null,
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 281,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 291,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint following Tekton standards",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "ready",
            "line": 189,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 281,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 291,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 269,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 15
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 24
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 24
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 25
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.utils.errors.StartupError",
            "from": "shared.utils.errors",
            "name": "StartupError",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.utils.startup.component_startup",
            "from": "shared.utils.startup",
            "name": "component_startup",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.startup.StartupMetrics",
            "from": "shared.utils.startup",
            "name": "StartupMetrics",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.shutdown.GracefulShutdown",
            "from": "shared.utils.shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 29
          },
          {
            "module": "shared.api.documentation.get_openapi_configuration",
            "from": "shared.api.documentation",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.api.endpoints.create_ready_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.endpoints.create_discovery_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.endpoints.EndpointInfo",
            "from": "shared.api.endpoints",
            "name": "EndpointInfo",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.routers.create_standard_routers",
            "from": "shared.api.routers",
            "name": "create_standard_routers",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.routers.mount_standard_routers",
            "from": "shared.api.routers",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 34
          },
          {
            "module": "endpoints.planning",
            "from": "endpoints",
            "name": "planning",
            "alias": null,
            "line": 48
          },
          {
            "module": "endpoints.tasks",
            "from": "endpoints",
            "name": "tasks",
            "alias": null,
            "line": 48
          },
          {
            "module": "endpoints.timelines",
            "from": "endpoints",
            "name": "timelines",
            "alias": null,
            "line": 48
          },
          {
            "module": "endpoints.resources",
            "from": "endpoints",
            "name": "resources",
            "alias": null,
            "line": 48
          },
          {
            "module": "endpoints.retrospective",
            "from": "endpoints",
            "name": "retrospective",
            "alias": null,
            "line": 49
          },
          {
            "module": "endpoints.history",
            "from": "endpoints",
            "name": "history",
            "alias": null,
            "line": 49
          },
          {
            "module": "endpoints.improvement",
            "from": "endpoints",
            "name": "improvement",
            "alias": null,
            "line": 49
          },
          {
            "module": "endpoints.tracking",
            "from": "endpoints",
            "name": "tracking",
            "alias": null,
            "line": 50
          },
          {
            "module": "endpoints.llm_integration",
            "from": "endpoints",
            "name": "llm_integration",
            "alias": null,
            "line": 50
          },
          {
            "module": "fastmcp_endpoints.mcp_router",
            "from": "fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 51
          },
          {
            "module": "fastmcp_endpoints.fastmcp_server",
            "from": "fastmcp_endpoints",
            "name": "fastmcp_server",
            "alias": null,
            "line": 51
          },
          {
            "module": "prometheus.core.mcp.hermes_bridge.PrometheusMCPBridge",
            "from": "prometheus.core.mcp.hermes_bridge",
            "name": "PrometheusMCPBridge",
            "alias": null,
            "line": 104
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 329
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "lifespan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 55,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "create_app",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 154,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 189,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "general_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 255,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 269,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 281,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app_old.py",
            "line": 291,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 339,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 5,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_planning_status",
            "line": 68,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get overall planning system status.\n\nReturns:\n    Dictionary containing planning system status and capabilities",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_analysis_workflow",
            "line": 97,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a predefined analysis workflow.\n\nArgs:\n    workflow_name: Name of the workflow to execute\n    parameters: Parameters for the workflow\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_name",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_full_project_analysis_workflow",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Comprehensive project analysis including planning, tracking, and retrospective.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_resource_optimization_workflow",
            "line": 197,
            "async": true,
            "decorators": [],
            "docstring": "Resource optimization workflow including capacity analysis and allocation.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_retrospective_with_improvements_workflow",
            "line": 233,
            "async": true,
            "decorators": [],
            "docstring": "Retrospective analysis with improvement recommendations.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_capacity_planning_workflow",
            "line": 296,
            "async": true,
            "decorators": [],
            "docstring": "Capacity planning workflow for future projects.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPRequest",
            "line": 31,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 37,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "get_planning_status",
            "line": 68,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_analysis_workflow",
            "line": 97,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.mcp.fastmcp.server.FastMCPServer",
            "from": "tekton.mcp.fastmcp.server",
            "name": "FastMCPServer",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_mcp_endpoints",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.FastMCPError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "FastMCPError",
            "alias": null,
            "line": 15
          },
          {
            "module": "prometheus.core.mcp.tools.planning_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "planning_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "prometheus.core.mcp.tools.retrospective_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "retrospective_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "prometheus.core.mcp.tools.resource_management_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "resource_management_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "prometheus.core.mcp.tools.improvement_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "improvement_tools",
            "alias": null,
            "line": 17
          },
          {
            "module": "prometheus.core.mcp.capabilities.PlanningCapability",
            "from": "prometheus.core.mcp.capabilities",
            "name": "PlanningCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "prometheus.core.mcp.capabilities.RetrospectiveAnalysisCapability",
            "from": "prometheus.core.mcp.capabilities",
            "name": "RetrospectiveAnalysisCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "prometheus.core.mcp.capabilities.ResourceManagementCapability",
            "from": "prometheus.core.mcp.capabilities",
            "name": "ResourceManagementCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "prometheus.core.mcp.capabilities.ImprovementRecommendationsCapability",
            "from": "prometheus.core.mcp.capabilities",
            "name": "ImprovementRecommendationsCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "prometheus.core.mcp.tools.create_project_plan",
            "from": "prometheus.core.mcp.tools",
            "name": "create_project_plan",
            "alias": null,
            "line": 145
          },
          {
            "module": "prometheus.core.mcp.tools.analyze_critical_path",
            "from": "prometheus.core.mcp.tools",
            "name": "analyze_critical_path",
            "alias": null,
            "line": 145
          },
          {
            "module": "prometheus.core.mcp.tools.conduct_retrospective",
            "from": "prometheus.core.mcp.tools",
            "name": "conduct_retrospective",
            "alias": null,
            "line": 145
          },
          {
            "module": "prometheus.core.mcp.tools.generate_improvement_recommendations",
            "from": "prometheus.core.mcp.tools",
            "name": "generate_improvement_recommendations",
            "alias": null,
            "line": 145
          },
          {
            "module": "prometheus.core.mcp.tools.analyze_resource_capacity",
            "from": "prometheus.core.mcp.tools",
            "name": "analyze_resource_capacity",
            "alias": null,
            "line": 199
          },
          {
            "module": "prometheus.core.mcp.tools.allocate_resources",
            "from": "prometheus.core.mcp.tools",
            "name": "allocate_resources",
            "alias": null,
            "line": 199
          },
          {
            "module": "prometheus.core.mcp.tools.conduct_retrospective",
            "from": "prometheus.core.mcp.tools",
            "name": "conduct_retrospective",
            "alias": null,
            "line": 235
          },
          {
            "module": "prometheus.core.mcp.tools.analyze_performance_trends",
            "from": "prometheus.core.mcp.tools",
            "name": "analyze_performance_trends",
            "alias": null,
            "line": 235
          },
          {
            "module": "prometheus.core.mcp.tools.generate_improvement_recommendations",
            "from": "prometheus.core.mcp.tools",
            "name": "generate_improvement_recommendations",
            "alias": null,
            "line": 235
          },
          {
            "module": "prometheus.core.mcp.tools.prioritize_improvements",
            "from": "prometheus.core.mcp.tools",
            "name": "prioritize_improvements",
            "alias": null,
            "line": 235
          },
          {
            "module": "prometheus.core.mcp.tools.analyze_resource_capacity",
            "from": "prometheus.core.mcp.tools",
            "name": "analyze_resource_capacity",
            "alias": null,
            "line": 298
          },
          {
            "module": "prometheus.core.mcp.tools.allocate_resources",
            "from": "prometheus.core.mcp.tools",
            "name": "allocate_resources",
            "alias": null,
            "line": 298
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fastmcp_endpoints.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fastmcp_endpoints.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_planning_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fastmcp_endpoints.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_analysis_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fastmcp_endpoints.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 354,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fixed_app.py",
      "analysis": {
        "functions": [
          {
            "name": "lifespan",
            "line": 24,
            "async": true,
            "decorators": [
              "@asynccontextmanager"
            ],
            "docstring": "Context manager for FastAPI application lifespan events.\n\nArgs:\n    app: FastAPI application",
            "args": [
              "app"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_app",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Create the FastAPI application.\n\nReturns:\n    FastAPI application",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 77,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 87,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_status",
            "line": 97,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 77,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 87,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_status",
            "line": 97,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 13
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.port_config.get_prometheus_port",
            "from": "tekton.utils.port_config",
            "name": "get_prometheus_port",
            "alias": null,
            "line": 52
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 120
          },
          {
            "module": "tekton.utils.port_config.get_prometheus_port",
            "from": "tekton.utils.port_config",
            "name": "get_prometheus_port",
            "alias": null,
            "line": 122
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "lifespan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fixed_app.py",
            "line": 24,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_app",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fixed_app.py",
            "line": 44,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fixed_app.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fixed_app.py",
            "line": 87,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/fixed_app.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 133,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 47,
            "async": true,
            "decorators": [],
            "docstring": "Initialize component during startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_app",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": "Create the FastAPI application using standardized patterns.\n\nReturns:\n    FastAPI application",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 80,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_exception_handler",
            "line": 126,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": null,
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "general_exception_handler",
            "line": 137,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": null,
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 151,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": null,
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 163,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 174,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint following Tekton standards",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "ready",
            "line": 80,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 163,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 174,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 151,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 20
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 21
          },
          {
            "module": "shared.api.documentation.get_openapi_configuration",
            "from": "shared.api.documentation",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 22
          },
          {
            "module": "shared.api.endpoints.create_ready_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.api.endpoints.create_discovery_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.api.endpoints.EndpointInfo",
            "from": "shared.api.endpoints",
            "name": "EndpointInfo",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.api.routers.create_standard_routers",
            "from": "shared.api.routers",
            "name": "create_standard_routers",
            "alias": null,
            "line": 24
          },
          {
            "module": "shared.api.routers.mount_standard_routers",
            "from": "shared.api.routers",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 24
          },
          {
            "module": "prometheus.core.prometheus_component.PrometheusComponent",
            "from": "prometheus.core.prometheus_component",
            "name": "PrometheusComponent",
            "alias": null,
            "line": 27
          },
          {
            "module": "endpoints.planning",
            "from": "endpoints",
            "name": "planning",
            "alias": null,
            "line": 30
          },
          {
            "module": "endpoints.tasks",
            "from": "endpoints",
            "name": "tasks",
            "alias": null,
            "line": 30
          },
          {
            "module": "endpoints.timelines",
            "from": "endpoints",
            "name": "timelines",
            "alias": null,
            "line": 30
          },
          {
            "module": "endpoints.resources",
            "from": "endpoints",
            "name": "resources",
            "alias": null,
            "line": 30
          },
          {
            "module": "endpoints.retrospective",
            "from": "endpoints",
            "name": "retrospective",
            "alias": null,
            "line": 31
          },
          {
            "module": "endpoints.history",
            "from": "endpoints",
            "name": "history",
            "alias": null,
            "line": 31
          },
          {
            "module": "endpoints.improvement",
            "from": "endpoints",
            "name": "improvement",
            "alias": null,
            "line": 31
          },
          {
            "module": "endpoints.tracking",
            "from": "endpoints",
            "name": "tracking",
            "alias": null,
            "line": 32
          },
          {
            "module": "endpoints.llm_integration",
            "from": "endpoints",
            "name": "llm_integration",
            "alias": null,
            "line": 32
          },
          {
            "module": "fastmcp_endpoints.mcp_router",
            "from": "fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 206
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_app",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 55,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 126,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "general_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 137,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 151,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 163,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/app.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 216,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Prometheus MCP Bridge.",
            "args": [
              "self",
              "planner",
              "component_name"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 82,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 95,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "tool_func"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 107,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 185,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 206,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from Prometheus planner.",
            "args": [
              "self"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 229,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "PrometheusMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PrometheusMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Prometheus's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Prometheus to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "prometheus.core.mcp.tools.planning_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "planning_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "prometheus.core.mcp.tools.resource_management_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "resource_management_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "prometheus.core.mcp.tools.retrospective_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "retrospective_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "prometheus.core.mcp.tools.improvement_tools",
            "from": "prometheus.core.mcp.tools",
            "name": "improvement_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 117
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PrometheusMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 82,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 185,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PrometheusMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/hermes_bridge.py",
            "line": 229,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 254,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize with optional planning engine instance.",
            "args": [
              "self",
              "planning_engine"
            ],
            "class": "PrometheusPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_project_plan",
            "line": 38,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Create a comprehensive project plan with milestones and timelines.\n\nArgs:\n    project_name: Name of the project\n    description: Detailed project description\n    start_date: Project start date (YYYY-MM-DD format)\n    end_date: Project end date (YYYY-MM-DD format)\n    objectives: List of project objectives\n    constraints: List of project constraints\n    stakeholders: List of project stakeholders\n    budget: Project budget\n    priority: Project priority (low, medium, high, critical)\n    \nReturns:\n    Dictionary containing the created project plan",
            "args": [
              "project_name",
              "description",
              "start_date",
              "end_date",
              "objectives",
              "constraints",
              "stakeholders",
              "budget",
              "priority"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_critical_path",
            "line": 127,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Analyze the critical path of a project plan.\n\nArgs:\n    plan_id: ID of the project plan\n    tasks: List of tasks with dependencies and durations\n    \nReturns:\n    Dictionary containing critical path analysis",
            "args": [
              "plan_id",
              "tasks"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "optimize_timeline",
            "line": 204,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Optimize project timeline for efficiency and resource utilization.\n\nArgs:\n    plan_id: ID of the project plan\n    constraints: Additional constraints for optimization\n    optimization_criteria: Criteria to optimize (duration, cost, resources)\n    \nReturns:\n    Dictionary containing optimized timeline",
            "args": [
              "plan_id",
              "constraints",
              "optimization_criteria"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_milestone",
            "line": 256,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Create a new milestone for a project plan.\n\nArgs:\n    plan_id: ID of the project plan\n    name: Milestone name\n    description: Milestone description\n    target_date: Target completion date (YYYY-MM-DD format)\n    criteria: List of completion criteria\n    dependencies: List of dependent milestone IDs\n    \nReturns:\n    Dictionary containing the created milestone",
            "args": [
              "plan_id",
              "name",
              "description",
              "target_date",
              "criteria",
              "dependencies"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_resources",
            "line": 317,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Allocate resources to project tasks and activities.\n\nArgs:\n    plan_id: ID of the project plan\n    resources: List of available resources\n    tasks: List of tasks requiring resources\n    optimization_strategy: Strategy for allocation (balanced, speed, cost)\n    \nReturns:\n    Dictionary containing resource allocation plan",
            "args": [
              "plan_id",
              "resources",
              "tasks",
              "optimization_strategy"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_resource_capacity",
            "line": 386,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Analyze resource capacity and identify bottlenecks.\n\nArgs:\n    resources: List of resources to analyze\n    time_period: Analysis time period (weekly, monthly, quarterly)\n    \nReturns:\n    Dictionary containing capacity analysis",
            "args": [
              "resources",
              "time_period"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "conduct_retrospective",
            "line": 462,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Conduct retrospective analysis of a completed project.\n\nArgs:\n    project_id: ID of the completed project\n    planned_metrics: Originally planned project metrics\n    actual_metrics: Actual project performance metrics\n    team_feedback: Optional team feedback and observations\n    \nReturns:\n    Dictionary containing retrospective analysis",
            "args": [
              "project_id",
              "planned_metrics",
              "actual_metrics",
              "team_feedback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_performance_trends",
            "line": 540,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Analyze performance trends across multiple projects.\n\nArgs:\n    projects: List of project data for analysis\n    metrics: List of metrics to analyze\n    time_period: Time period for trend analysis\n    \nReturns:\n    Dictionary containing trend analysis",
            "args": [
              "projects",
              "metrics",
              "time_period"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_improvement_recommendations",
            "line": 609,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Generate AI-driven improvement recommendations based on project data.\n\nArgs:\n    project_data: Historical project data for analysis\n    focus_areas: Specific areas to focus on (planning, execution, quality)\n    constraint_types: Types of constraints to consider (time, budget, resources)\n    \nReturns:\n    Dictionary containing improvement recommendations",
            "args": [
              "project_data",
              "focus_areas",
              "constraint_types"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "prioritize_improvements",
            "line": 723,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Prioritize improvement initiatives based on impact and effort.\n\nArgs:\n    improvements: List of improvement initiatives to prioritize\n    constraints: Resource and time constraints\n    \nReturns:\n    Dictionary containing prioritized improvements",
            "args": [
              "improvements",
              "constraints"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "PrometheusPlanner",
            "line": 22,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "MCP-enabled planner for Prometheus operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "create_project_plan",
            "line": 38,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_critical_path",
            "line": 127,
            "decorator": "@mcp_tool"
          },
          {
            "name": "optimize_timeline",
            "line": 204,
            "decorator": "@mcp_tool"
          },
          {
            "name": "create_milestone",
            "line": 256,
            "decorator": "@mcp_tool"
          },
          {
            "name": "allocate_resources",
            "line": 317,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_resource_capacity",
            "line": 386,
            "decorator": "@mcp_tool"
          },
          {
            "name": "conduct_retrospective",
            "line": 462,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_performance_trends",
            "line": 540,
            "decorator": "@mcp_tool"
          },
          {
            "name": "generate_improvement_recommendations",
            "line": 609,
            "decorator": "@mcp_tool"
          },
          {
            "name": "prioritize_improvements",
            "line": 723,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 13
          },
          {
            "module": "prometheus.core.planning_engine.PlanningEngine",
            "from": "prometheus.core.planning_engine",
            "name": "PlanningEngine",
            "alias": null,
            "line": 14
          },
          {
            "module": "prometheus.models.plan.Plan",
            "from": "prometheus.models.plan",
            "name": "Plan",
            "alias": null,
            "line": 15
          },
          {
            "module": "prometheus.models.plan.Milestone",
            "from": "prometheus.models.plan",
            "name": "Milestone",
            "alias": null,
            "line": 15
          },
          {
            "module": "prometheus.models.plan.ResourceRequirement",
            "from": "prometheus.models.plan",
            "name": "ResourceRequirement",
            "alias": null,
            "line": 15
          },
          {
            "module": "prometheus.models.retrospective.RetrospectiveAnalysis",
            "from": "prometheus.models.retrospective",
            "name": "RetrospectiveAnalysis",
            "alias": null,
            "line": 16
          },
          {
            "module": "prometheus.models.retrospective.PerformanceMetrics",
            "from": "prometheus.models.retrospective",
            "name": "PerformanceMetrics",
            "alias": null,
            "line": 16
          },
          {
            "module": "prometheus.models.improvement.ImprovementRecommendation",
            "from": "prometheus.models.improvement",
            "name": "ImprovementRecommendation",
            "alias": null,
            "line": 17
          },
          {
            "module": "prometheus.models.timeline.Timeline",
            "from": "prometheus.models.timeline",
            "name": "Timeline",
            "alias": null,
            "line": 18
          },
          {
            "module": "prometheus.models.timeline.TimelineEvent",
            "from": "prometheus.models.timeline",
            "name": "TimelineEvent",
            "alias": null,
            "line": 18
          },
          {
            "module": "prometheus.models.resource.Resource",
            "from": "prometheus.models.resource",
            "name": "Resource",
            "alias": null,
            "line": 19
          },
          {
            "module": "prometheus.models.resource.ResourceAllocation",
            "from": "prometheus.models.resource",
            "name": "ResourceAllocation",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PrometheusPlanner",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "create_project_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "optimize_timeline",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 204,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "create_milestone",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 256,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "allocate_resources",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 317,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_resource_capacity",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 386,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "conduct_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 462,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_performance_trends",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 540,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "generate_improvement_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 609,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "prioritize_improvements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/tools.py",
            "line": 723,
            "priority": "high",
            "reason": "Async function, Has side effects, MCP tool"
          }
        ]
      },
      "line_count": 808,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "tools.*",
            "from": "tools",
            "name": "*",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.*",
            "from": "capabilities",
            "name": "*",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 17,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/capabilities.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "PlanningCapability",
            "line": 16,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for project planning and timeline management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RetrospectiveAnalysisCapability",
            "line": 26,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for retrospective analysis and performance review.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResourceManagementCapability",
            "line": 36,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for resource allocation and management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementRecommendationsCapability",
            "line": 46,
            "methods": [],
            "decorators": [
              "@mcp_capability"
            ],
            "docstring": "Capability for generating improvement recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "tekton.mcp.fastmcp.decorators.mcp_capability",
            "from": "tekton.mcp.fastmcp.decorators",
            "name": "mcp_capability",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PlanningCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/capabilities.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RetrospectiveAnalysisCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/capabilities.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ResourceManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/capabilities.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementRecommendationsCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/core/mcp/capabilities.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 48,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tasks.py",
      "analysis": {
        "functions": [
          {
            "name": "list_tasks",
            "line": 24,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List tasks for a plan with pagination and filtering.\n\nArgs:\n    plan_id: ID of the plan\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    status: Filter by status\n    priority: Filter by priority\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of tasks",
            "args": [
              "plan_id",
              "page",
              "page_size",
              "status",
              "priority",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 88,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new task for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    task: Task creation data\n    \nReturns:\n    Created task",
            "args": [
              "task",
              "plan_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 150,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific task.\n\nArgs:\n    plan_id: ID of the plan\n    task_id: ID of the task\n    \nReturns:\n    Task data",
            "args": [
              "plan_id",
              "task_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_task",
            "line": 181,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a task.\n\nArgs:\n    plan_id: ID of the plan\n    task_id: ID of the task\n    task: Task update data\n    \nReturns:\n    Updated task",
            "args": [
              "task",
              "plan_id",
              "task_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_task",
            "line": 255,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a task.\n\nArgs:\n    plan_id: ID of the plan\n    task_id: ID of the task\n    \nReturns:\n    Deletion confirmation",
            "args": [
              "plan_id",
              "task_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_tasks",
            "line": 24,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_task",
            "line": 88,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_task",
            "line": 150,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_task",
            "line": 181,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_task",
            "line": 255,
            "method": "@delete",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.planning.TaskCreate",
            "from": "models.planning",
            "name": "TaskCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.TaskUpdate",
            "from": "models.planning",
            "name": "TaskUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 49
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 103
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 108
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 109
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 165
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 198
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 238
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 270
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 282
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tasks.py",
            "line": 24,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tasks.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tasks.py",
            "line": 150,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tasks.py",
            "line": 181,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "delete_task",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tasks.py",
            "line": 255,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 297,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
      "analysis": {
        "functions": [
          {
            "name": "list_improvements",
            "line": 34,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all improvements with pagination and filtering.\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    status: Filter by status\n    priority: Filter by priority\n    source: Filter by source\n    source_id: Filter by source ID\n    tag: Filter by tag\n    assignee: Filter by assignee\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of improvements",
            "args": [
              "page",
              "page_size",
              "status",
              "priority",
              "source",
              "source_id",
              "tag",
              "assignee",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_improvement",
            "line": 107,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new improvement.\n\nArgs:\n    improvement: Improvement creation data\n    \nReturns:\n    Created improvement",
            "args": [
              "improvement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_improvement",
            "line": 163,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific improvement.\n\nArgs:\n    improvement_id: ID of the improvement\n    \nReturns:\n    Improvement data",
            "args": [
              "improvement_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_improvement",
            "line": 185,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an improvement.\n\nArgs:\n    improvement_id: ID of the improvement\n    improvement: Improvement update data\n    \nReturns:\n    Updated improvement",
            "args": [
              "improvement",
              "improvement_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_improvement_status",
            "line": 258,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update the status of an improvement.\n\nArgs:\n    improvement_id: ID of the improvement\n    status_update: Status update data\n    \nReturns:\n    Updated improvement",
            "args": [
              "status_update",
              "improvement_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_improvement",
            "line": 312,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete an improvement.\n\nArgs:\n    improvement_id: ID of the improvement\n    \nReturns:\n    Deletion confirmation",
            "args": [
              "improvement_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_improvement_patterns",
            "line": 339,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all improvement patterns with pagination and filtering.\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    category: Filter by category\n    tag: Filter by tag\n    min_frequency: Filter by minimum frequency\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of improvement patterns",
            "args": [
              "page",
              "page_size",
              "category",
              "tag",
              "min_frequency",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_improvement_pattern",
            "line": 400,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new improvement pattern.\n\nArgs:\n    pattern: Improvement pattern creation data\n    \nReturns:\n    Created improvement pattern",
            "args": [
              "pattern"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_improvement_suggestions",
            "line": 443,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get improvement suggestions.\n\nArgs:\n    source_type: Type of source for suggestions\n    source_id: Optional ID of the source\n    limit: Maximum number of suggestions\n    \nReturns:\n    List of improvement suggestions",
            "args": [
              "source_type",
              "source_id",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_improvement_progress",
            "line": 556,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get improvement progress.\n\nArgs:\n    source_type: Optional type of source for improvements\n    source_id: Optional ID of the source\n    status: Optional list of statuses to include\n    start_date: Optional start date for the progress (ISO format)\n    end_date: Optional end date for the progress (ISO format)\n    group_by: Optional dimension to group by\n    \nReturns:\n    Improvement progress data",
            "args": [
              "source_type",
              "source_id",
              "status",
              "start_date",
              "end_date",
              "group_by"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_improvements",
            "line": 34,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_improvement",
            "line": 107,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_improvement",
            "line": 163,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_improvement",
            "line": 185,
            "method": "@put",
            "async": true
          },
          {
            "name": "update_improvement_status",
            "line": 258,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_improvement",
            "line": 312,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_improvement_patterns",
            "line": 339,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_improvement_pattern",
            "line": 400,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_improvement_suggestions",
            "line": 443,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_improvement_progress",
            "line": 556,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.improvement.ImprovementCreate",
            "from": "models.improvement",
            "name": "ImprovementCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.ImprovementUpdate",
            "from": "models.improvement",
            "name": "ImprovementUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.ImprovementStatusUpdate",
            "from": "models.improvement",
            "name": "ImprovementStatusUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.ImprovementPatternCreate",
            "from": "models.improvement",
            "name": "ImprovementPatternCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.ImprovementPatternUpdate",
            "from": "models.improvement",
            "name": "ImprovementPatternUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.ImprovementSuggestionRequest",
            "from": "models.improvement",
            "name": "ImprovementSuggestionRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.ImprovementProgressRequest",
            "from": "models.improvement",
            "name": "ImprovementProgressRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.LLMImprovementSuggestion",
            "from": "models.improvement",
            "name": "LLMImprovementSuggestion",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.improvement.LLMRootCauseAnalysis",
            "from": "models.improvement",
            "name": "LLMRootCauseAnalysis",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 118
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 119
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 218
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 245
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 286
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 411
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 412
          },
          {
            "module": "retrospective.retrospectives_db",
            "from": "retrospective",
            "name": "retrospectives_db",
            "alias": null,
            "line": 464
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 481
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 590
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_improvements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 34,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "create_improvement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_improvement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 163,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_improvement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 185,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "update_improvement_status",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_improvement",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 312,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_improvement_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 339,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_improvement_pattern",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 400,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_improvement_suggestions",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 443,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_improvement_progress",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/improvement.py",
            "line": 556,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 708,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
      "analysis": {
        "functions": [
          {
            "name": "list_retrospectives",
            "line": 32,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all retrospectives with pagination and filtering.\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    plan_id: Filter by plan ID\n    status: Filter by status\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of retrospectives",
            "args": [
              "page",
              "page_size",
              "plan_id",
              "status",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_retrospective",
            "line": 89,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new retrospective.\n\nArgs:\n    retro: Retrospective creation data\n    \nReturns:\n    Created retrospective",
            "args": [
              "retro"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_retrospective",
            "line": 139,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific retrospective.\n\nArgs:\n    retro_id: ID of the retrospective\n    \nReturns:\n    Retrospective data",
            "args": [
              "retro_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_retrospective",
            "line": 161,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a retrospective.\n\nArgs:\n    retro_id: ID of the retrospective\n    retro: Retrospective update data\n    \nReturns:\n    Updated retrospective",
            "args": [
              "retro",
              "retro_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_retrospective",
            "line": 212,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a retrospective.\n\nArgs:\n    retro_id: ID of the retrospective\n    \nReturns:\n    Deletion confirmation",
            "args": [
              "retro_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "add_retro_item",
            "line": 246,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add an item to a retrospective.\n\nArgs:\n    retro_id: ID of the retrospective\n    item: Retrospective item creation data\n    \nReturns:\n    Created retrospective item",
            "args": [
              "item",
              "retro_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_action_item",
            "line": 306,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add an action item to a retrospective.\n\nArgs:\n    retro_id: ID of the retrospective\n    action: Action item creation data\n    \nReturns:\n    Created action item",
            "args": [
              "action",
              "retro_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_retro_item",
            "line": 366,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a retrospective item.\n\nArgs:\n    retro_id: ID of the retrospective\n    item_id: ID of the retrospective item\n    item: Retrospective item update data\n    \nReturns:\n    Updated retrospective item",
            "args": [
              "item",
              "retro_id",
              "item_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "finalize_retrospective",
            "line": 436,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Finalize a retrospective.\n\nArgs:\n    retro_id: ID of the retrospective\n    \nReturns:\n    Finalized retrospective",
            "args": [
              "retro_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_retrospectives",
            "line": 32,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_retrospective",
            "line": 89,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_retrospective",
            "line": 139,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_retrospective",
            "line": 161,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_retrospective",
            "line": 212,
            "method": "@delete",
            "async": true
          },
          {
            "name": "add_retro_item",
            "line": 246,
            "method": "@post",
            "async": true
          },
          {
            "name": "add_action_item",
            "line": 306,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_retro_item",
            "line": 366,
            "method": "@put",
            "async": true
          },
          {
            "name": "finalize_retrospective",
            "line": 436,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.retrospective.RetrospectiveCreate",
            "from": "models.retrospective",
            "name": "RetrospectiveCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.RetrospectiveUpdate",
            "from": "models.retrospective",
            "name": "RetrospectiveUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.RetroItemCreate",
            "from": "models.retrospective",
            "name": "RetroItemCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.RetroItemUpdate",
            "from": "models.retrospective",
            "name": "RetroItemUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.ActionItemCreate",
            "from": "models.retrospective",
            "name": "ActionItemCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.ActionItemUpdate",
            "from": "models.retrospective",
            "name": "ActionItemUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 100
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 105
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 106
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 199
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 272
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 273
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 325
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 326
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 420
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 462
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_retrospectives",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 32,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 161,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "delete_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 212,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "add_retro_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 246,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_action_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 306,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_retro_item",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 366,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "finalize_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/retrospective.py",
            "line": 436,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 476,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 5,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "get_llm_adapter",
            "line": 29,
            "async": true,
            "decorators": [],
            "docstring": "Get or create an instance of the LLM adapter.\n\nReturns:\n    Initialized LLM adapter",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_plan",
            "line": 42,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze a plan using LLM capabilities.\n\nArgs:\n    analysis: Plan analysis request\n    \nReturns:\n    Analysis results",
            "args": [
              "analysis"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_retrospective",
            "line": 207,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze a retrospective using LLM capabilities.\n\nArgs:\n    analysis: Retrospective analysis request\n    llm_adapter: LLM adapter for retrospective analysis\n    \nReturns:\n    Analysis results",
            "args": [
              "analysis",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_improvement_suggestions",
            "line": 624,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Generate improvement suggestions using LLM capabilities.\n\nArgs:\n    suggestion: Improvement suggestion request\n    llm_adapter: LLM adapter for improvement suggestions\n    \nReturns:\n    Generated improvement suggestions",
            "args": [
              "suggestion",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_risks",
            "line": 841,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze risks for a plan using LLM and historical data.\n\nArgs:\n    analysis: Risk analysis request\n    llm_adapter: LLM adapter for risk analysis\n    \nReturns:\n    Risk analysis results",
            "args": [
              "analysis",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "general_analysis",
            "line": 1001,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Perform general analysis using LLM capabilities.\n\nArgs:\n    analysis: Analysis request\n    llm_adapter: LLM adapter for general analysis\n    \nReturns:\n    Analysis results",
            "args": [
              "analysis",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "analyze_plan",
            "line": 42,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_retrospective",
            "line": 207,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_improvement_suggestions",
            "line": 624,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_risks",
            "line": 841,
            "method": "@post",
            "async": true
          },
          {
            "name": "general_analysis",
            "line": 1001,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.LLMPlanAnalysis",
            "from": "models.planning",
            "name": "LLMPlanAnalysis",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.retrospective.LLMRetrospectiveAnalysis",
            "from": "models.retrospective",
            "name": "LLMRetrospectiveAnalysis",
            "alias": null,
            "line": 14
          },
          {
            "module": "models.improvement.LLMImprovementSuggestion",
            "from": "models.improvement",
            "name": "LLMImprovementSuggestion",
            "alias": null,
            "line": 15
          },
          {
            "module": "models.improvement.LLMRootCauseAnalysis",
            "from": "models.improvement",
            "name": "LLMRootCauseAnalysis",
            "alias": null,
            "line": 15
          },
          {
            "module": "models.shared.LLMAnalysisRequest",
            "from": "models.shared",
            "name": "LLMAnalysisRequest",
            "alias": null,
            "line": 16
          },
          {
            "module": "models.shared.LLMRiskAnalysisRequest",
            "from": "models.shared",
            "name": "LLMRiskAnalysisRequest",
            "alias": null,
            "line": 16
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "utils.llm_adapter.PrometheusLLMAdapter",
            "from": "utils.llm_adapter",
            "name": "PrometheusLLMAdapter",
            "alias": null,
            "line": 20
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 53
          },
          {
            "module": "retrospective.retrospectives_db",
            "from": "retrospective",
            "name": "retrospectives_db",
            "alias": null,
            "line": 222
          },
          {
            "module": "retrospective.retrospectives_db",
            "from": "retrospective",
            "name": "retrospectives_db",
            "alias": null,
            "line": 642
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 648
          },
          {
            "module": "re",
            "alias": null,
            "line": 749
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 856
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 866
          },
          {
            "module": "retrospective.retrospectives_db",
            "from": "retrospective",
            "name": "retrospectives_db",
            "alias": null,
            "line": 867
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_llm_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
            "line": 42,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "analyze_retrospective",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
            "line": 207,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_improvement_suggestions",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
            "line": 624,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "analyze_risks",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
            "line": 841,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "general_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/llm_integration.py",
            "line": 1001,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 1104,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
      "analysis": {
        "functions": [
          {
            "name": "list_plans",
            "line": 31,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all plans with pagination.\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of plans",
            "args": [
              "page",
              "page_size",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_plan",
            "line": 78,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new plan.\n\nArgs:\n    plan: Plan creation data\n    \nReturns:\n    Created plan",
            "args": [
              "plan"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_plan",
            "line": 123,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific plan.\n\nArgs:\n    plan_id: ID of the plan\n    \nReturns:\n    Plan data",
            "args": [
              "plan_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_plan",
            "line": 145,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a plan.\n\nArgs:\n    plan_id: ID of the plan\n    plan: Plan update data\n    \nReturns:\n    Updated plan",
            "args": [
              "plan",
              "plan_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_plan",
            "line": 196,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a plan.\n\nArgs:\n    plan_id: ID of the plan\n    \nReturns:\n    Deletion confirmation",
            "args": [
              "plan_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "create_plan_from_requirements",
            "line": 223,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a plan from requirements.\n\nArgs:\n    plan_req: Plan creation data with requirements\n    \nReturns:\n    Created plan",
            "args": [
              "plan_req"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_milestone",
            "line": 278,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a milestone for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    milestone: Milestone creation data\n    \nReturns:\n    Created milestone",
            "args": [
              "milestone",
              "plan_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_path",
            "line": 332,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get critical path for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    \nReturns:\n    Critical path analysis",
            "args": [
              "plan_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_plans",
            "line": 31,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_plan",
            "line": 78,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_plan",
            "line": 123,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_plan",
            "line": 145,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_plan",
            "line": 196,
            "method": "@delete",
            "async": true
          },
          {
            "name": "create_plan_from_requirements",
            "line": 223,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_milestone",
            "line": 278,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_critical_path",
            "line": 332,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.planning.PlanCreate",
            "from": "models.planning",
            "name": "PlanCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.PlanUpdate",
            "from": "models.planning",
            "name": "PlanUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.PlanFromRequirements",
            "from": "models.planning",
            "name": "PlanFromRequirements",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.MilestoneCreate",
            "from": "models.planning",
            "name": "MilestoneCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.MilestoneUpdate",
            "from": "models.planning",
            "name": "MilestoneUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 15
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 89
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 90
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 238
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 238
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 239
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 297
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_plans",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "delete_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "create_plan_from_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 223,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_milestone",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 278,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/planning.py",
            "line": 332,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 363,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
      "analysis": {
        "functions": [
          {
            "name": "list_resources",
            "line": 28,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all resources with pagination and filtering.\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    resource_type: Filter by resource type\n    skill: Filter by skill\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of resources",
            "args": [
              "page",
              "page_size",
              "resource_type",
              "skill",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_resource",
            "line": 85,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new resource.\n\nArgs:\n    resource: Resource creation data\n    \nReturns:\n    Created resource",
            "args": [
              "resource"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_resource",
            "line": 127,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific resource.\n\nArgs:\n    resource_id: ID of the resource\n    \nReturns:\n    Resource data",
            "args": [
              "resource_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_resource",
            "line": 149,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a resource.\n\nArgs:\n    resource_id: ID of the resource\n    resource: Resource update data\n    \nReturns:\n    Updated resource",
            "args": [
              "resource",
              "resource_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_resource",
            "line": 200,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a resource.\n\nArgs:\n    resource_id: ID of the resource\n    \nReturns:\n    Deletion confirmation",
            "args": [
              "resource_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "list_skills",
            "line": 247,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all skills across resources.\n\nReturns:\n    List of skills",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "allocate_resources",
            "line": 267,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Allocate resources to tasks in a plan.\n\nArgs:\n    plan_id: ID of the plan\n    allocation: Resource allocation data\n    \nReturns:\n    Updated allocation",
            "args": [
              "allocation",
              "plan_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_resource_allocation",
            "line": 330,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get resource allocation for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    \nReturns:\n    Current resource allocation",
            "args": [
              "plan_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_resources",
            "line": 28,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_resource",
            "line": 85,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_resource",
            "line": 127,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_resource",
            "line": 149,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_resource",
            "line": 200,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_skills",
            "line": 247,
            "method": "@get",
            "async": true
          },
          {
            "name": "allocate_resources",
            "line": 267,
            "method": "@put",
            "async": true
          },
          {
            "name": "get_resource_allocation",
            "line": 330,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.planning.ResourceCreate",
            "from": "models.planning",
            "name": "ResourceCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.ResourceUpdate",
            "from": "models.planning",
            "name": "ResourceUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.ResourceAllocation",
            "from": "models.planning",
            "name": "ResourceAllocation",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 96
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 97
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 187
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 215
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 282
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 313
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 341
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_resources",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 28,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "delete_resource",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "list_skills",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 247,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "allocate_resources",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_resource_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/resources.py",
            "line": 330,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 368,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tracking.py",
      "analysis": {
        "functions": [
          {
            "name": "get_tracking_data",
            "line": 27,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get tracking data for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    include_tasks: Whether to include tasks\n    include_milestones: Whether to include milestones\n    include_issues: Whether to include issues\n    include_history: Whether to include history\n    \nReturns:\n    Tracking data",
            "args": [
              "plan_id",
              "include_tasks",
              "include_milestones",
              "include_issues",
              "include_history"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_tracking",
            "line": 180,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Update tracking data for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    update: Tracking update data\n    \nReturns:\n    Updated tracking data",
            "args": [
              "update",
              "plan_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_burndown_chart",
            "line": 386,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get burndown chart data for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    chart_type: Type of chart (burndown or burnup)\n    scope: Scope of the chart\n    time_scale: Time scale for the chart\n    include_ideal: Whether to include ideal line\n    include_forecast: Whether to include forecast\n    \nReturns:\n    Burndown chart data",
            "args": [
              "plan_id",
              "chart_type",
              "scope",
              "time_scale",
              "include_ideal",
              "include_forecast"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_tracking_metrics",
            "line": 598,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get tracking metrics for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    metrics: List of metrics to include\n    start_date: Optional start date for metrics (ISO format)\n    end_date: Optional end date for metrics (ISO format)\n    group_by: Optional dimension to group by\n    \nReturns:\n    Tracking metrics data",
            "args": [
              "plan_id",
              "metrics",
              "start_date",
              "end_date",
              "group_by"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "get_tracking_data",
            "line": 27,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_tracking",
            "line": 180,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_burndown_chart",
            "line": 386,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_tracking_metrics",
            "line": 598,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.shared.TrackingUpdate",
            "from": "models.shared",
            "name": "TrackingUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.TrackingRequest",
            "from": "models.shared",
            "name": "TrackingRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.BurndownRequest",
            "from": "models.shared",
            "name": "BurndownRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.TrackingMetricsRequest",
            "from": "models.shared",
            "name": "TrackingMetricsRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 15
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 15
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 48
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 56
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 195
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 207
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 208
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 209
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 412
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 420
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 424
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 619
          },
          {
            "module": "history.execution_records_db",
            "from": "history",
            "name": "execution_records_db",
            "alias": null,
            "line": 627
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 632
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 695
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 758
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_tracking_data",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tracking.py",
            "line": 27,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "update_tracking",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tracking.py",
            "line": 180,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "get_burndown_chart",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tracking.py",
            "line": 386,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_tracking_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/tracking.py",
            "line": 598,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 822,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/timelines.py",
      "analysis": {
        "functions": [
          {
            "name": "get_timeline",
            "line": 28,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the timeline for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    \nReturns:\n    Timeline data",
            "args": [
              "plan_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_timeline",
            "line": 69,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a timeline for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    timeline: Timeline creation data\n    \nReturns:\n    Created timeline",
            "args": [
              "timeline",
              "plan_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_timeline",
            "line": 153,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update the timeline for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    timeline: Timeline update data\n    \nReturns:\n    Updated timeline",
            "args": [
              "timeline",
              "plan_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_gantt_chart",
            "line": 264,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get Gantt chart data for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    include_resources: Whether to include resource assignments\n    include_dependencies: Whether to include task dependencies\n    highlight_critical_path: Whether to highlight the critical path\n    \nReturns:\n    Gantt chart data",
            "args": [
              "plan_id",
              "include_resources",
              "include_dependencies",
              "highlight_critical_path"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "get_timeline",
            "line": 28,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_timeline",
            "line": 69,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_timeline",
            "line": 153,
            "method": "@put",
            "async": true
          },
          {
            "name": "get_gantt_chart",
            "line": 264,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.planning.TimelineCreate",
            "from": "models.planning",
            "name": "TimelineCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.TimelineUpdate",
            "from": "models.planning",
            "name": "TimelineUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.planning.TimelineEntry",
            "from": "models.planning",
            "name": "TimelineEntry",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 39
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 46
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 47
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 84
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 103
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 104
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 168
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 180
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 283
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_timeline",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/timelines.py",
            "line": 28,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_timeline",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/timelines.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_timeline",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/timelines.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "get_gantt_chart",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/timelines.py",
            "line": 264,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 357,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/history.py",
      "analysis": {
        "functions": [
          {
            "name": "list_execution_records",
            "line": 33,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all execution records with pagination and filtering.\n\nArgs:\n    page: Page number (1-indexed)\n    page_size: Number of items per page\n    plan_id: Filter by plan ID\n    sort_by: Field to sort by\n    sort_order: Sort order ('asc' or 'desc')\n    \nReturns:\n    Paginated list of execution records",
            "args": [
              "page",
              "page_size",
              "plan_id",
              "sort_by",
              "sort_order"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_execution_record",
            "line": 86,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new execution record for a plan.\n\nArgs:\n    plan_id: ID of the plan\n    record: Execution record creation data\n    \nReturns:\n    Created execution record",
            "args": [
              "record",
              "plan_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_execution_record",
            "line": 164,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific execution record.\n\nArgs:\n    record_id: ID of the execution record\n    \nReturns:\n    Execution record data",
            "args": [
              "record_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_execution_record",
            "line": 186,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Update an execution record.\n\nArgs:\n    record_id: ID of the execution record\n    update: Execution record update data\n    \nReturns:\n    Updated execution record",
            "args": [
              "update",
              "record_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_variance_analysis",
            "line": 402,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get variance analysis between plan and actual execution.\n\nArgs:\n    plan_id: ID of the plan\n    record_id: Optional ID of a specific execution record\n    metrics: Optional list of metrics to include\n    analysis_level: Level of analysis detail\n    \nReturns:\n    Variance analysis",
            "args": [
              "plan_id",
              "record_id",
              "metrics",
              "analysis_level"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_execution_records",
            "line": 33,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_execution_record",
            "line": 86,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_execution_record",
            "line": 164,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_execution_record",
            "line": 186,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_variance_analysis",
            "line": 402,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.retrospective.ExecutionRecordCreate",
            "from": "models.retrospective",
            "name": "ExecutionRecordCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.ExecutionRecordUpdate",
            "from": "models.retrospective",
            "name": "ExecutionRecordUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.TaskExecutionUpdate",
            "from": "models.retrospective",
            "name": "TaskExecutionUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.MilestoneExecutionUpdate",
            "from": "models.retrospective",
            "name": "MilestoneExecutionUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.ExecutionIssueCreate",
            "from": "models.retrospective",
            "name": "ExecutionIssueCreate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.ExecutionIssueUpdate",
            "from": "models.retrospective",
            "name": "ExecutionIssueUpdate",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.retrospective.VarianceAnalysisRequest",
            "from": "models.retrospective",
            "name": "VarianceAnalysisRequest",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.shared.StandardResponse",
            "from": "models.shared",
            "name": "StandardResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "models.shared.PaginatedResponse",
            "from": "models.shared",
            "name": "PaginatedResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 101
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 113
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 114
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 206
          },
          {
            "module": "planning.plans_db",
            "from": "planning",
            "name": "plans_db",
            "alias": null,
            "line": 422
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 504
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 550
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_execution_records",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/history.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_execution_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/history.py",
            "line": 86,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_execution_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/history.py",
            "line": 164,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_execution_record",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/history.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_variance_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/endpoints/history.py",
            "line": 402,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 592,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "ImprovementCreate",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementUpdate",
            "line": 30,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementStatusUpdate",
            "line": 46,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement status update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementPatternCreate",
            "line": 53,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement pattern creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementPatternUpdate",
            "line": 65,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement pattern update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementSuggestionRequest",
            "line": 78,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement suggestion request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ImprovementProgressRequest",
            "line": 89,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for improvement progress request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMImprovementSuggestion",
            "line": 101,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for LLM-based improvement suggestion.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMRootCauseAnalysis",
            "line": 113,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for LLM-based root cause analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ImprovementCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 30,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementStatusUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementPatternCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 53,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementPatternUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 65,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementSuggestionRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 78,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ImprovementProgressRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 89,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMImprovementSuggestion",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 101,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMRootCauseAnalysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/improvement.py",
            "line": 113,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 120,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "RetroItemCreate",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for retrospective item creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RetroItemUpdate",
            "line": 22,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for retrospective item update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionItemCreate",
            "line": 31,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for action item creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionItemUpdate",
            "line": 43,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for action item update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RetrospectiveCreate",
            "line": 57,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for retrospective creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RetrospectiveUpdate",
            "line": 69,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for retrospective update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionIssueCreate",
            "line": 82,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for execution issue creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionIssueUpdate",
            "line": 94,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for execution issue update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskExecutionUpdate",
            "line": 108,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for task execution update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MilestoneExecutionUpdate",
            "line": 123,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for milestone execution update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionRecordCreate",
            "line": 133,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for execution record creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionRecordUpdate",
            "line": 143,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for execution record update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "VarianceAnalysisRequest",
            "line": 152,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for variance analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PerformanceMetricCreate",
            "line": 162,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for performance metric creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PerformanceAnalysisRequest",
            "line": 176,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for performance analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TeamPerformanceRequest",
            "line": 188,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for team performance analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TrendAnalysisRequest",
            "line": 198,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for trend analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BottleneckAnalysisRequest",
            "line": 209,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for bottleneck analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMRetrospectiveAnalysis",
            "line": 219,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for LLM-based retrospective analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RetroItemCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RetroItemUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ActionItemCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ActionItemUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 43,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RetrospectiveCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 57,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RetrospectiveUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 69,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionIssueCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 82,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionIssueUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 94,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskExecutionUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 108,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MilestoneExecutionUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 123,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionRecordCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 133,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionRecordUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 143,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "VarianceAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 152,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PerformanceMetricCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 162,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PerformanceAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 176,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TeamPerformanceRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 188,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TrendAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 198,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BottleneckAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 209,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMRetrospectiveAnalysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/retrospective.py",
            "line": 219,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 229,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 5,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "TrackingUpdate",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for tracking update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TrackingRequest",
            "line": 24,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for tracking data request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BurndownRequest",
            "line": 34,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for burndown chart data request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TrackingMetricsRequest",
            "line": 48,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for tracking metrics request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMAnalysisRequest",
            "line": 58,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for LLM analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMRiskAnalysisRequest",
            "line": 67,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for LLM risk analysis request.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StandardResponse",
            "line": 77,
            "methods": [],
            "decorators": [],
            "docstring": "Standard response model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PaginatedResponse",
            "line": 85,
            "methods": [],
            "decorators": [],
            "docstring": "Paginated response model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ErrorResponse",
            "line": 97,
            "methods": [],
            "decorators": [],
            "docstring": "Error response model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SearchRequest",
            "line": 105,
            "methods": [],
            "decorators": [],
            "docstring": "Search request model.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TrackingUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TrackingRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BurndownRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 34,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TrackingMetricsRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 48,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 58,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMRiskAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 67,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "StandardResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 77,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PaginatedResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 85,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ErrorResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 97,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SearchRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/shared.py",
            "line": 105,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 114,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
      "analysis": {
        "functions": [
          {
            "name": "end_date_after_start_date",
            "line": 29,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "TaskCreate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_date_after_start_date",
            "line": 55,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "TaskUpdate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_date_after_start_date",
            "line": 95,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "PlanCreate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_date_after_start_date",
            "line": 114,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "PlanUpdate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_date_after_start_date",
            "line": 198,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "TimelineEntry",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskCreate",
            "line": 13,
            "methods": [
              "end_date_after_start_date"
            ],
            "decorators": [],
            "docstring": "Schema for task creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskUpdate",
            "line": 35,
            "methods": [
              "end_date_after_start_date"
            ],
            "decorators": [],
            "docstring": "Schema for task update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MilestoneCreate",
            "line": 61,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for milestone creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MilestoneUpdate",
            "line": 70,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for milestone update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PlanCreate",
            "line": 82,
            "methods": [
              "end_date_after_start_date"
            ],
            "decorators": [],
            "docstring": "Schema for plan creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PlanUpdate",
            "line": 101,
            "methods": [
              "end_date_after_start_date"
            ],
            "decorators": [],
            "docstring": "Schema for plan update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PlanFromRequirements",
            "line": 120,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for creating a plan from requirements.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResourceCreate",
            "line": 134,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for resource creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResourceUpdate",
            "line": 146,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for resource update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResourceAllocation",
            "line": 158,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for resource allocation to a plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskDependency",
            "line": 174,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for task dependency.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TimelineEntry",
            "line": 186,
            "methods": [
              "end_date_after_start_date"
            ],
            "decorators": [],
            "docstring": "Schema for timeline entry.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TimelineCreate",
            "line": 204,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for timeline creation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TimelineUpdate",
            "line": 211,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for timeline update.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMPlanAnalysis",
            "line": 219,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for LLM-based plan analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskCreate.end_date_after_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TaskUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskUpdate.end_date_after_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 55,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MilestoneCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 61,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MilestoneUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 70,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PlanCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 82,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PlanCreate.end_date_after_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 95,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PlanUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 101,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PlanUpdate.end_date_after_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PlanFromRequirements",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 120,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ResourceCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 134,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ResourceUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 146,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ResourceAllocation",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 158,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskDependency",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 174,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TimelineEntry",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 186,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TimelineEntry.end_date_after_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 198,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TimelineCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 204,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TimelineUpdate",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 211,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMPlanAnalysis",
            "file": "/Users/cskoons/projects/github/Tekton/Prometheus/prometheus/api/models/planning.py",
            "line": 219,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 229,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 48,
    "total_functions": 426,
    "total_classes": 93,
    "total_landmarks": 453,
    "patterns": [
      "websocket",
      "fastapi",
      "async",
      "error_handling",
      "mcp",
      "singleton"
    ],
    "api_endpoints": 69,
    "mcp_tools": 10
  }
}