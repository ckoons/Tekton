{
  "component": "Rhetor",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/setup.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 3
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 3
          },
          {
            "module": "os",
            "alias": null,
            "line": 4
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 35,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Rhetor prompt client.\n\nArgs:\n    component_id: ID of the Rhetor prompt component to connect to (default: \"rhetor-prompt\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations",
            "args": [
              "self",
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": "RhetorPromptClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_prompt_template",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Create a new prompt template.\n\nArgs:\n    name: Name of the template\n    template: The prompt template with variable placeholders\n    variables: List of variables in the template\n    description: Optional description of the template\n    tags: Optional tags for the template\n    metadata: Optional additional metadata\n    \nReturns:\n    Dictionary with template information (including template_id)\n    \nRaises:\n    CapabilityInvocationError: If the template creation fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "name",
              "template",
              "variables",
              "description",
              "tags",
              "metadata"
            ],
            "class": "RhetorPromptClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "render_prompt",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": "Render a prompt using a template and variables.\n\nArgs:\n    template_id: ID of the template to use\n    variables: Dictionary of variable values\n    \nReturns:\n    Rendered prompt string\n    \nRaises:\n    CapabilityInvocationError: If the prompt rendering fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "template_id",
              "variables"
            ],
            "class": "RhetorPromptClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_personality",
            "line": 153,
            "async": true,
            "decorators": [],
            "docstring": "Create a new AI personality.\n\nArgs:\n    name: Name of the personality\n    traits: Dictionary of personality traits\n    description: Optional description of the personality\n    tone: Optional tone for the personality (e.g., \"formal\", \"casual\")\n    examples: Optional list of example interactions\n    \nReturns:\n    Dictionary with personality information (including personality_id)\n    \nRaises:\n    CapabilityInvocationError: If the personality creation fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "name",
              "traits",
              "description",
              "tone",
              "examples"
            ],
            "class": "RhetorPromptClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_prompt",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Generate a prompt for a specific task.\n\nArgs:\n    task: Description of the task to generate a prompt for\n    context: Optional context information\n    personality_id: Optional personality to use\n    format: Optional format for the prompt (e.g., \"chat\", \"instruction\")\n    \nReturns:\n    Dictionary with generated prompt information\n    \nRaises:\n    CapabilityInvocationError: If the prompt generation fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "task",
              "context",
              "personality_id",
              "format"
            ],
            "class": "RhetorPromptClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 250,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Rhetor communication client.\n\nArgs:\n    component_id: ID of the Rhetor communication component to connect to (default: \"rhetor-communication\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations",
            "args": [
              "self",
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": "RhetorCommunicationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_conversation",
            "line": 273,
            "async": true,
            "decorators": [],
            "docstring": "Create a new conversation.\n\nArgs:\n    name: Optional name for the conversation\n    metadata: Optional additional metadata\n    \nReturns:\n    Dictionary with conversation information (including conversation_id)\n    \nRaises:\n    CapabilityInvocationError: If the conversation creation fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "name",
              "metadata"
            ],
            "class": "RhetorCommunicationClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_message",
            "line": 310,
            "async": true,
            "decorators": [],
            "docstring": "Add a message to a conversation.\n\nArgs:\n    conversation_id: ID of the conversation to add the message to\n    message: Message content\n    sender: Sender of the message\n    metadata: Optional additional metadata\n    \nReturns:\n    Dictionary with message information (including message_id)\n    \nRaises:\n    CapabilityInvocationError: If the message addition fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "conversation_id",
              "message",
              "sender",
              "metadata"
            ],
            "class": "RhetorCommunicationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_conversation",
            "line": 352,
            "async": true,
            "decorators": [],
            "docstring": "Get a conversation by ID.\n\nArgs:\n    conversation_id: ID of the conversation to get\n    \nReturns:\n    Dictionary with conversation information (including messages)\n    \nRaises:\n    CapabilityInvocationError: If the conversation retrieval fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "conversation_id"
            ],
            "class": "RhetorCommunicationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_conversation",
            "line": 378,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a conversation.\n\nArgs:\n    conversation_id: ID of the conversation to analyze\n    analysis_type: Optional type of analysis to perform\n    \nReturns:\n    Dictionary with analysis results\n    \nRaises:\n    CapabilityInvocationError: If the conversation analysis fails\n    ComponentUnavailableError: If the Rhetor component is unavailable",
            "args": [
              "self",
              "conversation_id",
              "analysis_type"
            ],
            "class": "RhetorCommunicationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_rhetor_prompt_client",
            "line": 413,
            "async": true,
            "decorators": [],
            "docstring": "Create a client for the Rhetor prompt engineering component.\n\nArgs:\n    component_id: ID of the Rhetor prompt component to connect to (default: \"rhetor-prompt\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations\n    \nReturns:\n    RhetorPromptClient instance\n    \nRaises:\n    ComponentNotFoundError: If the Rhetor prompt component is not found\n    ComponentUnavailableError: If the Hermes API is unavailable",
            "args": [
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_rhetor_communication_client",
            "line": 454,
            "async": true,
            "decorators": [],
            "docstring": "Create a client for the Rhetor communication component.\n\nArgs:\n    component_id: ID of the Rhetor communication component to connect to (default: \"rhetor-communication\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations\n    \nReturns:\n    RhetorCommunicationClient instance\n    \nRaises:\n    ComponentNotFoundError: If the Rhetor communication component is not found\n    ComponentUnavailableError: If the Hermes API is unavailable",
            "args": [
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RhetorPromptClient",
            "line": 41,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for the Rhetor prompt engineering component.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RhetorCommunicationClient",
            "line": 247,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for the Rhetor communication component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.utils.component_client.ComponentClient",
            "from": "tekton.utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.ComponentError",
            "from": "tekton.utils.component_client",
            "name": "ComponentError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.ComponentNotFoundError",
            "from": "tekton.utils.component_client",
            "name": "ComponentNotFoundError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.CapabilityNotFoundError",
            "from": "tekton.utils.component_client",
            "name": "CapabilityNotFoundError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.CapabilityInvocationError",
            "from": "tekton.utils.component_client",
            "name": "CapabilityInvocationError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.ComponentUnavailableError",
            "from": "tekton.utils.component_client",
            "name": "ComponentUnavailableError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.SecurityContext",
            "from": "tekton.utils.component_client",
            "name": "SecurityContext",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.RetryPolicy",
            "from": "tekton.utils.component_client",
            "name": "RetryPolicy",
            "alias": null,
            "line": 14
          },
          {
            "module": "utils.component_client.ComponentClient",
            "from": "utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.ComponentError",
            "from": "utils.component_client",
            "name": "ComponentError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.ComponentNotFoundError",
            "from": "utils.component_client",
            "name": "ComponentNotFoundError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.CapabilityNotFoundError",
            "from": "utils.component_client",
            "name": "CapabilityNotFoundError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.CapabilityInvocationError",
            "from": "utils.component_client",
            "name": "CapabilityInvocationError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.ComponentUnavailableError",
            "from": "utils.component_client",
            "name": "ComponentUnavailableError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.SecurityContext",
            "from": "utils.component_client",
            "name": "SecurityContext",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.RetryPolicy",
            "from": "utils.component_client",
            "name": "RetryPolicy",
            "alias": null,
            "line": 26
          },
          {
            "module": "tekton.utils.component_client.discover_component",
            "from": "tekton.utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 437
          },
          {
            "module": "utils.component_client.discover_component",
            "from": "utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 440
          },
          {
            "module": "tekton.utils.component_client.discover_component",
            "from": "tekton.utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 478
          },
          {
            "module": "utils.component_client.discover_component",
            "from": "utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 481
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RhetorPromptClient",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorPromptClient.create_prompt_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorPromptClient.render_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorPromptClient.create_personality",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorPromptClient.generate_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "RhetorCommunicationClient",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 247,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorCommunicationClient.create_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 273,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCommunicationClient.add_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 310,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCommunicationClient.get_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 352,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCommunicationClient.analyze_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 378,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_rhetor_prompt_client",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 413,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_rhetor_communication_client",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/client.py",
            "line": 454,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 492,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 7,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/__main__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 2
          },
          {
            "module": "sys",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.tekton_startup.tekton_component_startup",
            "from": "shared.utils.tekton_startup",
            "name": "tekton_component_startup",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 19
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 32,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/examples/client_usage.py",
      "analysis": {
        "functions": [
          {
            "name": "prompt_template_example",
            "line": 44,
            "async": true,
            "decorators": [],
            "docstring": "Example of using the Rhetor prompt client for template management.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "personality_example",
            "line": 125,
            "async": true,
            "decorators": [],
            "docstring": "Example of using the Rhetor prompt client for personality management.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_example",
            "line": 210,
            "async": true,
            "decorators": [],
            "docstring": "Example of using the Rhetor communication client for conversation management.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "error_handling_example",
            "line": 293,
            "async": true,
            "decorators": [],
            "docstring": "Example of handling errors with the Rhetor client.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Run all examples.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.client.RhetorPromptClient",
            "from": "rhetor.client",
            "name": "RhetorPromptClient",
            "alias": null,
            "line": 22
          },
          {
            "module": "rhetor.client.RhetorCommunicationClient",
            "from": "rhetor.client",
            "name": "RhetorCommunicationClient",
            "alias": null,
            "line": 22
          },
          {
            "module": "rhetor.client.get_rhetor_prompt_client",
            "from": "rhetor.client",
            "name": "get_rhetor_prompt_client",
            "alias": null,
            "line": 22
          },
          {
            "module": "rhetor.client.get_rhetor_communication_client",
            "from": "rhetor.client",
            "name": "get_rhetor_communication_client",
            "alias": null,
            "line": 22
          },
          {
            "module": "sys",
            "alias": null,
            "line": 29
          },
          {
            "module": "os",
            "alias": null,
            "line": 30
          },
          {
            "module": "rhetor.client.RhetorPromptClient",
            "from": "rhetor.client",
            "name": "RhetorPromptClient",
            "alias": null,
            "line": 36
          },
          {
            "module": "rhetor.client.RhetorCommunicationClient",
            "from": "rhetor.client",
            "name": "RhetorCommunicationClient",
            "alias": null,
            "line": 36
          },
          {
            "module": "rhetor.client.get_rhetor_prompt_client",
            "from": "rhetor.client",
            "name": "get_rhetor_prompt_client",
            "alias": null,
            "line": 36
          },
          {
            "module": "rhetor.client.get_rhetor_communication_client",
            "from": "rhetor.client",
            "name": "get_rhetor_communication_client",
            "alias": null,
            "line": 36
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "prompt_template_example",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/examples/client_usage.py",
            "line": 44,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "personality_example",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/examples/client_usage.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "conversation_example",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/examples/client_usage.py",
            "line": 210,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "error_handling_example",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/examples/client_usage.py",
            "line": 293,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/examples/client_usage.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 350,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 7,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/registry_fix.py",
      "analysis": {
        "functions": [
          {
            "name": "apply_fix",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Apply the fix to the PromptTemplateRegistry class.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "load_from_directory",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Load templates from a directory.\n\nArgs:\n    directory: Directory containing template files\n    \nReturns:\n    Number of templates loaded",
            "args": [
              "self",
              "directory"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "yaml",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "importlib",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 23
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "apply_fix",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/registry_fix.py",
            "line": 19,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "load_from_directory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/registry_fix.py",
            "line": 31,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          }
        ]
      },
      "line_count": 139,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a prompt version.\n\nArgs:\n    content: The prompt content\n    version_id: Unique identifier for this version\n    created_at: Timestamp when this version was created\n    metadata: Additional metadata for this version\n    component: Component this prompt is for",
            "args": [
              "self",
              "content",
              "version_id",
              "created_at",
              "metadata",
              "component"
            ],
            "class": "PromptVersion",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Convert the version to a dictionary for serialization.",
            "args": [
              "self"
            ],
            "class": "PromptVersion",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 68,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a version from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "PromptVersion",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 82,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a system prompt.\n\nArgs:\n    prompt_id: Unique identifier for the prompt\n    name: Human-readable name\n    component: Component this prompt is for\n    description: Optional description\n    tags: Optional tags for categorization\n    versions: List of versions\n    is_default: Whether this is the default prompt for the component\n    parent_id: Optional parent prompt ID for inheritance",
            "args": [
              "self",
              "prompt_id",
              "name",
              "component",
              "description",
              "tags",
              "versions",
              "is_default",
              "parent_id"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "current_version",
            "line": 123,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the current (latest) version of the prompt.",
            "args": [
              "self"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "content",
            "line": 130,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the content of the current version.",
            "args": [
              "self"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_version",
            "line": 134,
            "async": false,
            "decorators": [],
            "docstring": "Add a new version of the prompt.\n\nArgs:\n    content: The prompt content\n    metadata: Additional metadata for this version\n    \nReturns:\n    The new version",
            "args": [
              "self",
              "content",
              "metadata"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_version",
            "line": 160,
            "async": false,
            "decorators": [],
            "docstring": "Get a specific version by ID.\n\nArgs:\n    version_id: ID of the version to get\n    \nReturns:\n    PromptVersion or None if not found",
            "args": [
              "self",
              "version_id"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "revert_to_version",
            "line": 174,
            "async": false,
            "decorators": [],
            "docstring": "Revert to a previous version, creating a new version with the same content.\n\nArgs:\n    version_id: ID of the version to revert to\n    metadata: Additional metadata for the new version\n    \nReturns:\n    The new version or None if target version not found",
            "args": [
              "self",
              "version_id",
              "metadata"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 203,
            "async": false,
            "decorators": [],
            "docstring": "Convert the prompt to a dictionary for serialization.\n\nArgs:\n    include_versions: Whether to include all versions\n\nReturns:\n    Dictionary representation",
            "args": [
              "self",
              "include_versions"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 229,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a prompt from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "SystemPrompt",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 252,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the prompt registry.\n\nArgs:\n    base_dir: Base directory for prompt storage\n    template_manager: Optional template manager for template integration",
            "args": [
              "self",
              "base_dir",
              "template_manager"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_template_files",
            "line": 286,
            "async": false,
            "decorators": [],
            "docstring": "Load template files from standard locations.",
            "args": [
              "self"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_ensure_directories",
            "line": 296,
            "async": false,
            "decorators": [],
            "docstring": "Ensure all necessary directories exist.",
            "args": [
              "self"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_default_prompts",
            "line": 301,
            "async": false,
            "decorators": [],
            "docstring": "Create default prompts for all core components if they don't exist.",
            "args": [
              "self"
            ],
            "class": "PromptRegistry",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_prompt_path",
            "line": 508,
            "async": false,
            "decorators": [],
            "docstring": "Get the file path for a prompt.\n\nArgs:\n    prompt: The prompt\n    \nReturns:\n    Path object for the prompt file",
            "args": [
              "self",
              "prompt"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_all_prompts",
            "line": 519,
            "async": false,
            "decorators": [],
            "docstring": "Load all prompts from disk.\n\nReturns:\n    Number of prompts loaded",
            "args": [
              "self"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "load_prompt_from_file",
            "line": 540,
            "async": false,
            "decorators": [],
            "docstring": "Load a prompt from a file.\n\nArgs:\n    file_path: Path to the prompt file\n    \nReturns:\n    Loaded prompt or None if error",
            "args": [
              "self",
              "file_path"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "save_prompt",
            "line": 567,
            "async": false,
            "decorators": [],
            "docstring": "Save a prompt to disk.\n\nArgs:\n    prompt: The prompt to save\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "prompt"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_prompt",
            "line": 598,
            "async": false,
            "decorators": [],
            "docstring": "Get a prompt by ID.\n\nArgs:\n    prompt_id: Prompt identifier\n    \nReturns:\n    Prompt or None if not found",
            "args": [
              "self",
              "prompt_id"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_default_prompt",
            "line": 609,
            "async": false,
            "decorators": [],
            "docstring": "Get the default prompt for a component.\n\nArgs:\n    component: Component name\n    \nReturns:\n    Default prompt or None if not found",
            "args": [
              "self",
              "component"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_prompt",
            "line": 632,
            "async": false,
            "decorators": [],
            "docstring": "Create a new prompt.\n\nArgs:\n    prompt_id: Unique identifier for the prompt\n    name: Human-readable name\n    component: Component this prompt is for\n    content: Initial prompt content\n    description: Optional description\n    tags: Optional tags for categorization\n    is_default: Whether this is the default prompt for the component\n    parent_id: Optional parent prompt ID for inheritance\n    metadata: Optional metadata for the initial version\n    \nReturns:\n    Newly created prompt",
            "args": [
              "self",
              "prompt_id",
              "name",
              "component",
              "content",
              "description",
              "tags",
              "is_default",
              "parent_id",
              "metadata"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_prompt",
            "line": 704,
            "async": false,
            "decorators": [],
            "docstring": "Update an existing prompt with a new version.\n\nArgs:\n    prompt_id: Prompt identifier\n    content: New content\n    metadata: Optional metadata for the new version\n    \nReturns:\n    Updated prompt or None if not found",
            "args": [
              "self",
              "prompt_id",
              "content",
              "metadata"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "set_default_prompt",
            "line": 744,
            "async": false,
            "decorators": [],
            "docstring": "Set a prompt as the default for its component.\n\nArgs:\n    prompt_id: Prompt identifier\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "prompt_id"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "clone_prompt",
            "line": 771,
            "async": false,
            "decorators": [],
            "docstring": "Clone an existing prompt to create a new one.\n\nArgs:\n    source_id: Source prompt ID\n    new_id: New prompt ID\n    new_name: New prompt name\n    description: Optional description for the new prompt\n    is_default: Whether the new prompt should be the default\n    \nReturns:\n    Newly created prompt or None if source not found",
            "args": [
              "self",
              "source_id",
              "new_id",
              "new_name",
              "description",
              "is_default"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_prompt",
            "line": 820,
            "async": false,
            "decorators": [],
            "docstring": "Delete a prompt.\n\nArgs:\n    prompt_id: Prompt identifier\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "prompt_id"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_prompts",
            "line": 862,
            "async": false,
            "decorators": [],
            "docstring": "List prompts with optional filtering.\n\nArgs:\n    component: Optional component filter\n    tags: Optional tags filter\n    \nReturns:\n    List of prompt summary dictionaries",
            "args": [
              "self",
              "component",
              "tags"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "render_prompt_with_template",
            "line": 905,
            "async": false,
            "decorators": [],
            "docstring": "Render a prompt using template variables.\n\nArgs:\n    prompt_id: Prompt identifier\n    variables: Variables for template rendering\n    version_id: Optional specific version to render\n    \nReturns:\n    Rendered prompt or None if error",
            "args": [
              "self",
              "prompt_id",
              "variables",
              "version_id"
            ],
            "class": "PromptRegistry",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_system_prompt",
            "line": 962,
            "async": false,
            "decorators": [],
            "docstring": "Get a system prompt for a component, optionally rendered with variables.\n\nArgs:\n    component: Component name\n    prompt_id: Optional specific prompt ID\n    variables: Optional variables for template rendering\n    \nReturns:\n    System prompt content",
            "args": [
              "self",
              "component",
              "prompt_id",
              "variables"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_prompts",
            "line": 1001,
            "async": false,
            "decorators": [],
            "docstring": "Search prompts by name, description, or content.\n\nArgs:\n    query: Search query string\n    \nReturns:\n    List of matching prompt summaries",
            "args": [
              "self",
              "query"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "evaluate_prompt",
            "line": 1044,
            "async": false,
            "decorators": [],
            "docstring": "Evaluate a prompt using various metrics.\n\nArgs:\n    prompt_id: Prompt identifier\n    metrics: Optional metrics to store\n    \nReturns:\n    Evaluation results",
            "args": [
              "self",
              "prompt_id",
              "metrics"
            ],
            "class": "PromptRegistry",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_calculate_readability",
            "line": 1088,
            "async": false,
            "decorators": [],
            "docstring": "Calculate a simple readability score for a text.\n\nArgs:\n    text: Text to analyze\n    \nReturns:\n    Readability score (0-1)",
            "args": [
              "self",
              "text"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_complexity",
            "line": 1115,
            "async": false,
            "decorators": [],
            "docstring": "Calculate a simple complexity score for a text.\n\nArgs:\n    text: Text to analyze\n    \nReturns:\n    Complexity score (0-1)",
            "args": [
              "self",
              "text"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_specificity",
            "line": 1137,
            "async": false,
            "decorators": [],
            "docstring": "Calculate a simple specificity score for a text.\n\nArgs:\n    text: Text to analyze\n    \nReturns:\n    Specificity score (0-1)",
            "args": [
              "self",
              "text"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_prompts",
            "line": 1164,
            "async": false,
            "decorators": [],
            "docstring": "Get all prompts for a specific component.\n\nArgs:\n    component: Component name\n    \nReturns:\n    List of prompts for the component",
            "args": [
              "self",
              "component"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "render_template",
            "line": 1176,
            "async": false,
            "decorators": [],
            "docstring": "Render a template using the tekton-llm-client PromptTemplateRegistry.\n\nArgs:\n    template_name: Name of the template to render\n    **kwargs: Variables to use in template rendering\n    \nReturns:\n    Rendered template string",
            "args": [
              "self",
              "template_name"
            ],
            "class": "PromptRegistry",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PromptVersion",
            "line": 31,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "Represents a specific version of a prompt with metadata.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SystemPrompt",
            "line": 79,
            "methods": [
              "__init__",
              "current_version",
              "content",
              "add_version",
              "get_version",
              "revert_to_version",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "A system prompt with versioning support.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptRegistry",
            "line": 249,
            "methods": [
              "__init__",
              "_load_template_files",
              "_ensure_directories",
              "_create_default_prompts",
              "get_prompt_path",
              "load_all_prompts",
              "load_prompt_from_file",
              "save_prompt",
              "get_prompt",
              "get_default_prompt",
              "create_prompt",
              "update_prompt",
              "set_default_prompt",
              "clone_prompt",
              "delete_prompt",
              "list_prompts",
              "render_prompt_with_template",
              "get_system_prompt",
              "search_prompts",
              "evaluate_prompt",
              "_calculate_readability",
              "_calculate_complexity",
              "_calculate_specificity",
              "get_component_prompts",
              "render_template"
            ],
            "decorators": [],
            "docstring": "Registry for managing system prompts with versioning and inheritance.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "yaml",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "shutil",
            "alias": null,
            "line": 13
          },
          {
            "module": "copy",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 15
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 16
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 17
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 18
          },
          {
            "module": "re",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 22
          },
          {
            "module": "rhetor.core.template_manager.TemplateManager",
            "from": "rhetor.core.template_manager",
            "name": "TemplateManager",
            "alias": null,
            "line": 27
          },
          {
            "module": "rhetor.core.template_manager.Template",
            "from": "rhetor.core.template_manager",
            "name": "Template",
            "alias": null,
            "line": 27
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PromptVersion",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PromptVersion.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 57,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptVersion.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SystemPrompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SystemPrompt.current_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 123,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemPrompt.content",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemPrompt.add_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 134,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemPrompt.get_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 160,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemPrompt.revert_to_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 174,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemPrompt.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 203,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemPrompt.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 229,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PromptRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 249,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PromptRegistry._create_default_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 301,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PromptRegistry.get_prompt_path",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 508,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.load_all_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 519,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.load_prompt_from_file",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 540,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "PromptRegistry.save_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 567,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "PromptRegistry.get_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 598,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.get_default_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 609,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.create_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 632,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.update_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 704,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "PromptRegistry.set_default_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 744,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.clone_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 771,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.delete_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 820,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.list_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 862,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.render_prompt_with_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 905,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PromptRegistry.get_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 962,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.search_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 1001,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.evaluate_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 1044,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "PromptRegistry.get_component_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 1164,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptRegistry.render_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_registry.py",
            "line": 1176,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1194,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 14,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 32,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Rhetor-specific services.",
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Rhetor-specific resources.",
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 188,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_status",
            "line": 195,
            "async": false,
            "decorators": [],
            "docstring": "Get detailed component status.",
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_mcp_components",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "Initialize MCP-related components after component startup.",
            "args": [
              "self"
            ],
            "class": "RhetorComponent",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RhetorComponent",
            "line": 11,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata",
              "get_component_status"
            ],
            "decorators": [],
            "docstring": "Rhetor LLM orchestration and management component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 4
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 6
          },
          {
            "module": "rhetor.core.llm_client.LLMClient",
            "from": "rhetor.core.llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 35
          },
          {
            "module": "rhetor.core.model_router.ModelRouter",
            "from": "rhetor.core.model_router",
            "name": "ModelRouter",
            "alias": null,
            "line": 36
          },
          {
            "module": "rhetor.core.context_manager.ContextManager",
            "from": "rhetor.core.context_manager",
            "name": "ContextManager",
            "alias": null,
            "line": 37
          },
          {
            "module": "rhetor.core.prompt_engine.PromptEngine",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptEngine",
            "alias": null,
            "line": 38
          },
          {
            "module": "rhetor.core.template_manager.TemplateManager",
            "from": "rhetor.core.template_manager",
            "name": "TemplateManager",
            "alias": null,
            "line": 39
          },
          {
            "module": "rhetor.core.prompt_registry.PromptRegistry",
            "from": "rhetor.core.prompt_registry",
            "name": "PromptRegistry",
            "alias": null,
            "line": 40
          },
          {
            "module": "rhetor.core.budget_manager.BudgetManager",
            "from": "rhetor.core.budget_manager",
            "name": "BudgetManager",
            "alias": null,
            "line": 41
          },
          {
            "module": "rhetor.core.specialist_router.SpecialistRouter",
            "from": "rhetor.core.specialist_router",
            "name": "SpecialistRouter",
            "alias": null,
            "line": 42
          },
          {
            "module": "rhetor.core.ai_specialist_manager.AISpecialistManager",
            "from": "rhetor.core.ai_specialist_manager",
            "name": "AISpecialistManager",
            "alias": null,
            "line": 43
          },
          {
            "module": "rhetor.core.ai_messaging_integration.AIMessagingIntegration",
            "from": "rhetor.core.ai_messaging_integration",
            "name": "AIMessagingIntegration",
            "alias": null,
            "line": 44
          },
          {
            "module": "rhetor.core.anthropic_max_config.AnthropicMaxConfig",
            "from": "rhetor.core.anthropic_max_config",
            "name": "AnthropicMaxConfig",
            "alias": null,
            "line": 45
          },
          {
            "module": "rhetor.core.component_specialists.ComponentSpecialistRegistry",
            "from": "rhetor.core.component_specialists",
            "name": "ComponentSpecialistRegistry",
            "alias": null,
            "line": 46
          },
          {
            "module": "rhetor.core.mcp.hermes_bridge.RhetorMCPBridge",
            "from": "rhetor.core.mcp.hermes_bridge",
            "name": "RhetorMCPBridge",
            "alias": null,
            "line": 218
          },
          {
            "module": "rhetor.core.mcp.init_integration.initialize_mcp_integration",
            "from": "rhetor.core.mcp.init_integration",
            "name": "initialize_mcp_integration",
            "alias": null,
            "line": 227
          },
          {
            "module": "rhetor.core.mcp.init_integration.setup_hermes_subscriptions",
            "from": "rhetor.core.mcp.init_integration",
            "name": "setup_hermes_subscriptions",
            "alias": null,
            "line": 227
          },
          {
            "module": "rhetor.core.mcp.init_integration.test_mcp_integration",
            "from": "rhetor.core.mcp.init_integration",
            "name": "test_mcp_integration",
            "alias": null,
            "line": 227
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RhetorComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorComponent._component_specific_init",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 32,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorComponent._component_specific_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 142,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 176,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 188,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorComponent.get_component_status",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 195,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorComponent.initialize_mcp_components",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/rhetor_component.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 252,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the token counter.\n\nArgs:\n    model_name: Name of the model to count tokens for",
            "args": [
              "self",
              "model_name"
            ],
            "class": "TokenCounter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_tokens",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Count the number of tokens in text.\n\nArgs:\n    text: The text to count tokens for\n    \nReturns:\n    Token count",
            "args": [
              "self",
              "text"
            ],
            "class": "TokenCounter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count_message_tokens",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Count tokens in a message.\n\nArgs:\n    message: Message dictionary with role and content\n    \nReturns:\n    Token count",
            "args": [
              "self",
              "message"
            ],
            "class": "TokenCounter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a windowed context.\n\nArgs:\n    context_id: Unique identifier for this context\n    max_tokens: Maximum number of tokens to include in the window\n    max_messages: Optional maximum number of messages regardless of tokens\n    token_counter: Optional token counter instance\n    summary_method: Method for generating summaries (\"llm\" or \"heuristic\")",
            "args": [
              "self",
              "context_id",
              "max_tokens",
              "max_messages",
              "token_counter",
              "summary_method"
            ],
            "class": "WindowedContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_message",
            "line": 101,
            "async": false,
            "decorators": [],
            "docstring": "Add a message to the context, managing window as needed.\n\nArgs:\n    message: Message to add",
            "args": [
              "self",
              "message"
            ],
            "class": "WindowedContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_manage_window",
            "line": 131,
            "async": false,
            "decorators": [],
            "docstring": "Manage the context window based on token limits and message count.",
            "args": [
              "self"
            ],
            "class": "WindowedContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_archive_messages",
            "line": 144,
            "async": false,
            "decorators": [],
            "docstring": "Archive the oldest messages from the active window.\n\nArgs:\n    count: Number of messages to archive",
            "args": [
              "self",
              "count"
            ],
            "class": "WindowedContext",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_recalculate_token_count",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Recalculate the total token count for current messages.",
            "args": [
              "self"
            ],
            "class": "WindowedContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_summarize_messages",
            "line": 183,
            "async": false,
            "decorators": [],
            "docstring": "Create a summary of archived messages.\n\nArgs:\n    messages: List of messages to summarize\n    \nReturns:\n    Summary dictionary",
            "args": [
              "self",
              "messages"
            ],
            "class": "WindowedContext",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_formatted_messages",
            "line": 235,
            "async": false,
            "decorators": [],
            "docstring": "Get provider-formatted messages for the current window.\n\nArgs:\n    provider: Provider name (anthropic, openai, ollama)\n    include_summaries: Whether to include summaries of archived messages\n    \nReturns:\n    List of formatted messages for the provider",
            "args": [
              "self",
              "provider",
              "include_summaries"
            ],
            "class": "WindowedContext",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 277,
            "async": false,
            "decorators": [],
            "docstring": "Convert to a dictionary for serialization.\n\nArgs:\n    include_archived: Whether to include archived messages\n    \nReturns:\n    Dictionary representation",
            "args": [
              "self",
              "include_archived"
            ],
            "class": "WindowedContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 303,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create from a dictionary.\n\nArgs:\n    data: Dictionary representation\n    token_counter: Optional token counter to use\n    \nReturns:\n    WindowedContext instance",
            "args": [
              "cls",
              "data",
              "token_counter"
            ],
            "class": "WindowedContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 339,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the context manager.\n\nArgs:\n    engram_client: Optional Engram client for persistent storage\n    llm_client: Optional LLM client for summarization\n    token_counter: Optional token counter for token tracking\n    default_max_tokens: Default maximum tokens per context\n    default_max_messages: Default maximum messages per context",
            "args": [
              "self",
              "engram_client",
              "llm_client",
              "token_counter",
              "default_max_tokens",
              "default_max_messages"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 377,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the context manager with clients and load contexts.",
            "args": [
              "self"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_or_create_context",
            "line": 390,
            "async": true,
            "decorators": [],
            "docstring": "Get or create a context by ID.\n\nArgs:\n    context_id: Context identifier\n    max_tokens: Maximum tokens for this context\n    max_messages: Maximum messages for this context\n    metadata: Optional metadata for new contexts\n    \nReturns:\n    WindowedContext object",
            "args": [
              "self",
              "context_id",
              "max_tokens",
              "max_messages",
              "metadata"
            ],
            "class": "ContextManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "add_to_context",
            "line": 483,
            "async": true,
            "decorators": [],
            "docstring": "Add a message to the context.\n\nArgs:\n    context_id: Context identifier\n    role: Message role (user, assistant, system)\n    content: Message content\n    metadata: Additional metadata for the message\n    \nReturns:\n    Updated WindowedContext",
            "args": [
              "self",
              "context_id",
              "role",
              "content",
              "metadata"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_history",
            "line": 521,
            "async": true,
            "decorators": [],
            "docstring": "Get the message history for a context.\n\nArgs:\n    context_id: Context identifier\n    include_archived: Whether to include archived messages\n    include_summaries: Whether to include summaries\n    limit: Maximum number of messages to return\n    \nReturns:\n    List of message dictionaries",
            "args": [
              "self",
              "context_id",
              "include_archived",
              "include_summaries",
              "limit"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_formatted_history",
            "line": 575,
            "async": true,
            "decorators": [],
            "docstring": "Get provider-formatted conversation history.\n\nArgs:\n    context_id: Context identifier\n    provider: Provider format to use (anthropic, openai, ollama)\n    include_summaries: Whether to include summaries\n    \nReturns:\n    Formatted messages for the provider",
            "args": [
              "self",
              "context_id",
              "provider",
              "include_summaries"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_summary_with_llm",
            "line": 594,
            "async": true,
            "decorators": [],
            "docstring": "Generate a summary of messages using an LLM.\n\nArgs:\n    context_id: Context identifier\n    messages: Messages to summarize\n    \nReturns:\n    Summary dictionary or None if failed",
            "args": [
              "self",
              "context_id",
              "messages"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_context",
            "line": 670,
            "async": true,
            "decorators": [],
            "docstring": "Search for messages in a context.\n\nArgs:\n    context_id: Context identifier\n    query: Search query string\n    search_archived: Whether to include archived messages\n    limit: Maximum number of results\n    \nReturns:\n    List of matching messages with scores",
            "args": [
              "self",
              "context_id",
              "query",
              "search_archived",
              "limit"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_context_summary",
            "line": 719,
            "async": true,
            "decorators": [],
            "docstring": "Get a summary of the context without full message history.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Context summary dictionary",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_persist_context",
            "line": 753,
            "async": true,
            "decorators": [],
            "docstring": "Persist a context to storage.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "load_all_contexts",
            "line": 793,
            "async": true,
            "decorators": [],
            "docstring": "Load all persisted contexts.\n\nReturns:\n    Number of contexts loaded",
            "args": [
              "self"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_context",
            "line": 840,
            "async": true,
            "decorators": [],
            "docstring": "Delete a context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_contexts",
            "line": 878,
            "async": true,
            "decorators": [],
            "docstring": "List all available contexts with summary info.\n\nArgs:\n    component: Optional component filter\n    \nReturns:\n    List of context summary dictionaries",
            "args": [
              "self",
              "component"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_all_contexts",
            "line": 910,
            "async": true,
            "decorators": [],
            "docstring": "Search across all contexts.\n\nArgs:\n    query: Search query\n    component: Optional component filter\n    limit: Maximum number of results per context\n    \nReturns:\n    List of matching messages with context info",
            "args": [
              "self",
              "query",
              "component",
              "limit"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "merge_contexts",
            "line": 956,
            "async": true,
            "decorators": [],
            "docstring": "Merge multiple contexts into a target context.\n\nArgs:\n    target_id: Target context ID (will be created if doesn't exist)\n    source_ids: List of source context IDs to merge\n    max_messages: Optional maximum number of messages to keep\n    \nReturns:\n    Merged context or None if failed",
            "args": [
              "self",
              "target_id",
              "source_ids",
              "max_messages"
            ],
            "class": "ContextManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "set_llm_client",
            "line": 1025,
            "async": true,
            "decorators": [],
            "docstring": "Set the LLM client for summarization.\n\nArgs:\n    llm_client: LLM client instance",
            "args": [
              "self",
              "llm_client"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TokenCounter",
            "line": 22,
            "methods": [
              "__init__",
              "count_tokens",
              "count_message_tokens"
            ],
            "decorators": [],
            "docstring": "Utility for counting tokens in text.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WindowedContext",
            "line": 67,
            "methods": [
              "__init__",
              "add_message",
              "_manage_window",
              "_archive_messages",
              "_recalculate_token_count",
              "_summarize_messages",
              "get_formatted_messages",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "A windowed view of a conversation context with dynamic token management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextManager",
            "line": 336,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Enhanced manager for AI contexts across components with advanced features.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "re",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 15
          },
          {
            "module": "tiktoken",
            "alias": null,
            "line": 16
          },
          {
            "module": "rhetor.utils.engram_helper.EngramClient",
            "from": "rhetor.utils.engram_helper",
            "name": "EngramClient",
            "alias": null,
            "line": 18
          },
          {
            "module": "rhetor.utils.engram_helper.get_engram_client",
            "from": "rhetor.utils.engram_helper",
            "name": "get_engram_client",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TokenCounter",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TokenCounter.count_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 37,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenCounter.count_message_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WindowedContext",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 67,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WindowedContext.add_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 101,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WindowedContext._summarize_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 183,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "WindowedContext.get_formatted_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 235,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WindowedContext.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 277,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WindowedContext.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 303,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ContextManager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 336,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ContextManager.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 377,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.get_or_create_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 390,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ContextManager.add_to_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 483,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.get_context_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 521,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.get_formatted_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 575,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.generate_summary_with_llm",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 594,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.search_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 670,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.get_context_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 719,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager._persist_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 753,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ContextManager.load_all_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 793,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ContextManager.delete_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 840,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.list_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 878,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.search_all_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 910,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.merge_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 956,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ContextManager.set_llm_client",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/context_manager.py",
            "line": 1025,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1031,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
      "analysis": {
        "functions": [
          {
            "name": "to_specialist_config",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Convert template to a specialist configuration.\n\nArgs:\n    specialist_id: Unique ID for the new specialist\n    customization: Optional customization overrides\n    \nReturns:\n    Complete specialist configuration",
            "args": [
              "self",
              "specialist_id",
              "customization"
            ],
            "class": "SpecialistTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_system_prompt",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Generate system prompt from template.",
            "args": [
              "self",
              "customization"
            ],
            "class": "SpecialistTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_determine_communication_style",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Determine communication style based on traits.",
            "args": [
              "self"
            ],
            "class": "SpecialistTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_apply_customization",
            "line": 105,
            "async": false,
            "decorators": [],
            "docstring": "Apply customization overrides to configuration.",
            "args": [
              "self",
              "config",
              "customization"
            ],
            "class": "SpecialistTemplate",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 133,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "SpecialistTemplateRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_default_templates",
            "line": 137,
            "async": false,
            "decorators": [],
            "docstring": "Load default specialist templates.",
            "args": [
              "self"
            ],
            "class": "SpecialistTemplateRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_template",
            "line": 304,
            "async": false,
            "decorators": [],
            "docstring": "Register a new specialist template.",
            "args": [
              "self",
              "template"
            ],
            "class": "SpecialistTemplateRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 309,
            "async": false,
            "decorators": [],
            "docstring": "Get a template by ID.",
            "args": [
              "self",
              "template_id"
            ],
            "class": "SpecialistTemplateRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 313,
            "async": false,
            "decorators": [],
            "docstring": "List all available templates.",
            "args": [
              "self"
            ],
            "class": "SpecialistTemplateRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_specialist_from_template",
            "line": 327,
            "async": false,
            "decorators": [],
            "docstring": "Create a specialist configuration from a template.\n\nArgs:\n    template_id: ID of the template to use\n    specialist_id: Unique ID for the new specialist\n    customization: Optional customization parameters\n    \nReturns:\n    Specialist configuration or None if template not found",
            "args": [
              "self",
              "template_id",
              "specialist_id",
              "customization"
            ],
            "class": "SpecialistTemplateRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 360,
            "async": false,
            "decorators": [],
            "docstring": "Get a specialist template by ID.",
            "args": [
              "template_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 365,
            "async": false,
            "decorators": [],
            "docstring": "List all available specialist templates.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_from_template",
            "line": 370,
            "async": false,
            "decorators": [],
            "docstring": "Create a specialist configuration from a template.",
            "args": [
              "template_id",
              "specialist_id",
              "customization"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SpecialistTemplate",
            "line": 18,
            "methods": [
              "to_specialist_config",
              "_generate_system_prompt",
              "_determine_communication_style",
              "_apply_customization"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Template for creating a specialized AI agent.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SpecialistTemplateRegistry",
            "line": 130,
            "methods": [
              "__init__",
              "_load_default_templates",
              "register_template",
              "get_template",
              "list_templates",
              "create_specialist_from_template"
            ],
            "decorators": [],
            "docstring": "Registry for managing specialist templates.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SpecialistTemplate",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SpecialistTemplate.to_specialist_config",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 33,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SpecialistTemplate._apply_customization",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 105,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "SpecialistTemplateRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 130,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SpecialistTemplateRegistry.register_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 304,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SpecialistTemplateRegistry.get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 309,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SpecialistTemplateRegistry.list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 313,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SpecialistTemplateRegistry.create_specialist_from_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 327,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 360,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 365,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_from_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_templates.py",
            "line": 370,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 378,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_spawner.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "AIModelSpawner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "spawn_model",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Spawn a specific AI model as a child process.\n\nArgs:\n    model_type: Type of model to spawn (llama, codellama, etc.)\n    custom_config: Optional custom configuration\n    \nReturns:\n    ManagedProcess instance",
            "args": [
              "self",
              "model_type",
              "custom_config"
            ],
            "class": "AIModelSpawner",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "spawn_model_pool",
            "line": 73,
            "async": false,
            "decorators": [],
            "docstring": "Spawn a pool of identical models for load balancing.\n\nArgs:\n    model_type: Type of model to spawn\n    count: Number of instances\n    \nReturns:\n    List of ManagedProcess instances",
            "args": [
              "self",
              "model_type",
              "count"
            ],
            "class": "AIModelSpawner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_status",
            "line": 118,
            "async": false,
            "decorators": [],
            "docstring": "Get status of all spawned models",
            "args": [
              "self"
            ],
            "class": "AIModelSpawner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "example_endpoint",
            "line": 144,
            "async": false,
            "decorators": [],
            "docstring": "Example of how Rhetor would spawn models in response to requests",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AIModelSpawner",
            "line": 16,
            "methods": [
              "__init__",
              "spawn_model",
              "spawn_model_pool",
              "get_model_status"
            ],
            "decorators": [],
            "docstring": "Handles spawning of various AI model processes.\nEach model runs as a separate process in Rhetor's process group.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "process_manager.get_process_manager",
            "from": "process_manager",
            "name": "get_process_manager",
            "alias": null,
            "line": 11
          },
          {
            "module": "process_manager.ManagedProcess",
            "from": "process_manager",
            "name": "ManagedProcess",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AIModelSpawner",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_spawner.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AIModelSpawner.spawn_model",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_spawner.py",
            "line": 43,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "AIModelSpawner.spawn_model_pool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_spawner.py",
            "line": 73,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AIModelSpawner.get_model_status",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_spawner.py",
            "line": 118,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "example_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_spawner.py",
            "line": 144,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 160,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the AI Specialist Manager.\n\nArgs:\n    llm_client: LLM client for AI communication\n    model_router: Model router for specialist configuration",
            "args": [
              "self",
              "llm_client",
              "model_router"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_specialist_configs",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Load AI specialist configurations from file.",
            "args": [
              "self"
            ],
            "class": "AISpecialistManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_create_default_specialist_configs",
            "line": 121,
            "async": false,
            "decorators": [],
            "docstring": "Create default AI specialist configurations.",
            "args": [
              "self"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_specialist",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Create and start an AI specialist process.\n\nArgs:\n    specialist_id: ID of the specialist to create\n    \nReturns:\n    True if specialist was created successfully",
            "args": [
              "self",
              "specialist_id"
            ],
            "class": "AISpecialistManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 216,
            "async": true,
            "decorators": [],
            "docstring": "Send a message between AI specialists via Hermes message bus.\n\nArgs:\n    sender_id: ID of sending specialist\n    receiver_id: ID of receiving specialist  \n    content: Message content\n    message_type: Type of message\n    context: Optional context data\n    \nReturns:\n    Message ID",
            "args": [
              "self",
              "sender_id",
              "receiver_id",
              "content",
              "message_type",
              "context"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_rhetor_filter_message",
            "line": 259,
            "async": true,
            "decorators": [],
            "docstring": "Rhetor orchestration: filter and potentially translate messages.\n\nArgs:\n    message: Original message\n    \nReturns:\n    Filtered/translated message",
            "args": [
              "self",
              "message"
            ],
            "class": "AISpecialistManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_status",
            "line": 285,
            "async": true,
            "decorators": [],
            "docstring": "Get the status of an AI specialist.\n\nArgs:\n    specialist_id: ID of the specialist\n    \nReturns:\n    Status dictionary or None if not found",
            "args": [
              "self",
              "specialist_id"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_active_specialists",
            "line": 308,
            "async": true,
            "decorators": [],
            "docstring": "List all active AI specialists.\n\nReturns:\n    List of active specialist status dictionaries",
            "args": [
              "self"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_specialists",
            "line": 321,
            "async": true,
            "decorators": [],
            "docstring": "List all AI specialists (active and inactive).\n\nReturns:\n    List of specialist configurations with status",
            "args": [
              "self"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_core_specialists",
            "line": 335,
            "async": true,
            "decorators": [],
            "docstring": "Start the core AI specialists (Rhetor and Engram).\n\nReturns:\n    Dictionary mapping specialist IDs to success status",
            "args": [
              "self"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "simulate_ai_conversation",
            "line": 353,
            "async": true,
            "decorators": [],
            "docstring": "Simulate a conversation between two AI specialists for testing.\n\nArgs:\n    specialist1_id: First specialist ID\n    specialist2_id: Second specialist ID  \n    topic: Conversation topic\n    \nReturns:\n    List of messages in the conversation",
            "args": [
              "self",
              "specialist1_id",
              "specialist2_id",
              "topic"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_specialist",
            "line": 398,
            "async": true,
            "decorators": [],
            "docstring": "Activate an AI specialist (similar to create_specialist but returns more detailed info).\n\nArgs:\n    specialist_id: ID of the specialist to activate\n    initialization_context: Optional initialization context\n    \nReturns:\n    Dictionary containing activation result",
            "args": [
              "self",
              "specialist_id",
              "initialization_context"
            ],
            "class": "AISpecialistManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_conversation_history",
            "line": 446,
            "async": true,
            "decorators": [],
            "docstring": "Get conversation history for an AI specialist.\n\nArgs:\n    specialist_id: ID of the specialist\n    conversation_id: Optional specific conversation ID\n    limit: Maximum number of messages to return\n    \nReturns:\n    Dictionary containing conversation history",
            "args": [
              "self",
              "specialist_id",
              "conversation_id",
              "limit"
            ],
            "class": "AISpecialistManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_orchestration_settings",
            "line": 500,
            "async": true,
            "decorators": [],
            "docstring": "Get current AI orchestration settings.\n\nReturns:\n    Dictionary containing current orchestration settings",
            "args": [
              "self"
            ],
            "class": "AISpecialistManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_orchestration_settings",
            "line": 509,
            "async": true,
            "decorators": [],
            "docstring": "Update AI orchestration settings.\n\nArgs:\n    new_settings: New settings to apply\n    \nReturns:\n    True if settings were updated successfully",
            "args": [
              "self",
              "new_settings"
            ],
            "class": "AISpecialistManager",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "AISpecialistConfig",
            "line": 25,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Configuration for an AI specialist.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AIMessage",
            "line": 37,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Message structure for AI-to-AI communication.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AISpecialistManager",
            "line": 47,
            "methods": [
              "__init__",
              "_load_specialist_configs",
              "_create_default_specialist_configs"
            ],
            "decorators": [],
            "docstring": "Manages dynamic AI specialist processes and coordinates communication.\n\nThis class handles:\n- Dynamic AI specialist allocation \n- Process lifecycle management\n- AI-to-AI communication through Hermes\n- Rhetor orchestration and message filtering",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "json",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 14
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 15
          },
          {
            "module": "dataclasses.asdict",
            "from": "dataclasses",
            "name": "asdict",
            "alias": null,
            "line": 15
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 16
          },
          {
            "module": "llm_client.LLMClient",
            "from": "llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 19
          },
          {
            "module": "model_router.ModelRouter",
            "from": "model_router",
            "name": "ModelRouter",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AISpecialistConfig",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AIMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AISpecialistManager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AISpecialistManager._load_specialist_configs",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 94,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.create_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 216,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.get_specialist_status",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 285,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.list_active_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 308,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.list_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 321,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.start_core_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 335,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.simulate_ai_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 353,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.activate_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 398,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.get_conversation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 446,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.get_orchestration_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 500,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AISpecialistManager.update_orchestration_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_specialist_manager.py",
            "line": 509,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 535,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize Anthropic Max configuration.",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_check_environment",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Check environment for Anthropic Max configuration.",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "enabled",
            "line": 44,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if Anthropic Max is enabled.",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "enable",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Enable Anthropic Max mode.",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disable",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Disable Anthropic Max mode.",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_override",
            "line": 60,
            "async": false,
            "decorators": [],
            "docstring": "Get model override for Anthropic Max accounts.\n\nArgs:\n    requested_model: Originally requested model\n    \nReturns:\n    Model to use (may be upgraded for Max accounts)",
            "args": [
              "self",
              "requested_model"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_override",
            "line": 84,
            "async": false,
            "decorators": [],
            "docstring": "Get budget override for Anthropic Max accounts.\n\nReturns:\n    Budget configuration or None",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_rate_limit_override",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Get rate limit override for Anthropic Max accounts.\n\nReturns:\n    Rate limit configuration or None",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_config_override",
            "line": 121,
            "async": false,
            "decorators": [],
            "docstring": "Get specialist configuration override for Max accounts.\n\nArgs:\n    specialist_type: Type of AI specialist\n    \nReturns:\n    Configuration overrides",
            "args": [
              "self",
              "specialist_type"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": "Convert configuration to dictionary.",
            "args": [
              "self"
            ],
            "class": "AnthropicMaxConfig",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AnthropicMaxConfig",
            "line": 16,
            "methods": [
              "__init__",
              "_check_environment",
              "enabled",
              "enable",
              "disable",
              "get_model_override",
              "get_budget_override",
              "get_rate_limit_override",
              "get_specialist_config_override",
              "to_dict"
            ],
            "decorators": [],
            "docstring": "Manages Anthropic Max account configuration.\n\nWhen enabled, this allows:\n- Unlimited token usage for testing\n- Premium model access (Opus by default)\n- No budget constraints\n- Enhanced rate limits",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AnthropicMaxConfig",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.enabled",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 44,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.enable",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 48,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.disable",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.get_model_override",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 60,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.get_budget_override",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 84,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.get_rate_limit_override",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.get_specialist_config_override",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 121,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicMaxConfig.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/anthropic_max_config.py",
            "line": 142,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 150,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": "Initialize AI messaging integration.\n\nArgs:\n    specialist_manager: AI specialist manager instance\n    hermes_url: Hermes service URL\n    specialist_router: Optional specialist router instance",
            "args": [
              "self",
              "specialist_manager",
              "hermes_url",
              "specialist_router"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 47,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the messaging integration.",
            "args": [
              "self"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup resources.",
            "args": [
              "self"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_specialist_message",
            "line": 63,
            "async": true,
            "decorators": [],
            "docstring": "Send a message from one specialist to another.\n\nRoutes through Hermes for cross-component communication when needed.\n\nArgs:\n    from_specialist: Source specialist ID\n    to_specialist: Target specialist ID  \n    content: Message content\n    context: Optional context",
            "args": [
              "self",
              "from_specialist",
              "to_specialist",
              "content",
              "context"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_ai_conversation",
            "line": 104,
            "async": true,
            "decorators": [],
            "docstring": "Create a new AI-to-AI conversation.\n\nArgs:\n    topic: Conversation topic\n    initial_specialists: List of specialist IDs to include\n    \nReturns:\n    Conversation ID",
            "args": [
              "self",
              "topic",
              "initial_specialists"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "publish_conversation_message",
            "line": 131,
            "async": true,
            "decorators": [],
            "docstring": "Publish a message in an AI conversation.\n\nArgs:\n    conversation_id: Conversation ID\n    sender_id: Sender specialist ID\n    content: Message content\n    metadata: Optional metadata",
            "args": [
              "self",
              "conversation_id",
              "sender_id",
              "content",
              "metadata"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "orchestrate_team_chat",
            "line": 156,
            "async": true,
            "decorators": [],
            "docstring": "Orchestrate a team chat between multiple AI specialists.\n\nArgs:\n    topic: Discussion topic\n    specialists: List of specialist IDs\n    initial_prompt: Initial prompt to start discussion\n    max_rounds: Maximum rounds of discussion\n    \nReturns:\n    List of messages in the conversation",
            "args": [
              "self",
              "topic",
              "specialists",
              "initial_prompt",
              "max_rounds"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_specialist_response",
            "line": 242,
            "async": true,
            "decorators": [],
            "docstring": "Generate a response from a specialist using actual AI.",
            "args": [
              "self",
              "specialist_id",
              "topic",
              "prompt",
              "previous_messages"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_generate_orchestrator_summary",
            "line": 290,
            "async": true,
            "decorators": [],
            "docstring": "Generate an orchestrator summary of the discussion.",
            "args": [
              "self",
              "messages",
              "topic"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_message_handler",
            "line": 322,
            "async": false,
            "decorators": [],
            "docstring": "Create a message handler for a specialist.",
            "args": [
              "self",
              "specialist_id"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 324,
            "async": true,
            "decorators": [],
            "docstring": "Handle incoming messages for a specialist.",
            "args": [
              "message"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_publish_to_hermes",
            "line": 346,
            "async": true,
            "decorators": [],
            "docstring": "Publish a message to Hermes message bus.",
            "args": [
              "self",
              "topic",
              "message"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "subscribe_to_specialist_topics",
            "line": 398,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to topics for cross-component specialist communication.",
            "args": [
              "self"
            ],
            "class": "AIMessagingIntegration",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AIMessagingIntegration",
            "line": 20,
            "methods": [
              "__init__",
              "_create_message_handler"
            ],
            "decorators": [],
            "docstring": "Integrates AI specialist communication with Hermes message bus.\n\nThis class enables Rhetor's AI specialists to communicate with each other\nand with AI specialists in other Tekton components through Hermes.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "publish_conversation_message",
            "line": 131,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 8
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "ai_specialist_manager.AISpecialistManager",
            "from": "ai_specialist_manager",
            "name": "AISpecialistManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "ai_specialist_manager.AIMessage",
            "from": "ai_specialist_manager",
            "name": "AIMessage",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AIMessagingIntegration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.send_specialist_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 63,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.create_ai_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.publish_conversation_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 131,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.orchestrate_team_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 156,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 324,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration._publish_to_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 346,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AIMessagingIntegration.subscribe_to_specialist_topics",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/ai_messaging_integration.py",
            "line": 398,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 406,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the specialist router.",
            "args": [
              "self",
              "llm_client",
              "budget_manager"
            ],
            "class": "SpecialistRouter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_specialist_manager",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Set the AI specialist manager for dynamic allocation.",
            "args": [
              "self",
              "specialist_manager"
            ],
            "class": "SpecialistRouter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_specialist",
            "line": 52,
            "async": true,
            "decorators": [],
            "docstring": "Allocate an AI specialist for a given task.\n\nArgs:\n    task: Task requiring specialist allocation\n    \nReturns:\n    Specialist ID if allocated, None otherwise",
            "args": [
              "self",
              "task"
            ],
            "class": "SpecialistRouter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "route_to_specialist",
            "line": 120,
            "async": true,
            "decorators": [],
            "docstring": "Route a request to a specific AI specialist.\n\nArgs:\n    specialist_id: ID of the specialist to route to\n    message: User message\n    context_id: Context ID for tracking\n    system_prompt: Optional system prompt override\n    streaming: Whether to stream response\n    options: Additional options\n    \nReturns:\n    Response from the specialist",
            "args": [
              "self",
              "specialist_id",
              "message",
              "context_id",
              "system_prompt",
              "streaming",
              "options"
            ],
            "class": "SpecialistRouter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_dynamic_specialist",
            "line": 187,
            "async": true,
            "decorators": [],
            "docstring": "Create a dynamic specialist for specific requirements.\n\nArgs:\n    specialist_type: Type of specialist needed\n    requirements: Required capabilities\n    task_context: Context for specialist creation\n    \nReturns:\n    New specialist ID if created, None otherwise",
            "args": [
              "self",
              "specialist_type",
              "requirements",
              "task_context"
            ],
            "class": "SpecialistRouter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_for_component",
            "line": 260,
            "async": false,
            "decorators": [],
            "docstring": "Get the primary specialist for a component.\n\nArgs:\n    component_id: Component ID\n    \nReturns:\n    Specialist ID if found",
            "args": [
              "self",
              "component_id"
            ],
            "class": "SpecialistRouter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_model_for_specialist",
            "line": 279,
            "async": false,
            "decorators": [],
            "docstring": "Get the appropriate model for a specialist type.\n\nArgs:\n    specialist_type: Type of specialist (e.g., \"rhetor-orchestrator\")\n    \nReturns:\n    Model name",
            "args": [
              "self",
              "specialist_type"
            ],
            "class": "SpecialistRouter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SpecialistTask",
            "line": 20,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Represents a task for specialist allocation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SpecialistRouter",
            "line": 28,
            "methods": [
              "__init__",
              "set_specialist_manager",
              "get_specialist_for_component",
              "get_model_for_specialist"
            ],
            "decorators": [],
            "docstring": "Extended model router that supports dynamic AI specialist allocation.\n\nThis router can:\n- Allocate specialists based on task requirements\n- Route requests to specific AI specialists\n- Handle fallback routing when specialists are unavailable\n- Support dynamic specialist creation",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 11
          },
          {
            "module": "model_router.ModelRouter",
            "from": "model_router",
            "name": "ModelRouter",
            "alias": null,
            "line": 14
          },
          {
            "module": "ai_specialist_manager.AISpecialistManager",
            "from": "ai_specialist_manager",
            "name": "AISpecialistManager",
            "alias": null,
            "line": 15
          },
          {
            "module": "ai_specialist_manager.AISpecialistConfig",
            "from": "ai_specialist_manager",
            "name": "AISpecialistConfig",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 208
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SpecialistTask",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SpecialistRouter",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SpecialistRouter.set_specialist_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 47,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SpecialistRouter.allocate_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SpecialistRouter.route_to_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SpecialistRouter.create_dynamic_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 187,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SpecialistRouter.get_specialist_for_component",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 260,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SpecialistRouter.get_model_for_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/specialist_router.py",
            "line": 279,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 308,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 4,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a template version.\n\nArgs:\n    content: The template content\n    version_id: Unique identifier for this version\n    created_at: Timestamp when this version was created\n    metadata: Additional metadata for this version",
            "args": [
              "self",
              "content",
              "version_id",
              "created_at",
              "metadata"
            ],
            "class": "TemplateVersion",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Convert the version to a dictionary for serialization.",
            "args": [
              "self"
            ],
            "class": "TemplateVersion",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 54,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a version from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "TemplateVersion",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a template.\n\nArgs:\n    template_id: Unique identifier for the template\n    name: Human-readable name\n    description: Optional description\n    category: Optional category (system, task, component)\n    variables: Optional list of variables used in the template\n    tags: Optional tags for categorization\n    current_version: The current version of the template\n    versions: List of historical versions",
            "args": [
              "self",
              "template_id",
              "name",
              "description",
              "category",
              "variables",
              "tags",
              "current_version",
              "versions"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "current_version",
            "line": 108,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the current (latest) version of the template.",
            "args": [
              "self"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "content",
            "line": 115,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the content of the current version.",
            "args": [
              "self"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_version",
            "line": 119,
            "async": false,
            "decorators": [],
            "docstring": "Add a new version of the template.\n\nArgs:\n    content: The template content\n    metadata: Additional metadata for this version\n    \nReturns:\n    The new version",
            "args": [
              "self",
              "content",
              "metadata"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_update_variables",
            "line": 147,
            "async": false,
            "decorators": [],
            "docstring": "Update the variables list based on template content.",
            "args": [
              "self",
              "content"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_version",
            "line": 158,
            "async": false,
            "decorators": [],
            "docstring": "Get a specific version by ID.",
            "args": [
              "self",
              "version_id"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "revert_to_version",
            "line": 165,
            "async": false,
            "decorators": [],
            "docstring": "Revert to a previous version, creating a new version with the same content.\n\nArgs:\n    version_id: ID of the version to revert to\n    metadata: Additional metadata for the new version\n    \nReturns:\n    The new version or None if target version not found",
            "args": [
              "self",
              "version_id",
              "metadata"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "render",
            "line": 190,
            "async": false,
            "decorators": [],
            "docstring": "Render the template with provided variables.\n\nArgs:\n    variables: Dictionary of variables to use for rendering\n    version_id: Optional specific version to render\n    strict: If True, raise error for missing variables\n    \nReturns:\n    Rendered template string\n    \nRaises:\n    ValueError: If strict and missing variables",
            "args": [
              "self",
              "variables",
              "version_id",
              "strict"
            ],
            "class": "Template",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 235,
            "async": false,
            "decorators": [],
            "docstring": "Convert the template to a dictionary for serialization.\n\nArgs:\n    include_versions: Whether to include all versions\n\nReturns:\n    Dictionary representation",
            "args": [
              "self",
              "include_versions"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 260,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a template from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 284,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the template manager.\n\nArgs:\n    base_dir: Base directory for template storage",
            "args": [
              "self",
              "base_dir"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_ensure_directories",
            "line": 307,
            "async": false,
            "decorators": [],
            "docstring": "Ensure all necessary directories exist.",
            "args": [
              "self"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template_path",
            "line": 319,
            "async": false,
            "decorators": [],
            "docstring": "Get the file path for a template.\n\nArgs:\n    template: The template\n    \nReturns:\n    Path object for the template file",
            "args": [
              "self",
              "template"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_all_templates",
            "line": 330,
            "async": false,
            "decorators": [],
            "docstring": "Load all templates from disk.\n\nReturns:\n    Number of templates loaded",
            "args": [
              "self"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "load_template_from_file",
            "line": 354,
            "async": false,
            "decorators": [],
            "docstring": "Load a template from a file.\n\nArgs:\n    file_path: Path to the template file\n    \nReturns:\n    Loaded template or None if error",
            "args": [
              "self",
              "file_path"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "save_template",
            "line": 381,
            "async": false,
            "decorators": [],
            "docstring": "Save a template to disk.\n\nArgs:\n    template: The template to save\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "template"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "create_template",
            "line": 415,
            "async": false,
            "decorators": [],
            "docstring": "Create a new template.\n\nArgs:\n    name: Template name\n    content: Initial template content\n    category: Template category\n    description: Template description\n    tags: Optional tags\n    metadata: Optional metadata for initial version\n    \nReturns:\n    Newly created template",
            "args": [
              "self",
              "name",
              "content",
              "category",
              "description",
              "tags",
              "metadata"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_template",
            "line": 476,
            "async": false,
            "decorators": [],
            "docstring": "Update an existing template with a new version.\n\nArgs:\n    template_id: Template identifier\n    content: New content\n    metadata: Optional metadata for the new version\n    \nReturns:\n    Updated template or None if not found",
            "args": [
              "self",
              "template_id",
              "content",
              "metadata"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 505,
            "async": false,
            "decorators": [],
            "docstring": "Get a template by ID.\n\nArgs:\n    template_id: Template identifier\n    \nReturns:\n    Template or None if not found",
            "args": [
              "self",
              "template_id"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_template",
            "line": 516,
            "async": false,
            "decorators": [],
            "docstring": "Delete a template.\n\nArgs:\n    template_id: Template identifier\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "template_id"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 546,
            "async": false,
            "decorators": [],
            "docstring": "List templates with optional filtering.\n\nArgs:\n    category: Optional category filter\n    tags: Optional tags filter\n    \nReturns:\n    List of template summary dictionaries",
            "args": [
              "self",
              "category",
              "tags"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "render_template",
            "line": 588,
            "async": false,
            "decorators": [],
            "docstring": "Render a template with provided variables.\n\nArgs:\n    template_id: Template identifier\n    variables: Variables for rendering\n    version_id: Optional specific version to render\n    strict: If True, raise error for missing variables\n    \nReturns:\n    Rendered template or None if error",
            "args": [
              "self",
              "template_id",
              "variables",
              "version_id",
              "strict"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_safe_template_id",
            "line": 617,
            "async": false,
            "decorators": [],
            "docstring": "Generate a safe template ID from a name.\n\nArgs:\n    name: Template name\n    \nReturns:\n    Safe template ID",
            "args": [
              "self",
              "name"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_category_templates",
            "line": 637,
            "async": false,
            "decorators": [],
            "docstring": "Get all templates in a category.\n\nArgs:\n    category: Category name\n    \nReturns:\n    List of templates in the category",
            "args": [
              "self",
              "category"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_templates",
            "line": 648,
            "async": false,
            "decorators": [],
            "docstring": "Search templates by name, description, or tags.\n\nArgs:\n    query: Search query string\n    \nReturns:\n    List of matching template summaries",
            "args": [
              "self",
              "query"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "import_template",
            "line": 677,
            "async": false,
            "decorators": [],
            "docstring": "Import a template from a file.\n\nArgs:\n    source_path: Path to the template file\n    \nReturns:\n    Imported template or None if error",
            "args": [
              "self",
              "source_path"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "export_template",
            "line": 709,
            "async": false,
            "decorators": [],
            "docstring": "Export a template to a file.\n\nArgs:\n    template_id: Template identifier\n    destination: Destination file path\n    format: Output format (yaml or json)\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "template_id",
              "destination",
              "format"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "TemplateVersion",
            "line": 21,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "Represents a specific version of a template with metadata.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Template",
            "line": 64,
            "methods": [
              "__init__",
              "current_version",
              "content",
              "add_version",
              "_update_variables",
              "get_version",
              "revert_to_version",
              "render",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "A template with versioning support.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateManager",
            "line": 281,
            "methods": [
              "__init__",
              "_ensure_directories",
              "get_template_path",
              "load_all_templates",
              "load_template_from_file",
              "save_template",
              "create_template",
              "update_template",
              "get_template",
              "delete_template",
              "list_templates",
              "render_template",
              "_safe_template_id",
              "get_category_templates",
              "search_templates",
              "import_template",
              "export_template"
            ],
            "decorators": [],
            "docstring": "Manager for template storage, retrieval, and versioning.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "yaml",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "shutil",
            "alias": null,
            "line": 11
          },
          {
            "module": "jinja2",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 16
          },
          {
            "module": "re",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TemplateVersion",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TemplateVersion.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 44,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateVersion.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 64,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Template.current_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.content",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 115,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.add_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 119,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.get_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 158,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.revert_to_version",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 165,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.render",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 190,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 235,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 260,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TemplateManager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 281,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_template_path",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 319,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.load_all_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 330,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.load_template_from_file",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 354,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TemplateManager.save_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 381,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TemplateManager.create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 415,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.update_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 476,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 505,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.delete_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 516,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 546,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.render_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 588,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_category_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 637,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.search_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 648,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.import_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 677,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.export_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/template_manager.py",
            "line": 709,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 750,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/component_specialists.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "specialist_manager"
            ],
            "class": "ComponentSpecialistRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_component_configs",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Load default component AI configurations.",
            "args": [
              "self"
            ],
            "class": "ComponentSpecialistRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ensure_specialist",
            "line": 108,
            "async": true,
            "decorators": [],
            "docstring": "Create or retrieve specialist for component.",
            "args": [
              "self",
              "component_id"
            ],
            "class": "ComponentSpecialistRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_component_capabilities",
            "line": 154,
            "async": false,
            "decorators": [],
            "docstring": "Get capabilities for a component specialist.",
            "args": [
              "self",
              "component_id"
            ],
            "class": "ComponentSpecialistRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_for_component",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": "Get the specialist ID for a component.",
            "args": [
              "self",
              "component_id"
            ],
            "class": "ComponentSpecialistRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_component_specialists",
            "line": 171,
            "async": false,
            "decorators": [],
            "docstring": "List all component-specialist mappings.",
            "args": [
              "self"
            ],
            "class": "ComponentSpecialistRegistry",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComponentAIConfig",
            "line": 20,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Configuration for a component's AI assistant.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentSpecialistRegistry",
            "line": 29,
            "methods": [
              "__init__",
              "_load_component_configs",
              "_get_component_capabilities",
              "get_specialist_for_component",
              "list_component_specialists"
            ],
            "decorators": [],
            "docstring": "Registry for component-specialist mappings.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "ai_specialist_manager.AISpecialistConfig",
            "from": "ai_specialist_manager",
            "name": "AISpecialistConfig",
            "alias": null,
            "line": 13
          },
          {
            "module": "llm_client.LLMClient",
            "from": "llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ComponentAIConfig",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/component_specialists.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComponentSpecialistRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/component_specialists.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentSpecialistRegistry.ensure_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/component_specialists.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentSpecialistRegistry.get_specialist_for_component",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/component_specialists.py",
            "line": 166,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentSpecialistRegistry.list_component_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/component_specialists.py",
            "line": 171,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 180,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM client.\n\nArgs:\n    default_provider: Default provider ID to use (e.g., \"anthropic\")\n    default_model: Default model ID to use (provider-specific)",
            "args": [
              "self",
              "default_provider",
              "default_model"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": "Initialize all providers.",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_load_providers",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Load and initialize all available providers.",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "init_with_timeout",
            "line": 98,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "p",
              "n"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_initialized",
            "line": 122,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the LLM client has been initialized with providers.",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_provider",
            "line": 129,
            "async": false,
            "decorators": [],
            "docstring": "Get a provider by ID.\n\nArgs:\n    provider_id: Provider ID (defaults to default_provider_id)\n    \nReturns:\n    Provider instance\n    \nRaises:\n    ValueError: If provider not found",
            "args": [
              "self",
              "provider_id"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_providers",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Get information about all providers.\n\nReturns:\n    Dictionary mapping provider IDs to provider info",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "render_prompt",
            "line": 167,
            "async": false,
            "decorators": [],
            "docstring": "Render a prompt template with variables.\n\nArgs:\n    template_name: Name of the template to render\n    **kwargs: Variables to render the template with\n    \nReturns:\n    Rendered prompt string",
            "args": [
              "self",
              "template_name"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_template",
            "line": 179,
            "async": false,
            "decorators": [],
            "docstring": "Register a prompt template.\n\nArgs:\n    template_data: Template data as a dictionary with name, template, and description",
            "args": [
              "self",
              "template_data"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 187,
            "async": true,
            "decorators": [],
            "docstring": "Complete a message with an LLM.\n\nArgs:\n    message: User message\n    context_id: Context ID for tracking conversation\n    system_prompt: Optional system prompt\n    provider_id: Provider ID to use (defaults to default_provider_id)\n    model_id: Model ID to use (defaults to provider's default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "message",
              "context_id",
              "system_prompt",
              "provider_id",
              "model_id",
              "streaming",
              "options"
            ],
            "class": "LLMClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream_completion",
            "line": 271,
            "async": true,
            "decorators": [],
            "docstring": "Stream a completion from an LLM.\n\nArgs:\n    message: User message\n    context_id: Context ID for tracking conversation\n    system_prompt: Optional system prompt\n    provider_id: Provider ID to use (defaults to default_provider_id)\n    model_id: Model ID to use (defaults to provider's default)\n    options: Additional options for the LLM\n    transform: Optional transformation function to apply to each chunk\n    \nYields:\n    Dictionaries with response chunks",
            "args": [
              "self",
              "message",
              "context_id",
              "system_prompt",
              "provider_id",
              "model_id",
              "options",
              "transform"
            ],
            "class": "LLMClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "chat_complete",
            "line": 376,
            "async": true,
            "decorators": [],
            "docstring": "Complete a chat conversation with an LLM.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    context_id: Context ID for tracking conversation\n    system_prompt: Optional system prompt\n    provider_id: Provider ID to use (defaults to default_provider_id)\n    model_id: Model ID to use (defaults to provider's default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    parse_json_response: Whether to parse the response as JSON\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "messages",
              "context_id",
              "system_prompt",
              "provider_id",
              "model_id",
              "streaming",
              "options",
              "parse_json_response"
            ],
            "class": "LLMClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 478,
            "async": true,
            "decorators": [],
            "docstring": "Stream a chat completion from an LLM.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    context_id: Context ID for tracking conversation\n    system_prompt: Optional system prompt\n    provider_id: Provider ID to use (defaults to default_provider_id)\n    model_id: Model ID to use (defaults to provider's default)\n    options: Additional options for the LLM\n    transform: Optional transformation function to apply to each chunk\n    \nYields:\n    Dictionaries with response chunks",
            "args": [
              "self",
              "messages",
              "context_id",
              "system_prompt",
              "provider_id",
              "model_id",
              "options",
              "transform"
            ],
            "class": "LLMClient",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMClient",
            "line": 29,
            "methods": [
              "__init__",
              "is_initialized",
              "get_provider",
              "get_all_providers",
              "render_prompt",
              "register_template"
            ],
            "decorators": [],
            "docstring": "Client for managing and interacting with LLM providers",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "registry_fix.apply_fix",
            "from": "registry_fix",
            "name": "apply_fix",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 18
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 18
          },
          {
            "module": "models.providers.anthropic.AnthropicProvider",
            "from": "models.providers.anthropic",
            "name": "AnthropicProvider",
            "alias": null,
            "line": 82
          },
          {
            "module": "models.providers.openai.OpenAIProvider",
            "from": "models.providers.openai",
            "name": "OpenAIProvider",
            "alias": null,
            "line": 83
          },
          {
            "module": "models.providers.ollama.OllamaProvider",
            "from": "models.providers.ollama",
            "name": "OllamaProvider",
            "alias": null,
            "line": 84
          },
          {
            "module": "models.providers.simulated.SimulatedProvider",
            "from": "models.providers.simulated",
            "name": "SimulatedProvider",
            "alias": null,
            "line": 85
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMClient",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMClient.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.init_with_timeout",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.is_initialized",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 122,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.get_provider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 129,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.get_all_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 149,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.render_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 167,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.register_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 179,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 187,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.stream_completion",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 271,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.chat_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 376,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "LLMClient.chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/llm_client.py",
            "line": 478,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 581,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a message.\n\nArgs:\n    content: The message content\n    sender: The component that sent the message\n    recipient: The component that should receive the message (None for broadcast)\n    message_type: The type of message (text, command, system, etc.)\n    metadata: Additional metadata for the message\n    message_id: Unique identifier for the message\n    conversation_id: ID of the conversation this message is part of\n    timestamp: Message timestamp (defaults to current time)\n    references: IDs of messages this message references",
            "args": [
              "self",
              "content",
              "sender",
              "recipient",
              "message_type",
              "metadata",
              "message_id",
              "conversation_id",
              "timestamp",
              "references"
            ],
            "class": "Message",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": "Convert the message to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Message",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 70,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a message from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Message",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 88,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a conversation.\n\nArgs:\n    conversation_id: Unique identifier for the conversation\n    participants: List of participant components\n    metadata: Additional metadata for the conversation",
            "args": [
              "self",
              "conversation_id",
              "participants",
              "metadata"
            ],
            "class": "Conversation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_message",
            "line": 108,
            "async": false,
            "decorators": [],
            "docstring": "Add a message to the conversation.",
            "args": [
              "self",
              "message"
            ],
            "class": "Conversation",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_messages",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Get messages from the conversation.\n\nArgs:\n    limit: Maximum number of messages to return\n    participant: Filter by participant (sender or recipient)\n    message_type: Filter by message type\n    \nReturns:\n    List of messages matching the filters",
            "args": [
              "self",
              "limit",
              "participant",
              "message_type"
            ],
            "class": "Conversation",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 160,
            "async": false,
            "decorators": [],
            "docstring": "Convert the conversation to a dictionary.",
            "args": [
              "self"
            ],
            "class": "Conversation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 172,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a conversation from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "Conversation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 194,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the communication engine.\n\nArgs:\n    component_name: Name of this component",
            "args": [
              "self",
              "component_name"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_conversation",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Create a new conversation.\n\nArgs:\n    participants: List of participant components\n    conversation_id: Optional ID for the conversation\n    metadata: Optional metadata for the conversation\n    \nReturns:\n    The conversation ID",
            "args": [
              "self",
              "participants",
              "conversation_id",
              "metadata"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_message_handler",
            "line": 237,
            "async": false,
            "decorators": [],
            "docstring": "Add a handler for a message type.\n\nArgs:\n    message_type: The type of message to handle\n    handler: The handler function",
            "args": [
              "self",
              "message_type",
              "handler"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 248,
            "async": false,
            "decorators": [],
            "docstring": "Send a message.\n\nArgs:\n    content: The message content\n    recipient: The recipient component\n    conversation_id: ID of the conversation\n    message_type: Type of message\n    metadata: Additional metadata\n    references: Referenced message IDs\n    \nReturns:\n    The created message",
            "args": [
              "self",
              "content",
              "recipient",
              "conversation_id",
              "message_type",
              "metadata",
              "references"
            ],
            "class": "CommunicationEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "start_processing",
            "line": 305,
            "async": true,
            "decorators": [],
            "docstring": "Start processing messages.",
            "args": [
              "self"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_process_message",
            "line": 313,
            "async": true,
            "decorators": [],
            "docstring": "Process a message.\n\nArgs:\n    message: The message to process",
            "args": [
              "self",
              "message"
            ],
            "class": "CommunicationEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop_processing",
            "line": 336,
            "async": false,
            "decorators": [],
            "docstring": "Stop processing messages.",
            "args": [
              "self"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_conversation",
            "line": 340,
            "async": false,
            "decorators": [],
            "docstring": "Get a conversation by ID.",
            "args": [
              "self",
              "conversation_id"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_conversation_history",
            "line": 344,
            "async": false,
            "decorators": [],
            "docstring": "Get the history of a conversation.\n\nArgs:\n    conversation_id: The conversation ID\n    limit: Maximum number of messages to return\n    \nReturns:\n    List of messages in dictionary format",
            "args": [
              "self",
              "conversation_id",
              "limit"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_conversations",
            "line": 365,
            "async": false,
            "decorators": [],
            "docstring": "Save all conversations to a directory.\n\nArgs:\n    directory: The directory to save to",
            "args": [
              "self",
              "directory"
            ],
            "class": "CommunicationEngine",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_conversations",
            "line": 378,
            "async": false,
            "decorators": [],
            "docstring": "Load conversations from a directory.\n\nArgs:\n    directory: The directory to load from",
            "args": [
              "self",
              "directory"
            ],
            "class": "CommunicationEngine",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "register_with_hermes",
            "line": 403,
            "async": true,
            "decorators": [],
            "docstring": "Register the communication engine with the Hermes service registry.\n\nArgs:\n    service_registry: Optional service registry instance\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "service_registry"
            ],
            "class": "CommunicationEngine",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Message",
            "line": 17,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "A standardized message format for AI communication.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Conversation",
            "line": 85,
            "methods": [
              "__init__",
              "add_message",
              "get_messages",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "A conversation between AI components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CommunicationEngine",
            "line": 191,
            "methods": [
              "__init__",
              "create_conversation",
              "add_message_handler",
              "send_message",
              "stop_processing",
              "get_conversation",
              "get_conversation_history",
              "save_conversations",
              "load_conversations"
            ],
            "decorators": [],
            "docstring": "Engine for managing AI communication.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 416
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Message.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 55,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Message.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 85,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Conversation.add_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Conversation.get_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Conversation.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 160,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Conversation.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 172,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "CommunicationEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 191,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.create_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 206,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.add_message_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 237,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 248,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.start_processing",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 305,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.stop_processing",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 336,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.get_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 340,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.get_conversation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 344,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.save_conversations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 365,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.load_conversations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 378,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "CommunicationEngine.register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/communication.py",
            "line": 403,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 444,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ProcessManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "spawn_model",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Spawn a new AI model process as part of our process group.\n\nArgs:\n    name: Friendly name for the process\n    command: Command and arguments to execute\n    env: Optional environment variables\n    metadata: Optional metadata about the process\n    \nReturns:\n    ManagedProcess object with process information",
            "args": [
              "self",
              "name",
              "command",
              "env",
              "metadata"
            ],
            "class": "ProcessManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "terminate_process",
            "line": 108,
            "async": false,
            "decorators": [],
            "docstring": "Gracefully terminate a specific process.\n\nArgs:\n    pid: Process ID to terminate\n    timeout: Seconds to wait for graceful shutdown\n    \nReturns:\n    True if process terminated successfully",
            "args": [
              "self",
              "pid",
              "timeout"
            ],
            "class": "ProcessManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_active_processes",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Get list of currently active processes",
            "args": [
              "self"
            ],
            "class": "ProcessManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_process_stats",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": "Get statistics about managed processes",
            "args": [
              "self"
            ],
            "class": "ProcessManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_signal",
            "line": 191,
            "async": false,
            "decorators": [],
            "docstring": "Handle shutdown signals",
            "args": [
              "self",
              "signum",
              "frame"
            ],
            "class": "ProcessManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_cleanup_all",
            "line": 200,
            "async": false,
            "decorators": [],
            "docstring": "Terminate all managed processes",
            "args": [
              "self"
            ],
            "class": "ProcessManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_process_manager",
            "line": 242,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the global process manager instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ManagedProcess",
            "line": 20,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Information about a managed subprocess",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProcessManager",
            "line": 29,
            "methods": [
              "__init__",
              "spawn_model",
              "terminate_process",
              "get_active_processes",
              "get_process_stats",
              "_handle_signal",
              "_cleanup_all"
            ],
            "decorators": [],
            "docstring": "Manages child AI processes spawned by Rhetor.\n\nEnsures all children are in the same process group and handles\ngraceful shutdown of all processes when Rhetor terminates.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "signal",
            "alias": null,
            "line": 7
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 8
          },
          {
            "module": "atexit",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "psutil",
            "alias": null,
            "line": 14
          },
          {
            "module": "time",
            "alias": null,
            "line": 214
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ManagedProcess",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProcessManager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ProcessManager.spawn_model",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 48,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ProcessManager.terminate_process",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProcessManager.get_active_processes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProcessManager.get_process_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 166,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProcessManager._cleanup_all",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 200,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "get_process_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/process_manager.py",
            "line": 242,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 247,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the model router.\n\nArgs:\n    llm_client: LLM client instance\n    budget_manager: Optional budget manager for cost-aware routing",
            "args": [
              "self",
              "llm_client",
              "budget_manager"
            ],
            "class": "ModelRouter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_task_configs",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": "Load task configuration for model routing.\n\nReturns:\n    Dictionary of task configurations",
            "args": [
              "self"
            ],
            "class": "ModelRouter",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_config_for_task",
            "line": 110,
            "async": false,
            "decorators": [],
            "docstring": "Get the appropriate model configuration for a task.\n\nArgs:\n    task_type: Type of task (code, planning, reasoning, chat, etc.)\n    component: Optional component name for component-specific config\n    \nReturns:\n    Dictionary with model configuration",
            "args": [
              "self",
              "task_type",
              "component"
            ],
            "class": "ModelRouter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "route_request",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Route a request to the appropriate model with budget awareness.\n\nArgs:\n    message: User message\n    context_id: Context ID for tracking conversation\n    task_type: Type of task (code, planning, reasoning, chat, etc.)\n    component: Optional component name for component-specific config\n    system_prompt: Optional system prompt\n    streaming: Whether to stream the response\n    override_config: Optional configuration overrides\n    \nReturns:\n    Response from the LLM",
            "args": [
              "self",
              "message",
              "context_id",
              "task_type",
              "component",
              "system_prompt",
              "streaming",
              "override_config"
            ],
            "class": "ModelRouter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "track_completion",
            "line": 215,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "response"
            ],
            "class": "ModelRouter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "route_chat_request",
            "line": 257,
            "async": true,
            "decorators": [],
            "docstring": "Route a chat request to the appropriate model with budget awareness.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    context_id: Context ID for tracking conversation\n    task_type: Type of task (code, planning, reasoning, chat, etc.)\n    component: Optional component name for component-specific config\n    system_prompt: Optional system prompt\n    streaming: Whether to stream the response\n    override_config: Optional configuration overrides\n    \nReturns:\n    Response from the LLM",
            "args": [
              "self",
              "messages",
              "context_id",
              "task_type",
              "component",
              "system_prompt",
              "streaming",
              "override_config"
            ],
            "class": "ModelRouter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "track_completion",
            "line": 334,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "response"
            ],
            "class": "ModelRouter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ModelRouter",
            "line": 19,
            "methods": [
              "__init__",
              "_load_task_configs",
              "get_config_for_task"
            ],
            "decorators": [],
            "docstring": "Routes LLM requests to the appropriate model based on task requirements and budget constraints",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "llm_client.LLMClient",
            "from": "llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "budget_manager.BudgetManager",
            "from": "budget_manager",
            "name": "BudgetManager",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ModelRouter",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ModelRouter._load_task_configs",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 34,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ModelRouter.get_config_for_task",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 110,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ModelRouter.route_request",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ModelRouter.track_completion",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 215,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ModelRouter.route_chat_request",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 257,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ModelRouter.track_completion",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/model_router.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 382,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a prompt template.\n\nArgs:\n    template: The template string with placeholders {variable_name}\n    variables: List of variable names expected in the template\n    name: Optional name for the template\n    description: Optional description of the template\n    model_type: Optional model type this template is optimized for",
            "args": [
              "self",
              "template",
              "variables",
              "name",
              "description",
              "model_type"
            ],
            "class": "PromptTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_validate_variables",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Validate that all variables used in the template are declared.",
            "args": [
              "self"
            ],
            "class": "PromptTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Format the template with the provided variables.\n\nArgs:\n    **kwargs: The variables to use in formatting\n    \nReturns:\n    The formatted prompt\n    \nRaises:\n    KeyError: If a required variable is missing",
            "args": [
              "self"
            ],
            "class": "PromptTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Convert the template to a dictionary for serialization.",
            "args": [
              "self"
            ],
            "class": "PromptTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 88,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a template from a dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "PromptTemplate",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 102,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a prompt library.\n\nArgs:\n    templates_dir: Directory to load templates from",
            "args": [
              "self",
              "templates_dir"
            ],
            "class": "PromptLibrary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_template",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": "Add a template to the library.",
            "args": [
              "self",
              "name",
              "template"
            ],
            "class": "PromptLibrary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 118,
            "async": false,
            "decorators": [],
            "docstring": "Get a template by name.",
            "args": [
              "self",
              "name"
            ],
            "class": "PromptLibrary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_to_directory",
            "line": 124,
            "async": false,
            "decorators": [],
            "docstring": "Save all templates to a directory.\n\nArgs:\n    directory: Directory to save templates to",
            "args": [
              "self",
              "directory"
            ],
            "class": "PromptLibrary",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_from_directory",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Load templates from a directory.\n\nArgs:\n    directory: Directory to load templates from",
            "args": [
              "self",
              "directory"
            ],
            "class": "PromptLibrary",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 164,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the prompt engine.\n\nArgs:\n    library: Optional prompt library to use",
            "args": [
              "self",
              "library"
            ],
            "class": "PromptEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_default_personalities",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Initialize default personality traits for components.",
            "args": [
              "self"
            ],
            "class": "PromptEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_personality",
            "line": 229,
            "async": false,
            "decorators": [],
            "docstring": "Get the personality traits for a component.",
            "args": [
              "self",
              "component_name"
            ],
            "class": "PromptEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_component_personality",
            "line": 233,
            "async": false,
            "decorators": [],
            "docstring": "Set the personality traits for a component.",
            "args": [
              "self",
              "component_name",
              "traits"
            ],
            "class": "PromptEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_prompt",
            "line": 237,
            "async": false,
            "decorators": [],
            "docstring": "Generate a prompt using a template and optionally adapt it for a component personality.\n\nArgs:\n    template_name: Name of the template to use\n    component_name: Optional component to adapt the prompt for\n    **kwargs: Variables to use in the template\n    \nReturns:\n    The formatted prompt",
            "args": [
              "self",
              "template_name",
              "component_name"
            ],
            "class": "PromptEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_adapt_for_component",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "Adapt a prompt for a specific component's personality.",
            "args": [
              "self",
              "prompt",
              "component_name"
            ],
            "class": "PromptEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_system_prompt",
            "line": 275,
            "async": false,
            "decorators": [],
            "docstring": "Create a system prompt for a component.\n\nArgs:\n    component_name: Name of the component\n    role_description: Description of the component's role\n    capabilities: List of component capabilities\n    constraints: Optional list of constraints\n    \nReturns:\n    A system prompt",
            "args": [
              "self",
              "component_name",
              "role_description",
              "capabilities",
              "constraints"
            ],
            "class": "PromptEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 329,
            "async": true,
            "decorators": [],
            "docstring": "Register Rhetor with the Hermes service registry.\n\nArgs:\n    service_registry: Optional service registry instance\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "service_registry"
            ],
            "class": "PromptEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 376,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the context manager.",
            "args": [
              "self"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 380,
            "async": false,
            "decorators": [],
            "docstring": "Create a new context.",
            "args": [
              "self",
              "name",
              "context_data"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 384,
            "async": false,
            "decorators": [],
            "docstring": "Get a context by name.",
            "args": [
              "self",
              "name"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_context",
            "line": 388,
            "async": false,
            "decorators": [],
            "docstring": "Update an existing context.",
            "args": [
              "self",
              "name",
              "updates"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "merge_contexts",
            "line": 393,
            "async": false,
            "decorators": [],
            "docstring": "Merge multiple contexts.",
            "args": [
              "self",
              "names"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "PromptTemplate",
            "line": 15,
            "methods": [
              "__init__",
              "_validate_variables",
              "format",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "A template for generating prompts.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptLibrary",
            "line": 99,
            "methods": [
              "__init__",
              "add_template",
              "get_template",
              "save_to_directory",
              "load_from_directory"
            ],
            "decorators": [],
            "docstring": "A library of prompt templates.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptEngine",
            "line": 161,
            "methods": [
              "__init__",
              "_initialize_default_personalities",
              "get_component_personality",
              "set_component_personality",
              "generate_prompt",
              "_adapt_for_component",
              "create_system_prompt"
            ],
            "decorators": [],
            "docstring": "Engine for managing and optimizing prompts for different models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextManager",
            "line": 373,
            "methods": [
              "__init__",
              "create_context",
              "get_context",
              "update_context",
              "merge_contexts"
            ],
            "decorators": [],
            "docstring": "Manager for AI contexts across components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "re",
            "alias": null,
            "line": 46
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 342
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PromptTemplate",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PromptTemplate.format",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 57,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptTemplate.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 77,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptTemplate.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 88,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PromptLibrary",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 99,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PromptLibrary.add_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptLibrary.get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 118,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptLibrary.save_to_directory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 124,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "PromptLibrary.load_from_directory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 138,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "class_definition",
            "name": "PromptEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 161,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PromptEngine.get_component_personality",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 229,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptEngine.set_component_personality",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 233,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptEngine.generate_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 237,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptEngine.create_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 275,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptEngine.register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 329,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "ContextManager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 373,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ContextManager.create_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 380,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextManager.get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 384,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextManager.update_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 388,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ContextManager.merge_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/prompt_engine.py",
            "line": 393,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 399,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the budget manager.\n\nArgs:\n    db_path: Path to the SQLite database file. Defaults to Rhetor component directory",
            "args": [
              "self",
              "db_path"
            ],
            "class": "BudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_init_db",
            "line": 127,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the database schema.",
            "args": [
              "self"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_set_budget_if_not_exists",
            "line": 164,
            "async": false,
            "decorators": [],
            "docstring": "Set budget if it doesn't already exist.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    limit_amount: Budget limit amount",
            "args": [
              "self",
              "period",
              "limit_amount"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "count_tokens",
            "line": 204,
            "async": false,
            "decorators": [],
            "docstring": "Count tokens in text using appropriate tokenizer.\n\nArgs:\n    text: Text to count tokens in\n    model: Model to use for token counting\n    \nReturns:\n    Number of tokens",
            "args": [
              "self",
              "text",
              "model"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_cost",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": "Calculate the cost of a request using appropriate token counter.\n\nArgs:\n    provider: Provider name (anthropic, openai, etc.)\n    model: Model name\n    input_text: Input text\n    output_text: Output text\n    \nReturns:\n    Dictionary with token counts and costs",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "output_text"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "estimate_cost",
            "line": 266,
            "async": false,
            "decorators": [],
            "docstring": "Estimate the cost of a request before making it.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text\n    estimated_output_length: Estimated output length in characters\n    \nReturns:\n    Dictionary with estimated token counts and costs",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "estimated_output_length"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 289,
            "async": false,
            "decorators": [],
            "docstring": "Record usage data in the database.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    component: Component name that made the request\n    task_type: Type of task (code, chat, etc.)\n    input_tokens: Number of input tokens\n    output_tokens: Number of output tokens\n    cost: Total cost in USD\n    metadata: Additional metadata",
            "args": [
              "self",
              "provider",
              "model",
              "component",
              "task_type",
              "input_tokens",
              "output_tokens",
              "cost",
              "metadata"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_usage",
            "line": 338,
            "async": false,
            "decorators": [],
            "docstring": "Get usage data for a specific period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly) or \"custom\"\n    provider: Optional provider name to filter by\n    start_date: Custom start date (required if period is \"custom\")\n    end_date: Custom end date (defaults to now if period is \"custom\")\n    \nReturns:\n    List of usage records",
            "args": [
              "self",
              "period",
              "provider",
              "start_date",
              "end_date"
            ],
            "class": "BudgetManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_current_usage_total",
            "line": 407,
            "async": false,
            "decorators": [],
            "docstring": "Get the total cost of usage for the current period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    provider: Optional provider name to filter by\n    \nReturns:\n    Total cost for the period",
            "args": [
              "self",
              "period",
              "provider"
            ],
            "class": "BudgetManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_budget_limit",
            "line": 457,
            "async": false,
            "decorators": [],
            "docstring": "Get the budget limit for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    provider: Provider name or \"all\" for global limit\n    \nReturns:\n    Budget limit amount (0 if no limit set)",
            "args": [
              "self",
              "period",
              "provider"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "set_budget_limit",
            "line": 484,
            "async": false,
            "decorators": [],
            "docstring": "Set the budget limit for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    limit_amount: Budget limit amount\n    provider: Provider name or \"all\" for global limit\n    enforcement: Budget enforcement policy (ignore, warn, enforce)\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "period",
              "limit_amount",
              "provider",
              "enforcement"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_enforcement_policy",
            "line": 541,
            "async": false,
            "decorators": [],
            "docstring": "Get the budget enforcement policy for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    provider: Provider name or \"all\" for global policy\n    \nReturns:\n    Budget enforcement policy (ignore, warn, enforce)",
            "args": [
              "self",
              "period",
              "provider"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "set_enforcement_policy",
            "line": 568,
            "async": false,
            "decorators": [],
            "docstring": "Set the budget enforcement policy for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    policy: Budget enforcement policy (ignore, warn, enforce)\n    provider: Provider name or \"all\" for global policy\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "period",
              "policy",
              "provider"
            ],
            "class": "BudgetManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "check_budget",
            "line": 620,
            "async": false,
            "decorators": [],
            "docstring": "Check if a request is within budget limits.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text\n    component: Component making the request\n    task_type: Type of task\n    \nReturns:\n    Tuple of (True if allowed, info dict with details)",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "component",
              "task_type"
            ],
            "class": "BudgetManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "record_completion",
            "line": 735,
            "async": false,
            "decorators": [],
            "docstring": "Record a completed LLM request.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text\n    output_text: Output text\n    component: Component that made the request\n    task_type: Type of task\n    metadata: Additional metadata\n    \nReturns:\n    Dictionary with usage data",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "output_text",
              "component",
              "task_type",
              "metadata"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_usage_summary",
            "line": 788,
            "async": false,
            "decorators": [],
            "docstring": "Get a summary of usage for a period, grouped by provider, model, or component.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    group_by: Field to group by (provider, model, component, task_type)\n    \nReturns:\n    Dictionary with usage summary",
            "args": [
              "self",
              "period",
              "group_by"
            ],
            "class": "BudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_budget_settings",
            "line": 846,
            "async": false,
            "decorators": [],
            "docstring": "Get all active budget settings.\n\nReturns:\n    Dictionary with budget settings by period",
            "args": [
              "self"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_model_tiers",
            "line": 883,
            "async": false,
            "decorators": [],
            "docstring": "Get models categorized by pricing tier.\n\nReturns:\n    Dictionary with models by tier",
            "args": [
              "self"
            ],
            "class": "BudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "find_cheaper_alternative",
            "line": 918,
            "async": false,
            "decorators": [],
            "docstring": "Find a cheaper alternative model for a given provider/model.\n\nArgs:\n    provider: Current provider\n    model: Current model\n    task_type: Task type for consideration\n    \nReturns:\n    Tuple of (provider, model) or None if no cheaper alternative",
            "args": [
              "self",
              "provider",
              "model",
              "task_type"
            ],
            "class": "BudgetManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "sort_key",
            "line": 974,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "alt"
            ],
            "class": "BudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "route_with_budget_awareness",
            "line": 984,
            "async": false,
            "decorators": [],
            "docstring": "Route a request with budget awareness.\n\nArgs:\n    input_text: Input text for cost estimation\n    task_type: Type of task (code, chat, etc.)\n    default_provider: Default provider\n    default_model: Default model\n    component: Component making the request\n    \nReturns:\n    Tuple of (provider, model, warnings)",
            "args": [
              "self",
              "input_text",
              "task_type",
              "default_provider",
              "default_model",
              "component"
            ],
            "class": "BudgetManager",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BudgetPolicy",
            "line": 26,
            "methods": [],
            "decorators": [],
            "docstring": "Budget enforcement policies",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPeriod",
            "line": 32,
            "methods": [],
            "decorators": [],
            "docstring": "Budget period types",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetManager",
            "line": 38,
            "methods": [
              "__init__",
              "_init_db",
              "_set_budget_if_not_exists",
              "count_tokens",
              "calculate_cost",
              "estimate_cost",
              "record_usage",
              "get_usage",
              "get_current_usage_total",
              "get_budget_limit",
              "set_budget_limit",
              "get_enforcement_policy",
              "set_enforcement_policy",
              "check_budget",
              "record_completion",
              "get_usage_summary",
              "get_budget_settings",
              "get_model_tiers",
              "find_cheaper_alternative",
              "route_with_budget_awareness"
            ],
            "decorators": [],
            "docstring": "Manages LLM usage budgets and tracks costs",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "sqlite3",
            "alias": null,
            "line": 11
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "litellm.token_counter",
            "from": "litellm",
            "name": "token_counter",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BudgetPolicy",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPeriod",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetManager",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetManager._init_db",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 127,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager._set_budget_if_not_exists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 164,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.count_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 204,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.calculate_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 225,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.estimate_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 266,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 289,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 338,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_current_usage_total",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 407,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_budget_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 457,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.set_budget_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 484,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_enforcement_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 541,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.set_enforcement_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 568,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.check_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 620,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "BudgetManager.record_completion",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 735,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_usage_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 788,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_budget_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 846,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetManager.get_model_tiers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 883,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.find_cheaper_alternative",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 918,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "BudgetManager.sort_key",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 974,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManager.route_with_budget_awareness",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/budget_manager.py",
            "line": 984,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 1077,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/config/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/hermes_helper.py",
      "error": "invalid syntax (hermes_helper.py, line 126)",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      }
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Initialize connection to Engram.\n\nArgs:\n    engram_url: URL for the Engram API (defaults to localhost:8000)\n    engram_api_key: API key for authentication (if required)\n    offline_mode: Whether to operate in offline mode",
            "args": [
              "self",
              "engram_url",
              "engram_api_key",
              "offline_mode"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 49,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the Engram service.\n\nReturns:\n    Success status",
            "args": [
              "self"
            ],
            "class": "EngramClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 93,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the Engram service.",
            "args": [
              "self"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ensure_connected",
            "line": 100,
            "async": true,
            "decorators": [],
            "docstring": "Ensure the client is connected.\n\nReturns:\n    True if connected, False if offline or failed to connect",
            "args": [
              "self"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_memory",
            "line": 114,
            "async": true,
            "decorators": [],
            "docstring": "Store data in Engram.\n\nArgs:\n    namespace: Memory namespace\n    key: Memory key\n    data: Data to store\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "namespace",
              "key",
              "data",
              "metadata"
            ],
            "class": "EngramClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_memory",
            "line": 164,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve data from Engram.\n\nArgs:\n    namespace: Memory namespace\n    key: Memory key\n    \nReturns:\n    Retrieved data or None if not found",
            "args": [
              "self",
              "namespace",
              "key"
            ],
            "class": "EngramClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_memory",
            "line": 207,
            "async": true,
            "decorators": [],
            "docstring": "Delete data from Engram.\n\nArgs:\n    namespace: Memory namespace\n    key: Memory key\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "namespace",
              "key"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "search_memory",
            "line": 241,
            "async": true,
            "decorators": [],
            "docstring": "Search memories in Engram.\n\nArgs:\n    namespace: Memory namespace\n    query: Search query\n    limit: Maximum number of results\n    metadata_filter: Optional metadata filter\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "namespace",
              "query",
              "limit",
              "metadata_filter"
            ],
            "class": "EngramClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_memories",
            "line": 294,
            "async": true,
            "decorators": [],
            "docstring": "List memories in Engram.\n\nArgs:\n    namespace: Memory namespace\n    limit: Maximum number of results\n    metadata_filter: Optional metadata filter\n    \nReturns:\n    List of memory summaries",
            "args": [
              "self",
              "namespace",
              "limit",
              "metadata_filter"
            ],
            "class": "EngramClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_store_local",
            "line": 344,
            "async": true,
            "decorators": [],
            "docstring": "Store data in local backup.\n\nArgs:\n    namespace: Memory namespace\n    key: Memory key\n    data: Data to store\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "namespace",
              "key",
              "data",
              "metadata"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_get_local",
            "line": 386,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve data from local backup.\n\nArgs:\n    namespace: Memory namespace\n    key: Memory key\n    \nReturns:\n    Retrieved data or None if not found",
            "args": [
              "self",
              "namespace",
              "key"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_delete_local",
            "line": 416,
            "async": true,
            "decorators": [],
            "docstring": "Delete data from local backup.\n\nArgs:\n    namespace: Memory namespace\n    key: Memory key\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "namespace",
              "key"
            ],
            "class": "EngramClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_search_local",
            "line": 442,
            "async": true,
            "decorators": [],
            "docstring": "Search memories in local backup.\n\nArgs:\n    namespace: Memory namespace\n    query: Search query\n    limit: Maximum number of results\n    metadata_filter: Optional metadata filter\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "namespace",
              "query",
              "limit",
              "metadata_filter"
            ],
            "class": "EngramClient",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_list_local",
            "line": 518,
            "async": true,
            "decorators": [],
            "docstring": "List memories in local backup.\n\nArgs:\n    namespace: Memory namespace\n    limit: Maximum number of results\n    metadata_filter: Optional metadata filter\n    \nReturns:\n    List of memory summaries",
            "args": [
              "self",
              "namespace",
              "limit",
              "metadata_filter"
            ],
            "class": "EngramClient",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_engram_client",
            "line": 580,
            "async": true,
            "decorators": [],
            "docstring": "Get a configured Engram client instance.\n\nReturns:\n    Configured EngramClient",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EngramClient",
            "line": 17,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for connecting to Engram memory service.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EngramClient",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EngramClient.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 93,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient.ensure_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 100,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient.store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 114,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient.get_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 164,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient.delete_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 207,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "EngramClient.search_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 241,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient.list_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 294,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramClient._store_local",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 344,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "EngramClient._get_local",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 386,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "EngramClient._search_local",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 442,
            "priority": "medium",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "EngramClient._list_local",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 518,
            "priority": "medium",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "get_engram_client",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/utils/engram_helper.py",
            "line": 580,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 601,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
      "analysis": {
        "functions": [
          {
            "name": "list_templates",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "List all templates with optional filtering.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    category: Filter by category\n    tag: Filter by tag",
            "args": [
              "template_manager",
              "api_client",
              "category",
              "tag"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Create a new template.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    name: Template name\n    content: Template content\n    category: Template category\n    description: Template description\n    tags: Template tags (comma-separated)\n    file: Read template content from file",
            "args": [
              "template_manager",
              "api_client",
              "name",
              "content",
              "category",
              "description",
              "tags",
              "file"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_template",
            "line": 117,
            "async": false,
            "decorators": [],
            "docstring": "Get a template by ID.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    template_id: Template ID\n    version_id: Version ID (optional)",
            "args": [
              "template_manager",
              "api_client",
              "template_id",
              "version_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_template",
            "line": 167,
            "async": false,
            "decorators": [],
            "docstring": "Update a template.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    template_id: Template ID\n    content: New template content\n    file: Read template content from file",
            "args": [
              "template_manager",
              "api_client",
              "template_id",
              "content",
              "file"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_template",
            "line": 207,
            "async": false,
            "decorators": [],
            "docstring": "Delete a template.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    template_id: Template ID",
            "args": [
              "template_manager",
              "api_client",
              "template_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_template_versions",
            "line": 234,
            "async": false,
            "decorators": [],
            "docstring": "List all versions of a template.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    template_id: Template ID",
            "args": [
              "template_manager",
              "api_client",
              "template_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "render_template",
            "line": 276,
            "async": false,
            "decorators": [],
            "docstring": "Render a template with variables.\n\nArgs:\n    template_manager: Template manager instance (local)\n    api_client: API client for remote operations\n    template_id: Template ID\n    variables: Variable values (key=value,...)\n    version_id: Version ID (optional)\n    output: Output file (optional)",
            "args": [
              "template_manager",
              "api_client",
              "template_id",
              "variables",
              "version_id",
              "output"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "list_prompts",
            "line": 320,
            "async": false,
            "decorators": [],
            "docstring": "List all prompts with optional filtering.\n\nArgs:\n    prompt_registry: Prompt registry (local)\n    api_client: API client for remote operations\n    component: Filter by component\n    tag: Filter by tag",
            "args": [
              "prompt_registry",
              "api_client",
              "component",
              "tag"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_prompt",
            "line": 369,
            "async": false,
            "decorators": [],
            "docstring": "Create a new prompt.\n\nArgs:\n    prompt_registry: Prompt registry (local)\n    api_client: API client for remote operations\n    name: Prompt name\n    component: Component\n    content: Prompt content\n    description: Prompt description\n    tags: Prompt tags (comma-separated)\n    is_default: Set as default prompt for component\n    parent_id: Parent prompt ID\n    file: Read prompt content from file",
            "args": [
              "prompt_registry",
              "api_client",
              "name",
              "component",
              "content",
              "description",
              "tags",
              "is_default",
              "parent_id",
              "file"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_prompt",
            "line": 427,
            "async": false,
            "decorators": [],
            "docstring": "Get a prompt by ID.\n\nArgs:\n    prompt_registry: Prompt registry (local)\n    api_client: API client for remote operations\n    prompt_id: Prompt ID",
            "args": [
              "prompt_registry",
              "api_client",
              "prompt_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_prompt",
            "line": 482,
            "async": false,
            "decorators": [],
            "docstring": "Update a prompt.\n\nArgs:\n    prompt_registry: Prompt registry (local)\n    api_client: API client for remote operations\n    prompt_id: Prompt ID\n    content: New prompt content\n    file: Read prompt content from file",
            "args": [
              "prompt_registry",
              "api_client",
              "prompt_id",
              "content",
              "file"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_prompt",
            "line": 520,
            "async": false,
            "decorators": [],
            "docstring": "Delete a prompt.\n\nArgs:\n    prompt_registry: Prompt registry (local)\n    api_client: API client for remote operations\n    prompt_id: Prompt ID",
            "args": [
              "prompt_registry",
              "api_client",
              "prompt_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "compare_prompts",
            "line": 547,
            "async": false,
            "decorators": [],
            "docstring": "Compare two prompts.\n\nArgs:\n    prompt_registry: Prompt registry (local)\n    api_client: API client for remote operations\n    prompt_id1: First prompt ID\n    prompt_id2: Second prompt ID",
            "args": [
              "prompt_registry",
              "api_client",
              "prompt_id1",
              "prompt_id2"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_prompt",
            "line": 595,
            "async": false,
            "decorators": [],
            "docstring": "Generate a prompt from a template.\n\nArgs:\n    prompt_engine: Prompt engine\n    name: Template name\n    component: Component to adapt for\n    variables: Variable values (key=value,...)",
            "args": [
              "prompt_engine",
              "name",
              "component",
              "variables"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_system_prompt",
            "line": 627,
            "async": false,
            "decorators": [],
            "docstring": "Create a system prompt for a component.\n\nArgs:\n    component: Component name\n    role: Override role description\n    capabilities: Override capabilities (comma-separated)\n    tone: Override tone\n    focus: Override focus\n    style: Override style\n    personality: Override personality\n    output: Output file",
            "args": [
              "component",
              "role",
              "capabilities",
              "tone",
              "focus",
              "style",
              "personality",
              "output"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "show_system_prompt",
            "line": 682,
            "async": false,
            "decorators": [],
            "docstring": "Show the system prompt for a component.\n\nArgs:\n    component: Component name",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_components",
            "line": 697,
            "async": false,
            "decorators": [],
            "docstring": "List all available components.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 710,
            "async": false,
            "decorators": [],
            "docstring": "Send a message.\n\nArgs:\n    communication_engine: Communication engine\n    conversations_dir: Conversations directory\n    content: Message content\n    recipient: Recipient component\n    conversation: Conversation ID\n    message_type: Message type",
            "args": [
              "communication_engine",
              "conversations_dir",
              "content",
              "recipient",
              "conversation",
              "message_type"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_messages",
            "line": 743,
            "async": false,
            "decorators": [],
            "docstring": "List messages in a conversation.\n\nArgs:\n    communication_engine: Communication engine\n    conversation: Conversation ID\n    limit: Maximum number of messages",
            "args": [
              "communication_engine",
              "conversation",
              "limit"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "show_message",
            "line": 776,
            "async": false,
            "decorators": [],
            "docstring": "Show a message.\n\nArgs:\n    communication_engine: Communication engine\n    conversation: Conversation ID\n    message: Message ID",
            "args": [
              "communication_engine",
              "conversation",
              "message"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_conversation",
            "line": 827,
            "async": false,
            "decorators": [],
            "docstring": "Create a conversation.\n\nArgs:\n    communication_engine: Communication engine\n    conversations_dir: Conversations directory\n    participants: Participants (comma-separated)",
            "args": [
              "communication_engine",
              "conversations_dir",
              "participants"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_conversations",
            "line": 851,
            "async": false,
            "decorators": [],
            "docstring": "List all conversations.\n\nArgs:\n    communication_engine: Communication engine",
            "args": [
              "communication_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "show_conversation",
            "line": 872,
            "async": false,
            "decorators": [],
            "docstring": "Show a conversation.\n\nArgs:\n    communication_engine: Communication engine\n    conversation: Conversation ID",
            "args": [
              "communication_engine",
              "conversation"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_contexts",
            "line": 906,
            "async": true,
            "decorators": [],
            "docstring": "List all available contexts.\n\nArgs:\n    context_manager: Context manager (local)\n    api_client: API client for remote operations",
            "args": [
              "context_manager",
              "api_client"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 949,
            "async": true,
            "decorators": [],
            "docstring": "Get messages in a context.\n\nArgs:\n    context_manager: Context manager (local)\n    api_client: API client for remote operations\n    context_id: Context ID\n    limit: Maximum number of messages to return\n    include_metadata: Include message metadata",
            "args": [
              "context_manager",
              "api_client",
              "context_id",
              "limit",
              "include_metadata"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_context",
            "line": 1004,
            "async": true,
            "decorators": [],
            "docstring": "Delete a context and all its messages.\n\nArgs:\n    context_manager: Context manager (local)\n    api_client: API client for remote operations\n    context_id: Context ID",
            "args": [
              "context_manager",
              "api_client",
              "context_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_context",
            "line": 1031,
            "async": true,
            "decorators": [],
            "docstring": "Search for messages in a context.\n\nArgs:\n    context_manager: Context manager (local)\n    api_client: API client for remote operations\n    context_id: Context ID\n    query: Search query\n    limit: Maximum number of results",
            "args": [
              "context_manager",
              "api_client",
              "context_id",
              "query",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "summarize_context",
            "line": 1081,
            "async": true,
            "decorators": [],
            "docstring": "Generate a summary of a context.\n\nArgs:\n    context_manager: Context manager (local)\n    api_client: API client for remote operations\n    context_id: Context ID\n    max_tokens: Maximum tokens for summary",
            "args": [
              "context_manager",
              "api_client",
              "context_id",
              "max_tokens"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 1123,
            "async": true,
            "decorators": [],
            "docstring": "Register with the Hermes service registry.\n\nArgs:\n    prompt_engine: Prompt engine\n    communication_engine: Communication engine",
            "args": [
              "prompt_engine",
              "communication_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 8
          },
          {
            "module": "rhetor.core.prompt_engine.PromptEngine",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptEngine",
            "alias": null,
            "line": 10
          },
          {
            "module": "rhetor.core.prompt_engine.PromptLibrary",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptLibrary",
            "alias": null,
            "line": 10
          },
          {
            "module": "rhetor.core.prompt_engine.PromptTemplate",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptTemplate",
            "alias": null,
            "line": 10
          },
          {
            "module": "rhetor.core.communication.CommunicationEngine",
            "from": "rhetor.core.communication",
            "name": "CommunicationEngine",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.core.communication.Message",
            "from": "rhetor.core.communication",
            "name": "Message",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.core.communication.Conversation",
            "from": "rhetor.core.communication",
            "name": "Conversation",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.cli.cli_helpers.format_timestamp",
            "from": "rhetor.cli.cli_helpers",
            "name": "format_timestamp",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.cli.cli_helpers.parse_key_value_pairs",
            "from": "rhetor.cli.cli_helpers",
            "name": "parse_key_value_pairs",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.templates.system_prompts.get_system_prompt",
            "from": "rhetor.templates.system_prompts",
            "name": "get_system_prompt",
            "alias": null,
            "line": 650
          },
          {
            "module": "rhetor.templates.system_prompts.get_system_prompt",
            "from": "rhetor.templates.system_prompts",
            "name": "get_system_prompt",
            "alias": null,
            "line": 689
          },
          {
            "module": "rhetor.templates.system_prompts.COMPONENT_PROMPTS",
            "from": "rhetor.templates.system_prompts",
            "name": "COMPONENT_PROMPTS",
            "alias": null,
            "line": 700
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 18,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 65,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 117,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "update_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 167,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "delete_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 207,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_template_versions",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 234,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "render_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 276,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "list_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 320,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "create_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 369,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "get_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 427,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "update_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 482,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "delete_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 520,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "compare_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 547,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "generate_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 595,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 627,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "show_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 682,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_components",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 697,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 710,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 743,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "show_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 776,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "create_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 827,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_conversations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 851,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "show_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 872,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 906,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 949,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "delete_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 1004,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 1031,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "summarize_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 1081,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_commands.py",
            "line": 1123,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1151,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "rhetor.cli.main.RhetorCLI",
            "from": "rhetor.cli.main",
            "name": "RhetorCLI",
            "alias": null,
            "line": 6
          },
          {
            "module": "rhetor.cli.main.main",
            "from": "rhetor.cli.main",
            "name": "main",
            "alias": null,
            "line": 6
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 8,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_helpers.py",
      "analysis": {
        "functions": [
          {
            "name": "format_timestamp",
            "line": 11,
            "async": false,
            "decorators": [],
            "docstring": "Format a timestamp as a human-readable date.\n\nArgs:\n    timestamp: Unix timestamp\n    \nReturns:\n    Formatted date string",
            "args": [
              "timestamp"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_key_value_pairs",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": "Parse a string of key=value pairs separated by commas.\n\nArgs:\n    pairs_str: String in the format \"key1=value1,key2=value2,...\"\n    \nReturns:\n    Dictionary of key-value pairs",
            "args": [
              "pairs_str"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "format_timestamp",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_helpers.py",
            "line": 11,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "parse_key_value_pairs",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_helpers.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 40,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_parser.py",
      "analysis": {
        "functions": [
          {
            "name": "create_parser",
            "line": 10,
            "async": false,
            "decorators": [],
            "docstring": "Create the argument parser for the Rhetor CLI.\n\nReturns:\n    Argument parser",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_args",
            "line": 200,
            "async": false,
            "decorators": [],
            "docstring": "Parse command-line arguments.\n\nArgs:\n    args: Command-line arguments\n    \nReturns:\n    Parsed arguments",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_parser",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_parser.py",
            "line": 10,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "parse_args",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/cli_parser.py",
            "line": 200,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 210,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the CLI.\n\nArgs:\n    data_dir: Directory for storing data",
            "args": [
              "self",
              "data_dir"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Run the CLI with the given arguments.\n\nArgs:\n    args: Command-line arguments",
            "args": [
              "self",
              "args"
            ],
            "class": "RhetorCLI",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 199,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 213,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_template",
            "line": 220,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_template",
            "line": 227,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_template_versions",
            "line": 234,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "render_template",
            "line": 241,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_prompts",
            "line": 249,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_prompt",
            "line": 261,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prompt",
            "line": 273,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_prompt",
            "line": 280,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_prompt",
            "line": 287,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compare_prompts",
            "line": 299,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_prompt",
            "line": 306,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_system_prompt",
            "line": 310,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "show_system_prompt",
            "line": 313,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_components",
            "line": 316,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 320,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_messages",
            "line": 323,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "show_message",
            "line": 326,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_conversation",
            "line": 330,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_conversations",
            "line": 333,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "show_conversation",
            "line": 336,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_contexts",
            "line": 340,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 352,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_context",
            "line": 364,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_context",
            "line": 376,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "summarize_context",
            "line": 388,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 401,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "RhetorCLI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 405,
            "async": false,
            "decorators": [],
            "docstring": "Run the CLI.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RhetorCLI",
            "line": 39,
            "methods": [
              "__init__",
              "run",
              "list_templates",
              "create_template",
              "get_template",
              "update_template",
              "delete_template",
              "list_template_versions",
              "render_template",
              "list_prompts",
              "create_prompt",
              "get_prompt",
              "update_prompt",
              "delete_prompt",
              "compare_prompts",
              "generate_prompt",
              "create_system_prompt",
              "show_system_prompt",
              "list_components",
              "send_message",
              "list_messages",
              "show_message",
              "create_conversation",
              "list_conversations",
              "show_conversation"
            ],
            "decorators": [],
            "docstring": "Command-line interface for Rhetor.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 9
          },
          {
            "module": "rhetor.core.prompt_engine.PromptEngine",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptEngine",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.core.prompt_engine.PromptLibrary",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptLibrary",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.core.prompt_engine.PromptTemplate",
            "from": "rhetor.core.prompt_engine",
            "name": "PromptTemplate",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.core.communication.CommunicationEngine",
            "from": "rhetor.core.communication",
            "name": "CommunicationEngine",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.core.communication.Message",
            "from": "rhetor.core.communication",
            "name": "Message",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.core.communication.Conversation",
            "from": "rhetor.core.communication",
            "name": "Conversation",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.core.context_manager.ContextManager",
            "from": "rhetor.core.context_manager",
            "name": "ContextManager",
            "alias": null,
            "line": 13
          },
          {
            "module": "rhetor.core.context_manager.TokenCounter",
            "from": "rhetor.core.context_manager",
            "name": "TokenCounter",
            "alias": null,
            "line": 13
          },
          {
            "module": "rhetor.core.template_manager.TemplateManager",
            "from": "rhetor.core.template_manager",
            "name": "TemplateManager",
            "alias": null,
            "line": 14
          },
          {
            "module": "rhetor.core.prompt_registry.PromptRegistry",
            "from": "rhetor.core.prompt_registry",
            "name": "PromptRegistry",
            "alias": null,
            "line": 15
          },
          {
            "module": "rhetor.cli.cli_parser.parse_args",
            "from": "rhetor.cli.cli_parser",
            "name": "parse_args",
            "alias": null,
            "line": 16
          },
          {
            "module": "rhetor.cli.cli_commands.list_templates",
            "from": "rhetor.cli.cli_commands",
            "name": "list_templates",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.create_template",
            "from": "rhetor.cli.cli_commands",
            "name": "create_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.get_template",
            "from": "rhetor.cli.cli_commands",
            "name": "get_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.update_template",
            "from": "rhetor.cli.cli_commands",
            "name": "update_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.delete_template",
            "from": "rhetor.cli.cli_commands",
            "name": "delete_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.list_template_versions",
            "from": "rhetor.cli.cli_commands",
            "name": "list_template_versions",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.render_template",
            "from": "rhetor.cli.cli_commands",
            "name": "render_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.list_prompts",
            "from": "rhetor.cli.cli_commands",
            "name": "list_prompts",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.create_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "create_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.get_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "get_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.update_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "update_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.delete_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "delete_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.compare_prompts",
            "from": "rhetor.cli.cli_commands",
            "name": "compare_prompts",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.generate_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "generate_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.create_system_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "create_system_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.show_system_prompt",
            "from": "rhetor.cli.cli_commands",
            "name": "show_system_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.list_components",
            "from": "rhetor.cli.cli_commands",
            "name": "list_components",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.send_message",
            "from": "rhetor.cli.cli_commands",
            "name": "send_message",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.list_messages",
            "from": "rhetor.cli.cli_commands",
            "name": "list_messages",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.show_message",
            "from": "rhetor.cli.cli_commands",
            "name": "show_message",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.create_conversation",
            "from": "rhetor.cli.cli_commands",
            "name": "create_conversation",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.list_conversations",
            "from": "rhetor.cli.cli_commands",
            "name": "list_conversations",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.show_conversation",
            "from": "rhetor.cli.cli_commands",
            "name": "show_conversation",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.list_contexts",
            "from": "rhetor.cli.cli_commands",
            "name": "list_contexts",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.get_context",
            "from": "rhetor.cli.cli_commands",
            "name": "get_context",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.delete_context",
            "from": "rhetor.cli.cli_commands",
            "name": "delete_context",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.search_context",
            "from": "rhetor.cli.cli_commands",
            "name": "search_context",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.summarize_context",
            "from": "rhetor.cli.cli_commands",
            "name": "summarize_context",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_commands.register_with_hermes",
            "from": "rhetor.cli.cli_commands",
            "name": "register_with_hermes",
            "alias": null,
            "line": 17
          },
          {
            "module": "rhetor.cli.cli_parser.create_parser",
            "from": "rhetor.cli.cli_parser",
            "name": "create_parser",
            "alias": null,
            "line": 170
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RhetorCLI",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 39,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorCLI.run",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 199,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 206,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 213,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.update_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 220,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.delete_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 227,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_template_versions",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 234,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.render_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 241,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 249,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.create_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 261,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.get_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 273,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.update_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 280,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.delete_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 287,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.compare_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 299,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.generate_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 306,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.create_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 310,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.show_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 313,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_components",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 316,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 320,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 323,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.show_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 326,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.create_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 330,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_conversations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 333,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.show_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 336,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.list_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 352,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.delete_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 364,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.search_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 376,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.summarize_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 388,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorCLI.register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 401,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/cli/main.py",
            "line": 405,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 412,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
      "analysis": {
        "functions": [
          {
            "name": "lifespan",
            "line": 85,
            "async": true,
            "decorators": [
              "@asynccontextmanager"
            ],
            "docstring": "Lifespan context manager for Rhetor",
            "args": [
              "app"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 395,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint - provides basic information",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 449,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint following Tekton standards",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "providers",
            "line": 474,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get available LLM providers and models",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_provider",
            "line": 488,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Set the active provider and model",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "message",
            "line": 516,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a message to the LLM and get a response",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 565,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a message to the LLM and get a streaming response",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "event_generator",
            "line": 585,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "chat",
            "line": 647,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a chat conversation to the LLM and get a response",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "event_generator",
            "line": 675,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 772,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time communication",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 1274,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all templates with optional filtering by category or tag",
            "args": [
              "category",
              "tag"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 1293,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new template",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 1313,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a template by ID with optional version",
            "args": [
              "template_id",
              "version_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_template",
            "line": 1333,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a template by ID",
            "args": [
              "template_id",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_template",
            "line": 1353,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a template by ID",
            "args": [
              "template_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "list_template_versions",
            "line": 1370,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all versions of a template",
            "args": [
              "template_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "render_template",
            "line": 1391,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Render a template with variables",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_prompts",
            "line": 1413,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all prompts with optional filtering by component or tag",
            "args": [
              "component",
              "tag"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_prompt",
            "line": 1432,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new prompt",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prompt",
            "line": 1454,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a prompt by ID",
            "args": [
              "prompt_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_prompt",
            "line": 1471,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a prompt by ID",
            "args": [
              "prompt_id",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_prompt",
            "line": 1491,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a prompt by ID",
            "args": [
              "prompt_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "compare_prompts",
            "line": 1508,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Compare two prompts",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_contexts",
            "line": 1525,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all available contexts",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 1541,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get messages in a context",
            "args": [
              "context_id",
              "limit",
              "include_metadata"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_context",
            "line": 1572,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a context and all its messages",
            "args": [
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "search_context",
            "line": 1585,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Search for messages in a context",
            "args": [
              "context_id",
              "query",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "summarize_context",
            "line": 1611,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Generate a summary of a context",
            "args": [
              "context_id",
              "max_tokens"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_status",
            "line": 1634,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the current budget status",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_settings",
            "line": 1683,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all budget settings",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_budget_limit",
            "line": 1696,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Set a budget limit for a period",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set_budget_policy",
            "line": 1737,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Set a budget enforcement policy for a period",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_budget_usage",
            "line": 1775,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get detailed usage data for a period",
            "args": [
              "period",
              "provider"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_budget_summary",
            "line": 1806,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a usage summary for a period, grouped by provider, model, or component",
            "args": [
              "period",
              "group_by"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_model_tiers",
            "line": 1837,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get models categorized by price tier",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run_server",
            "line": 1937,
            "async": false,
            "decorators": [],
            "docstring": "Run the Rhetor API server.\n\nArgs:\n    host: Host to bind to\n    port: Port to bind to\n    log_level: Logging level",
            "args": [
              "host",
              "port",
              "log_level"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MessageRequest",
            "line": 316,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StreamRequest",
            "line": 325,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ChatRequest",
            "line": 333,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProviderModelRequest",
            "line": 342,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateCreateRequest",
            "line": 347,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateUpdateRequest",
            "line": 355,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateRenderRequest",
            "line": 359,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptCreateRequest",
            "line": 364,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptUpdateRequest",
            "line": 374,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptCompareRequest",
            "line": 378,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetLimitRequest",
            "line": 383,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicyRequest",
            "line": 389,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "root",
            "line": 395,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 449,
            "method": "@get",
            "async": true
          },
          {
            "name": "providers",
            "line": 474,
            "method": "@get",
            "async": true
          },
          {
            "name": "set_provider",
            "line": 488,
            "method": "@post",
            "async": true
          },
          {
            "name": "message",
            "line": 516,
            "method": "@post",
            "async": true
          },
          {
            "name": "stream",
            "line": 565,
            "method": "@post",
            "async": true
          },
          {
            "name": "chat",
            "line": 647,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_templates",
            "line": 1274,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_template",
            "line": 1293,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_template",
            "line": 1313,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_template",
            "line": 1333,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_template",
            "line": 1353,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_template_versions",
            "line": 1370,
            "method": "@get",
            "async": true
          },
          {
            "name": "render_template",
            "line": 1391,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_prompts",
            "line": 1413,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_prompt",
            "line": 1432,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_prompt",
            "line": 1454,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_prompt",
            "line": 1471,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_prompt",
            "line": 1491,
            "method": "@delete",
            "async": true
          },
          {
            "name": "compare_prompts",
            "line": 1508,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_contexts",
            "line": 1525,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_context",
            "line": 1541,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_context",
            "line": 1572,
            "method": "@delete",
            "async": true
          },
          {
            "name": "search_context",
            "line": 1585,
            "method": "@post",
            "async": true
          },
          {
            "name": "summarize_context",
            "line": 1611,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_budget_status",
            "line": 1634,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_budget_settings",
            "line": 1683,
            "method": "@get",
            "async": true
          },
          {
            "name": "set_budget_limit",
            "line": 1696,
            "method": "@post",
            "async": true
          },
          {
            "name": "set_budget_policy",
            "line": 1737,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_budget_usage",
            "line": 1775,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_budget_summary",
            "line": 1806,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_model_tiers",
            "line": 1837,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 772,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 15
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.BackgroundTasks",
            "from": "fastapi",
            "name": "BackgroundTasks",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "sse_starlette.sse.EventSourceResponse",
            "from": "sse_starlette.sse",
            "name": "EventSourceResponse",
            "alias": null,
            "line": 21
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.utils.errors.StartupError",
            "from": "shared.utils.errors",
            "name": "StartupError",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.utils.startup.component_startup",
            "from": "shared.utils.startup",
            "name": "component_startup",
            "alias": null,
            "line": 35
          },
          {
            "module": "shared.utils.startup.StartupMetrics",
            "from": "shared.utils.startup",
            "name": "StartupMetrics",
            "alias": null,
            "line": 35
          },
          {
            "module": "shared.utils.shutdown.GracefulShutdown",
            "from": "shared.utils.shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 37
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 38
          },
          {
            "module": "core.llm_client.LLMClient",
            "from": "core.llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 47
          },
          {
            "module": "core.model_router.ModelRouter",
            "from": "core.model_router",
            "name": "ModelRouter",
            "alias": null,
            "line": 48
          },
          {
            "module": "core.context_manager.ContextManager",
            "from": "core.context_manager",
            "name": "ContextManager",
            "alias": null,
            "line": 49
          },
          {
            "module": "core.prompt_engine.PromptEngine",
            "from": "core.prompt_engine",
            "name": "PromptEngine",
            "alias": null,
            "line": 50
          },
          {
            "module": "core.template_manager.TemplateManager",
            "from": "core.template_manager",
            "name": "TemplateManager",
            "alias": null,
            "line": 51
          },
          {
            "module": "core.prompt_registry.PromptRegistry",
            "from": "core.prompt_registry",
            "name": "PromptRegistry",
            "alias": null,
            "line": 52
          },
          {
            "module": "core.budget_manager.BudgetManager",
            "from": "core.budget_manager",
            "name": "BudgetManager",
            "alias": null,
            "line": 53
          },
          {
            "module": "core.budget_manager.BudgetPolicy",
            "from": "core.budget_manager",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 53
          },
          {
            "module": "core.budget_manager.BudgetPeriod",
            "from": "core.budget_manager",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 53
          },
          {
            "module": "core.specialist_router.SpecialistRouter",
            "from": "core.specialist_router",
            "name": "SpecialistRouter",
            "alias": null,
            "line": 54
          },
          {
            "module": "core.ai_specialist_manager.AISpecialistManager",
            "from": "core.ai_specialist_manager",
            "name": "AISpecialistManager",
            "alias": null,
            "line": 55
          },
          {
            "module": "core.ai_messaging_integration.AIMessagingIntegration",
            "from": "core.ai_messaging_integration",
            "name": "AIMessagingIntegration",
            "alias": null,
            "line": 56
          },
          {
            "module": "core.anthropic_max_config.AnthropicMaxConfig",
            "from": "core.anthropic_max_config",
            "name": "AnthropicMaxConfig",
            "alias": null,
            "line": 57
          },
          {
            "module": "templates.system_prompts",
            "from": "templates",
            "name": "system_prompts",
            "alias": null,
            "line": 58
          },
          {
            "module": "time",
            "alias": null,
            "line": 90
          },
          {
            "module": "rhetor.core.mcp.hermes_bridge.RhetorMCPBridge",
            "from": "rhetor.core.mcp.hermes_bridge",
            "name": "RhetorMCPBridge",
            "alias": null,
            "line": 197
          },
          {
            "module": "rhetor.core.mcp.init_integration.initialize_mcp_integration",
            "from": "rhetor.core.mcp.init_integration",
            "name": "initialize_mcp_integration",
            "alias": null,
            "line": 207
          },
          {
            "module": "rhetor.core.mcp.init_integration.setup_hermes_subscriptions",
            "from": "rhetor.core.mcp.init_integration",
            "name": "setup_hermes_subscriptions",
            "alias": null,
            "line": 207
          },
          {
            "module": "rhetor.core.mcp.init_integration.test_mcp_integration",
            "from": "rhetor.core.mcp.init_integration",
            "name": "test_mcp_integration",
            "alias": null,
            "line": 207
          },
          {
            "module": "fastmcp_endpoints.mcp_router",
            "from": "fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 289
          },
          {
            "module": "ai_specialist_endpoints.router",
            "from": "ai_specialist_endpoints",
            "name": "router",
            "alias": "ai_router",
            "line": 297
          },
          {
            "module": "ai_specialist_endpoints.router",
            "from": "ai_specialist_endpoints",
            "name": "router",
            "alias": "ai_router",
            "line": 1929
          },
          {
            "module": "shared.utils.socket_server.run_with_socket_reuse",
            "from": "shared.utils.socket_server",
            "name": "run_with_socket_reuse",
            "alias": null,
            "line": 1952
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "lifespan",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "MessageRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 316,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "StreamRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 325,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ChatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 333,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProviderModelRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 342,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateCreateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 347,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateUpdateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 355,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateRenderRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 359,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PromptCreateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 364,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PromptUpdateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 374,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PromptCompareRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 378,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetLimitRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 383,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicyRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 389,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 395,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 449,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "providers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 474,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_provider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 488,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 516,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 565,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "event_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 585,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "chat",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 647,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "event_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 675,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 772,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1274,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1293,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1313,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1333,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1353,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_template_versions",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1370,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "render_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1391,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1413,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1432,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1454,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1471,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1491,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "compare_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1508,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1525,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1541,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1572,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "search_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1585,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "summarize_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1611,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget_status",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1634,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1683,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_budget_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1696,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_budget_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1737,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1775,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1806,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_model_tiers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1837,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "run_server",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_original.py",
            "line": 1937,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1965,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_simple.py",
      "analysis": {
        "functions": [
          {
            "name": "root",
            "line": 43,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 52,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 43,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 52,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 4
          },
          {
            "module": "sys",
            "alias": null,
            "line": 5
          },
          {
            "module": "logging",
            "alias": null,
            "line": 6
          },
          {
            "module": "app_enhanced.app",
            "from": "app_enhanced",
            "name": "app",
            "alias": null,
            "line": 15
          },
          {
            "module": "rhetor.api.app_enhanced.app",
            "from": "rhetor.api.app_enhanced",
            "name": "app",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 25
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 25
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 26
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 60
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 67
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_simple.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_simple.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 72,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
      "analysis": {
        "functions": [
          {
            "name": "get_session",
            "line": 172,
            "async": true,
            "decorators": [],
            "docstring": "Get or create aiohttp session",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup_session",
            "line": 180,
            "async": true,
            "decorators": [],
            "docstring": "Close aiohttp session",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_contexts",
            "line": 187,
            "async": true,
            "decorators": [],
            "docstring": "Save component contexts before shutdown",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "startup_event",
            "line": 201,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize providers on startup",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 246,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Cleanup on shutdown",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "initialize_providers",
            "line": 268,
            "async": true,
            "decorators": [],
            "docstring": "Check availability of all providers",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 306,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 321,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_providers",
            "line": 356,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get available LLM providers with real status",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_provider",
            "line": 361,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get specific provider info",
            "args": [
              "provider_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_models",
            "line": 368,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all available models across providers",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "select_provider_for_task",
            "line": 383,
            "async": false,
            "decorators": [],
            "docstring": "Intelligently select provider and model based on task type",
            "args": [
              "task_type",
              "component_name"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "complete_with_ollama",
            "line": 420,
            "async": true,
            "decorators": [],
            "docstring": "Complete using Ollama",
            "args": [
              "message",
              "model",
              "system_prompt"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "complete_with_anthropic",
            "line": 459,
            "async": true,
            "decorators": [],
            "docstring": "Complete using Anthropic",
            "args": [
              "message",
              "model",
              "system_prompt"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "complete_with_openai_compatible",
            "line": 502,
            "async": true,
            "decorators": [],
            "docstring": "Complete using OpenAI-compatible API (OpenAI, Groq, OpenRouter)",
            "args": [
              "provider_id",
              "message",
              "model",
              "system_prompt"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "complete_with_google",
            "line": 552,
            "async": true,
            "decorators": [],
            "docstring": "Complete using Google Gemini",
            "args": [
              "message",
              "model",
              "system_prompt"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 587,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Complete a message with intelligent provider selection",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_context_prompt",
            "line": 652,
            "async": false,
            "decorators": [],
            "docstring": "Generate system prompt from Tekton context",
            "args": [
              "component_name",
              "context"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "track_performance",
            "line": 675,
            "async": false,
            "decorators": [],
            "docstring": "Track provider/model performance metrics",
            "args": [
              "provider_id",
              "model_id",
              "elapsed",
              "success"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 698,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create or update context for a component",
            "args": [
              "component_name",
              "context"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 704,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get context for a component",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_context",
            "line": 711,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete context for a component",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_contexts",
            "line": 718,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all component contexts",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metrics",
            "line": 727,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get performance metrics for all providers/models",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "receive_apollo_guidelines",
            "line": 736,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Receive guidelines from Apollo for model selection and behavior",
            "args": [
              "guidelines"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RoleContext",
            "line": 117,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProjectContext",
            "line": 125,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskContext",
            "line": 133,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DataContext",
            "line": 140,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TektonContext",
            "line": 147,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CompletionRequest",
            "line": 153,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "root",
            "line": 306,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 321,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_providers",
            "line": 356,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_provider",
            "line": 361,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_models",
            "line": 368,
            "method": "@get",
            "async": true
          },
          {
            "name": "complete",
            "line": 587,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_context",
            "line": 698,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_context",
            "line": 704,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_context",
            "line": 711,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_contexts",
            "line": 718,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_metrics",
            "line": 727,
            "method": "@get",
            "async": true
          },
          {
            "name": "receive_apollo_guidelines",
            "line": 736,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 4
          },
          {
            "module": "sys",
            "alias": null,
            "line": 5
          },
          {
            "module": "json",
            "alias": null,
            "line": 6
          },
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 14
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.utils.graceful_shutdown.GracefulShutdown",
            "from": "shared.utils.graceful_shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.utils.graceful_shutdown.add_fastapi_shutdown",
            "from": "shared.utils.graceful_shutdown",
            "name": "add_fastapi_shutdown",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 29
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 29
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 743
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 750
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RoleContext",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 117,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProjectContext",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 125,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskContext",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 133,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DataContext",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 140,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TektonContext",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 147,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "CompletionRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 153,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_session",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 172,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cleanup_session",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 180,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "save_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 187,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 201,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 246,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "initialize_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 268,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 306,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 321,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 356,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_provider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 361,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 368,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "select_provider_for_task",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 383,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "complete_with_ollama",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 420,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "complete_with_anthropic",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 459,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "complete_with_openai_compatible",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 502,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "complete_with_google",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 552,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 587,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "generate_context_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 652,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "track_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 675,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 698,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 704,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 711,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 718,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 727,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "receive_apollo_guidelines",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app_enhanced.py",
            "line": 736,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 755,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 3,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_capabilities_func",
            "line": 141,
            "async": false,
            "decorators": [],
            "docstring": "Get capabilities from FastMCP server.",
            "args": [
              "component_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools_func",
            "line": 154,
            "async": false,
            "decorators": [],
            "docstring": "Get tools from FastMCP server.",
            "args": [
              "component_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_request_func",
            "line": 174,
            "async": true,
            "decorators": [],
            "docstring": "Process MCP request using FastMCP server.",
            "args": [
              "request_data",
              "component_manager"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_llm_status",
            "line": 232,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get overall LLM system status.\n\nReturns:\n    Dictionary containing LLM system status and capabilities",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_llm_workflow",
            "line": 261,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a predefined LLM management workflow.\n\nArgs:\n    workflow_name: Name of the workflow to execute\n    parameters: Parameters for the workflow\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_name",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_model_optimization_workflow",
            "line": 307,
            "async": true,
            "decorators": [],
            "docstring": "Model optimization workflow including performance testing and routing.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_prompt_optimization_workflow",
            "line": 396,
            "async": true,
            "decorators": [],
            "docstring": "Prompt optimization workflow including template creation and validation.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_context_analysis_workflow",
            "line": 456,
            "async": true,
            "decorators": [],
            "docstring": "Context analysis workflow including usage tracking and optimization.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_multi_model_comparison_workflow",
            "line": 515,
            "async": true,
            "decorators": [],
            "docstring": "Multi-model comparison workflow for evaluating different models on the same task.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stream_mcp_tool",
            "line": 605,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute an MCP tool with Server-Sent Events (SSE) streaming support.\n\nThis endpoint enables real-time streaming of AI responses and progress updates\nfor long-running operations like AI specialist interactions.\n\nArgs:\n    request: Streaming request with tool name, arguments, and stream options\n    \nReturns:\n    EventSourceResponse with real-time updates",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "event_generator",
            "line": 624,
            "async": true,
            "decorators": [],
            "docstring": "Generate SSE events for the streaming response.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stream_callback",
            "line": 660,
            "async": true,
            "decorators": [],
            "docstring": "Callback for streaming updates from the tool.",
            "args": [
              "event_type",
              "data"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run_tool",
            "line": 671,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "test_streaming",
            "line": 787,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Test endpoint for SSE streaming functionality.\n\nReturns:\n    EventSourceResponse with test events",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "test_generator",
            "line": 794,
            "async": true,
            "decorators": [],
            "docstring": "Generate test SSE events.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPRequest",
            "line": 40,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 46,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPStreamRequest",
            "line": 53,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for streaming MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "get_llm_status",
            "line": 232,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_llm_workflow",
            "line": 261,
            "method": "@post",
            "async": true
          },
          {
            "name": "stream_mcp_tool",
            "line": 605,
            "method": "@post",
            "async": true
          },
          {
            "name": "test_streaming",
            "line": 787,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.responses.StreamingResponse",
            "from": "fastapi.responses",
            "name": "StreamingResponse",
            "alias": null,
            "line": 11
          },
          {
            "module": "sse_starlette.sse.EventSourceResponse",
            "from": "sse_starlette.sse",
            "name": "EventSourceResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 14
          },
          {
            "module": "time",
            "alias": null,
            "line": 15
          },
          {
            "module": "json",
            "alias": null,
            "line": 16
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.server.FastMCPServer",
            "from": "tekton.mcp.fastmcp.server",
            "name": "FastMCPServer",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_mcp_endpoints",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.FastMCPError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "FastMCPError",
            "alias": null,
            "line": 23
          },
          {
            "module": "rhetor.core.mcp.tools.llm_management_tools",
            "from": "rhetor.core.mcp.tools",
            "name": "llm_management_tools",
            "alias": null,
            "line": 25
          },
          {
            "module": "rhetor.core.mcp.tools.prompt_engineering_tools",
            "from": "rhetor.core.mcp.tools",
            "name": "prompt_engineering_tools",
            "alias": null,
            "line": 25
          },
          {
            "module": "rhetor.core.mcp.tools.context_management_tools",
            "from": "rhetor.core.mcp.tools",
            "name": "context_management_tools",
            "alias": null,
            "line": 25
          },
          {
            "module": "rhetor.core.mcp.tools.ai_orchestration_tools",
            "from": "rhetor.core.mcp.tools",
            "name": "ai_orchestration_tools",
            "alias": null,
            "line": 25
          },
          {
            "module": "rhetor.core.mcp.streaming_tools.streaming_tools",
            "from": "rhetor.core.mcp.streaming_tools",
            "name": "streaming_tools",
            "alias": null,
            "line": 31
          },
          {
            "module": "rhetor.core.mcp.capabilities.LLMManagementCapability",
            "from": "rhetor.core.mcp.capabilities",
            "name": "LLMManagementCapability",
            "alias": null,
            "line": 32
          },
          {
            "module": "rhetor.core.mcp.capabilities.PromptEngineeringCapability",
            "from": "rhetor.core.mcp.capabilities",
            "name": "PromptEngineeringCapability",
            "alias": null,
            "line": 32
          },
          {
            "module": "rhetor.core.mcp.capabilities.ContextManagementCapability",
            "from": "rhetor.core.mcp.capabilities",
            "name": "ContextManagementCapability",
            "alias": null,
            "line": 32
          },
          {
            "module": "rhetor.core.mcp.capabilities.AIOrchestrationCapability",
            "from": "rhetor.core.mcp.capabilities",
            "name": "AIOrchestrationCapability",
            "alias": null,
            "line": 32
          },
          {
            "module": "rhetor.core.mcp.tools.get_available_models",
            "from": "rhetor.core.mcp.tools",
            "name": "get_available_models",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.set_default_model",
            "from": "rhetor.core.mcp.tools",
            "name": "set_default_model",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.get_model_capabilities",
            "from": "rhetor.core.mcp.tools",
            "name": "get_model_capabilities",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.test_model_connection",
            "from": "rhetor.core.mcp.tools",
            "name": "test_model_connection",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.get_model_performance",
            "from": "rhetor.core.mcp.tools",
            "name": "get_model_performance",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.manage_model_rotation",
            "from": "rhetor.core.mcp.tools",
            "name": "manage_model_rotation",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.create_prompt_template",
            "from": "rhetor.core.mcp.tools",
            "name": "create_prompt_template",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.optimize_prompt",
            "from": "rhetor.core.mcp.tools",
            "name": "optimize_prompt",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.validate_prompt_syntax",
            "from": "rhetor.core.mcp.tools",
            "name": "validate_prompt_syntax",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.get_prompt_history",
            "from": "rhetor.core.mcp.tools",
            "name": "get_prompt_history",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.analyze_prompt_performance",
            "from": "rhetor.core.mcp.tools",
            "name": "analyze_prompt_performance",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.manage_prompt_library",
            "from": "rhetor.core.mcp.tools",
            "name": "manage_prompt_library",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.analyze_context_usage",
            "from": "rhetor.core.mcp.tools",
            "name": "analyze_context_usage",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.optimize_context_window",
            "from": "rhetor.core.mcp.tools",
            "name": "optimize_context_window",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.track_context_history",
            "from": "rhetor.core.mcp.tools",
            "name": "track_context_history",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.compress_context",
            "from": "rhetor.core.mcp.tools",
            "name": "compress_context",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.list_ai_specialists",
            "from": "rhetor.core.mcp.tools",
            "name": "list_ai_specialists",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.activate_ai_specialist",
            "from": "rhetor.core.mcp.tools",
            "name": "activate_ai_specialist",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.send_message_to_specialist",
            "from": "rhetor.core.mcp.tools",
            "name": "send_message_to_specialist",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.orchestrate_team_chat",
            "from": "rhetor.core.mcp.tools",
            "name": "orchestrate_team_chat",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.get_specialist_conversation_history",
            "from": "rhetor.core.mcp.tools",
            "name": "get_specialist_conversation_history",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.tools.configure_ai_orchestration",
            "from": "rhetor.core.mcp.tools",
            "name": "configure_ai_orchestration",
            "alias": null,
            "line": 74
          },
          {
            "module": "rhetor.core.mcp.streaming_tools.send_message_to_specialist_stream",
            "from": "rhetor.core.mcp.streaming_tools",
            "name": "send_message_to_specialist_stream",
            "alias": null,
            "line": 86
          },
          {
            "module": "rhetor.core.mcp.streaming_tools.orchestrate_team_chat_stream",
            "from": "rhetor.core.mcp.streaming_tools",
            "name": "orchestrate_team_chat_stream",
            "alias": null,
            "line": 86
          },
          {
            "module": "rhetor.core.mcp.dynamic_specialist_tools.list_specialist_templates",
            "from": "rhetor.core.mcp.dynamic_specialist_tools",
            "name": "list_specialist_templates",
            "alias": null,
            "line": 92
          },
          {
            "module": "rhetor.core.mcp.dynamic_specialist_tools.create_dynamic_specialist",
            "from": "rhetor.core.mcp.dynamic_specialist_tools",
            "name": "create_dynamic_specialist",
            "alias": null,
            "line": 92
          },
          {
            "module": "rhetor.core.mcp.dynamic_specialist_tools.clone_specialist",
            "from": "rhetor.core.mcp.dynamic_specialist_tools",
            "name": "clone_specialist",
            "alias": null,
            "line": 92
          },
          {
            "module": "rhetor.core.mcp.dynamic_specialist_tools.modify_specialist",
            "from": "rhetor.core.mcp.dynamic_specialist_tools",
            "name": "modify_specialist",
            "alias": null,
            "line": 92
          },
          {
            "module": "rhetor.core.mcp.dynamic_specialist_tools.deactivate_specialist",
            "from": "rhetor.core.mcp.dynamic_specialist_tools",
            "name": "deactivate_specialist",
            "alias": null,
            "line": 92
          },
          {
            "module": "rhetor.core.mcp.dynamic_specialist_tools.get_specialist_metrics",
            "from": "rhetor.core.mcp.dynamic_specialist_tools",
            "name": "get_specialist_metrics",
            "alias": null,
            "line": 92
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 194
          },
          {
            "module": "rhetor.core.mcp.tools.get_available_models",
            "from": "rhetor.core.mcp.tools",
            "name": "get_available_models",
            "alias": null,
            "line": 309
          },
          {
            "module": "rhetor.core.mcp.tools.test_model_connection",
            "from": "rhetor.core.mcp.tools",
            "name": "test_model_connection",
            "alias": null,
            "line": 309
          },
          {
            "module": "rhetor.core.mcp.tools.get_model_performance",
            "from": "rhetor.core.mcp.tools",
            "name": "get_model_performance",
            "alias": null,
            "line": 309
          },
          {
            "module": "rhetor.core.mcp.tools.set_default_model",
            "from": "rhetor.core.mcp.tools",
            "name": "set_default_model",
            "alias": null,
            "line": 309
          },
          {
            "module": "rhetor.core.mcp.tools.create_prompt_template",
            "from": "rhetor.core.mcp.tools",
            "name": "create_prompt_template",
            "alias": null,
            "line": 398
          },
          {
            "module": "rhetor.core.mcp.tools.optimize_prompt",
            "from": "rhetor.core.mcp.tools",
            "name": "optimize_prompt",
            "alias": null,
            "line": 398
          },
          {
            "module": "rhetor.core.mcp.tools.validate_prompt_syntax",
            "from": "rhetor.core.mcp.tools",
            "name": "validate_prompt_syntax",
            "alias": null,
            "line": 398
          },
          {
            "module": "rhetor.core.mcp.tools.analyze_prompt_performance",
            "from": "rhetor.core.mcp.tools",
            "name": "analyze_prompt_performance",
            "alias": null,
            "line": 398
          },
          {
            "module": "rhetor.core.mcp.tools.analyze_context_usage",
            "from": "rhetor.core.mcp.tools",
            "name": "analyze_context_usage",
            "alias": null,
            "line": 458
          },
          {
            "module": "rhetor.core.mcp.tools.optimize_context_window",
            "from": "rhetor.core.mcp.tools",
            "name": "optimize_context_window",
            "alias": null,
            "line": 458
          },
          {
            "module": "rhetor.core.mcp.tools.track_context_history",
            "from": "rhetor.core.mcp.tools",
            "name": "track_context_history",
            "alias": null,
            "line": 458
          },
          {
            "module": "rhetor.core.mcp.tools.compress_context",
            "from": "rhetor.core.mcp.tools",
            "name": "compress_context",
            "alias": null,
            "line": 458
          },
          {
            "module": "rhetor.core.mcp.tools.get_available_models",
            "from": "rhetor.core.mcp.tools",
            "name": "get_available_models",
            "alias": null,
            "line": 517
          },
          {
            "module": "rhetor.core.mcp.tools.get_model_capabilities",
            "from": "rhetor.core.mcp.tools",
            "name": "get_model_capabilities",
            "alias": null,
            "line": 517
          },
          {
            "module": "rhetor.core.mcp.tools.test_model_connection",
            "from": "rhetor.core.mcp.tools",
            "name": "test_model_connection",
            "alias": null,
            "line": 517
          },
          {
            "module": "rhetor.core.mcp.tools.get_model_performance",
            "from": "rhetor.core.mcp.tools",
            "name": "get_model_performance",
            "alias": null,
            "line": 517
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPStreamRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 53,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_capabilities_func",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 141,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_tools_func",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 154,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "process_request_func",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_llm_status",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 232,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_llm_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 261,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "_model_optimization_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 307,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "_multi_model_comparison_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 515,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "stream_mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 605,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "event_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 624,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "stream_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 660,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "run_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 671,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "test_streaming",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 787,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "test_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/fastmcp_endpoints.py",
            "line": 794,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 818,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_managers",
            "line": 75,
            "async": false,
            "decorators": [],
            "docstring": "Get AI specialist managers from app state",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_specialists",
            "line": 88,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all AI specialists",
            "args": [
              "active_only",
              "type_filter"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_specialist",
            "line": 136,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get details of a specific AI specialist",
            "args": [
              "specialist_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "activate_specialist",
            "line": 169,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Activate an AI specialist",
            "args": [
              "specialist_id",
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "deactivate_specialist",
            "line": 202,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Deactivate an AI specialist",
            "args": [
              "specialist_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "message_specialist",
            "line": 225,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a message to an AI specialist",
            "args": [
              "request",
              "specialist_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_dynamic_specialist",
            "line": 284,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new dynamic AI specialist",
            "args": [
              "specialist_type",
              "requirements",
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_conversation",
            "line": 307,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new AI-to-AI conversation",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "orchestrate_team_chat",
            "line": 338,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Orchestrate a team chat between AI specialists",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_configuration",
            "line": 365,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get current AI configuration including Anthropic Max status",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "toggle_anthropic_max",
            "line": 385,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Toggle Anthropic Max mode",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_configuration",
            "line": 409,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update AI configuration",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SpecialistResponse",
            "line": 17,
            "methods": [],
            "decorators": [],
            "docstring": "AI Specialist information",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SpecialistListResponse",
            "line": 31,
            "methods": [],
            "decorators": [],
            "docstring": "List of AI specialists",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SpecialistActivateRequest",
            "line": 36,
            "methods": [],
            "decorators": [],
            "docstring": "Request to activate a specialist",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SpecialistMessageRequest",
            "line": 40,
            "methods": [],
            "decorators": [],
            "docstring": "Request to send a message to a specialist",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TeamChatRequest",
            "line": 47,
            "methods": [],
            "decorators": [],
            "docstring": "Request to orchestrate team chat",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ConversationCreateRequest",
            "line": 54,
            "methods": [],
            "decorators": [],
            "docstring": "Request to create an AI conversation",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AnthropicMaxToggleRequest",
            "line": 62,
            "methods": [],
            "decorators": [],
            "docstring": "Request to toggle Anthropic Max mode",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ConfigurationUpdateRequest",
            "line": 66,
            "methods": [],
            "decorators": [],
            "docstring": "Request to update AI configuration",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "list_specialists",
            "line": 88,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_specialist",
            "line": 136,
            "method": "@get",
            "async": true
          },
          {
            "name": "activate_specialist",
            "line": 169,
            "method": "@post",
            "async": true
          },
          {
            "name": "deactivate_specialist",
            "line": 202,
            "method": "@post",
            "async": true
          },
          {
            "name": "message_specialist",
            "line": 225,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_dynamic_specialist",
            "line": 284,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_conversation",
            "line": 307,
            "method": "@post",
            "async": true
          },
          {
            "name": "orchestrate_team_chat",
            "line": 338,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_configuration",
            "line": 365,
            "method": "@get",
            "async": true
          },
          {
            "name": "toggle_anthropic_max",
            "line": 385,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_configuration",
            "line": 409,
            "method": "@put",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "api.app.component",
            "from": "api.app",
            "name": "component",
            "alias": null,
            "line": 77
          },
          {
            "module": "api.app.component",
            "from": "api.app",
            "name": "component",
            "alias": null,
            "line": 249
          },
          {
            "module": "os",
            "alias": null,
            "line": 445
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SpecialistResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SpecialistListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SpecialistActivateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SpecialistMessageRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TeamChatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ConversationCreateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 54,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AnthropicMaxToggleRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 62,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ConfigurationUpdateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 66,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_managers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 75,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "activate_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 169,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "deactivate_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "message_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "create_dynamic_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 284,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 307,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "orchestrate_team_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 338,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_configuration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 365,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "toggle_anthropic_max",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 385,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_configuration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/ai_specialist_endpoints.py",
            "line": 409,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 445,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 128,
            "async": true,
            "decorators": [],
            "docstring": "Component startup callback.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 186,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint for the Rhetor API.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 201,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check the health of the Rhetor component following Tekton standards.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 225,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 237,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat",
            "line": 266,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a chat message to the LLM.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 312,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Stream a chat response from the LLM.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate",
            "line": 317,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 340,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all available templates.",
            "args": [
              "category"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 350,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific template by name.",
            "args": [
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 362,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new template.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_template",
            "line": 382,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing template.",
            "args": [
              "name",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_template",
            "line": 402,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a template.",
            "args": [
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "render_prompt",
            "line": 416,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Render a prompt using a template.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_registry_prompts",
            "line": 434,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all prompts in the registry.",
            "args": [
              "category"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_registry_prompt",
            "line": 444,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific prompt from the registry.",
            "args": [
              "name",
              "version"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_prompt",
            "line": 456,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a new prompt.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 479,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new context.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 494,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get context information.",
            "args": [
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_context",
            "line": 506,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a context.",
            "args": [
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_models",
            "line": 517,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List available models.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_usage",
            "line": 528,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get current budget usage.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_budget_policy",
            "line": 538,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new budget policy.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_specialists",
            "line": 557,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all AI specialists.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_specialist",
            "line": 567,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about a specific specialist.",
            "args": [
              "specialist_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_specialist",
            "line": 579,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Start a specialist.",
            "args": [
              "specialist_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop_specialist",
            "line": 592,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Stop a specialist.",
            "args": [
              "specialist_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 606,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for streaming LLM responses.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ChatRequest",
            "line": 59,
            "methods": [],
            "decorators": [],
            "docstring": "Chat request model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ChatResponse",
            "line": 73,
            "methods": [],
            "decorators": [],
            "docstring": "Chat response model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateRequest",
            "line": 82,
            "methods": [],
            "decorators": [],
            "docstring": "Template request model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptRequest",
            "line": 92,
            "methods": [],
            "decorators": [],
            "docstring": "Prompt request model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptRegistryRequest",
            "line": 99,
            "methods": [],
            "decorators": [],
            "docstring": "Prompt registry request model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicyRequest",
            "line": 111,
            "methods": [],
            "decorators": [],
            "docstring": "Budget policy request model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextRequest",
            "line": 119,
            "methods": [],
            "decorators": [],
            "docstring": "Context request model",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "root",
            "line": 186,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 201,
            "method": "@get",
            "async": true
          },
          {
            "name": "ready",
            "line": 225,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 237,
            "method": "@get",
            "async": true
          },
          {
            "name": "chat",
            "line": 266,
            "method": "@post",
            "async": true
          },
          {
            "name": "chat_stream",
            "line": 312,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_templates",
            "line": 340,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_template",
            "line": 350,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_template",
            "line": 362,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_template",
            "line": 382,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_template",
            "line": 402,
            "method": "@delete",
            "async": true
          },
          {
            "name": "render_prompt",
            "line": 416,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_registry_prompts",
            "line": 434,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_registry_prompt",
            "line": 444,
            "method": "@get",
            "async": true
          },
          {
            "name": "register_prompt",
            "line": 456,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_context",
            "line": 479,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_context",
            "line": 494,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_context",
            "line": 506,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_models",
            "line": 517,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_budget_usage",
            "line": 528,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_budget_policy",
            "line": 538,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_specialists",
            "line": 557,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_specialist",
            "line": 567,
            "method": "@get",
            "async": true
          },
          {
            "name": "start_specialist",
            "line": 579,
            "method": "@post",
            "async": true
          },
          {
            "name": "stop_specialist",
            "line": 592,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 606,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.BackgroundTasks",
            "from": "fastapi",
            "name": "BackgroundTasks",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "sse_starlette.sse.EventSourceResponse",
            "from": "sse_starlette.sse",
            "name": "EventSourceResponse",
            "alias": null,
            "line": 21
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 34
          },
          {
            "module": "core.rhetor_component.RhetorComponent",
            "from": "core.rhetor_component",
            "name": "RhetorComponent",
            "alias": null,
            "line": 43
          },
          {
            "module": "templates.system_prompts",
            "from": "templates",
            "name": "system_prompts",
            "alias": null,
            "line": 44
          },
          {
            "module": "fastmcp_endpoints.mcp_router",
            "from": "fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 158
          },
          {
            "module": "ai_specialist_endpoints.router",
            "from": "ai_specialist_endpoints",
            "name": "router",
            "alias": "ai_router",
            "line": 166
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 674
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ChatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 59,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ChatResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 73,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 82,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PromptRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 92,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PromptRegistryRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 99,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicyRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 111,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ContextRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 119,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 201,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 237,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "chat",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 266,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 312,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "generate",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 317,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 350,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 362,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 382,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 402,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "render_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 416,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_registry_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 434,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_registry_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 444,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 456,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 479,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 494,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 506,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 517,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 528,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_budget_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 538,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 557,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 567,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "start_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 579,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "stop_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 592,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/app.py",
            "line": 606,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 684,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/api/__main__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uvicorn",
            "alias": null,
            "line": 2
          },
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "sys",
            "alias": null,
            "line": 4
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.api.app.app",
            "from": "rhetor.api.app",
            "name": "app",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 22,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
      "analysis": {
        "functions": [
          {
            "name": "get_registry",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Get the prompt registry singleton.\n\nReturns:\n    PromptRegistry instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "async_get_registry",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Get the prompt registry singleton asynchronously.\n\nReturns:\n    PromptRegistry instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_system_prompt",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Generate a system prompt for a specific component.\n\nArgs:\n    component_name: The name of the component\n    prompt_id: Optional specific prompt ID to use\n    custom_fields: Optional custom fields for template rendering\n    \nReturns:\n    Formatted system prompt",
            "args": [
              "component_name",
              "prompt_id",
              "custom_fields"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "async_get_system_prompt",
            "line": 62,
            "async": true,
            "decorators": [],
            "docstring": "Generate a system prompt for a specific component asynchronously.\n\nArgs:\n    component_name: The name of the component\n    prompt_id: Optional specific prompt ID to use\n    custom_fields: Optional custom fields for template rendering\n    \nReturns:\n    Formatted system prompt",
            "args": [
              "component_name",
              "prompt_id",
              "custom_fields"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_component_prompts",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Get system prompts for all components.\n\nReturns:\n    Dictionary mapping component names to their system prompts",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prompt_versions",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Get versions of a system prompt.\n\nArgs:\n    component_name: Component name\n    prompt_id: Optional specific prompt ID\n    \nReturns:\n    List of version metadata",
            "args": [
              "component_name",
              "prompt_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_custom_prompt",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Create a custom system prompt for a component.\n\nArgs:\n    component_name: Component name\n    name: Human-readable name\n    content: Prompt content\n    description: Optional description\n    set_as_default: Whether to set as default\n    \nReturns:\n    Prompt ID or None if failed",
            "args": [
              "component_name",
              "name",
              "content",
              "description",
              "set_as_default"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_default_prompt",
            "line": 180,
            "async": false,
            "decorators": [],
            "docstring": "Set a prompt as the default for its component.\n\nArgs:\n    prompt_id: Prompt identifier\n    \nReturns:\n    Success status",
            "args": [
              "prompt_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_component_prompts",
            "line": 192,
            "async": false,
            "decorators": [],
            "docstring": "List all prompts for a component.\n\nArgs:\n    component_name: Component name\n    \nReturns:\n    List of prompt summaries",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compare_prompts",
            "line": 204,
            "async": false,
            "decorators": [],
            "docstring": "Compare two prompts.\n\nArgs:\n    prompt_id1: First prompt ID\n    prompt_id2: Second prompt ID\n    \nReturns:\n    Comparison results",
            "args": [
              "prompt_id1",
              "prompt_id2"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "rhetor.core.prompt_registry.PromptRegistry",
            "from": "rhetor.core.prompt_registry",
            "name": "PromptRegistry",
            "alias": null,
            "line": 13
          },
          {
            "module": "rhetor.core.prompt_registry.SystemPrompt",
            "from": "rhetor.core.prompt_registry",
            "name": "SystemPrompt",
            "alias": null,
            "line": 13
          },
          {
            "module": "rhetor.core.prompt_registry.PromptVersion",
            "from": "rhetor.core.prompt_registry",
            "name": "PromptVersion",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_registry",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "async_get_registry",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "async_get_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 62,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_component_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_prompt_versions",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_custom_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 138,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "set_default_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 180,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_component_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 192,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "compare_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/templates/system_prompts.py",
            "line": 204,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 304,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Initialize Rhetor client.\n\nArgs:\n    rhetor_url: URL for Rhetor API (defaults to http://localhost:8003)\n    component_id: ID of the component using the client\n    default_context: Default context ID for messages\n    auto_reconnect: Whether to automatically attempt reconnection\n    max_retries: Maximum number of retry attempts for operations\n    retry_delay: Delay between retry attempts in seconds",
            "args": [
              "self",
              "rhetor_url",
              "component_id",
              "default_context",
              "auto_reconnect",
              "max_retries",
              "retry_delay"
            ],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 80,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the Rhetor service.\n\nReturns:\n    Connection success",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 111,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the Rhetor service.",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "ensure_connected",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Ensure client is connected to Rhetor.\n\nReturns:\n    Connection status",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_maintain_ws_connection",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Maintain WebSocket connection with automatic reconnection.",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_ws_messages",
            "line": 205,
            "async": true,
            "decorators": [],
            "docstring": "Handle incoming WebSocket messages.",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_timestamp",
            "line": 253,
            "async": false,
            "decorators": [],
            "docstring": "Get ISO timestamp.",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_message",
            "line": 258,
            "async": false,
            "decorators": [],
            "docstring": "Register message event handler.\n\nArgs:\n    handler: Async function to call when a message is received",
            "args": [
              "self",
              "handler"
            ],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_error",
            "line": 266,
            "async": false,
            "decorators": [],
            "docstring": "Register error event handler.\n\nArgs:\n    handler: Async function to call when an error occurs",
            "args": [
              "self",
              "handler"
            ],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_connection",
            "line": 274,
            "async": false,
            "decorators": [],
            "docstring": "Register connection event handler.\n\nArgs:\n    handler: Async function to call when connection status changes",
            "args": [
              "self",
              "handler"
            ],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 282,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to Rhetor and get a completion.\n\nArgs:\n    message: The message to send\n    context_id: The context ID (defaults to component's default context)\n    task_type: The task type (e.g., \"chat\", \"code\", \"planning\")\n    options: Additional options for the LLM\n    timeout: Request timeout in seconds\n    \nReturns:\n    CompletionResponse with message and metadata\n    \nRaises:\n    Exception: If the request fails",
            "args": [
              "self",
              "message",
              "context_id",
              "task_type",
              "options",
              "timeout"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 367,
            "async": true,
            "decorators": [],
            "docstring": "Stream a completion from Rhetor.\n\nArgs:\n    message: The message to send\n    context_id: The context ID (defaults to component's default context)\n    task_type: The task type (e.g., \"chat\", \"code\", \"planning\")\n    options: Additional options for the LLM\n    timeout: Request timeout in seconds\n    use_sse: Whether to use server-sent events (SSE) or WebSocket\n    \nYields:\n    StreamingResponse chunks as they arrive\n    \nRaises:\n    Exception: If the request fails",
            "args": [
              "self",
              "message",
              "context_id",
              "task_type",
              "options",
              "timeout",
              "use_sse"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stream_handler",
            "line": 427,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "data"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_providers",
            "line": 561,
            "async": true,
            "decorators": [],
            "docstring": "Get available LLM providers.\n\nReturns:\n    Dictionary of available providers and models\n    \nRaises:\n    Exception: If the request fails",
            "args": [
              "self"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "set_provider",
            "line": 599,
            "async": true,
            "decorators": [],
            "docstring": "Set the active provider and model.\n\nArgs:\n    provider_id: Provider ID\n    model_id: Model ID\n    \nReturns:\n    Success status\n    \nRaises:\n    Exception: If the request fails",
            "args": [
              "self",
              "provider_id",
              "model_id"
            ],
            "class": "RhetorClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "ask",
            "line": 652,
            "async": true,
            "decorators": [],
            "docstring": "Ask a question and get a response.\n\nArgs:\n    question: The question to ask\n    context_id: Optional context ID\n    options: Additional options for the LLM\n    stream: Whether to stream the response\n    \nReturns:\n    String response or streaming generator\n    \nRaises:\n    Exception: If the request fails",
            "args": [
              "self",
              "question",
              "context_id",
              "options",
              "stream"
            ],
            "class": "RhetorClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "text_generator",
            "line": 675,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "code",
            "line": 701,
            "async": true,
            "decorators": [],
            "docstring": "Generate code for a task.\n\nArgs:\n    task: The coding task description\n    context_id: Optional context ID\n    options: Additional options for the LLM\n    stream: Whether to stream the response\n    \nReturns:\n    String response or streaming generator\n    \nRaises:\n    Exception: If the request fails",
            "args": [
              "self",
              "task",
              "context_id",
              "options",
              "stream"
            ],
            "class": "RhetorClient",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "text_generator",
            "line": 734,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "RhetorClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_client",
            "line": 764,
            "async": true,
            "decorators": [],
            "docstring": "Get a configured Rhetor client instance.\n\nArgs:\n    component_id: ID of the component using the client\n    rhetor_url: URL for Rhetor API\n    \nReturns:\n    Configured RhetorClient",
            "args": [
              "component_id",
              "rhetor_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StreamingResponse",
            "line": 19,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Data class for streaming response chunks.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CompletionResponse",
            "line": 29,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Data class for completion responses.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RhetorClient",
            "line": 37,
            "methods": [
              "__init__",
              "_get_timestamp",
              "on_message",
              "on_error",
              "on_connection"
            ],
            "decorators": [],
            "docstring": "Client for interacting with the Rhetor LLM Management System.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "_maintain_ws_connection",
            "line": 143,
            "async": true
          },
          {
            "name": "_handle_ws_messages",
            "line": 205,
            "async": true
          },
          {
            "name": "on_message",
            "line": 258,
            "async": false
          },
          {
            "name": "on_connection",
            "line": 274,
            "async": false
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 13
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 255
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StreamingResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "CompletionResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RhetorClient",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorClient.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorClient.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorClient.ensure_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorClient._maintain_ws_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 143,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient._handle_ws_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 205,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient.on_message",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 258,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorClient.on_error",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 266,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorClient.on_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 274,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorClient.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 282,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient.stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 367,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient.stream_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 427,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient.get_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 561,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient.set_provider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 599,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RhetorClient.ask",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 652,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorClient.text_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 675,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorClient.code",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 701,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "RhetorClient.text_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 734,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_client",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/rhetor_client.py",
            "line": 764,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 786,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/python/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "rhetor_client.RhetorClient",
            "from": "rhetor_client",
            "name": "RhetorClient",
            "alias": null,
            "line": 8
          },
          {
            "module": "rhetor_client.get_client",
            "from": "rhetor_client",
            "name": "get_client",
            "alias": null,
            "line": 8
          },
          {
            "module": "rhetor_client.CompletionResponse",
            "from": "rhetor_client",
            "name": "CompletionResponse",
            "alias": null,
            "line": 8
          },
          {
            "module": "rhetor_client.StreamingResponse",
            "from": "rhetor_client",
            "name": "StreamingResponse",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 10,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/clients/js/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 6,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Rhetor MCP Bridge.",
            "args": [
              "self",
              "llm_manager",
              "component_name"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 63,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 78,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 167,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from LLM manager.",
            "args": [
              "self"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 205,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "RhetorMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RhetorMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Rhetor's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Rhetor to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "tools.get_all_tools",
            "from": "tools",
            "name": "get_all_tools",
            "alias": null,
            "line": 46
          },
          {
            "module": "tekton.mcp.fastmcp.utils.requests.process_mcp_request",
            "from": "tekton.mcp.fastmcp.utils.requests",
            "name": "process_mcp_request",
            "alias": null,
            "line": 98
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 99
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RhetorMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 63,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/hermes_bridge.py",
            "line": 205,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 230,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_specialist_templates",
            "line": 35,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "List all available specialist templates.\n\nReturns:\n    Dictionary containing available templates and their descriptions",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_dynamic_specialist",
            "line": 78,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Create a new AI specialist dynamically from a template.\n\nArgs:\n    template_id: ID of the template to use (e.g., \"code-reviewer\", \"data-analyst\")\n    specialist_name: Optional custom name for the specialist\n    customization: Optional customization parameters\n    auto_activate: Whether to automatically activate the specialist\n    \nReturns:\n    Dictionary containing creation result and specialist details",
            "args": [
              "template_id",
              "specialist_name",
              "customization",
              "auto_activate"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "clone_specialist",
            "line": 199,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Clone an existing specialist with optional modifications.\n\nArgs:\n    source_specialist_id: ID of the specialist to clone\n    new_specialist_name: Optional name for the cloned specialist\n    modifications: Optional modifications to apply\n    \nReturns:\n    Dictionary containing clone result and new specialist details",
            "args": [
              "source_specialist_id",
              "new_specialist_name",
              "modifications"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "modify_specialist",
            "line": 314,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Modify an existing specialist's configuration.\n\nArgs:\n    specialist_id: ID of the specialist to modify\n    modifications: Configuration changes to apply\n    \nReturns:\n    Dictionary containing modification result",
            "args": [
              "specialist_id",
              "modifications"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "deactivate_specialist",
            "line": 399,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Deactivate a dynamic specialist.\n\nArgs:\n    specialist_id: ID of the specialist to deactivate\n    preserve_history: Whether to preserve conversation history\n    \nReturns:\n    Dictionary containing deactivation result",
            "args": [
              "specialist_id",
              "preserve_history"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_metrics",
            "line": 479,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Get performance metrics for a specialist.\n\nArgs:\n    specialist_id: ID of the specialist\n    \nReturns:\n    Dictionary containing specialist metrics",
            "args": [
              "specialist_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "list_specialist_templates",
            "line": 35,
            "decorator": "@mcp_tool"
          },
          {
            "name": "create_dynamic_specialist",
            "line": 78,
            "decorator": "@mcp_tool"
          },
          {
            "name": "clone_specialist",
            "line": 199,
            "decorator": "@mcp_tool"
          },
          {
            "name": "modify_specialist",
            "line": 314,
            "decorator": "@mcp_tool"
          },
          {
            "name": "deactivate_specialist",
            "line": 399,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_specialist_metrics",
            "line": 479,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.decorators.mcp_tool",
            "from": "tekton.mcp.fastmcp.decorators",
            "name": "mcp_tool",
            "alias": null,
            "line": 16
          },
          {
            "module": "specialist_templates.list_templates",
            "from": "specialist_templates",
            "name": "list_templates",
            "alias": null,
            "line": 43
          },
          {
            "module": "specialist_templates.create_from_template",
            "from": "specialist_templates",
            "name": "create_from_template",
            "alias": null,
            "line": 97
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 98
          },
          {
            "module": "rhetor.core.ai_specialist_manager.AISpecialistConfig",
            "from": "rhetor.core.ai_specialist_manager",
            "name": "AISpecialistConfig",
            "alias": null,
            "line": 126
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 216
          },
          {
            "module": "rhetor.core.ai_specialist_manager.AISpecialistConfig",
            "from": "rhetor.core.ai_specialist_manager",
            "name": "AISpecialistConfig",
            "alias": null,
            "line": 265
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 329
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 414
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 492
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_specialist_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 35,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "create_dynamic_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "clone_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 199,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "modify_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 314,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "deactivate_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 399,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "get_specialist_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/dynamic_specialist_tools.py",
            "line": 479,
            "priority": "high",
            "reason": "Async function, MCP tool"
          }
        ]
      },
      "line_count": 568,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 39,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Get all available LLM models and providers.\n\nReturns:\n    Dictionary containing available models organized by provider",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_default_model",
            "line": 94,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Set the default model for LLM operations.\n\nArgs:\n    provider_id: ID of the provider\n    model_id: ID of the model\n    \nReturns:\n    Dictionary containing operation result",
            "args": [
              "provider_id",
              "model_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_capabilities",
            "line": 134,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Get capabilities and specifications for a specific model.\n\nArgs:\n    provider_id: ID of the provider\n    model_id: ID of the model\n    \nReturns:\n    Dictionary containing model capabilities",
            "args": [
              "provider_id",
              "model_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "test_model_connection",
            "line": 205,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Test connection to a specific model.\n\nArgs:\n    provider_id: ID of the provider\n    model_id: ID of the model\n    \nReturns:\n    Dictionary containing connection test results",
            "args": [
              "provider_id",
              "model_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_performance",
            "line": 258,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Get performance metrics for a specific model.\n\nArgs:\n    provider_id: ID of the provider\n    model_id: ID of the model\n    task_type: Type of task to evaluate performance for\n    test_prompts: Optional list of prompts to test with\n    \nReturns:\n    Dictionary containing performance metrics",
            "args": [
              "provider_id",
              "model_id",
              "task_type",
              "test_prompts"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "manage_model_rotation",
            "line": 337,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Manage automatic model rotation for load balancing or optimization.\n\nArgs:\n    rotation_strategy: Strategy for model rotation\n    models: List of models to rotate between\n    criteria: Criteria for rotation decisions\n    \nReturns:\n    Dictionary containing rotation configuration result",
            "args": [
              "rotation_strategy",
              "models",
              "criteria"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_prompt_template",
            "line": 402,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Create a new prompt template.\n\nArgs:\n    name: Name of the template\n    template: Template content with variable placeholders\n    variables: List of variables used in the template\n    description: Optional description\n    tags: Optional tags for categorization\n    \nReturns:\n    Dictionary containing created template information",
            "args": [
              "name",
              "template",
              "variables",
              "description",
              "tags"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "optimize_prompt",
            "line": 461,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Optimize a prompt for better performance.\n\nArgs:\n    template_id: ID of the template to optimize\n    optimization_goals: Goals for optimization\n    context: Context information for optimization\n    \nReturns:\n    Dictionary containing optimized prompt",
            "args": [
              "template_id",
              "optimization_goals",
              "context"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "validate_prompt_syntax",
            "line": 534,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Validate prompt syntax and structure.\n\nArgs:\n    prompt_text: The prompt text to validate\n    template_variables: Expected template variables\n    \nReturns:\n    Dictionary containing validation results",
            "args": [
              "prompt_text",
              "template_variables"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_prompt_history",
            "line": 605,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Get prompt usage history.\n\nArgs:\n    template_id: Filter by specific template\n    user_id: Filter by specific user\n    limit: Maximum number of results\n    \nReturns:\n    Dictionary containing prompt history",
            "args": [
              "template_id",
              "user_id",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_prompt_performance",
            "line": 663,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Analyze prompt performance across different contexts.\n\nArgs:\n    prompt_text: The prompt to analyze\n    test_contexts: List of contexts to test against\n    metrics_to_analyze: Specific metrics to focus on\n    \nReturns:\n    Dictionary containing performance analysis",
            "args": [
              "prompt_text",
              "test_contexts",
              "metrics_to_analyze"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "manage_prompt_library",
            "line": 733,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Manage the prompt template library.\n\nArgs:\n    action: Action to perform (list, search, categorize, delete)\n    template_id: Specific template ID for operations\n    category: Category for filtering or categorization\n    search_term: Search term for finding templates\n    \nReturns:\n    Dictionary containing library management results",
            "args": [
              "action",
              "template_id",
              "category",
              "search_term"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_context_usage",
            "line": 868,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Analyze context usage patterns and efficiency.\n\nArgs:\n    context_id: ID of the context to analyze\n    time_period: Time period for analysis\n    include_metrics: Whether to include detailed metrics\n    \nReturns:\n    Dictionary containing context usage analysis",
            "args": [
              "context_id",
              "time_period",
              "include_metrics"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "optimize_context_window",
            "line": 961,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Optimize the context window for better performance.\n\nArgs:\n    context_id: ID of the context to optimize\n    optimization_strategy: Strategy for optimization\n    preserve_recent_messages: Whether to preserve recent messages\n    \nReturns:\n    Dictionary containing optimization results",
            "args": [
              "context_id",
              "optimization_strategy",
              "preserve_recent_messages"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "track_context_history",
            "line": 1054,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Track and analyze context history patterns.\n\nArgs:\n    context_id: ID of the context to track\n    analysis_depth: Depth of analysis (standard, detailed, comprehensive)\n    include_token_counts: Whether to include token count information\n    \nReturns:\n    Dictionary containing context history tracking",
            "args": [
              "context_id",
              "analysis_depth",
              "include_token_counts"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "compress_context",
            "line": 1164,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Compress context to reduce token usage while preserving important information.\n\nArgs:\n    context_id: ID of the context to compress\n    compression_ratio: Target compression ratio (0.0 to 1.0)\n    preserve_key_information: Whether to preserve key information\n    \nReturns:\n    Dictionary containing compression results",
            "args": [
              "context_id",
              "compression_ratio",
              "preserve_key_information"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_ai_specialists",
            "line": 1277,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "List available AI specialists and their current status.\n\nArgs:\n    filter_by_status: Filter by status (active, inactive, starting, error)\n    filter_by_type: Filter by specialist type\n    filter_by_component: Filter by component ID\n    \nReturns:\n    Dictionary containing list of AI specialists",
            "args": [
              "filter_by_status",
              "filter_by_type",
              "filter_by_component"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "activate_ai_specialist",
            "line": 1398,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Activate an AI specialist for use.\n\nArgs:\n    specialist_id: ID of the specialist to activate\n    initialization_context: Optional context for initialization\n    \nReturns:\n    Dictionary containing activation result",
            "args": [
              "specialist_id",
              "initialization_context"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message_to_specialist",
            "line": 1462,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Send a message to a specific AI specialist.\n\nArgs:\n    specialist_id: ID of the target specialist\n    message: Message content\n    context_id: Optional context ID for conversation tracking\n    message_type: Type of message (chat, coordination, task_assignment)\n    \nReturns:\n    Dictionary containing message result",
            "args": [
              "specialist_id",
              "message",
              "context_id",
              "message_type"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "orchestrate_team_chat",
            "line": 1538,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Orchestrate a team chat between multiple AI specialists.\n\nArgs:\n    topic: Discussion topic\n    specialists: List of specialist IDs to include\n    initial_prompt: Initial prompt to start discussion\n    max_rounds: Maximum rounds of discussion\n    orchestration_style: Style of orchestration (collaborative, directive, exploratory)\n    \nReturns:\n    Dictionary containing team chat results",
            "args": [
              "topic",
              "specialists",
              "initial_prompt",
              "max_rounds",
              "orchestration_style"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_conversation_history",
            "line": 1658,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Get conversation history for an AI specialist.\n\nArgs:\n    specialist_id: ID of the specialist\n    conversation_id: Optional specific conversation ID\n    limit: Maximum number of messages to return\n    \nReturns:\n    Dictionary containing conversation history",
            "args": [
              "specialist_id",
              "conversation_id",
              "limit"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "configure_ai_orchestration",
            "line": 1728,
            "async": true,
            "decorators": [
              "@mcp_tool"
            ],
            "docstring": "Configure AI orchestration settings and policies.\n\nArgs:\n    settings: Configuration settings to apply\n    apply_immediately: Whether to apply settings immediately\n    \nReturns:\n    Dictionary containing configuration result",
            "args": [
              "settings",
              "apply_immediately"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 1904,
            "async": false,
            "decorators": [],
            "docstring": "Get all Rhetor MCP tools.",
            "args": [
              "component_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "safe_tool_dict",
            "line": 1913,
            "async": false,
            "decorators": [],
            "docstring": "Extract tool metadata without circular references.",
            "args": [
              "tool_func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "get_available_models",
            "line": 39,
            "decorator": "@mcp_tool"
          },
          {
            "name": "set_default_model",
            "line": 94,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_model_capabilities",
            "line": 134,
            "decorator": "@mcp_tool"
          },
          {
            "name": "test_model_connection",
            "line": 205,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_model_performance",
            "line": 258,
            "decorator": "@mcp_tool"
          },
          {
            "name": "manage_model_rotation",
            "line": 337,
            "decorator": "@mcp_tool"
          },
          {
            "name": "create_prompt_template",
            "line": 402,
            "decorator": "@mcp_tool"
          },
          {
            "name": "optimize_prompt",
            "line": 461,
            "decorator": "@mcp_tool"
          },
          {
            "name": "validate_prompt_syntax",
            "line": 534,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_prompt_history",
            "line": 605,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_prompt_performance",
            "line": 663,
            "decorator": "@mcp_tool"
          },
          {
            "name": "manage_prompt_library",
            "line": 733,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_context_usage",
            "line": 868,
            "decorator": "@mcp_tool"
          },
          {
            "name": "optimize_context_window",
            "line": 961,
            "decorator": "@mcp_tool"
          },
          {
            "name": "track_context_history",
            "line": 1054,
            "decorator": "@mcp_tool"
          },
          {
            "name": "compress_context",
            "line": 1164,
            "decorator": "@mcp_tool"
          },
          {
            "name": "list_ai_specialists",
            "line": 1277,
            "decorator": "@mcp_tool"
          },
          {
            "name": "activate_ai_specialist",
            "line": 1398,
            "decorator": "@mcp_tool"
          },
          {
            "name": "send_message_to_specialist",
            "line": 1462,
            "decorator": "@mcp_tool"
          },
          {
            "name": "orchestrate_team_chat",
            "line": 1538,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_specialist_conversation_history",
            "line": 1658,
            "decorator": "@mcp_tool"
          },
          {
            "name": "configure_ai_orchestration",
            "line": 1728,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.decorators.mcp_tool",
            "from": "tekton.mcp.fastmcp.decorators",
            "name": "mcp_tool",
            "alias": null,
            "line": 16
          },
          {
            "module": "random",
            "alias": null,
            "line": 221
          },
          {
            "module": "random",
            "alias": null,
            "line": 278
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 423
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 424
          },
          {
            "module": "re",
            "alias": null,
            "line": 558
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 622
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 622
          },
          {
            "module": "random",
            "alias": null,
            "line": 623
          },
          {
            "module": "random",
            "alias": null,
            "line": 683
          },
          {
            "module": "random",
            "alias": null,
            "line": 885
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 886
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 886
          },
          {
            "module": "random",
            "alias": null,
            "line": 978
          },
          {
            "module": "random",
            "alias": null,
            "line": 1071
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1072
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 1072
          },
          {
            "module": "random",
            "alias": null,
            "line": 1181
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 1295
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 1414
          },
          {
            "module": "random",
            "alias": null,
            "line": 1426
          },
          {
            "module": "time",
            "alias": null,
            "line": 1427
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 1482
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 1496
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1497
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 1560
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1575
          },
          {
            "module": "random",
            "alias": null,
            "line": 1576
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 1676
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1689
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 1689
          },
          {
            "module": "random",
            "alias": null,
            "line": 1690
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 1744
          },
          {
            "module": "dynamic_specialist_tools.dynamic_specialist_tools",
            "from": "dynamic_specialist_tools",
            "name": "dynamic_specialist_tools",
            "alias": null,
            "line": 1869
          },
          {
            "module": "dynamic_specialist_tools.dynamic_specialist_tools",
            "from": "dynamic_specialist_tools",
            "name": "dynamic_specialist_tools",
            "alias": null,
            "line": 1957
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 39,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "set_default_model",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_model_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 134,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "test_model_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 205,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_model_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "manage_model_rotation",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "create_prompt_template",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 402,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "optimize_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 461,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "validate_prompt_syntax",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 534,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_prompt_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 605,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_prompt_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 663,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "manage_prompt_library",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 733,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_context_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 868,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "optimize_context_window",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 961,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "track_context_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1054,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "compress_context",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1164,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "list_ai_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1277,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "activate_ai_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1398,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "send_message_to_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1462,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "orchestrate_team_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1538,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "get_specialist_conversation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1658,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "configure_ai_orchestration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1728,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1904,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "safe_tool_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools.py",
            "line": 1913,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1964,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "get_all_capabilities",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": "Get all Rhetor MCP capabilities.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Get all Rhetor MCP tools.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "capabilities.LLMManagementCapability",
            "from": "capabilities",
            "name": "LLMManagementCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.PromptEngineeringCapability",
            "from": "capabilities",
            "name": "PromptEngineeringCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.ContextManagementCapability",
            "from": "capabilities",
            "name": "ContextManagementCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.AIOrchestrationCapability",
            "from": "capabilities",
            "name": "AIOrchestrationCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "tools.llm_management_tools",
            "from": "tools",
            "name": "llm_management_tools",
            "alias": null,
            "line": 15
          },
          {
            "module": "tools.prompt_engineering_tools",
            "from": "tools",
            "name": "prompt_engineering_tools",
            "alias": null,
            "line": 15
          },
          {
            "module": "tools.context_management_tools",
            "from": "tools",
            "name": "context_management_tools",
            "alias": null,
            "line": 15
          },
          {
            "module": "tools.ai_orchestration_tools",
            "from": "tools",
            "name": "ai_orchestration_tools",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/__init__.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/__init__.py",
            "line": 33,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 49,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/streaming_tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "streaming_tool",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Decorator to mark a tool as supporting streaming.",
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message_to_specialist_stream",
            "line": 42,
            "async": true,
            "decorators": [
              "@mcp_tool",
              "@streaming_tool"
            ],
            "docstring": "Send a message to a specific AI specialist with streaming response support.\n\nThis enhanced version supports real-time streaming of AI responses through\nServer-Sent Events (SSE), providing immediate feedback for long responses.\n\nArgs:\n    specialist_id: ID of the target specialist\n    message: Message content\n    context_id: Optional context ID for conversation tracking\n    message_type: Type of message (chat, coordination, task_assignment)\n    _stream_callback: Internal callback for streaming updates\n    \nReturns:\n    Dictionary containing message result",
            "args": [
              "specialist_id",
              "message",
              "context_id",
              "message_type",
              "_stream_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "orchestrate_team_chat_stream",
            "line": 274,
            "async": true,
            "decorators": [
              "@mcp_tool",
              "@streaming_tool"
            ],
            "docstring": "Orchestrate a team chat between multiple AI specialists with real-time streaming.\n\nThis enhanced version streams the conversation as it happens, providing\nreal-time visibility into the multi-specialist discussion.\n\nArgs:\n    topic: Discussion topic\n    specialists: List of specialist IDs to include\n    initial_prompt: Initial prompt to start discussion\n    max_rounds: Maximum rounds of discussion\n    orchestration_style: Style of orchestration (collaborative, directive, exploratory)\n    _stream_callback: Internal callback for streaming updates\n    \nReturns:\n    Dictionary containing team chat results",
            "args": [
              "topic",
              "specialists",
              "initial_prompt",
              "max_rounds",
              "orchestration_style",
              "_stream_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "send_message_to_specialist_stream",
            "line": 42,
            "decorator": "@mcp_tool"
          },
          {
            "name": "orchestrate_team_chat_stream",
            "line": 274,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.decorators.mcp_tool",
            "from": "tekton.mcp.fastmcp.decorators",
            "name": "mcp_tool",
            "alias": null,
            "line": 16
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 67
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 184
          },
          {
            "module": "tools_integration.get_mcp_tools_integration",
            "from": "tools_integration",
            "name": "get_mcp_tools_integration",
            "alias": null,
            "line": 301
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/streaming_tools.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/streaming_tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "streaming_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/streaming_tools.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "send_message_to_specialist_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/streaming_tools.py",
            "line": 42,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "orchestrate_team_chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/streaming_tools.py",
            "line": 274,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          }
        ]
      },
      "line_count": 429,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "LLMManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 32,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "LLMManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 53,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "PromptEngineeringCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 65,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "PromptEngineeringCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 86,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ContextManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 96,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ContextManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 117,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "AIOrchestrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 129,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "AIOrchestrationCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMManagementCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for managing LLM models and providers.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PromptEngineeringCapability",
            "line": 45,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for prompt engineering and template management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextManagementCapability",
            "line": 78,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for context and conversation management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AIOrchestrationCapability",
            "line": 109,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for AI specialist orchestration and management.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMManagementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMManagementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PromptEngineeringCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PromptEngineeringCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 53,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PromptEngineeringCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ContextManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 78,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ContextManagementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 86,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextManagementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 96,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "AIOrchestrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 109,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AIOrchestrationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 117,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AIOrchestrationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/capabilities.py",
            "line": 129,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 149,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/init_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "initialize_mcp_integration",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the MCP tools integration with live components.\n\nThis function creates and configures the integration layer that connects\nMCP tools to the actual AISpecialistManager and AIMessagingIntegration.\n\nArgs:\n    specialist_manager: The AI specialist manager instance\n    messaging_integration: The AI messaging integration instance\n    hermes_url: URL of the Hermes service\n    \nReturns:\n    Configured MCPToolsIntegration instance",
            "args": [
              "specialist_manager",
              "messaging_integration",
              "hermes_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "setup_hermes_subscriptions",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": "Set up Hermes message bus subscriptions for cross-component AI communication.\n\nArgs:\n    integration: The MCP tools integration instance",
            "args": [
              "integration"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "message_handler",
            "line": 78,
            "async": true,
            "decorators": [],
            "docstring": "Handle incoming messages from Hermes.",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "test_mcp_integration",
            "line": 110,
            "async": true,
            "decorators": [],
            "docstring": "Test the MCP tools integration to ensure it's working properly.\n\nArgs:\n    integration: The MCP tools integration instance",
            "args": [
              "integration"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "rhetor.core.ai_specialist_manager.AISpecialistManager",
            "from": "rhetor.core.ai_specialist_manager",
            "name": "AISpecialistManager",
            "alias": null,
            "line": 11
          },
          {
            "module": "rhetor.core.ai_messaging_integration.AIMessagingIntegration",
            "from": "rhetor.core.ai_messaging_integration",
            "name": "AIMessagingIntegration",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.core.mcp.tools_integration.set_mcp_tools_integration",
            "from": "rhetor.core.mcp.tools_integration",
            "name": "set_mcp_tools_integration",
            "alias": null,
            "line": 13
          },
          {
            "module": "rhetor.core.mcp.tools_integration.MCPToolsIntegration",
            "from": "rhetor.core.mcp.tools_integration",
            "name": "MCPToolsIntegration",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "initialize_mcp_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/init_integration.py",
            "line": 18,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "setup_hermes_subscriptions",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/init_integration.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "message_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/init_integration.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "test_mcp_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/init_integration.py",
            "line": 110,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 145,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Initialize MCP tools integration.\n\nArgs:\n    specialist_manager: AI specialist manager instance\n    messaging_integration: AI messaging integration instance\n    hermes_url: Hermes service URL",
            "args": [
              "self",
              "specialist_manager",
              "messaging_integration",
              "hermes_url"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_message_bus",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": "Initialize connection to Hermes message bus.",
            "args": [
              "self"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_ai_specialists",
            "line": 90,
            "async": true,
            "decorators": [],
            "docstring": "List available AI specialists and their current status (live implementation).\n\nArgs:\n    filter_by_status: Filter by status\n    filter_by_type: Filter by specialist type\n    filter_by_component: Filter by component ID\n    \nReturns:\n    Dictionary containing list of AI specialists",
            "args": [
              "self",
              "filter_by_status",
              "filter_by_type",
              "filter_by_component"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "activate_ai_specialist",
            "line": 172,
            "async": true,
            "decorators": [],
            "docstring": "Activate an AI specialist for use (live implementation).\n\nArgs:\n    specialist_id: ID of the specialist to activate\n    initialization_context: Optional context for initialization\n    \nReturns:\n    Dictionary containing activation result",
            "args": [
              "self",
              "specialist_id",
              "initialization_context"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "send_message_to_specialist",
            "line": 218,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to a specific AI specialist (live implementation).\n\nArgs:\n    specialist_id: ID of the target specialist\n    message: Message content\n    context_id: Optional context ID\n    message_type: Type of message\n    \nReturns:\n    Dictionary containing message result",
            "args": [
              "self",
              "specialist_id",
              "message",
              "context_id",
              "message_type"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "orchestrate_team_chat",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Orchestrate a team chat between multiple AI specialists (live implementation).\n\nArgs:\n    topic: Discussion topic\n    specialists: List of specialist IDs\n    initial_prompt: Initial prompt\n    max_rounds: Maximum rounds\n    orchestration_style: Style of orchestration\n    \nReturns:\n    Dictionary containing team chat results",
            "args": [
              "self",
              "topic",
              "specialists",
              "initial_prompt",
              "max_rounds",
              "orchestration_style"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_specialist_conversation_history",
            "line": 385,
            "async": true,
            "decorators": [],
            "docstring": "Get conversation history for an AI specialist (live implementation).\n\nArgs:\n    specialist_id: ID of the specialist\n    conversation_id: Optional conversation ID\n    limit: Maximum messages to return\n    \nReturns:\n    Dictionary containing conversation history",
            "args": [
              "self",
              "specialist_id",
              "conversation_id",
              "limit"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "configure_ai_orchestration",
            "line": 430,
            "async": true,
            "decorators": [],
            "docstring": "Configure AI orchestration settings (live implementation).\n\nArgs:\n    settings: Configuration settings\n    apply_immediately: Whether to apply immediately\n    \nReturns:\n    Dictionary containing configuration result",
            "args": [
              "self",
              "settings",
              "apply_immediately"
            ],
            "class": "MCPToolsIntegration",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_mcp_tools_integration",
            "line": 522,
            "async": false,
            "decorators": [],
            "docstring": "Get the global MCP tools integration instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_mcp_tools_integration",
            "line": 531,
            "async": false,
            "decorators": [],
            "docstring": "Set the global MCP tools integration instance.",
            "args": [
              "integration"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPToolsIntegration",
            "line": 39,
            "methods": [
              "__init__",
              "_initialize_message_bus"
            ],
            "decorators": [],
            "docstring": "Integration layer connecting MCP tools to live Rhetor components.\n\nThis class provides real implementations for MCP tool functions,\nreplacing mock data with actual component interactions.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "rhetor.core.ai_specialist_manager.AISpecialistManager",
            "from": "rhetor.core.ai_specialist_manager",
            "name": "AISpecialistManager",
            "alias": null,
            "line": 14
          },
          {
            "module": "rhetor.core.ai_messaging_integration.AIMessagingIntegration",
            "from": "rhetor.core.ai_messaging_integration",
            "name": "AIMessagingIntegration",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 26
          },
          {
            "module": "Hermes.hermes.core.message_bus.MessageBus",
            "from": "Hermes.hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 30
          },
          {
            "module": "logging",
            "alias": null,
            "line": 33
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPToolsIntegration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 39,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPToolsIntegration.list_ai_specialists",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 90,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MCPToolsIntegration.activate_ai_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 172,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPToolsIntegration.send_message_to_specialist",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 218,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPToolsIntegration.orchestrate_team_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MCPToolsIntegration.get_specialist_conversation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 385,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPToolsIntegration.configure_ai_orchestration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 430,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_mcp_tools_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 522,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "set_mcp_tools_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/core/mcp/tools_integration.py",
            "line": 531,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 535,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the simulated provider",
            "args": [
              "self"
            ],
            "class": "SimulatedProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize",
            "line": 26,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the simulated provider - always succeeds.\n\nReturns:\n    True always",
            "args": [
              "self"
            ],
            "class": "SimulatedProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Get available simulated models.\n\nReturns:\n    List of dictionaries with model info",
            "args": [
              "self"
            ],
            "class": "SimulatedProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 48,
            "async": true,
            "decorators": [],
            "docstring": "Complete a message with the simulated provider.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "SimulatedProvider",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 116,
            "async": true,
            "decorators": [],
            "docstring": "Stream a completion from the simulated provider.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "SimulatedProvider",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "chat_complete",
            "line": 171,
            "async": true,
            "decorators": [],
            "docstring": "Complete a chat conversation with the simulated provider.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "SimulatedProvider",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 245,
            "async": true,
            "decorators": [],
            "docstring": "Stream a chat completion from the simulated provider.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "SimulatedProvider",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SimulatedProvider",
            "line": 16,
            "methods": [
              "__init__",
              "get_available_models"
            ],
            "decorators": [],
            "docstring": "Simulated provider for testing and fallback",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "base.LLMProvider",
            "from": "base",
            "name": "LLMProvider",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SimulatedProvider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimulatedProvider.get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SimulatedProvider.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
            "line": 48,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SimulatedProvider.stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SimulatedProvider.chat_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
            "line": 171,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SimulatedProvider.chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/simulated.py",
            "line": 245,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 304,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the OpenAI provider",
            "args": [
              "self"
            ],
            "class": "OpenAIProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize",
            "line": 30,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the OpenAI client.\n\nReturns:\n    True if initialization successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "OpenAIProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 62,
            "async": false,
            "decorators": [],
            "docstring": "Get available OpenAI models.\n\nReturns:\n    List of dictionaries with model info",
            "args": [
              "self"
            ],
            "class": "OpenAIProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 78,
            "async": true,
            "decorators": [],
            "docstring": "Complete a message with OpenAI.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "OpenAIProvider",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 150,
            "async": true,
            "decorators": [],
            "docstring": "Stream a completion from OpenAI.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "OpenAIProvider",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "chat_complete",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Complete a chat conversation with OpenAI.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "OpenAIProvider",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 274,
            "async": true,
            "decorators": [],
            "docstring": "Stream a chat completion from OpenAI.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "OpenAIProvider",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "OpenAIProvider",
            "line": 17,
            "methods": [
              "__init__",
              "get_available_models"
            ],
            "decorators": [],
            "docstring": "Provider for OpenAI models",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "base.LLMProvider",
            "from": "base",
            "name": "LLMProvider",
            "alias": null,
            "line": 13
          },
          {
            "module": "openai.AsyncOpenAI",
            "from": "openai",
            "name": "AsyncOpenAI",
            "alias": null,
            "line": 44
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "OpenAIProvider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "OpenAIProvider.get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
            "line": 62,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "OpenAIProvider.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "OpenAIProvider.stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
            "line": 150,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "OpenAIProvider.chat_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "OpenAIProvider.chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/openai.py",
            "line": 274,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 325,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Anthropic provider",
            "args": [
              "self"
            ],
            "class": "AnthropicProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize",
            "line": 30,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the Anthropic client.\n\nReturns:\n    True if initialization successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "AnthropicProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 60,
            "async": false,
            "decorators": [],
            "docstring": "Get available Claude models.\n\nReturns:\n    List of dictionaries with model info",
            "args": [
              "self"
            ],
            "class": "AnthropicProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "Complete a message with Claude.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "AnthropicProvider",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Stream a completion from Claude.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "AnthropicProvider",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "chat_complete",
            "line": 194,
            "async": true,
            "decorators": [],
            "docstring": "Complete a chat conversation with Claude.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "AnthropicProvider",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 277,
            "async": true,
            "decorators": [],
            "docstring": "Stream a chat completion from Claude.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "AnthropicProvider",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AnthropicProvider",
            "line": 17,
            "methods": [
              "__init__",
              "get_available_models"
            ],
            "decorators": [],
            "docstring": "Provider for Anthropic Claude models",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "base.LLMProvider",
            "from": "base",
            "name": "LLMProvider",
            "alias": null,
            "line": 13
          },
          {
            "module": "anthropic",
            "alias": null,
            "line": 44
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AnthropicProvider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AnthropicProvider.get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
            "line": 60,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AnthropicProvider.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AnthropicProvider.stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AnthropicProvider.chat_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
            "line": 194,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnthropicProvider.chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/anthropic.py",
            "line": 277,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 333,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Ollama provider",
            "args": [
              "self"
            ],
            "class": "OllamaProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize",
            "line": 32,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the Ollama client.\n\nReturns:\n    True if initialization successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "OllamaProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 60,
            "async": false,
            "decorators": [],
            "docstring": "Get available Ollama models.\n\nReturns:\n    List of dictionaries with model info",
            "args": [
              "self"
            ],
            "class": "OllamaProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 80,
            "async": true,
            "decorators": [],
            "docstring": "Complete a message with Ollama.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "OllamaProvider",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Stream a completion from Ollama.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "OllamaProvider",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "chat_complete",
            "line": 241,
            "async": true,
            "decorators": [],
            "docstring": "Complete a chat conversation with Ollama.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "OllamaProvider",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 334,
            "async": true,
            "decorators": [],
            "docstring": "Stream a chat completion from Ollama.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "OllamaProvider",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "OllamaProvider",
            "line": 18,
            "methods": [
              "__init__",
              "get_available_models"
            ],
            "decorators": [],
            "docstring": "Provider for Ollama local LLMs",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "base.LLMProvider",
            "from": "base",
            "name": "LLMProvider",
            "alias": null,
            "line": 14
          },
          {
            "module": "json",
            "alias": null,
            "line": 230
          },
          {
            "module": "json",
            "alias": null,
            "line": 407
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "OllamaProvider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "OllamaProvider.get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
            "line": 60,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "OllamaProvider.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "OllamaProvider.stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "OllamaProvider.chat_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
            "line": 241,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "OllamaProvider.chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/ollama.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 416,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM provider.\n\nArgs:\n    provider_id: Unique identifier for the provider\n    display_name: User-friendly name for the provider",
            "args": [
              "self",
              "provider_id",
              "display_name"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 29,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the provider.\n\nReturns:\n    True if initialization successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize",
            "line": 45,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Provider-specific initialization.\n\nReturns:\n    True if initialization successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_available",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Check if the provider is available.\n\nReturns:\n    True if the provider is available, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 64,
            "async": false,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get available models for this provider.\n\nReturns:\n    List of dictionaries with model info",
            "args": [
              "self"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 74,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Complete a message with the LLM.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stream",
            "line": 98,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Stream a completion from the LLM.\n\nArgs:\n    message: User message\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "message",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat_complete",
            "line": 120,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Complete a chat conversation with the LLM.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    streaming: Whether to stream the response\n    options: Additional options for the LLM\n    \nReturns:\n    Dictionary with response data",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "streaming",
              "options"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 144,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Stream a chat completion from the LLM.\n\nArgs:\n    messages: List of message dictionaries with \"role\" and \"content\"\n    system_prompt: Optional system prompt\n    model: Optional model to use (defaults to provider default)\n    options: Additional options for the LLM\n    \nYields:\n    Completion chunks as they are generated",
            "args": [
              "self",
              "messages",
              "system_prompt",
              "model",
              "options"
            ],
            "class": "LLMProvider",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMProvider",
            "line": 13,
            "methods": [
              "__init__",
              "is_available",
              "get_available_models"
            ],
            "decorators": [],
            "docstring": "Abstract base class for LLM providers",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "abc.ABC",
            "from": "abc",
            "name": "ABC",
            "alias": null,
            "line": 8
          },
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMProvider",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMProvider.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMProvider.is_available",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMProvider.get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMProvider.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 74,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMProvider.stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMProvider.chat_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMProvider.chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Rhetor/rhetor/models/providers/base.py",
            "line": 144,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 163,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 60,
    "total_functions": 619,
    "total_classes": 90,
    "total_landmarks": 630,
    "patterns": [
      "websocket",
      "fastapi",
      "async",
      "error_handling",
      "mcp",
      "singleton"
    ],
    "api_endpoints": 86,
    "mcp_tools": 30
  }
}