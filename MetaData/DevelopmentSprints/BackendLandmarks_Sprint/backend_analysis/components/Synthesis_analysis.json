{
  "component": "Synthesis",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/setup.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 6
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 6
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 52,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "emit",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "record"
            ],
            "class": "NullHandler",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "NullHandler",
            "line": 27,
            "methods": [
              "emit"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "core.execution_models.ExecutionStage",
            "from": "core.execution_models",
            "name": "ExecutionStage",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.execution_models.ExecutionStatus",
            "from": "core.execution_models",
            "name": "ExecutionStatus",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.execution_models.ExecutionPriority",
            "from": "core.execution_models",
            "name": "ExecutionPriority",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.execution_models.ExecutionResult",
            "from": "core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.execution_models.ExecutionPlan",
            "from": "core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.execution_models.ExecutionContext",
            "from": "core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.execution_engine.ExecutionEngine",
            "from": "core.execution_engine",
            "name": "ExecutionEngine",
            "alias": null,
            "line": 16
          },
          {
            "module": "logging",
            "alias": null,
            "line": 23
          },
          {
            "module": "logging.NullHandler",
            "from": "logging",
            "name": "NullHandler",
            "alias": null,
            "line": 25
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "NullHandler",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/__init__.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "NullHandler.emit",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/__init__.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 31,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/__main__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 2
          },
          {
            "module": "sys",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 23,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
      "analysis": {
        "functions": [
          {
            "name": "handle_command_step",
            "line": 24,
            "async": true,
            "decorators": [],
            "docstring": "Handle a command execution step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with command output",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_function_step",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": "Handle a function execution step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    function_registry: Optional function registry\n    \nReturns:\n    ExecutionResult with function output",
            "args": [
              "parameters",
              "context",
              "function_registry"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_api_step",
            "line": 224,
            "async": true,
            "decorators": [],
            "docstring": "Handle an API request step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with API response",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_condition_step",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Handle a conditional execution step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with condition result",
            "args": [
              "parameters",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_subprocess_step",
            "line": 407,
            "async": true,
            "decorators": [],
            "docstring": "Handle a subprocess execution step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with subprocess results",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_notify_step",
            "line": 515,
            "async": true,
            "decorators": [],
            "docstring": "Handle a notification step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with notification status",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_wait_step",
            "line": 656,
            "async": true,
            "decorators": [],
            "docstring": "Handle a wait step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with wait status",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_variable_step",
            "line": 703,
            "async": true,
            "decorators": [],
            "docstring": "Handle variable manipulation step.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with variable operation status",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "handle_llm_step",
            "line": 881,
            "async": true,
            "decorators": [],
            "docstring": "Handle an LLM processing step using tekton-llm-client.\n\nArgs:\n    parameters: Step parameters\n    context: Execution context\n    \nReturns:\n    ExecutionResult with LLM response",
            "args": [
              "parameters",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 15
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 15
          },
          {
            "module": "synthesis.core.condition_evaluator.evaluate_condition",
            "from": "synthesis.core.condition_evaluator",
            "name": "evaluate_condition",
            "alias": null,
            "line": 16
          },
          {
            "module": "synthesis.core.loop_handlers.handle_loop_step",
            "from": "synthesis.core.loop_handlers",
            "name": "handle_loop_step",
            "alias": null,
            "line": 17
          },
          {
            "module": "synthesis.core.llm_adapter.get_llm_adapter",
            "from": "synthesis.core.llm_adapter",
            "name": "get_llm_adapter",
            "alias": null,
            "line": 18
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 35
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 236
          },
          {
            "module": "json",
            "alias": null,
            "line": 310
          },
          {
            "module": "synthesis.core.execution_engine.ExecutionEngine",
            "from": "synthesis.core.execution_engine",
            "name": "ExecutionEngine",
            "alias": null,
            "line": 444
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPlan",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 448
          },
          {
            "module": "synthesis.core.events.EventManager",
            "from": "synthesis.core.events",
            "name": "EventManager",
            "alias": null,
            "line": 551
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 599
          },
          {
            "module": "tekton_llm_client.models.ChatMessage",
            "from": "tekton_llm_client.models",
            "name": "ChatMessage",
            "alias": null,
            "line": 995
          },
          {
            "module": "tekton_llm_client.models.ChatRole",
            "from": "tekton_llm_client.models",
            "name": "ChatRole",
            "alias": null,
            "line": 995
          },
          {
            "module": "tekton_llm_client.models.ChatCompletionOptions",
            "from": "tekton_llm_client.models",
            "name": "ChatCompletionOptions",
            "alias": null,
            "line": 995
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "handle_command_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 24,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_function_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 135,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_api_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 224,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_condition_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_subprocess_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 407,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_notify_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 515,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_wait_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 656,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_variable_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 703,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "handle_llm_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/step_handlers.py",
            "line": 881,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 1103,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the execution engine.\n\nArgs:\n    data_dir: Directory for storing execution data\n    hermes_url: URL of the Hermes API\n    max_concurrent_executions: Maximum number of concurrent executions",
            "args": [
              "self",
              "data_dir",
              "hermes_url",
              "max_concurrent_executions"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_plan",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Execute a plan asynchronously.\n\nArgs:\n    plan: Execution plan or plan data\n    context: Optional execution context or context data\n    \nReturns:\n    Execution context ID",
            "args": [
              "self",
              "plan",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_execute_plan_background",
            "line": 123,
            "async": true,
            "decorators": [],
            "docstring": "Execute a plan in the background.\n\nArgs:\n    plan: Execution plan\n    context: Execution context",
            "args": [
              "self",
              "plan",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_planning_stage",
            "line": 244,
            "async": true,
            "decorators": [],
            "docstring": "Execute the planning stage.\n\nArgs:\n    plan: Execution plan\n    context: Execution context",
            "args": [
              "self",
              "plan",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_preparation_stage",
            "line": 268,
            "async": true,
            "decorators": [],
            "docstring": "Execute the preparation stage.\n\nArgs:\n    plan: Execution plan\n    context: Execution context",
            "args": [
              "self",
              "plan",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_steps",
            "line": 285,
            "async": true,
            "decorators": [],
            "docstring": "Execute plan steps.\n\nArgs:\n    steps: List of steps to execute\n    context: Execution context\n    \nReturns:\n    Execution results",
            "args": [
              "self",
              "steps",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_execute_validation_stage",
            "line": 367,
            "async": true,
            "decorators": [],
            "docstring": "Execute the validation stage.\n\nArgs:\n    plan: Execution plan\n    context: Execution context\n    execution_result: Results from step execution",
            "args": [
              "self",
              "plan",
              "context",
              "execution_result"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_integration_stage",
            "line": 396,
            "async": true,
            "decorators": [],
            "docstring": "Execute the integration stage.\n\nArgs:\n    plan: Execution plan\n    context: Execution context",
            "args": [
              "self",
              "plan",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save_execution_to_history",
            "line": 409,
            "async": false,
            "decorators": [],
            "docstring": "Save execution to history.\n\nArgs:\n    context: Execution context",
            "args": [
              "self",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_before_step",
            "line": 419,
            "async": true,
            "decorators": [],
            "docstring": "Called before a step is executed.",
            "args": [
              "self",
              "step_id",
              "step_type",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_after_step",
            "line": 424,
            "async": true,
            "decorators": [],
            "docstring": "Called after a step is executed.",
            "args": [
              "self",
              "step_id",
              "step_type",
              "result",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_step_error",
            "line": 430,
            "async": true,
            "decorators": [],
            "docstring": "Called when a step execution encounters an error.",
            "args": [
              "self",
              "step_id",
              "step_type",
              "error",
              "context"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_execution_status",
            "line": 437,
            "async": true,
            "decorators": [],
            "docstring": "Get the status of an execution.\n\nArgs:\n    execution_id: Execution context ID\n    \nReturns:\n    Execution status information",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cancel_execution",
            "line": 467,
            "async": true,
            "decorators": [],
            "docstring": "Cancel an execution.\n\nArgs:\n    execution_id: Execution context ID\n    \nReturns:\n    True if cancelled successfully",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_function",
            "line": 491,
            "async": true,
            "decorators": [],
            "docstring": "Register a function for use in function steps.\n\nArgs:\n    name: Function name\n    function: Function reference",
            "args": [
              "self",
              "name",
              "function"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_callback",
            "line": 502,
            "async": true,
            "decorators": [],
            "docstring": "Register a callback function.\n\nArgs:\n    event: Event name\n    callback: Callback function",
            "args": [
              "self",
              "event",
              "callback"
            ],
            "class": "ExecutionEngine",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ExecutionEngine",
            "line": 34,
            "methods": [
              "__init__",
              "_save_execution_to_history"
            ],
            "decorators": [],
            "docstring": "Core execution engine for implementing plans.\n\nThis class is responsible for executing plans generated by Prometheus,\ncoordinating with other components, and managing the execution lifecycle.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.core.latent_reasoning.LatentReasoningMixin",
            "from": "tekton.core.latent_reasoning",
            "name": "LatentReasoningMixin",
            "alias": null,
            "line": 24
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStage",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStage",
            "alias": null,
            "line": 27
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStatus",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStatus",
            "alias": null,
            "line": 27
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPriority",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPriority",
            "alias": null,
            "line": 27
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 27
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPlan",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 27
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 27
          },
          {
            "module": "synthesis.core.execution_executor.ExecutionStep",
            "from": "synthesis.core.execution_executor",
            "name": "ExecutionStep",
            "alias": null,
            "line": 31
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ExecutionEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 34,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.execute_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine._execute_steps",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 285,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.on_before_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 419,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.on_after_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 424,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.on_step_error",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 430,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.get_execution_status",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 437,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.cancel_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 467,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.register_function",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 491,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExecutionEngine.register_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_engine.py",
            "line": 502,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 511,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_executor.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the phase executor.\n\nArgs:\n    phase_manager: Phase manager to use",
            "args": [
              "self",
              "phase_manager"
            ],
            "class": "PhaseExecutor",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_handler",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Register a handler for a phase.\n\nArgs:\n    phase_id: Phase ID\n    handler: Handler function\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "phase_id",
              "handler"
            ],
            "class": "PhaseExecutor",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_phases",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Execute all phases in dependency order.\n\nArgs:\n    concurrency: Maximum number of phases to execute in parallel\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "concurrency"
            ],
            "class": "PhaseExecutor",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_execute_phases_task",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Execute phases in dependency order.",
            "args": [
              "self"
            ],
            "class": "PhaseExecutor",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_execute_phase",
            "line": 163,
            "async": true,
            "decorators": [],
            "docstring": "Execute a single phase.\n\nArgs:\n    phase_id: Phase ID to execute",
            "args": [
              "self",
              "phase_id"
            ],
            "class": "PhaseExecutor",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "cancel_execution",
            "line": 210,
            "async": true,
            "decorators": [],
            "docstring": "Cancel ongoing phase execution.\n\nReturns:\n    Success status",
            "args": [
              "self"
            ],
            "class": "PhaseExecutor",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PhaseExecutor",
            "line": 20,
            "methods": [
              "__init__",
              "register_handler"
            ],
            "decorators": [],
            "docstring": "Executes phases according to their dependencies.\n\nThis class handles the execution of phases, ensuring they run in the\ncorrect order based on dependencies.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "synthesis.core.phase_models.PhaseStatus",
            "from": "synthesis.core.phase_models",
            "name": "PhaseStatus",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.phase_manager.PhaseManager",
            "from": "synthesis.core.phase_manager",
            "name": "PhaseManager",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PhaseExecutor",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_executor.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PhaseExecutor.register_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_executor.py",
            "line": 41,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseExecutor.execute_phases",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_executor.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PhaseExecutor._execute_phases_task",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_executor.py",
            "line": 96,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PhaseExecutor.cancel_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_executor.py",
            "line": 210,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 242,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_models.py",
      "analysis": {
        "functions": [],
        "classes": [
          {
            "name": "PhaseStatus",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Phase execution status.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PhaseStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_models.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 20,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
      "analysis": {
        "functions": [
          {
            "name": "get_instance",
            "line": 32,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get the singleton instance of the event manager.\n\nReturns:\n    EventManager instance",
            "args": [
              "cls"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the event manager.",
            "args": [
              "self"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "emit",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Emit an event to subscribers.\n\nArgs:\n    event_type: Type of event\n    data: Event data\n    \nReturns:\n    Event ID",
            "args": [
              "self",
              "event_type",
              "data"
            ],
            "class": "EventManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_call_subscriber",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Call a subscriber callback.\n\nArgs:\n    callback: Subscriber callback\n    event: Event data",
            "args": [
              "self",
              "callback",
              "event"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe",
            "line": 109,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe to events.\n\nArgs:\n    event_type: Type of event to subscribe to, or None for all events\n    callback: Callback function to call when event occurs",
            "args": [
              "self",
              "event_type",
              "callback"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Unsubscribe from events.\n\nArgs:\n    event_type: Type of event to unsubscribe from, or None for all events\n    callback: Callback function to remove",
            "args": [
              "self",
              "event_type",
              "callback"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_recent_events",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": "Get recent events.\n\nArgs:\n    event_type: Type of event to filter by, or None for all events\n    limit: Maximum number of events to return\n    \nReturns:\n    List of events",
            "args": [
              "self",
              "event_type",
              "limit"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 168,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the WebSocket manager.",
            "args": [
              "self"
            ],
            "class": "WebSocketManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 176,
            "async": true,
            "decorators": [],
            "docstring": "Register a new WebSocket connection.\n\nArgs:\n    websocket: WebSocket connection\n    \nReturns:\n    Connection ID",
            "args": [
              "self",
              "websocket"
            ],
            "class": "WebSocketManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 191,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a WebSocket connection.\n\nArgs:\n    connection_id: Connection ID",
            "args": [
              "self",
              "connection_id"
            ],
            "class": "WebSocketManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "broadcast_event",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast an event to all connected WebSocket clients.\n\nArgs:\n    event: Event data to broadcast",
            "args": [
              "self",
              "event"
            ],
            "class": "WebSocketManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "broadcast_message",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast a message to all connected WebSocket clients.\n\nArgs:\n    message: Message to broadcast",
            "args": [
              "self",
              "message"
            ],
            "class": "WebSocketManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 257,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to a specific WebSocket client.\n\nArgs:\n    connection_id: Connection ID\n    message: Message to send\n    \nReturns:\n    True if message was sent, False if client not found",
            "args": [
              "self",
              "connection_id",
              "message"
            ],
            "class": "WebSocketManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 286,
            "async": true,
            "decorators": [],
            "docstring": "Process a message from a WebSocket client.\n\nArgs:\n    websocket: WebSocket connection\n    data: Message data",
            "args": [
              "self",
              "websocket",
              "data"
            ],
            "class": "WebSocketManager",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EventManager",
            "line": 21,
            "methods": [
              "get_instance",
              "__init__",
              "subscribe",
              "unsubscribe",
              "get_recent_events"
            ],
            "decorators": [],
            "docstring": "Event manager for Synthesis.\n\nThis class provides a singleton event manager for publishing and\nsubscribing to events across the Synthesis execution engine.",
            "is_singleton": true,
            "landmark_priority": "high"
          },
          {
            "name": "WebSocketManager",
            "line": 161,
            "methods": [
              "__init__",
              "disconnect"
            ],
            "decorators": [],
            "docstring": "WebSocket manager for event broadcasting.\n\nThis class manages WebSocket connections and broadcasts events to connected clients.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "EventManager.get_instance",
            "line": 32
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EventManager",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EventManager.get_instance",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EventManager.emit",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EventManager.subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 109,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EventManager.unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EventManager.get_recent_events",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 142,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WebSocketManager",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 161,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WebSocketManager.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 176,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WebSocketManager.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 191,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WebSocketManager.broadcast_event",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WebSocketManager.broadcast_message",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WebSocketManager.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 257,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WebSocketManager.process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/events.py",
            "line": 286,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 331,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_step.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize execution step.\n\nArgs:\n    step_data: Step definition and parameters\n    context: Execution context\n    callbacks: Optional callback functions",
            "args": [
              "self",
              "step_data",
              "context",
              "callbacks"
            ],
            "class": "ExecutionStep",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 54,
            "async": true,
            "decorators": [],
            "docstring": "Execute the step.\n\nReturns:\n    ExecutionResult with execution status",
            "args": [
              "self"
            ],
            "class": "ExecutionStep",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_execute_handler",
            "line": 141,
            "async": true,
            "decorators": [],
            "docstring": "Execute the step handler with appropriate arguments.\n\nArgs:\n    handler: Step handler function\n    \nReturns:\n    ExecutionResult from the handler",
            "args": [
              "self",
              "handler"
            ],
            "class": "ExecutionStep",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_execute_nested_step",
            "line": 166,
            "async": true,
            "decorators": [],
            "docstring": "Execute a nested step.\n\nArgs:\n    step_data: Step data\n    context: Execution context\n    \nReturns:\n    ExecutionResult from the nested step",
            "args": [
              "self",
              "step_data",
              "context"
            ],
            "class": "ExecutionStep",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_get_step_handlers",
            "line": 180,
            "async": false,
            "decorators": [],
            "docstring": "Get step type handlers.\n\nReturns:\n    Dictionary mapping step types to handler functions",
            "args": [
              "self"
            ],
            "class": "ExecutionStep",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ExecutionStep",
            "line": 30,
            "methods": [
              "__init__",
              "_get_step_handlers"
            ],
            "decorators": [],
            "docstring": "Step executor for a single plan step.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStage",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStage",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStatus",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStatus",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPriority",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPriority",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPlan",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.step_handlers.handle_command_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_command_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_function_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_function_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_api_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_api_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_condition_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_condition_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_loop_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_loop_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_subprocess_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_subprocess_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_notify_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_notify_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_wait_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_wait_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_variable_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_variable_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.step_handlers.handle_llm_step",
            "from": "synthesis.core.step_handlers",
            "name": "handle_llm_step",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.loop_handlers.handle_loop_step",
            "from": "synthesis.core.loop_handlers",
            "name": "handle_loop_step",
            "alias": null,
            "line": 24
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ExecutionStep",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_step.py",
            "line": 30,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionStep.execute",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_step.py",
            "line": 54,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ExecutionStep._execute_nested_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_step.py",
            "line": 166,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 198,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "synthesis.core.execution_models.ExecutionStage",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStage",
            "alias": null,
            "line": 8
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStatus",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStatus",
            "alias": null,
            "line": 8
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPriority",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPriority",
            "alias": null,
            "line": 8
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 8
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPlan",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 8
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 8
          },
          {
            "module": "synthesis.core.execution_step.ExecutionStep",
            "from": "synthesis.core.execution_step",
            "name": "ExecutionStep",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_engine.ExecutionEngine",
            "from": "synthesis.core.execution_engine",
            "name": "ExecutionEngine",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.phase_models.PhaseStatus",
            "from": "synthesis.core.phase_models",
            "name": "PhaseStatus",
            "alias": null,
            "line": 16
          },
          {
            "module": "synthesis.core.phase_manager.PhaseManager",
            "from": "synthesis.core.phase_manager",
            "name": "PhaseManager",
            "alias": null,
            "line": 17
          },
          {
            "module": "synthesis.core.phase_executor.PhaseExecutor",
            "from": "synthesis.core.phase_executor",
            "name": "PhaseExecutor",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 35,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
      "analysis": {
        "functions": [
          {
            "name": "example",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Example usage of phase manager and executor.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_setup",
            "line": 33,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "phase"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_build",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "phase"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_test",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "phase"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_package",
            "line": 48,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "phase"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_deploy",
            "line": 53,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "phase"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_validate",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "phase"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "synthesis.core.phase_manager.PhaseManager",
            "from": "synthesis.core.phase_manager",
            "name": "PhaseManager",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.phase_executor.PhaseExecutor",
            "from": "synthesis.core.phase_executor",
            "name": "PhaseExecutor",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "example",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_setup",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_build",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_test",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_package",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 48,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_deploy",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 53,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_validate",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_examples.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 90,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the component adapter.\n\nArgs:\n    component_name: Name of the component",
            "args": [
              "self",
              "component_name"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 36,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the component adapter.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 46,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the component adapter.\n\nReturns:\n    True if shutdown was successful",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ping",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Check if the component is available.\n\nReturns:\n    True if the component is available",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 65,
            "async": true,
            "decorators": [],
            "docstring": "Invoke a capability on the component.\n\nArgs:\n    capability_name: Name of the capability to invoke\n    parameters: Parameters for the capability\n    \nReturns:\n    Result of the capability invocation",
            "args": [
              "self",
              "capability_name",
              "parameters"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 86,
            "async": true,
            "decorators": [],
            "docstring": "Get the component's capabilities.\n\nReturns:\n    List of capability dictionaries",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "has_capability",
            "line": 98,
            "async": false,
            "decorators": [],
            "docstring": "Check if the component has a specific capability.\n\nArgs:\n    capability_name: Name of the capability\n    \nReturns:\n    True if the component has the capability",
            "args": [
              "self",
              "capability_name"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "component_status",
            "line": 111,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the component status.\n\nReturns:\n    Status string ('initialized', 'uninitialized')",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 129,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes adapter.\n\nArgs:\n    hermes_url: URL of the Hermes API",
            "args": [
              "self",
              "hermes_url"
            ],
            "class": "HermesAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the Hermes adapter.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "HermesAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 176,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the Hermes adapter.\n\nReturns:\n    True if shutdown was successful",
            "args": [
              "self"
            ],
            "class": "HermesAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discover_services",
            "line": 196,
            "async": true,
            "decorators": [],
            "docstring": "Discover services registered with Hermes.\n\nReturns:\n    Dictionary mapping service IDs to service information",
            "args": [
              "self"
            ],
            "class": "HermesAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "find_service_by_component",
            "line": 222,
            "async": true,
            "decorators": [],
            "docstring": "Find a service by component name.\n\nArgs:\n    component_name: Component name to search for\n    \nReturns:\n    Service information or None if not found",
            "args": [
              "self",
              "component_name"
            ],
            "class": "HermesAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "invoke_service",
            "line": 244,
            "async": true,
            "decorators": [],
            "docstring": "Invoke a capability on a service.\n\nArgs:\n    service_id: ID of the service\n    capability: Name of the capability\n    parameters: Parameters for the capability\n    \nReturns:\n    Result of the capability invocation",
            "args": [
              "self",
              "service_id",
              "capability",
              "parameters"
            ],
            "class": "HermesAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComponentAdapter",
            "line": 17,
            "methods": [
              "__init__",
              "has_capability",
              "component_status"
            ],
            "decorators": [],
            "docstring": "Base class for component adapters.\n\nComponent adapters provide a standardized interface for interacting\nwith other Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HermesAdapter",
            "line": 121,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Adapter for interacting with Hermes services.\n\nThis adapter uses the Hermes API to discover and interact with\nservices registered with Hermes.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 137
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 150
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ComponentAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 36,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 46,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.ping",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 65,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 86,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.has_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 98,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.component_status",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 111,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "HermesAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 121,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesAdapter.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 176,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesAdapter.discover_services",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesAdapter.find_service_by_component",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 222,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesAdapter.invoke_service",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_base.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 301,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/synthesis_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 13,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 21,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Synthesis-specific services.",
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 47,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Synthesis-specific resources.",
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_status",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Get detailed component status.",
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "initialize_mcp_bridge",
            "line": 105,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP bridge after component startup.",
            "args": [
              "self"
            ],
            "class": "SynthesisComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SynthesisComponent",
            "line": 10,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata",
              "get_component_status"
            ],
            "decorators": [],
            "docstring": "Synthesis execution and integration engine component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 5
          },
          {
            "module": "synthesis.core.execution_engine.ExecutionEngine",
            "from": "synthesis.core.execution_engine",
            "name": "ExecutionEngine",
            "alias": null,
            "line": 24
          },
          {
            "module": "synthesis.core.events.EventManager",
            "from": "synthesis.core.events",
            "name": "EventManager",
            "alias": null,
            "line": 25
          },
          {
            "module": "synthesis.core.events.WebSocketManager",
            "from": "synthesis.core.events",
            "name": "WebSocketManager",
            "alias": null,
            "line": 25
          },
          {
            "module": "synthesis.core.mcp.hermes_bridge.SynthesisMCPBridge",
            "from": "synthesis.core.mcp.hermes_bridge",
            "name": "SynthesisMCPBridge",
            "alias": null,
            "line": 108
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SynthesisComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/synthesis_component.py",
            "line": 10,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SynthesisComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/synthesis_component.py",
            "line": 67,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SynthesisComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/synthesis_component.py",
            "line": 77,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SynthesisComponent.get_component_status",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/synthesis_component.py",
            "line": 86,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "SynthesisComponent.initialize_mcp_bridge",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/synthesis_component.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 114,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the integration manager.\n\nArgs:\n    hermes_url: URL of the Hermes API\n    direct_import: Whether to try direct imports",
            "args": [
              "self",
              "hermes_url",
              "direct_import"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 44,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the integration manager.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "IntegrationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 86,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the integration manager.\n\nReturns:\n    True if shutdown was successful",
            "args": [
              "self"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_adapter",
            "line": 106,
            "async": false,
            "decorators": [],
            "docstring": "Get an adapter for a specific component.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    ComponentAdapter instance or None if not found",
            "args": [
              "self",
              "component_name"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 118,
            "async": true,
            "decorators": [],
            "docstring": "Invoke a capability on a component.\n\nArgs:\n    component_name: Name of the component\n    capability_name: Name of the capability\n    parameters: Parameters for the capability\n    \nReturns:\n    Result of the capability invocation",
            "args": [
              "self",
              "component_name",
              "capability_name",
              "parameters"
            ],
            "class": "IntegrationManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 172,
            "async": true,
            "decorators": [],
            "docstring": "Get a component's capabilities.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    List of capability dictionaries",
            "args": [
              "self",
              "component_name"
            ],
            "class": "IntegrationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_all_capabilities",
            "line": 196,
            "async": true,
            "decorators": [],
            "docstring": "Get capabilities for all components.\n\nReturns:\n    Dictionary mapping component names to capability lists",
            "args": [
              "self"
            ],
            "class": "IntegrationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "discover_services",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "Discover available services.\n\nReturns:\n    Dictionary mapping service IDs to service information",
            "args": [
              "self"
            ],
            "class": "IntegrationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_plan",
            "line": 237,
            "async": true,
            "decorators": [],
            "docstring": "Create a plan using Prometheus.\n\nArgs:\n    objective: Plan objective\n    context: Optional planning context\n    \nReturns:\n    Result containing the created plan",
            "args": [
              "self",
              "objective",
              "context"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "refine_plan",
            "line": 257,
            "async": true,
            "decorators": [],
            "docstring": "Refine a plan using Prometheus.\n\nArgs:\n    plan_id: ID of the plan to refine\n    feedback: Feedback for refinement\n    \nReturns:\n    Result containing the refined plan",
            "args": [
              "self",
              "plan_id",
              "feedback"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_entity",
            "line": 277,
            "async": true,
            "decorators": [],
            "docstring": "Create a knowledge entity in Athena.\n\nArgs:\n    entity_type: Type of entity\n    properties: Entity properties\n    \nReturns:\n    Result containing the created entity",
            "args": [
              "self",
              "entity_type",
              "properties"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_relationship",
            "line": 297,
            "async": true,
            "decorators": [],
            "docstring": "Create a relationship in Athena.\n\nArgs:\n    source_id: Source entity ID\n    target_id: Target entity ID\n    relationship_type: Type of relationship\n    properties: Optional relationship properties\n    \nReturns:\n    Result containing the created relationship",
            "args": [
              "self",
              "source_id",
              "target_id",
              "relationship_type",
              "properties"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_knowledge",
            "line": 325,
            "async": true,
            "decorators": [],
            "docstring": "Query the knowledge graph in Athena.\n\nArgs:\n    query: Knowledge query\n    parameters: Optional query parameters\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "query",
              "parameters"
            ],
            "class": "IntegrationManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "IntegrationManager",
            "line": 20,
            "methods": [
              "__init__",
              "get_adapter"
            ],
            "decorators": [],
            "docstring": "Manages integrations with other Tekton components.\n\nThis class discovers, initializes, and coordinates interactions with\nother components in the Tekton ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "synthesis.core.integration_base.ComponentAdapter",
            "from": "synthesis.core.integration_base",
            "name": "ComponentAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.integration_base.HermesAdapter",
            "from": "synthesis.core.integration_base",
            "name": "HermesAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "synthesis.core.integration_adapters.PrometheusAdapter",
            "from": "synthesis.core.integration_adapters",
            "name": "PrometheusAdapter",
            "alias": null,
            "line": 14
          },
          {
            "module": "synthesis.core.integration_adapters.AthenaAdapter",
            "from": "synthesis.core.integration_adapters",
            "name": "AthenaAdapter",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "IntegrationManager",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "IntegrationManager.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 44,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 86,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.get_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 106,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 118,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "IntegrationManager.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 172,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.discover_services",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.create_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 237,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.refine_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 257,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.create_entity",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 277,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.create_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 297,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntegrationManager.query_knowledge",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration.py",
            "line": 325,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 343,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/condition_evaluator.py",
      "analysis": {
        "functions": [
          {
            "name": "evaluate_condition",
            "line": 17,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate a condition expression.\n\nArgs:\n    condition: Condition expression\n    context: Execution context\n    \nReturns:\n    Boolean result of the condition",
            "args": [
              "condition",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "evaluate_condition",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/condition_evaluator.py",
            "line": 17,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 64,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Initialize execution result.\n\nArgs:\n    success: Whether the execution was successful\n    data: Result data\n    message: Optional message\n    errors: Optional list of errors",
            "args": [
              "self",
              "success",
              "data",
              "message",
              "errors"
            ],
            "class": "ExecutionResult",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 64,
            "async": false,
            "decorators": [],
            "docstring": "Convert to dictionary.",
            "args": [
              "self"
            ],
            "class": "ExecutionResult",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 78,
            "async": false,
            "decorators": [],
            "docstring": "Initialize execution plan.\n\nArgs:\n    plan_id: Unique identifier\n    name: Plan name\n    description: Plan description\n    steps: Execution steps\n    metadata: Additional metadata\n    priority: Execution priority",
            "args": [
              "self",
              "plan_id",
              "name",
              "description",
              "steps",
              "metadata",
              "priority"
            ],
            "class": "ExecutionPlan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Convert to dictionary.",
            "args": [
              "self"
            ],
            "class": "ExecutionPlan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 117,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create from dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ExecutionPlan",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Initialize execution context.\n\nArgs:\n    context_id: Unique identifier\n    plan_id: Associated plan ID\n    status: Current status\n    current_stage: Current execution stage\n    current_step: Index of current step\n    variables: Context variables\n    results: Step execution results\n    errors: Execution errors\n    start_time: Execution start time\n    end_time: Execution end time",
            "args": [
              "self",
              "context_id",
              "plan_id",
              "status",
              "current_stage",
              "current_step",
              "variables",
              "results",
              "errors",
              "start_time",
              "end_time"
            ],
            "class": "ExecutionContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 173,
            "async": false,
            "decorators": [],
            "docstring": "Convert to dictionary.",
            "args": [
              "self"
            ],
            "class": "ExecutionContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 190,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create from dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "ExecutionContext",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ExecutionStage",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Execution stages for tracking progress.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionStatus",
            "line": 23,
            "methods": [],
            "decorators": [],
            "docstring": "Execution status values.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionPriority",
            "line": 33,
            "methods": [],
            "decorators": [],
            "docstring": "Execution priority levels.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionResult",
            "line": 41,
            "methods": [
              "__init__",
              "to_dict"
            ],
            "decorators": [],
            "docstring": "Container for execution results.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionPlan",
            "line": 75,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "Represents a plan to be executed.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionContext",
            "line": 132,
            "methods": [
              "__init__",
              "to_dict",
              "from_dict"
            ],
            "decorators": [],
            "docstring": "Execution context for a plan.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ExecutionStage",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionPriority",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionResult",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionResult.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ExecutionPlan",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 75,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionPlan.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionPlan.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 117,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ExecutionContext",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 132,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionContext.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 173,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionContext.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_models.py",
            "line": 190,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
      "analysis": {
        "functions": [
          {
            "name": "handle_loop_step",
            "line": 19,
            "async": true,
            "decorators": [],
            "docstring": "Handle a loop execution step.\n\nArgs:\n    parameters: Step parameters\n    steps: Steps to execute in the loop\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with loop results",
            "args": [
              "parameters",
              "steps",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_for_loop",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "Handle a for loop.\n\nArgs:\n    parameters: Loop parameters\n    steps: Steps to execute in each iteration\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with loop results",
            "args": [
              "parameters",
              "steps",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_while_loop",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Handle a while loop.\n\nArgs:\n    parameters: Loop parameters\n    steps: Steps to execute in each iteration\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with loop results",
            "args": [
              "parameters",
              "steps",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_foreach_loop",
            "line": 285,
            "async": true,
            "decorators": [],
            "docstring": "Handle a foreach loop (iterates over dictionary/map).\n\nArgs:\n    parameters: Loop parameters\n    steps: Steps to execute in each iteration\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with loop results",
            "args": [
              "parameters",
              "steps",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_count_loop",
            "line": 411,
            "async": true,
            "decorators": [],
            "docstring": "Handle a count loop (simple counter).\n\nArgs:\n    parameters: Loop parameters\n    steps: Steps to execute in each iteration\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with loop results",
            "args": [
              "parameters",
              "steps",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_parallel_loop",
            "line": 538,
            "async": true,
            "decorators": [],
            "docstring": "Handle a parallel loop (concurrent execution).\n\nArgs:\n    parameters: Loop parameters\n    steps: Steps to execute in parallel\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    \nReturns:\n    ExecutionResult with loop results",
            "args": [
              "parameters",
              "steps",
              "context",
              "execute_step_callback"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "process_item",
            "line": 617,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "index",
              "item"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_parallel_steps",
            "line": 676,
            "async": true,
            "decorators": [],
            "docstring": "Handle parallel execution of steps.\n\nArgs:\n    steps: Steps to execute in parallel\n    context: Execution context\n    execute_step_callback: Callback to execute a step\n    max_concurrency: Maximum number of concurrent tasks\n    \nReturns:\n    ExecutionResult with parallel execution results",
            "args": [
              "steps",
              "context",
              "execute_step_callback",
              "max_concurrency"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_step",
            "line": 695,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "step",
              "index"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.condition_evaluator.evaluate_condition",
            "from": "synthesis.core.condition_evaluator",
            "name": "evaluate_condition",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "handle_loop_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 19,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_for_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_while_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_foreach_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 285,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_count_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 411,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_parallel_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 538,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "process_item",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 617,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_step",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/loop_handlers.py",
            "line": 695,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 736,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Prometheus adapter.\n\nArgs:\n    hermes_adapter: Optional HermesAdapter for service discovery\n    direct_import: Whether to directly import Prometheus modules",
            "args": [
              "self",
              "hermes_adapter",
              "direct_import"
            ],
            "class": "PrometheusAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 65,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the Prometheus adapter.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "PrometheusAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 115,
            "async": true,
            "decorators": [],
            "docstring": "Invoke a capability on Prometheus.\n\nArgs:\n    capability_name: Name of the capability to invoke\n    parameters: Parameters for the capability\n    \nReturns:\n    Result of the capability invocation",
            "args": [
              "self",
              "capability_name",
              "parameters"
            ],
            "class": "PrometheusAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Athena adapter.\n\nArgs:\n    hermes_adapter: Optional HermesAdapter for service discovery\n    direct_import: Whether to directly import Athena modules",
            "args": [
              "self",
              "hermes_adapter",
              "direct_import"
            ],
            "class": "AthenaAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 252,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the Athena adapter.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "AthenaAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Invoke a capability on Athena.\n\nArgs:\n    capability_name: Name of the capability to invoke\n    parameters: Parameters for the capability\n    \nReturns:\n    Result of the capability invocation",
            "args": [
              "self",
              "capability_name",
              "parameters"
            ],
            "class": "AthenaAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PrometheusAdapter",
            "line": 22,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Adapter for interacting with the Prometheus planning component.\n\nThis adapter allows Synthesis to request and update plans from Prometheus.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AthenaAdapter",
            "line": 199,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Adapter for interacting with the Athena knowledge graph component.\n\nThis adapter allows Synthesis to query and update knowledge in Athena.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "importlib",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "synthesis.core.integration_base.ComponentAdapter",
            "from": "synthesis.core.integration_base",
            "name": "ComponentAdapter",
            "alias": null,
            "line": 16
          },
          {
            "module": "synthesis.core.integration_base.HermesAdapter",
            "from": "synthesis.core.integration_base",
            "name": "HermesAdapter",
            "alias": null,
            "line": 16
          },
          {
            "module": "prometheus.core.planning_engine.PlanningEngine",
            "from": "prometheus.core.planning_engine",
            "name": "PlanningEngine",
            "alias": null,
            "line": 76
          },
          {
            "module": "athena.core.engine.KnowledgeEngine",
            "from": "athena.core.engine",
            "name": "KnowledgeEngine",
            "alias": null,
            "line": 263
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PrometheusAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PrometheusAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
            "line": 65,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PrometheusAdapter.invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
            "line": 115,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "AthenaAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
            "line": 199,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AthenaAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
            "line": 252,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AthenaAdapter.invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/integration_adapters.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 405,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM adapter.\n\nArgs:\n    component_id: The component identifier for client registration",
            "args": [
              "self",
              "component_id"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the LLM client connection.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ensure_initialized",
            "line": 82,
            "async": true,
            "decorators": [],
            "docstring": "Ensure the client is initialized before use.\n\nReturns:\n    True if client is initialized",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 93,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the LLM client.",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "enhance_execution_plan",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Enhance an execution plan using LLM capabilities.\n\nArgs:\n    plan: The original execution plan\n    \nReturns:\n    Enhanced execution plan",
            "args": [
              "self",
              "plan"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_execution_result",
            "line": 173,
            "async": true,
            "decorators": [],
            "docstring": "Analyze execution results using LLM capabilities.\n\nArgs:\n    execution_id: The execution identifier\n    result: The execution result\n    plan: The original execution plan\n    \nReturns:\n    Analysis of the execution result",
            "args": [
              "self",
              "execution_id",
              "result",
              "plan"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_dynamic_command",
            "line": 265,
            "async": true,
            "decorators": [],
            "docstring": "Generate a dynamic command based on context and instruction.\n\nArgs:\n    context: The execution context\n    instruction: The instruction for command generation\n    \nReturns:\n    Generated command string",
            "args": [
              "self",
              "context",
              "instruction"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream_execution_analysis",
            "line": 334,
            "async": true,
            "decorators": [],
            "docstring": "Stream execution analysis in real-time.\n\nArgs:\n    execution_data: The execution data to analyze\n    callback: Function to call with each chunk of analysis and done flag",
            "args": [
              "self",
              "execution_data",
              "callback"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_llm_adapter",
            "line": 395,
            "async": true,
            "decorators": [],
            "docstring": "Get the global LLM adapter instance.\n\nReturns:\n    The initialized LLM adapter",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMAdapter",
            "line": 20,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Adapter for integrating with Tekton LLM capabilities using the standardized client.\nProvides methods for enhancing execution plans, validating execution results, and\ngenerating dynamic content during execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.AsyncIterator",
            "from": "typing",
            "name": "AsyncIterator",
            "alias": null,
            "line": 11
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton_llm_client.models.Message",
            "from": "tekton_llm_client.models",
            "name": "Message",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.models.CompletionOptions",
            "from": "tekton_llm_client.models",
            "name": "CompletionOptions",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.models.MessageRole",
            "from": "tekton_llm_client.models",
            "name": "MessageRole",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.adapters.LocalFallbackAdapter",
            "from": "tekton_llm_client.adapters",
            "name": "LocalFallbackAdapter",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.exceptions.TektonLLMError",
            "from": "tekton_llm_client.exceptions",
            "name": "TektonLLMError",
            "alias": null,
            "line": 16
          },
          {
            "module": "json",
            "alias": null,
            "line": 148
          },
          {
            "module": "re",
            "alias": null,
            "line": 149
          },
          {
            "module": "json",
            "alias": null,
            "line": 235
          },
          {
            "module": "re",
            "alias": null,
            "line": 236
          },
          {
            "module": "re",
            "alias": null,
            "line": 321
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.ensure_initialized",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 82,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 93,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.enhance_execution_plan",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.analyze_execution_result",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 173,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.generate_dynamic_command",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 265,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.stream_execution_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_llm_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/llm_adapter.py",
            "line": 395,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 404,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/execution_executor.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStage",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStage",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStatus",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStatus",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPriority",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPriority",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPlan",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.execution_step.ExecutionStep",
            "from": "synthesis.core.execution_step",
            "name": "ExecutionStep",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 20,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the phase manager.",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_phase",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Register a phase with the manager.\n\nArgs:\n    phase_id: Unique identifier for the phase\n    name: Human-readable name for the phase\n    dependencies: List of phase IDs that must complete before this phase\n    critical: Whether failure of this phase should stop execution\n    metadata: Additional metadata for the phase\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "phase_id",
              "name",
              "dependencies",
              "critical",
              "metadata"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_callback",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for phase status changes.\n\nArgs:\n    phase_id: Phase ID\n    callback: Callback function\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "phase_id",
              "callback"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_phase",
            "line": 91,
            "async": false,
            "decorators": [],
            "docstring": "Get a phase by ID.\n\nArgs:\n    phase_id: Phase ID\n    \nReturns:\n    Phase data or None if not found",
            "args": [
              "self",
              "phase_id"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_phases",
            "line": 103,
            "async": false,
            "decorators": [],
            "docstring": "Get all phases.\n\nReturns:\n    Dictionary of all phases",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dependency_graph",
            "line": 112,
            "async": false,
            "decorators": [],
            "docstring": "Get the dependency graph for all phases.\n\nReturns:\n    Dictionary mapping phase IDs to sets of dependency phase IDs",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_readiness_graph",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Get the readiness graph (inverse of dependency graph).\n\nReturns:\n    Dictionary mapping phase IDs to sets of phases that depend on them",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_ready_phases",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": "Get phases that are ready to execute.\n\nReturns:\n    List of phase IDs that are ready to execute",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_phase_status",
            "line": 174,
            "async": false,
            "decorators": [],
            "docstring": "Update the status of a phase.\n\nArgs:\n    phase_id: Phase ID\n    status: New status\n    result: Optional result data for the phase\n    error: Optional error message\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "phase_id",
              "status",
              "result",
              "error"
            ],
            "class": "PhaseManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_notify_callbacks",
            "line": 220,
            "async": false,
            "decorators": [],
            "docstring": "Notify callbacks of phase status changes.",
            "args": [
              "self",
              "phase_id",
              "old_status",
              "new_status"
            ],
            "class": "PhaseManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "all_phases_completed",
            "line": 231,
            "async": false,
            "decorators": [],
            "docstring": "Check if all phases are completed.\n\nReturns:\n    True if all phases are completed",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_failed_phases",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": "Get a list of failed phases.\n\nReturns:\n    List of failed phase IDs",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_failures",
            "line": 255,
            "async": false,
            "decorators": [],
            "docstring": "Get a list of critical phases that failed.\n\nReturns:\n    List of failed critical phase IDs",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_execution_failed",
            "line": 267,
            "async": false,
            "decorators": [],
            "docstring": "Check if the execution has failed due to critical phase failures.\n\nReturns:\n    True if execution has failed",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reset",
            "line": 276,
            "async": false,
            "decorators": [],
            "docstring": "Reset all phase statuses to pending.",
            "args": [
              "self"
            ],
            "class": "PhaseManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PhaseManager",
            "line": 19,
            "methods": [
              "__init__",
              "register_phase",
              "register_callback",
              "get_phase",
              "get_all_phases",
              "get_dependency_graph",
              "get_readiness_graph",
              "get_ready_phases",
              "update_phase_status",
              "_notify_callbacks",
              "all_phases_completed",
              "get_failed_phases",
              "get_critical_failures",
              "is_execution_failed",
              "reset"
            ],
            "decorators": [],
            "docstring": "Manages execution phases and their dependencies.\n\nThis class handles the sequencing, parallelization, and monitoring\nof execution phases based on their dependencies.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "synthesis.core.phase_models.PhaseStatus",
            "from": "synthesis.core.phase_models",
            "name": "PhaseStatus",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PhaseManager",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PhaseManager.register_phase",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.register_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_phase",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 91,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_all_phases",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 103,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_dependency_graph",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 112,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_readiness_graph",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_ready_phases",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 142,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PhaseManager.update_phase_status",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 174,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.all_phases_completed",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 231,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_failed_phases",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 243,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.get_critical_failures",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 255,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.is_execution_failed",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 267,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PhaseManager.reset",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/phase_manager.py",
            "line": 276,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 285,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/utils/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 0,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/scripts/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 0,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 0,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_synthesis_status",
            "line": 69,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get overall Synthesis system status.\n\nReturns:\n    Dictionary containing Synthesis system status and capabilities",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_synthesis_workflow",
            "line": 97,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a predefined synthesis workflow.\n\nArgs:\n    workflow_name: Name of the workflow to execute\n    parameters: Parameters for the workflow\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_name",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_data_unification_workflow",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Data unification workflow combining synthesis and validation.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_component_integration_workflow",
            "line": 223,
            "async": true,
            "decorators": [],
            "docstring": "Component integration workflow including orchestration and monitoring.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_workflow_orchestration_workflow",
            "line": 288,
            "async": true,
            "decorators": [],
            "docstring": "Workflow orchestration including composition and optimization.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_end_to_end_synthesis_workflow",
            "line": 352,
            "async": true,
            "decorators": [],
            "docstring": "Complete end-to-end synthesis workflow combining all capabilities.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPRequest",
            "line": 30,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 36,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "get_synthesis_status",
            "line": 69,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_synthesis_workflow",
            "line": 97,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.server.FastMCPServer",
            "from": "tekton.mcp.fastmcp.server",
            "name": "FastMCPServer",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_mcp_endpoints",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.FastMCPError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "FastMCPError",
            "alias": null,
            "line": 16
          },
          {
            "module": "synthesis.core.mcp.tools.data_synthesis_tools",
            "from": "synthesis.core.mcp.tools",
            "name": "data_synthesis_tools",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.mcp.tools.integration_orchestration_tools",
            "from": "synthesis.core.mcp.tools",
            "name": "integration_orchestration_tools",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.mcp.tools.workflow_composition_tools",
            "from": "synthesis.core.mcp.tools",
            "name": "workflow_composition_tools",
            "alias": null,
            "line": 18
          },
          {
            "module": "synthesis.core.mcp.capabilities.DataSynthesisCapability",
            "from": "synthesis.core.mcp.capabilities",
            "name": "DataSynthesisCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "synthesis.core.mcp.capabilities.IntegrationOrchestrationCapability",
            "from": "synthesis.core.mcp.capabilities",
            "name": "IntegrationOrchestrationCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "synthesis.core.mcp.capabilities.WorkflowCompositionCapability",
            "from": "synthesis.core.mcp.capabilities",
            "name": "WorkflowCompositionCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "synthesis.core.mcp.tools.synthesize_component_data",
            "from": "synthesis.core.mcp.tools",
            "name": "synthesize_component_data",
            "alias": null,
            "line": 145
          },
          {
            "module": "synthesis.core.mcp.tools.merge_data_streams",
            "from": "synthesis.core.mcp.tools",
            "name": "merge_data_streams",
            "alias": null,
            "line": 145
          },
          {
            "module": "synthesis.core.mcp.tools.detect_data_conflicts",
            "from": "synthesis.core.mcp.tools",
            "name": "detect_data_conflicts",
            "alias": null,
            "line": 145
          },
          {
            "module": "synthesis.core.mcp.tools.validate_synthesis_quality",
            "from": "synthesis.core.mcp.tools",
            "name": "validate_synthesis_quality",
            "alias": null,
            "line": 145
          },
          {
            "module": "synthesis.core.mcp.tools.orchestrate_component_integration",
            "from": "synthesis.core.mcp.tools",
            "name": "orchestrate_component_integration",
            "alias": null,
            "line": 225
          },
          {
            "module": "synthesis.core.mcp.tools.design_integration_workflow",
            "from": "synthesis.core.mcp.tools",
            "name": "design_integration_workflow",
            "alias": null,
            "line": 225
          },
          {
            "module": "synthesis.core.mcp.tools.monitor_integration_health",
            "from": "synthesis.core.mcp.tools",
            "name": "monitor_integration_health",
            "alias": null,
            "line": 225
          },
          {
            "module": "synthesis.core.mcp.tools.resolve_integration_conflicts",
            "from": "synthesis.core.mcp.tools",
            "name": "resolve_integration_conflicts",
            "alias": null,
            "line": 225
          },
          {
            "module": "synthesis.core.mcp.tools.compose_multi_component_workflow",
            "from": "synthesis.core.mcp.tools",
            "name": "compose_multi_component_workflow",
            "alias": null,
            "line": 290
          },
          {
            "module": "synthesis.core.mcp.tools.execute_composed_workflow",
            "from": "synthesis.core.mcp.tools",
            "name": "execute_composed_workflow",
            "alias": null,
            "line": 290
          },
          {
            "module": "synthesis.core.mcp.tools.analyze_workflow_performance",
            "from": "synthesis.core.mcp.tools",
            "name": "analyze_workflow_performance",
            "alias": null,
            "line": 290
          },
          {
            "module": "synthesis.core.mcp.tools.optimize_workflow_execution",
            "from": "synthesis.core.mcp.tools",
            "name": "optimize_workflow_execution",
            "alias": null,
            "line": 290
          },
          {
            "module": "synthesis.core.mcp.tools.synthesize_component_data",
            "from": "synthesis.core.mcp.tools",
            "name": "synthesize_component_data",
            "alias": null,
            "line": 354
          },
          {
            "module": "synthesis.core.mcp.tools.create_unified_report",
            "from": "synthesis.core.mcp.tools",
            "name": "create_unified_report",
            "alias": null,
            "line": 354
          },
          {
            "module": "synthesis.core.mcp.tools.orchestrate_component_integration",
            "from": "synthesis.core.mcp.tools",
            "name": "orchestrate_component_integration",
            "alias": null,
            "line": 354
          },
          {
            "module": "synthesis.core.mcp.tools.compose_multi_component_workflow",
            "from": "synthesis.core.mcp.tools",
            "name": "compose_multi_component_workflow",
            "alias": null,
            "line": 354
          },
          {
            "module": "synthesis.core.mcp.tools.optimize_data_flow",
            "from": "synthesis.core.mcp.tools",
            "name": "optimize_data_flow",
            "alias": null,
            "line": 354
          },
          {
            "module": "synthesis.core.mcp.tools.validate_synthesis_quality",
            "from": "synthesis.core.mcp.tools",
            "name": "validate_synthesis_quality",
            "alias": null,
            "line": 354
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/fastmcp_endpoints.py",
            "line": 30,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/fastmcp_endpoints.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_synthesis_status",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/fastmcp_endpoints.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_synthesis_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/fastmcp_endpoints.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "_end_to_end_synthesis_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/fastmcp_endpoints.py",
            "line": 352,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 453,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 104,
            "async": true,
            "decorators": [],
            "docstring": "Component startup callback.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 149,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint for the Synthesis API.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_execution_engine",
            "line": 234,
            "async": true,
            "decorators": [],
            "docstring": "Get the execution engine or raise an error if not initialized.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 245,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check the health of the Synthesis component following Tekton standards.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "metrics",
            "line": 296,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get metrics from the Synthesis component.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 324,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time execution updates.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_execution",
            "line": 366,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new execution.",
            "args": [
              "request",
              "execution_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_execution",
            "line": 424,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get execution details by ID.",
            "args": [
              "execution_id",
              "execution_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_executions",
            "line": 455,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List executions.",
            "args": [
              "status",
              "limit",
              "execution_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "cancel_execution",
            "line": 513,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Cancel an execution.",
            "args": [
              "execution_id",
              "execution_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_execution_results",
            "line": 543,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get execution results.",
            "args": [
              "execution_id",
              "execution_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_execution_variables",
            "line": 587,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Update execution variables.",
            "args": [
              "execution_id",
              "request",
              "execution_engine"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "register_function",
            "line": 688,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a function in the execution engine.\n\nNote: This endpoint is disabled in production for security reasons.",
            "args": [
              "function_name",
              "function_code",
              "execution_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_functions",
            "line": 702,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List registered functions.",
            "args": [
              "execution_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_events",
            "line": 729,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List recent events.",
            "args": [
              "event_type",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "emit_event",
            "line": 764,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Emit a custom event.",
            "args": [
              "event_type",
              "event_data"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "APIResponse",
            "line": 70,
            "methods": [],
            "decorators": [],
            "docstring": "Generic API response model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionRequest",
            "line": 78,
            "methods": [],
            "decorators": [],
            "docstring": "Execution request model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionResponse",
            "line": 87,
            "methods": [],
            "decorators": [],
            "docstring": "Execution response model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "VariableRequest",
            "line": 96,
            "methods": [],
            "decorators": [],
            "docstring": "Variable request model.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "root",
            "line": 149,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 245,
            "method": "@get",
            "async": true
          },
          {
            "name": "metrics",
            "line": 296,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_execution",
            "line": 366,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_execution",
            "line": 424,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_executions",
            "line": 455,
            "method": "@get",
            "async": true
          },
          {
            "name": "cancel_execution",
            "line": 513,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_execution_results",
            "line": 543,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_execution_variables",
            "line": 587,
            "method": "@post",
            "async": true
          },
          {
            "name": "register_function",
            "line": 688,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_functions",
            "line": 702,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_events",
            "line": 729,
            "method": "@get",
            "async": true
          },
          {
            "name": "emit_event",
            "line": 764,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 324,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 20
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 22
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 30
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 33
          },
          {
            "module": "tekton.utils.tekton_errors.TektonError",
            "from": "tekton.utils.tekton_errors",
            "name": "TektonError",
            "alias": null,
            "line": 43
          },
          {
            "module": "tekton.utils.tekton_errors.ConfigurationError",
            "from": "tekton.utils.tekton_errors",
            "name": "ConfigurationError",
            "alias": null,
            "line": 43
          },
          {
            "module": "tekton.utils.tekton_errors.ConnectionError",
            "from": "tekton.utils.tekton_errors",
            "name": "ConnectionError",
            "alias": null,
            "line": 43
          },
          {
            "module": "tekton.utils.tekton_errors.AuthenticationError",
            "from": "tekton.utils.tekton_errors",
            "name": "AuthenticationError",
            "alias": null,
            "line": 43
          },
          {
            "module": "synthesis.core.synthesis_component.SynthesisComponent",
            "from": "synthesis.core.synthesis_component",
            "name": "SynthesisComponent",
            "alias": null,
            "line": 51
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStage",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStage",
            "alias": null,
            "line": 52
          },
          {
            "module": "synthesis.core.execution_models.ExecutionStatus",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionStatus",
            "alias": null,
            "line": 52
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPriority",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPriority",
            "alias": null,
            "line": 52
          },
          {
            "module": "synthesis.core.execution_models.ExecutionResult",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionResult",
            "alias": null,
            "line": 52
          },
          {
            "module": "synthesis.core.execution_models.ExecutionPlan",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionPlan",
            "alias": null,
            "line": 52
          },
          {
            "module": "synthesis.core.execution_models.ExecutionContext",
            "from": "synthesis.core.execution_models",
            "name": "ExecutionContext",
            "alias": null,
            "line": 52
          },
          {
            "module": "synthesis.api.fastmcp_endpoints.mcp_router",
            "from": "synthesis.api.fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 163
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 805
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "APIResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 70,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 78,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 87,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "VariableRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 96,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_execution_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 234,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 245,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 296,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 324,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 366,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 424,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_executions",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 455,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cancel_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 513,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_execution_results",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 543,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_execution_variables",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 587,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "register_function",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 688,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_functions",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 702,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_events",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 729,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "emit_event",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/api/app.py",
            "line": 764,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 815,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Synthesis MCP Bridge.",
            "args": [
              "self",
              "synthesis_engine",
              "component_name"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 144,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from Synthesis engine.",
            "args": [
              "self"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 188,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "SynthesisMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SynthesisMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Synthesis's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Synthesis to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "synthesis.core.mcp.tools.get_all_tools",
            "from": "synthesis.core.mcp.tools",
            "name": "get_all_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "synthesis.api.fastmcp_endpoints.fastmcp_server",
            "from": "synthesis.api.fastmcp_endpoints",
            "name": "fastmcp_server",
            "alias": null,
            "line": 91
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 92
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SynthesisMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 144,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SynthesisMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/hermes_bridge.py",
            "line": 188,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 213,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "synthesize_component_data",
            "line": 35,
            "async": true,
            "decorators": [],
            "docstring": "Synthesize and combine data from multiple components.\n\nArgs:\n    component_ids: List of component IDs to synthesize data from\n    data_types: Types of data to include in synthesis\n    synthesis_method: Method for combining data\n    time_range: Optional time range for data selection\n    \nReturns:\n    Dictionary containing synthesized data results",
            "args": [
              "component_ids",
              "data_types",
              "synthesis_method",
              "time_range"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_unified_report",
            "line": 149,
            "async": true,
            "decorators": [],
            "docstring": "Create a unified report combining data from multiple components.\n\nArgs:\n    report_type: Type of report to generate\n    components: Specific components to include\n    metrics: Specific metrics to include\n    format_type: Output format for the report\n    \nReturns:\n    Dictionary containing unified report",
            "args": [
              "report_type",
              "components",
              "metrics",
              "format_type"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "merge_data_streams",
            "line": 268,
            "async": true,
            "decorators": [],
            "docstring": "Merge multiple real-time data streams into a unified stream.\n\nArgs:\n    stream_sources: List of data stream sources\n    merge_strategy: Strategy for merging streams\n    buffer_size: Size of the merge buffer\n    conflict_resolution: Method for resolving data conflicts\n    \nReturns:\n    Dictionary containing merged stream information",
            "args": [
              "stream_sources",
              "merge_strategy",
              "buffer_size",
              "conflict_resolution"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "detect_data_conflicts",
            "line": 371,
            "async": true,
            "decorators": [],
            "docstring": "Detect and analyze conflicts between different data sources.\n\nArgs:\n    data_sources: List of data sources to analyze\n    detection_method: Method for conflict detection\n    sensitivity: Sensitivity level for conflict detection\n    resolution_suggestions: Whether to provide resolution suggestions\n    \nReturns:\n    Dictionary containing conflict detection results",
            "args": [
              "data_sources",
              "detection_method",
              "sensitivity",
              "resolution_suggestions"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "optimize_data_flow",
            "line": 481,
            "async": true,
            "decorators": [],
            "docstring": "Optimize data flow paths and processing for better performance.\n\nArgs:\n    flow_configuration: Current data flow configuration\n    optimization_targets: Specific targets for optimization\n    constraints: Constraints to consider during optimization\n    \nReturns:\n    Dictionary containing optimization results",
            "args": [
              "flow_configuration",
              "optimization_targets",
              "constraints"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "validate_synthesis_quality",
            "line": 615,
            "async": true,
            "decorators": [],
            "docstring": "Validate the quality of synthesized data against defined criteria.\n\nArgs:\n    synthesis_id: ID of the synthesis to validate\n    validation_criteria: Specific criteria to validate against\n    quality_threshold: Minimum quality threshold for passing validation\n    \nReturns:\n    Dictionary containing validation results",
            "args": [
              "synthesis_id",
              "validation_criteria",
              "quality_threshold"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_merge_component_data",
            "line": 716,
            "async": false,
            "decorators": [],
            "docstring": "Merge component data using merge strategy.",
            "args": [
              "components",
              "data_types"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_union_component_data",
            "line": 739,
            "async": false,
            "decorators": [],
            "docstring": "Union component data preserving all values.",
            "args": [
              "components",
              "data_types"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_weighted_average_data",
            "line": 753,
            "async": false,
            "decorators": [],
            "docstring": "Calculate weighted average based on quality scores.",
            "args": [
              "components",
              "data_types"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_conflict_description",
            "line": 773,
            "async": false,
            "decorators": [],
            "docstring": "Generate description for detected conflicts.",
            "args": [
              "conflict_type",
              "source1",
              "source2"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_resolution_suggestions",
            "line": 784,
            "async": false,
            "decorators": [],
            "docstring": "Generate resolution suggestions for conflicts.",
            "args": [
              "conflict_type"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_validation_details",
            "line": 811,
            "async": false,
            "decorators": [],
            "docstring": "Generate detailed validation information.",
            "args": [
              "criterion",
              "score"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_generate_validation_recommendations",
            "line": 838,
            "async": false,
            "decorators": [],
            "docstring": "Generate recommendations for improving validation scores.",
            "args": [
              "criterion",
              "score",
              "threshold"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "orchestrate_component_integration",
            "line": 950,
            "async": true,
            "decorators": [],
            "docstring": "Orchestrate integration between multiple components.\n\nArgs:\n    components: List of components to integrate\n    integration_pattern: Pattern for integration architecture\n    requirements: Specific integration requirements\n    monitoring_level: Level of monitoring to implement\n    \nReturns:\n    Dictionary containing integration orchestration results",
            "args": [
              "components",
              "integration_pattern",
              "requirements",
              "monitoring_level"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "design_integration_workflow",
            "line": 1136,
            "async": true,
            "decorators": [],
            "docstring": "Design a workflow for component integration processes.\n\nArgs:\n    workflow_name: Name of the integration workflow\n    participating_components: Components involved in the workflow\n    workflow_type: Type of workflow (sequential, parallel, conditional)\n    error_handling: Strategy for handling errors\n    \nReturns:\n    Dictionary containing workflow design",
            "args": [
              "workflow_name",
              "participating_components",
              "workflow_type",
              "error_handling"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "monitor_integration_health",
            "line": 1348,
            "async": true,
            "decorators": [],
            "docstring": "Monitor the health and performance of component integrations.\n\nArgs:\n    integration_id: ID of the integration to monitor\n    monitoring_window: Time window for monitoring data\n    include_predictions: Whether to include predictive analysis\n    \nReturns:\n    Dictionary containing integration health monitoring results",
            "args": [
              "integration_id",
              "monitoring_window",
              "include_predictions"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "resolve_integration_conflicts",
            "line": 1526,
            "async": true,
            "decorators": [],
            "docstring": "Resolve conflicts detected in component integrations.\n\nArgs:\n    conflict_id: ID of the conflict to resolve\n    resolution_strategy: Strategy for conflict resolution\n    automatic_resolution: Whether to apply resolution automatically\n    \nReturns:\n    Dictionary containing conflict resolution results",
            "args": [
              "conflict_id",
              "resolution_strategy",
              "automatic_resolution"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "optimize_integration_performance",
            "line": 1735,
            "async": true,
            "decorators": [],
            "docstring": "Optimize the performance of component integrations.\n\nArgs:\n    integration_id: ID of the integration to optimize\n    optimization_targets: Specific performance targets to optimize\n    current_metrics: Current performance metrics to use as baseline\n    \nReturns:\n    Dictionary containing integration performance optimization results",
            "args": [
              "integration_id",
              "optimization_targets",
              "current_metrics"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "validate_integration_completeness",
            "line": 1974,
            "async": true,
            "decorators": [],
            "docstring": "Validate that integration implementation meets all specified requirements.\n\nArgs:\n    integration_specification: Specification document for the integration\n    validation_level: Level of validation to perform\n    \nReturns:\n    Dictionary containing integration completeness validation results",
            "args": [
              "integration_specification",
              "validation_level"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_integration_conflict_description",
            "line": 2219,
            "async": false,
            "decorators": [],
            "docstring": "Generate description for integration conflicts.",
            "args": [
              "conflict_type",
              "components"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compose_multi_component_workflow",
            "line": 2303,
            "async": true,
            "decorators": [],
            "docstring": "Compose a complex workflow across multiple components.\n\nArgs:\n    workflow_name: Name for the composed workflow\n    components: List of components to include in the workflow\n    composition_pattern: Pattern for composing the workflow\n    execution_strategy: Strategy for workflow execution\n    \nReturns:\n    Dictionary containing the composed workflow",
            "args": [
              "workflow_name",
              "components",
              "composition_pattern",
              "execution_strategy"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "execute_composed_workflow",
            "line": 2606,
            "async": true,
            "decorators": [],
            "docstring": "Execute a previously composed multi-component workflow.\n\nArgs:\n    workflow_id: ID of the workflow to execute\n    input_data: Input data for the workflow\n    execution_options: Optional execution configuration overrides\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_id",
              "input_data",
              "execution_options"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_workflow_performance",
            "line": 2782,
            "async": true,
            "decorators": [],
            "docstring": "Analyze the performance of a composed workflow over time.\n\nArgs:\n    workflow_id: ID of the workflow to analyze\n    analysis_period: Time period for performance analysis\n    include_optimization_suggestions: Whether to include optimization suggestions\n    \nReturns:\n    Dictionary containing workflow performance analysis",
            "args": [
              "workflow_id",
              "analysis_period",
              "include_optimization_suggestions"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "optimize_workflow_execution",
            "line": 2984,
            "async": true,
            "decorators": [],
            "docstring": "Optimize workflow execution for better performance, reliability, and efficiency.\n\nArgs:\n    workflow_id: ID of the workflow to optimize\n    optimization_goals: Specific goals for optimization\n    constraints: Constraints to consider during optimization\n    \nReturns:\n    Dictionary containing workflow optimization results",
            "args": [
              "workflow_id",
              "optimization_goals",
              "constraints"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 3342,
            "async": false,
            "decorators": [],
            "docstring": "Get all Synthesis MCP tools.",
            "args": [
              "component_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.decorators.mcp_tool",
            "from": "tekton.mcp.fastmcp.decorators",
            "name": "mcp_tool",
            "alias": null,
            "line": 17
          },
          {
            "module": "random",
            "alias": null,
            "line": 54
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 55
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 55
          },
          {
            "module": "random",
            "alias": null,
            "line": 168
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 169
          },
          {
            "module": "random",
            "alias": null,
            "line": 287
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 288
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 288
          },
          {
            "module": "random",
            "alias": null,
            "line": 390
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 391
          },
          {
            "module": "random",
            "alias": null,
            "line": 498
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 499
          },
          {
            "module": "random",
            "alias": null,
            "line": 632
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 633
          },
          {
            "module": "random",
            "alias": null,
            "line": 969
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 970
          },
          {
            "module": "random",
            "alias": null,
            "line": 1155
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1156
          },
          {
            "module": "random",
            "alias": null,
            "line": 1365
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1366
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 1366
          },
          {
            "module": "random",
            "alias": null,
            "line": 1543
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1544
          },
          {
            "module": "random",
            "alias": null,
            "line": 1752
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1753
          },
          {
            "module": "random",
            "alias": null,
            "line": 1989
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1990
          },
          {
            "module": "random",
            "alias": null,
            "line": 2322
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 2323
          },
          {
            "module": "random",
            "alias": null,
            "line": 2623
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 2624
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 2624
          },
          {
            "module": "random",
            "alias": null,
            "line": 2799
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 2800
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 2800
          },
          {
            "module": "random",
            "alias": null,
            "line": 3001
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 3002
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "synthesize_component_data",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 35,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "create_unified_report",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "merge_data_streams",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 268,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "detect_data_conflicts",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 371,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "optimize_data_flow",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 481,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "validate_synthesis_quality",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 615,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "_merge_component_data",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 716,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "_weighted_average_data",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 753,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "orchestrate_component_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 950,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "design_integration_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 1136,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "monitor_integration_health",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 1348,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "resolve_integration_conflicts",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 1526,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "optimize_integration_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 1735,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "validate_integration_completeness",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 1974,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "compose_multi_component_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 2303,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "execute_composed_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 2606,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "analyze_workflow_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 2782,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "optimize_workflow_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 2984,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/tools.py",
            "line": 3342,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 3356,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "get_all_capabilities",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Get all Synthesis MCP capabilities.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Get all Synthesis MCP tools.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "capabilities.DataSynthesisCapability",
            "from": "capabilities",
            "name": "DataSynthesisCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.IntegrationOrchestrationCapability",
            "from": "capabilities",
            "name": "IntegrationOrchestrationCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.WorkflowCompositionCapability",
            "from": "capabilities",
            "name": "WorkflowCompositionCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "tools.data_synthesis_tools",
            "from": "tools",
            "name": "data_synthesis_tools",
            "alias": null,
            "line": 14
          },
          {
            "module": "tools.integration_orchestration_tools",
            "from": "tools",
            "name": "integration_orchestration_tools",
            "alias": null,
            "line": 14
          },
          {
            "module": "tools.workflow_composition_tools",
            "from": "tools",
            "name": "workflow_composition_tools",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/__init__.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/__init__.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 44,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "DataSynthesisCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 32,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "DataSynthesisCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 54,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "IntegrationOrchestrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 66,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "IntegrationOrchestrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 87,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "WorkflowCompositionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 97,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "WorkflowCompositionCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DataSynthesisCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for data synthesis and unification across components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "IntegrationOrchestrationCapability",
            "line": 46,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for orchestrating complex component integrations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowCompositionCapability",
            "line": 79,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for composing and executing multi-component workflows.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DataSynthesisCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DataSynthesisCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DataSynthesisCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "IntegrationOrchestrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "IntegrationOrchestrationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "IntegrationOrchestrationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WorkflowCompositionCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WorkflowCompositionCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WorkflowCompositionCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Synthesis/synthesis/core/mcp/capabilities.py",
            "line": 97,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 115,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 30,
    "total_functions": 206,
    "total_classes": 31,
    "total_landmarks": 196,
    "patterns": [
      "fastapi",
      "singleton",
      "async",
      "error_handling",
      "mcp",
      "websocket"
    ],
    "api_endpoints": 15,
    "mcp_tools": 0
  }
}