{
  "component": "Terma",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/setup.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 1
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 1
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 27,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 3,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/examples/terminal_client.py",
      "error": "invalid syntax (terminal_client.py, line 372)",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      }
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/examples/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 0,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a new terminal session\n\nArgs:\n    session_id: Optional identifier for the session\n    shell_command: Shell command to run (defaults to user's default shell)",
            "args": [
              "self",
              "session_id",
              "shell_command"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Start the terminal session\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "TerminalSession",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_start_read_loop",
            "line": 137,
            "async": false,
            "decorators": [],
            "docstring": "Start the asynchronous read loop",
            "args": [
              "self"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_read_loop",
            "line": 144,
            "async": true,
            "decorators": [],
            "docstring": "Continuously read from the PTY and call output callbacks",
            "args": [
              "self"
            ],
            "class": "TerminalSession",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 222,
            "async": false,
            "decorators": [],
            "docstring": "Stop the terminal session\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "TerminalSession",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "write",
            "line": 248,
            "async": false,
            "decorators": [],
            "docstring": "Write data to the terminal\n\nArgs:\n    data: Data to write\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "data"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "read",
            "line": 272,
            "async": false,
            "decorators": [],
            "docstring": "Read data from the terminal\n\nArgs:\n    size: Maximum number of bytes to read\n    \nReturns:\n    str: The data read, or None if an error occurred",
            "args": [
              "self",
              "size"
            ],
            "class": "TerminalSession",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "resize",
            "line": 308,
            "async": false,
            "decorators": [],
            "docstring": "Resize the terminal\n\nArgs:\n    rows: Number of rows\n    cols: Number of columns\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "rows",
              "cols"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_output_callback",
            "line": 333,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback to be called when output is received\n\nArgs:\n    callback: Function to call with the output string",
            "args": [
              "self",
              "callback"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_output_callback",
            "line": 341,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a previously registered output callback\n\nArgs:\n    callback: Function to remove",
            "args": [
              "self",
              "callback"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_info",
            "line": 350,
            "async": false,
            "decorators": [],
            "docstring": "Get information about the session\n\nReturns:\n    dict: Session information",
            "args": [
              "self"
            ],
            "class": "TerminalSession",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TerminalSession",
            "line": 21,
            "methods": [
              "__init__",
              "start",
              "_start_read_loop",
              "stop",
              "write",
              "read",
              "resize",
              "register_output_callback",
              "unregister_output_callback",
              "get_info"
            ],
            "decorators": [],
            "docstring": "Manages a single terminal session with PTY interface",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "signal",
            "alias": null,
            "line": 4
          },
          {
            "module": "fcntl",
            "alias": null,
            "line": 5
          },
          {
            "module": "termios",
            "alias": null,
            "line": 6
          },
          {
            "module": "struct",
            "alias": null,
            "line": 7
          },
          {
            "module": "ptyprocess",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "io",
            "alias": null,
            "line": 13
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 15
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 17
          },
          {
            "module": "shlex",
            "alias": null,
            "line": 54
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 114
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 119
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 133
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TerminalSession",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TerminalSession.start",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 40,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TerminalSession._read_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 144,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "TerminalSession.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 222,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TerminalSession.write",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 248,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TerminalSession.read",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 272,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TerminalSession.resize",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 308,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TerminalSession.register_output_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 333,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TerminalSession.unregister_output_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 341,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TerminalSession.get_info",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/terminal.py",
            "line": 350,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 363,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the session manager\n\nArgs:\n    cleanup_interval: Interval in seconds to check for idle sessions\n    idle_timeout: Time in seconds after which an idle session is closed",
            "args": [
              "self",
              "cleanup_interval",
              "idle_timeout"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Start the session manager",
            "args": [
              "self"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Stop the session manager and close all sessions",
            "args": [
              "self"
            ],
            "class": "SessionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_start_cleanup_task",
            "line": 60,
            "async": false,
            "decorators": [],
            "docstring": "Start the cleanup task",
            "args": [
              "self"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_cleanup_loop",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Periodically check for and close idle sessions",
            "args": [
              "self"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_cleanup_idle_sessions",
            "line": 78,
            "async": true,
            "decorators": [],
            "docstring": "Close idle sessions",
            "args": [
              "self"
            ],
            "class": "SessionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_session_async",
            "line": 93,
            "async": true,
            "decorators": [],
            "docstring": "Create a new terminal session asynchronously\n\nArgs:\n    session_id: Optional identifier for the session\n    shell_command: Shell command to run (defaults to user's default shell)\n    \nReturns:\n    str: The ID of the created session, or None if creation failed",
            "args": [
              "self",
              "session_id",
              "shell_command"
            ],
            "class": "SessionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_session",
            "line": 139,
            "async": false,
            "decorators": [],
            "docstring": "Create a new terminal session\n\nArgs:\n    session_id: Optional identifier for the session\n    shell_command: Shell command to run (defaults to user's default shell)\n    \nReturns:\n    str: The ID of the created session, or None if creation failed",
            "args": [
              "self",
              "session_id",
              "shell_command"
            ],
            "class": "SessionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_session",
            "line": 174,
            "async": false,
            "decorators": [],
            "docstring": "Get a terminal session by ID\n\nArgs:\n    session_id: The ID of the session to retrieve\n    \nReturns:\n    The terminal session object, or None if not found",
            "args": [
              "self",
              "session_id"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close_session",
            "line": 185,
            "async": false,
            "decorators": [],
            "docstring": "Close a terminal session\n\nArgs:\n    session_id: The ID of the session to close\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "session_id"
            ],
            "class": "SessionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_sessions",
            "line": 217,
            "async": false,
            "decorators": [],
            "docstring": "List all active terminal sessions\n\nReturns:\n    A list of session information dictionaries",
            "args": [
              "self"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "write_to_session",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": "Write data to a terminal session\n\nArgs:\n    session_id: The ID of the session to write to\n    data: The data to write\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "session_id",
              "data"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "read_from_session",
            "line": 242,
            "async": false,
            "decorators": [],
            "docstring": "Read data from a terminal session\n\nArgs:\n    session_id: The ID of the session to read from\n    size: Maximum number of bytes to read\n    \nReturns:\n    str: The data read, or None if an error occurred",
            "args": [
              "self",
              "session_id",
              "size"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "resize_session",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "Resize a terminal session\n\nArgs:\n    session_id: The ID of the session to resize\n    rows: Number of rows\n    cols: Number of columns\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "session_id",
              "rows",
              "cols"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_output_callback",
            "line": 277,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for terminal output\n\nArgs:\n    session_id: The ID of the session\n    callback: Function to call with the output string\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "session_id",
              "callback"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_output_callback",
            "line": 295,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a terminal output callback\n\nArgs:\n    session_id: The ID of the session\n    callback: Function to remove\n    \nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self",
              "session_id",
              "callback"
            ],
            "class": "SessionManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SessionManager",
            "line": 17,
            "methods": [
              "__init__",
              "start",
              "stop",
              "_start_cleanup_task",
              "create_session",
              "get_session",
              "close_session",
              "list_sessions",
              "write_to_session",
              "read_from_session",
              "resize_session",
              "register_output_callback",
              "unregister_output_callback"
            ],
            "decorators": [],
            "docstring": "Manages multiple terminal sessions",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 3
          },
          {
            "module": "time",
            "alias": null,
            "line": 4
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 5
          },
          {
            "module": "logging",
            "alias": null,
            "line": 6
          },
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "signal",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 9
          },
          {
            "module": "concurrent.futures.ThreadPoolExecutor",
            "from": "concurrent.futures",
            "name": "ThreadPoolExecutor",
            "alias": null,
            "line": 10
          },
          {
            "module": "terminal.TerminalSession",
            "from": "terminal",
            "name": "TerminalSession",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SessionManager",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SessionManager.start",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 42,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.create_session_async",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 93,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SessionManager.create_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 139,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.get_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 174,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.close_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 185,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.list_sessions",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 217,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.write_to_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 225,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "SessionManager.read_from_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 242,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.resize_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 259,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.register_output_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 277,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SessionManager.unregister_output_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/session_manager.py",
            "line": 295,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 311,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM adapter\n\nArgs:\n    config_path: Path to the configuration file",
            "args": [
              "self",
              "config_path"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 81,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates for Terma",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_client",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Get or initialize the LLM client\n\nReturns:\n    Initialized TektonLLMClient",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_session_context",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the conversation context for a session\n\nArgs:\n    session_id: The terminal session ID\n    \nReturns:\n    The session context as a list of messages",
            "args": [
              "self",
              "session_id"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_message",
            "line": 154,
            "async": false,
            "decorators": [],
            "docstring": "Add a message to the conversation context\n\nArgs:\n    session_id: The terminal session ID\n    message: The message content\n    role: The message role (user or assistant)",
            "args": [
              "self",
              "session_id",
              "message",
              "role"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_context",
            "line": 170,
            "async": false,
            "decorators": [],
            "docstring": "Clear the conversation context for a session\n\nArgs:\n    session_id: The terminal session ID",
            "args": [
              "self",
              "session_id"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_provider_and_model",
            "line": 181,
            "async": false,
            "decorators": [],
            "docstring": "Set the LLM provider and model\n\nArgs:\n    provider: Provider ID (e.g., 'claude', 'openai')\n    model: Model ID (e.g., 'claude-3-sonnet-20240229')",
            "args": [
              "self",
              "provider",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_providers",
            "line": 204,
            "async": true,
            "decorators": [],
            "docstring": "Get all available LLM providers and their models\n\nReturns:\n    Dict of provider information",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_current_provider_and_model",
            "line": 220,
            "async": false,
            "decorators": [],
            "docstring": "Get the current provider and model\n\nReturns:\n    Tuple of (provider, model)",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_command",
            "line": 228,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a command and provide assistance\n\nArgs:\n    session_id: The terminal session ID\n    command: The command to analyze\n    \nReturns:\n    The LLM response, or None if an error occurred",
            "args": [
              "self",
              "session_id",
              "command"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_output",
            "line": 274,
            "async": true,
            "decorators": [],
            "docstring": "Analyze command output and provide assistance\n\nArgs:\n    session_id: The terminal session ID\n    command: The command that was run\n    output: The command output\n    \nReturns:\n    The LLM response, or None if an error occurred",
            "args": [
              "self",
              "session_id",
              "command",
              "output"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream_command_analysis",
            "line": 326,
            "async": true,
            "decorators": [],
            "docstring": "Stream command analysis to a callback\n\nArgs:\n    session_id: The terminal session ID\n    command: The command to analyze\n    callback: Async function to call with each chunk of content",
            "args": [
              "self",
              "session_id",
              "command",
              "callback"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_terminal_help",
            "line": 376,
            "async": true,
            "decorators": [],
            "docstring": "Get help with a terminal task\n\nArgs:\n    session_id: The terminal session ID\n    task: The task to get help with\n    \nReturns:\n    The LLM response, or None if an error occurred",
            "args": [
              "self",
              "session_id",
              "task"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMAdapter",
            "line": 24,
            "methods": [
              "__init__",
              "_load_templates",
              "_get_session_context",
              "add_message",
              "clear_context",
              "set_provider_and_model",
              "get_current_provider_and_model"
            ],
            "decorators": [],
            "docstring": "LLM adapter for terminal assistance\n\nThis adapter handles communication with LLMs through the tekton-llm-client.\nIt provides command analysis and terminal assistance functionality.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 3
          },
          {
            "module": "json",
            "alias": null,
            "line": 4
          },
          {
            "module": "logging",
            "alias": null,
            "line": 5
          },
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 7
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 10
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 19
          },
          {
            "module": "utils.config.Config",
            "from": "utils.config",
            "name": "Config",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMAdapter.add_message",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 154,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.clear_context",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 170,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.set_provider_and_model",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 181,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.get_available_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 204,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.get_current_provider_and_model",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 220,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.analyze_command",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 228,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.analyze_output",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 274,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.stream_command_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 326,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.get_terminal_help",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/llm_adapter.py",
            "line": 376,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 420,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/logging.py",
      "analysis": {
        "functions": [
          {
            "name": "setup_logging",
            "line": 7,
            "async": false,
            "decorators": [],
            "docstring": "Set up logging for Terma\n\nArgs:\n    level: Logging level\n    log_file: Optional log file path\n\nReturns:\n    The configured logger",
            "args": [
              "level",
              "log_file"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 3
          },
          {
            "module": "sys",
            "alias": null,
            "line": 4
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 5
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "setup_logging",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/logging.py",
            "line": 7,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 48,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the configuration manager\n\nArgs:\n    config_path: Path to the configuration file",
            "args": [
              "self",
              "config_path"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Load the configuration file",
            "args": [
              "self"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_create_default",
            "line": 71,
            "async": false,
            "decorators": [],
            "docstring": "Create a default configuration",
            "args": [
              "self"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Save the configuration file",
            "args": [
              "self"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get",
            "line": 100,
            "async": false,
            "decorators": [],
            "docstring": "Get a configuration value\n\nArgs:\n    key: The configuration key (can be dot-separated)\n    default: Default value if the key doesn't exist\n    \nReturns:\n    The configuration value",
            "args": [
              "self",
              "key",
              "default"
            ],
            "class": "Config",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Set a configuration value\n\nArgs:\n    key: The configuration key (can be dot-separated)\n    value: The value to set",
            "args": [
              "self",
              "key",
              "value"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_llm_providers",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": "Get all available LLM providers and their models\n\nReturns:\n    Dict of provider information",
            "args": [
              "self"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_provider_models",
            "line": 150,
            "async": false,
            "decorators": [],
            "docstring": "Get all models for a specific provider\n\nArgs:\n    provider_id: Provider identifier\n    \nReturns:\n    List of model information dictionaries",
            "args": [
              "self",
              "provider_id"
            ],
            "class": "Config",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Config",
            "line": 45,
            "methods": [
              "__init__",
              "_load",
              "_create_default",
              "_save",
              "get",
              "set",
              "get_all_llm_providers",
              "get_provider_models"
            ],
            "decorators": [],
            "docstring": "Configuration manager for Terma",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "json",
            "alias": null,
            "line": 4
          },
          {
            "module": "logging",
            "alias": null,
            "line": 5
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "dotenv.load_dotenv",
            "from": "dotenv",
            "name": "load_dotenv",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Config",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Config._load",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 58,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Config._save",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 93,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Config.get",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 100,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Config.set",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Config.get_all_llm_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 142,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Config.get_provider_models",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/config.py",
            "line": 150,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 160,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/utils/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
      "analysis": {
        "functions": [
          {
            "name": "launch_tmux_terminal",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": "Launch a terminal session in tmux\n\nArgs:\n    session_id: Session ID to connect to\n    shell_command: Optional shell command to run\n    server_url: URL of the Terma server\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "session_id",
              "shell_command",
              "server_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "launch_screen_terminal",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Launch a terminal session in screen\n\nArgs:\n    session_id: Session ID to connect to\n    shell_command: Optional shell command to run\n    server_url: URL of the Terma server\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "session_id",
              "shell_command",
              "server_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "launch_native_terminal",
            "line": 185,
            "async": false,
            "decorators": [],
            "docstring": "Launch a terminal session in the native terminal\n\nArgs:\n    session_id: Session ID to connect to\n    shell_command: Optional shell command to run\n    server_url: URL of the Terma server\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "session_id",
              "shell_command",
              "server_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "launch_browser_terminal",
            "line": 278,
            "async": false,
            "decorators": [],
            "docstring": "Launch a browser-based terminal\n\nArgs:\n    session_id: Optional session ID to connect to\n    server_url: URL of the Terma server\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "session_id",
              "server_url"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_or_get_session",
            "line": 315,
            "async": false,
            "decorators": [],
            "docstring": "Create a new session or get an existing one\n\nArgs:\n    server_url: URL of the Terma server\n    session_id: Optional session ID to connect to\n    shell_command: Optional shell command to run\n    \nReturns:\n    str: The session ID, or None if failed",
            "args": [
              "server_url",
              "session_id",
              "shell_command"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "launch_terminal",
            "line": 361,
            "async": false,
            "decorators": [],
            "docstring": "Launch a terminal session\n\nArgs:\n    session_id: Optional session ID to connect to\n    mode: Terminal mode (tmux, screen, native, browser)\n    shell_command: Optional shell command to run\n    server_url: URL of the Terma server\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "session_id",
              "mode",
              "shell_command",
              "server_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 398,
            "async": false,
            "decorators": [],
            "docstring": "Main CLI entry point for terminal launcher",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "launch_browser_terminal",
            "line": 278,
            "async": false
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 3
          },
          {
            "module": "sys",
            "alias": null,
            "line": 4
          },
          {
            "module": "os",
            "alias": null,
            "line": 5
          },
          {
            "module": "webbrowser",
            "alias": null,
            "line": 6
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "requests",
            "alias": null,
            "line": 10
          },
          {
            "module": "tempfile",
            "alias": null,
            "line": 11
          },
          {
            "module": "signal",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 17
          },
          {
            "module": "utils.config.Config",
            "from": "utils.config",
            "name": "Config",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "launch_tmux_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 23,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "launch_screen_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 104,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "launch_native_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 185,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "launch_browser_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 278,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_or_get_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 315,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "launch_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 361,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/launch.py",
            "line": 398,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 419,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/main.py",
      "analysis": {
        "functions": [
          {
            "name": "main",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Main CLI entry point",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "check_port",
            "line": 85,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "host",
              "port",
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 3
          },
          {
            "module": "sys",
            "alias": null,
            "line": 4
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 5
          },
          {
            "module": "logging",
            "alias": null,
            "line": 6
          },
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "signal",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 15
          },
          {
            "module": "utils.config.Config",
            "from": "utils.config",
            "name": "Config",
            "alias": null,
            "line": 16
          },
          {
            "module": "core.session_manager.SessionManager",
            "from": "core.session_manager",
            "name": "SessionManager",
            "alias": null,
            "line": 17
          },
          {
            "module": "api.app.app",
            "from": "api.app",
            "name": "app",
            "alias": null,
            "line": 18
          },
          {
            "module": "api.app.start_server",
            "from": "api.app",
            "name": "start_server",
            "alias": null,
            "line": 18
          },
          {
            "module": "api.ui_server.start_ui_server",
            "from": "api.ui_server",
            "name": "start_ui_server",
            "alias": null,
            "line": 19
          },
          {
            "module": "socket",
            "alias": null,
            "line": 86
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 92
          },
          {
            "module": "multiprocessing",
            "alias": null,
            "line": 118
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/main.py",
            "line": 25,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "check_port",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/cli/main.py",
            "line": 85,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 204,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/integrations/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/integrations/hermes_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes integration\n\nArgs:\n    api_url: URL of the Hermes API\n    session_manager: SessionManager instance to manage terminal sessions\n    component_name: Name of this component",
            "args": [
              "self",
              "api_url",
              "session_manager",
              "component_name"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_capabilities",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": "Get the capabilities for Terma\n\nReturns:\n    List of capability definitions",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_setup_handlers",
            "line": 154,
            "async": false,
            "decorators": [],
            "docstring": "Set up command handlers\n\nReturns:\n    Dictionary of command handlers",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_capabilities",
            "line": 169,
            "async": false,
            "decorators": [],
            "docstring": "Register Terma capabilities with Hermes",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_start_heartbeat",
            "line": 207,
            "async": false,
            "decorators": [],
            "docstring": "Start sending heartbeat to Hermes",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_heartbeat_loop",
            "line": 215,
            "async": true,
            "decorators": [],
            "docstring": "Send periodic heartbeat to Hermes",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_send_heartbeat",
            "line": 226,
            "async": true,
            "decorators": [],
            "docstring": "Send a heartbeat to Hermes",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_subscribe_to_events",
            "line": 248,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe to events from Hermes",
            "args": [
              "self"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_message",
            "line": 277,
            "async": true,
            "decorators": [],
            "docstring": "Handle a message from Hermes\n\nArgs:\n    message: The message to handle\n    \nReturns:\n    The response to send back",
            "args": [
              "self",
              "message"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "publish_event",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Publish an event to Hermes\n\nArgs:\n    event_name: Name of the event\n    payload: Event payload",
            "args": [
              "self",
              "event_name",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_create_terminal",
            "line": 367,
            "async": true,
            "decorators": [],
            "docstring": "Handle create terminal command\n\nArgs:\n    payload: Command payload\n    \nReturns:\n    Response payload",
            "args": [
              "self",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_close_terminal",
            "line": 395,
            "async": true,
            "decorators": [],
            "docstring": "Handle close terminal command\n\nArgs:\n    payload: Command payload\n    \nReturns:\n    Response payload",
            "args": [
              "self",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_write_terminal",
            "line": 424,
            "async": true,
            "decorators": [],
            "docstring": "Handle write terminal command\n\nArgs:\n    payload: Command payload\n    \nReturns:\n    Response payload",
            "args": [
              "self",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_read_terminal",
            "line": 452,
            "async": true,
            "decorators": [],
            "docstring": "Handle read terminal command\n\nArgs:\n    payload: Command payload\n    \nReturns:\n    Response payload",
            "args": [
              "self",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_list_terminals",
            "line": 478,
            "async": true,
            "decorators": [],
            "docstring": "Handle list terminals command\n\nArgs:\n    payload: Command payload\n    \nReturns:\n    Response payload",
            "args": [
              "self",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_resize_terminal",
            "line": 495,
            "async": true,
            "decorators": [],
            "docstring": "Handle resize terminal command\n\nArgs:\n    payload: Command payload\n    \nReturns:\n    Response payload",
            "args": [
              "self",
              "payload"
            ],
            "class": "HermesIntegration",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesIntegration",
            "line": 14,
            "methods": [
              "__init__",
              "_get_capabilities",
              "_setup_handlers",
              "register_capabilities",
              "_start_heartbeat",
              "_subscribe_to_events"
            ],
            "decorators": [],
            "docstring": "Handles integration with the Hermes message bus for terminal operations",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 3
          },
          {
            "module": "logging",
            "alias": null,
            "line": 4
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 5
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 6
          },
          {
            "module": "requests",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 8
          },
          {
            "module": "core.session_manager.SessionManager",
            "from": "core.session_manager",
            "name": "SessionManager",
            "alias": null,
            "line": 9
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesIntegration",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/integrations/hermes_integration.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesIntegration.register_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/integrations/hermes_integration.py",
            "line": 169,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesIntegration.handle_message",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/integrations/hermes_integration.py",
            "line": 277,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesIntegration.publish_event",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/integrations/hermes_integration.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 522,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/__init__.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 1,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_terminal_status",
            "line": 69,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get overall Terma terminal system status.\n\nReturns:\n    Dictionary containing Terma system status and capabilities",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_terminal_workflow",
            "line": 99,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a predefined terminal management workflow.\n\nArgs:\n    workflow_name: Name of the workflow to execute\n    parameters: Parameters for the workflow\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_name",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_terminal_health",
            "line": 143,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get comprehensive Terma terminal system health information.\n\nReturns:\n    Dictionary containing detailed health information",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "terminal_session_bulk_action",
            "line": 209,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Perform bulk actions on multiple terminal sessions.\n\nArgs:\n    action: Action to perform on sessions\n    session_filters: Filters to select sessions\n    parameters: Additional parameters for the action\n    \nReturns:\n    Dictionary containing bulk action results",
            "args": [
              "action",
              "session_filters",
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_execute_session_optimization_workflow",
            "line": 294,
            "async": true,
            "decorators": [],
            "docstring": "Execute terminal session optimization workflow.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_troubleshooting_workflow",
            "line": 329,
            "async": true,
            "decorators": [],
            "docstring": "Execute LLM-assisted troubleshooting workflow.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_integration_workflow",
            "line": 364,
            "async": true,
            "decorators": [],
            "docstring": "Execute multi-component terminal integration workflow.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_performance_analysis_workflow",
            "line": 396,
            "async": true,
            "decorators": [],
            "docstring": "Execute terminal performance analysis workflow.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_health_recommendations",
            "line": 439,
            "async": false,
            "decorators": [],
            "docstring": "Generate health-based recommendations.",
            "args": [
              "health_data"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_action_details",
            "line": 457,
            "async": false,
            "decorators": [],
            "docstring": "Generate action-specific details.",
            "args": [
              "action",
              "session"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_get_connection_type",
            "line": 496,
            "async": false,
            "decorators": [],
            "docstring": "Get connection type for component integration.",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPRequest",
            "line": 30,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 36,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "get_terminal_status",
            "line": 69,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_terminal_workflow",
            "line": 99,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_terminal_health",
            "line": 143,
            "method": "@get",
            "async": true
          },
          {
            "name": "terminal_session_bulk_action",
            "line": 209,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.server.FastMCPServer",
            "from": "tekton.mcp.fastmcp.server",
            "name": "FastMCPServer",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_mcp_endpoints",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.FastMCPError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "FastMCPError",
            "alias": null,
            "line": 16
          },
          {
            "module": "terma.core.mcp.tools.terminal_management_tools",
            "from": "terma.core.mcp.tools",
            "name": "terminal_management_tools",
            "alias": null,
            "line": 18
          },
          {
            "module": "terma.core.mcp.tools.llm_integration_tools",
            "from": "terma.core.mcp.tools",
            "name": "llm_integration_tools",
            "alias": null,
            "line": 18
          },
          {
            "module": "terma.core.mcp.tools.system_integration_tools",
            "from": "terma.core.mcp.tools",
            "name": "system_integration_tools",
            "alias": null,
            "line": 18
          },
          {
            "module": "terma.core.mcp.capabilities.TerminalManagementCapability",
            "from": "terma.core.mcp.capabilities",
            "name": "TerminalManagementCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "terma.core.mcp.capabilities.LLMIntegrationCapability",
            "from": "terma.core.mcp.capabilities",
            "name": "LLMIntegrationCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "terma.core.mcp.capabilities.SystemIntegrationCapability",
            "from": "terma.core.mcp.capabilities",
            "name": "SystemIntegrationCapability",
            "alias": null,
            "line": 23
          },
          {
            "module": "random",
            "alias": null,
            "line": 151
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 152
          },
          {
            "module": "random",
            "alias": null,
            "line": 226
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 227
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 228
          },
          {
            "module": "random",
            "alias": null,
            "line": 296
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 297
          },
          {
            "module": "random",
            "alias": null,
            "line": 331
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 332
          },
          {
            "module": "random",
            "alias": null,
            "line": 366
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 367
          },
          {
            "module": "random",
            "alias": null,
            "line": 398
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 399
          },
          {
            "module": "random",
            "alias": null,
            "line": 459
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 30,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_terminal_status",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_terminal_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_terminal_health",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "terminal_session_bulk_action",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 209,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "_generate_action_details",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/fastmcp_endpoints.py",
            "line": 457,
            "priority": "medium",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 509,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "get_session_manager",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the session manager",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_websocket_server",
            "line": 122,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the WebSocket server",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_hermes_integration",
            "line": 129,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the Hermes integration",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup_event",
            "line": 142,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Startup event handler",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 158,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Shutdown event handler",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 171,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 176,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint",
            "args": [
              "session_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_sessions",
            "line": 190,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all active terminal sessions",
            "args": [
              "session_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_session",
            "line": 196,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new terminal session",
            "args": [
              "session_create",
              "session_manager",
              "hermes_integration"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_session",
            "line": 222,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about a terminal session",
            "args": [
              "session_id",
              "session_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close_session",
            "line": 234,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Close a terminal session",
            "args": [
              "session_id",
              "session_manager",
              "hermes_integration"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "write_to_session",
            "line": 256,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Write data to a terminal session",
            "args": [
              "session_id",
              "write_request",
              "session_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "read_from_session",
            "line": 269,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Read data from a terminal session",
            "args": [
              "session_id",
              "size",
              "session_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "hermes_message",
            "line": 283,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Handle message from Hermes",
            "args": [
              "message",
              "hermes_integration"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_event",
            "line": 295,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Handle event from Hermes",
            "args": [
              "event",
              "hermes_integration"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 308,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for terminal communication",
            "args": [
              "websocket",
              "session_id",
              "websocket_server"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_llm_providers",
            "line": 334,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get available LLM providers and models",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_llm_models",
            "line": 370,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get models for a specific LLM provider",
            "args": [
              "provider_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_llm_provider_model",
            "line": 389,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Set the LLM provider and model",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "launch_terminal",
            "line": 411,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Launch a standalone terminal for a session",
            "args": [
              "session_id",
              "session_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_server",
            "line": 501,
            "async": true,
            "decorators": [],
            "docstring": "Start the FastAPI server and WebSocket server\n\nArgs:\n    host: Host to bind to\n    port: Port to bind the API server to (defaults to Terma's standard port)\n    ws_port: Port to bind the WebSocket server to (defaults to None, which disables the WebSocket server)",
            "args": [
              "host",
              "port",
              "ws_port"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SessionCreate",
            "line": 32,
            "methods": [],
            "decorators": [],
            "docstring": "Model for session creation request",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SessionResponse",
            "line": 36,
            "methods": [],
            "decorators": [],
            "docstring": "Model for session response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SessionInfo",
            "line": 41,
            "methods": [],
            "decorators": [],
            "docstring": "Model for session information",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SessionsResponse",
            "line": 50,
            "methods": [],
            "decorators": [],
            "docstring": "Model for sessions list response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WriteRequest",
            "line": 54,
            "methods": [],
            "decorators": [],
            "docstring": "Model for write request",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WriteResponse",
            "line": 58,
            "methods": [],
            "decorators": [],
            "docstring": "Model for write response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ReadResponse",
            "line": 63,
            "methods": [],
            "decorators": [],
            "docstring": "Model for read response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StatusResponse",
            "line": 67,
            "methods": [],
            "decorators": [],
            "docstring": "Model for status response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HealthResponse",
            "line": 71,
            "methods": [],
            "decorators": [],
            "docstring": "Model for health response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HermesMessage",
            "line": 78,
            "methods": [],
            "decorators": [],
            "docstring": "Model for Hermes message",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HermesEvent",
            "line": 87,
            "methods": [],
            "decorators": [],
            "docstring": "Model for Hermes event",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMProvidersResponse",
            "line": 317,
            "methods": [],
            "decorators": [],
            "docstring": "Model for LLM providers response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMModelsResponse",
            "line": 323,
            "methods": [],
            "decorators": [],
            "docstring": "Model for LLM models response",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMSetRequest",
            "line": 328,
            "methods": [],
            "decorators": [],
            "docstring": "Model for setting LLM provider and model",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "root",
            "line": 171,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 176,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_sessions",
            "line": 190,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_session",
            "line": 196,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_session",
            "line": 222,
            "method": "@get",
            "async": true
          },
          {
            "name": "close_session",
            "line": 234,
            "method": "@delete",
            "async": true
          },
          {
            "name": "write_to_session",
            "line": 256,
            "method": "@post",
            "async": true
          },
          {
            "name": "read_from_session",
            "line": 269,
            "method": "@get",
            "async": true
          },
          {
            "name": "hermes_message",
            "line": 283,
            "method": "@post",
            "async": true
          },
          {
            "name": "handle_event",
            "line": 295,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_llm_providers",
            "line": 334,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_llm_models",
            "line": 370,
            "method": "@get",
            "async": true
          },
          {
            "name": "set_llm_provider_model",
            "line": 389,
            "method": "@post",
            "async": true
          },
          {
            "name": "launch_terminal",
            "line": 411,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "get_websocket_server",
            "line": 122,
            "async": false
          },
          {
            "name": "websocket_endpoint",
            "line": 308,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 3
          },
          {
            "module": "logging",
            "alias": null,
            "line": 4
          },
          {
            "module": "os",
            "alias": null,
            "line": 5
          },
          {
            "module": "sys",
            "alias": null,
            "line": 6
          },
          {
            "module": "time",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 20
          },
          {
            "module": "core.session_manager.SessionManager",
            "from": "core.session_manager",
            "name": "SessionManager",
            "alias": null,
            "line": 22
          },
          {
            "module": "websocket.TerminalWebSocketServer",
            "from": "websocket",
            "name": "TerminalWebSocketServer",
            "alias": null,
            "line": 23
          },
          {
            "module": "integrations.hermes_integration.HermesIntegration",
            "from": "integrations.hermes_integration",
            "name": "HermesIntegration",
            "alias": null,
            "line": 24
          },
          {
            "module": "fastmcp_endpoints.mcp_router",
            "from": "fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 25
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 28
          },
          {
            "module": "tekton.utils.port_config.get_hermes_url",
            "from": "tekton.utils.port_config",
            "name": "get_hermes_url",
            "alias": null,
            "line": 132
          },
          {
            "module": "tekton.utils.port_config.get_terma_port",
            "from": "tekton.utils.port_config",
            "name": "get_terma_port",
            "alias": null,
            "line": 132
          },
          {
            "module": "core.llm_adapter.LLMAdapter",
            "from": "core.llm_adapter",
            "name": "LLMAdapter",
            "alias": null,
            "line": 336
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 337
          },
          {
            "module": "core.llm_adapter.LLMAdapter",
            "from": "core.llm_adapter",
            "name": "LLMAdapter",
            "alias": null,
            "line": 372
          },
          {
            "module": "utils.config.LLM_PROVIDERS",
            "from": "utils.config",
            "name": "LLM_PROVIDERS",
            "alias": null,
            "line": 373
          },
          {
            "module": "core.llm_adapter.LLMAdapter",
            "from": "core.llm_adapter",
            "name": "LLMAdapter",
            "alias": null,
            "line": 391
          },
          {
            "module": "utils.config.LLM_PROVIDERS",
            "from": "utils.config",
            "name": "LLM_PROVIDERS",
            "alias": null,
            "line": 392
          },
          {
            "module": "fastapi.responses.HTMLResponse",
            "from": "fastapi.responses",
            "name": "HTMLResponse",
            "alias": null,
            "line": 497
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 509
          },
          {
            "module": "logging",
            "alias": null,
            "line": 510
          },
          {
            "module": "os",
            "alias": null,
            "line": 514
          },
          {
            "module": "tekton.utils.port_config.get_terma_port",
            "from": "tekton.utils.port_config",
            "name": "get_terma_port",
            "alias": null,
            "line": 518
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 526
          },
          {
            "module": "socket",
            "alias": null,
            "line": 540
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SessionCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SessionResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SessionInfo",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SessionsResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 50,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WriteRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 54,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WriteResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 58,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ReadResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 63,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "StatusResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 67,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "HealthResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 71,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "HermesMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 78,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "HermesEvent",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 87,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_session_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_websocket_server",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 122,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_hermes_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 129,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 158,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 171,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 176,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_sessions",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 190,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 222,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "close_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 234,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "write_to_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 256,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "read_from_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 269,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "hermes_message",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 283,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_event",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 295,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 308,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "LLMProvidersResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 317,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMModelsResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 323,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMSetRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 328,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_llm_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_llm_models",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 370,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_llm_provider_model",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 389,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "launch_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 411,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "start_server",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/app.py",
            "line": 501,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 557,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
      "analysis": {
        "functions": [
          {
            "name": "root",
            "line": 36,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Redirect to the terminal page",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_terminal_ui",
            "line": 41,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Return the terminal UI",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "launch_terminal",
            "line": 55,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Launch a standalone terminal",
            "args": [
              "session_id",
              "server_url",
              "ws_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_terminal_session",
            "line": 69,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Return the terminal UI for a specific session",
            "args": [
              "session_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_image",
            "line": 74,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Serve images",
            "args": [
              "filename"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_ui_server",
            "line": 88,
            "async": true,
            "decorators": [],
            "docstring": "Start the UI server asynchronously\n\nArgs:\n    host: The host to bind to (defaults to TERMA_UI_HOST env var or \"0.0.0.0\")\n    port: The port to bind to (defaults to TERMA_WS_PORT env var or 8767)\n    \nReturns:\n    The running server instance",
            "args": [
              "host",
              "port"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 36,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_terminal_ui",
            "line": 41,
            "method": "@get",
            "async": true
          },
          {
            "name": "launch_terminal",
            "line": 55,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_terminal_session",
            "line": 69,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_image",
            "line": 74,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "sys",
            "alias": null,
            "line": 4
          },
          {
            "module": "logging",
            "alias": null,
            "line": 5
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 6
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.responses.HTMLResponse",
            "from": "fastapi.responses",
            "name": "HTMLResponse",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.responses.RedirectResponse",
            "from": "fastapi.responses",
            "name": "RedirectResponse",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.responses.FileResponse",
            "from": "fastapi.responses",
            "name": "FileResponse",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.staticfiles.StaticFiles",
            "from": "fastapi.staticfiles",
            "name": "StaticFiles",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.templating.Jinja2Templates",
            "from": "fastapi.templating",
            "name": "Jinja2Templates",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 20
          },
          {
            "module": "os",
            "alias": null,
            "line": 98
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 109
          },
          {
            "module": "os",
            "alias": null,
            "line": 110
          },
          {
            "module": "socket",
            "alias": null,
            "line": 116
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 122
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
            "line": 36,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_terminal_ui",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
            "line": 41,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "launch_terminal",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
            "line": 55,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_terminal_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_image",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
            "line": 74,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "start_ui_server",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/ui_server.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 146,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the WebSocket handler\n\nArgs:\n    session_id: The ID of the session\n    session_manager: SessionManager instance to manage terminal sessions",
            "args": [
              "self",
              "session_id",
              "session_manager"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_websocket",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Add a WebSocket connection\n\nArgs:\n    websocket: The WebSocket connection",
            "args": [
              "self",
              "websocket"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_websocket",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Remove a WebSocket connection\n\nArgs:\n    websocket: The WebSocket connection to remove",
            "args": [
              "self",
              "websocket"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_terminal_output",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Handle output from the terminal and send to all WebSocket clients\n\nArgs:\n    data: The terminal output data",
            "args": [
              "self",
              "data"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_send_output",
            "line": 98,
            "async": true,
            "decorators": [],
            "docstring": "Send output data to all connected WebSockets\n\nArgs:\n    data: The data to send",
            "args": [
              "self",
              "data"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "handle_message",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": "Handle a message from a WebSocket client\n\nArgs:\n    websocket: The WebSocket connection\n    message: The message received",
            "args": [
              "self",
              "websocket",
              "message"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_llm_request",
            "line": 156,
            "async": true,
            "decorators": [],
            "docstring": "Handle a request for LLM assistance\n\nArgs:\n    websocket: The WebSocket connection\n    command: The command to analyze\n    is_output_analysis: Whether this is an output analysis request",
            "args": [
              "self",
              "websocket",
              "command",
              "is_output_analysis"
            ],
            "class": "TerminalWebSocketHandler",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the WebSocket server\n\nArgs:\n    session_manager: SessionManager instance to manage terminal sessions",
            "args": [
              "self",
              "session_manager"
            ],
            "class": "TerminalWebSocketServer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_connection",
            "line": 253,
            "async": true,
            "decorators": [],
            "docstring": "Handle a new WebSocket connection\n\nArgs:\n    websocket: The WebSocket connection\n    path: The connection path",
            "args": [
              "self",
              "websocket",
              "path"
            ],
            "class": "TerminalWebSocketServer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_extract_session_id",
            "line": 295,
            "async": false,
            "decorators": [],
            "docstring": "Extract session ID from WebSocket path\n\nArgs:\n    path: The WebSocket path\n    \nReturns:\n    str: The session ID, or None if invalid",
            "args": [
              "self",
              "path"
            ],
            "class": "TerminalWebSocketServer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_handler",
            "line": 311,
            "async": false,
            "decorators": [],
            "docstring": "Get or create a handler for the session\n\nArgs:\n    session_id: The session ID\n    \nReturns:\n    TerminalWebSocketHandler: The handler",
            "args": [
              "self",
              "session_id"
            ],
            "class": "TerminalWebSocketServer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_server",
            "line": 324,
            "async": true,
            "decorators": [],
            "docstring": "Start the WebSocket server\n\nArgs:\n    host: Host to bind to (defaults to TERMA_WS_HOST env var or \"0.0.0.0\")\n    port: Port to bind to (defaults to TERMA_WS_PORT env var or 8767)",
            "args": [
              "self",
              "host",
              "port"
            ],
            "class": "TerminalWebSocketServer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop_server",
            "line": 384,
            "async": false,
            "decorators": [],
            "docstring": "Stop the WebSocket server",
            "args": [
              "self"
            ],
            "class": "TerminalWebSocketServer",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TerminalWebSocketHandler",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Handles WebSocket connections for a single terminal session",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TerminalWebSocketServer",
            "line": 240,
            "methods": [
              "__init__",
              "_extract_session_id",
              "_get_or_create_handler",
              "stop_server"
            ],
            "decorators": [],
            "docstring": "WebSocket server for terminal I/O",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "add_websocket",
            "line": 43,
            "async": true
          },
          {
            "name": "remove_websocket",
            "line": 64,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 3
          },
          {
            "module": "json",
            "alias": null,
            "line": 4
          },
          {
            "module": "logging",
            "alias": null,
            "line": 5
          },
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "sys",
            "alias": null,
            "line": 7
          },
          {
            "module": "re",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "websockets",
            "alias": null,
            "line": 12
          },
          {
            "module": "websockets.server.WebSocketServerProtocol",
            "from": "websockets.server",
            "name": "WebSocketServerProtocol",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 20
          },
          {
            "module": "core.session_manager.SessionManager",
            "from": "core.session_manager",
            "name": "SessionManager",
            "alias": null,
            "line": 22
          },
          {
            "module": "utils.logging.setup_logging",
            "from": "utils.logging",
            "name": "setup_logging",
            "alias": null,
            "line": 23
          },
          {
            "module": "core.llm_adapter.LLMAdapter",
            "from": "core.llm_adapter",
            "name": "LLMAdapter",
            "alias": null,
            "line": 188
          },
          {
            "module": "os",
            "alias": null,
            "line": 331
          },
          {
            "module": "socket",
            "alias": null,
            "line": 343
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 349
          },
          {
            "module": "os",
            "alias": null,
            "line": 361
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 381
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TerminalWebSocketHandler",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketHandler.add_websocket",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketHandler.remove_websocket",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketHandler._send_output",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 98,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketHandler.handle_message",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketHandler._handle_llm_request",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 156,
            "priority": "medium",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "class_definition",
            "name": "TerminalWebSocketServer",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 240,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketServer.handle_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 253,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketServer.start_server",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 324,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TerminalWebSocketServer.stop_server",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/api/websocket.py",
            "line": 384,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 388,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "create_terminal_session",
            "line": 22,
            "async": true,
            "decorators": [],
            "docstring": "Create and configure a new terminal session.\n\nArgs:\n    shell_command: Shell command to execute (defaults to user shell)\n    environment: Environment variables for the session\n    working_directory: Initial working directory\n    session_name: Optional name for the session\n    \nReturns:\n    Dictionary containing session creation results",
            "args": [
              "shell_command",
              "environment",
              "working_directory",
              "session_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "manage_session_lifecycle",
            "line": 95,
            "async": true,
            "decorators": [],
            "docstring": "Manage terminal session lifecycle and state transitions.\n\nArgs:\n    session_id: ID of the session to manage\n    action: Lifecycle action to perform\n    parameters: Additional parameters for the action\n    \nReturns:\n    Dictionary containing lifecycle management results",
            "args": [
              "session_id",
              "action",
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "execute_terminal_commands",
            "line": 169,
            "async": true,
            "decorators": [],
            "docstring": "Execute commands in a specific terminal session.\n\nArgs:\n    session_id: ID of the target session\n    commands: List of commands to execute\n    execution_mode: How to execute multiple commands\n    timeout_seconds: Maximum execution time\n    \nReturns:\n    Dictionary containing command execution results",
            "args": [
              "session_id",
              "commands",
              "execution_mode",
              "timeout_seconds"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "monitor_session_performance",
            "line": 252,
            "async": true,
            "decorators": [],
            "docstring": "Monitor terminal session performance and resource usage.\n\nArgs:\n    session_ids: List of session IDs to monitor\n    metrics: Specific metrics to collect\n    duration_minutes: Monitoring duration\n    \nReturns:\n    Dictionary containing performance monitoring results",
            "args": [
              "session_ids",
              "metrics",
              "duration_minutes"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "configure_terminal_settings",
            "line": 356,
            "async": true,
            "decorators": [],
            "docstring": "Configure terminal settings, shell preferences, and environment.\n\nArgs:\n    session_id: ID of the session to configure\n    settings: Dictionary of settings to apply\n    scope: Scope of settings (session, user, global)\n    \nReturns:\n    Dictionary containing configuration results",
            "args": [
              "session_id",
              "settings",
              "scope"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "backup_session_state",
            "line": 435,
            "async": true,
            "decorators": [],
            "docstring": "Backup and restore terminal session state and history.\n\nArgs:\n    session_ids: List of session IDs to backup\n    backup_type: Type of backup to create\n    include_history: Whether to include command history\n    compression: Whether to compress backup data\n    \nReturns:\n    Dictionary containing backup operation results",
            "args": [
              "session_ids",
              "backup_type",
              "include_history",
              "compression"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "provide_command_assistance",
            "line": 554,
            "async": true,
            "decorators": [],
            "docstring": "Provide AI-powered assistance for terminal commands.\n\nArgs:\n    command_query: User's query about a command\n    context: Current terminal context\n    shell_type: Type of shell being used\n    assistance_level: Level of assistance detail\n    \nReturns:\n    Dictionary containing command assistance",
            "args": [
              "command_query",
              "context",
              "shell_type",
              "assistance_level"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_terminal_output",
            "line": 609,
            "async": true,
            "decorators": [],
            "docstring": "Analyze and interpret terminal output and error messages.\n\nArgs:\n    output_text: Terminal output to analyze\n    analysis_type: Type of analysis to perform\n    session_context: Context from the terminal session\n    \nReturns:\n    Dictionary containing output analysis",
            "args": [
              "output_text",
              "analysis_type",
              "session_context"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "suggest_command_improvements",
            "line": 691,
            "async": true,
            "decorators": [],
            "docstring": "Suggest command improvements and alternatives.\n\nArgs:\n    command: Original command to improve\n    context: Context about the command usage\n    optimization_goals: Goals for optimization\n    \nReturns:\n    Dictionary containing improvement suggestions",
            "args": [
              "command",
              "context",
              "optimization_goals"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "detect_terminal_issues",
            "line": 774,
            "async": true,
            "decorators": [],
            "docstring": "Detect and diagnose terminal issues and problems.\n\nArgs:\n    session_id: ID of the session to analyze\n    detection_scope: Scope of issue detection\n    include_predictions: Whether to include predictive analysis\n    \nReturns:\n    Dictionary containing issue detection results",
            "args": [
              "session_id",
              "detection_scope",
              "include_predictions"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_terminal_workflows",
            "line": 887,
            "async": true,
            "decorators": [],
            "docstring": "Generate automated terminal command workflows.\n\nArgs:\n    workflow_type: Type of workflow to generate\n    parameters: Parameters for workflow generation\n    complexity_level: Complexity level of the workflow\n    \nReturns:\n    Dictionary containing generated workflow",
            "args": [
              "workflow_type",
              "parameters",
              "complexity_level"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "optimize_llm_interactions",
            "line": 1002,
            "async": true,
            "decorators": [],
            "docstring": "Optimize LLM interactions within terminal context.\n\nArgs:\n    session_id: ID of the session to optimize\n    optimization_goals: Goals for optimization\n    current_performance: Current performance metrics\n    \nReturns:\n    Dictionary containing optimization results",
            "args": [
              "session_id",
              "optimization_goals",
              "current_performance"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "integrate_with_tekton_components",
            "line": 1109,
            "async": true,
            "decorators": [],
            "docstring": "Integrate terminal sessions with other Tekton components.\n\nArgs:\n    component_names: Names of components to integrate with\n    integration_type: Type of integration\n    configuration: Integration configuration parameters\n    \nReturns:\n    Dictionary containing integration results",
            "args": [
              "component_names",
              "integration_type",
              "configuration"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "synchronize_session_data",
            "line": 1185,
            "async": true,
            "decorators": [],
            "docstring": "Synchronize terminal data and state across components.\n\nArgs:\n    sync_targets: Target systems for synchronization\n    data_types: Types of data to synchronize\n    sync_mode: Mode of synchronization\n    \nReturns:\n    Dictionary containing synchronization results",
            "args": [
              "sync_targets",
              "data_types",
              "sync_mode"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "manage_terminal_security",
            "line": 1272,
            "async": true,
            "decorators": [],
            "docstring": "Manage terminal security, permissions, and access control.\n\nArgs:\n    security_policies: Security policies to implement\n    enforcement_level: Level of security enforcement\n    audit_logging: Whether to enable audit logging\n    \nReturns:\n    Dictionary containing security management results",
            "args": [
              "security_policies",
              "enforcement_level",
              "audit_logging"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "track_terminal_metrics",
            "line": 1394,
            "async": true,
            "decorators": [],
            "docstring": "Track terminal usage metrics and performance analytics.\n\nArgs:\n    metric_categories: Categories of metrics to track\n    time_period: Time period for metrics collection\n    aggregation_level: Level of metric aggregation\n    \nReturns:\n    Dictionary containing metrics tracking results",
            "args": [
              "metric_categories",
              "time_period",
              "aggregation_level"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_session_recommendations",
            "line": 1518,
            "async": false,
            "decorators": [],
            "docstring": "Generate session management recommendations.",
            "args": [
              "action",
              "session_state"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_generate_mock_output",
            "line": 1534,
            "async": false,
            "decorators": [],
            "docstring": "Generate mock terminal output.",
            "args": [
              "command",
              "stream_type"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_performance_recommendations",
            "line": 1547,
            "async": false,
            "decorators": [],
            "docstring": "Generate performance recommendations.",
            "args": [
              "monitoring_results"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_merge_settings",
            "line": 1556,
            "async": false,
            "decorators": [],
            "docstring": "Merge default and provided settings.",
            "args": [
              "default",
              "provided"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_identify_changed_settings",
            "line": 1567,
            "async": false,
            "decorators": [],
            "docstring": "Identify which settings were changed.",
            "args": [
              "default",
              "provided"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_requires_restart",
            "line": 1578,
            "async": false,
            "decorators": [],
            "docstring": "Check if settings require terminal restart.",
            "args": [
              "settings"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_validate_settings",
            "line": 1584,
            "async": false,
            "decorators": [],
            "docstring": "Validate terminal settings.",
            "args": [
              "settings"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_restore_instructions",
            "line": 1593,
            "async": false,
            "decorators": [],
            "docstring": "Get backup restore instructions.",
            "args": [
              "backup_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_command_assistance",
            "line": 1602,
            "async": false,
            "decorators": [],
            "docstring": "Generate mock command assistance.",
            "args": [
              "query",
              "shell_type",
              "level"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_command_resources",
            "line": 1613,
            "async": false,
            "decorators": [],
            "docstring": "Get command learning resources.",
            "args": [
              "query"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_follow_up_questions",
            "line": 1621,
            "async": false,
            "decorators": [],
            "docstring": "Generate follow-up questions.",
            "args": [
              "query"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_suggest_next_steps",
            "line": 1630,
            "async": false,
            "decorators": [],
            "docstring": "Suggest next steps based on analysis.",
            "args": [
              "analysis"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_improvement_resources",
            "line": 1639,
            "async": false,
            "decorators": [],
            "docstring": "Get command improvement resources.",
            "args": [
              "command"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_remediation_plan",
            "line": 1647,
            "async": false,
            "decorators": [],
            "docstring": "Create issue remediation plan.",
            "args": [
              "issues"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_optimization_plan",
            "line": 1657,
            "async": false,
            "decorators": [],
            "docstring": "Create LLM optimization implementation plan.",
            "args": [
              "optimization_result"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_improvements",
            "line": 1667,
            "async": false,
            "decorators": [],
            "docstring": "Calculate improvement metrics.",
            "args": [
              "baseline",
              "optimized"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_connection_method",
            "line": 1682,
            "async": false,
            "decorators": [],
            "docstring": "Get connection method for component.",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_component_capabilities",
            "line": 1695,
            "async": false,
            "decorators": [],
            "docstring": "Get capabilities for component.",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_component_endpoints",
            "line": 1708,
            "async": false,
            "decorators": [],
            "docstring": "Get endpoints for component.",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_setup_integration_monitoring",
            "line": 1721,
            "async": false,
            "decorators": [],
            "docstring": "Setup integration monitoring.",
            "args": [
              "integration_result"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_sync_conflicts",
            "line": 1731,
            "async": false,
            "decorators": [],
            "docstring": "Handle synchronization conflicts.",
            "args": [
              "sync_result"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_merge_security_policies",
            "line": 1741,
            "async": false,
            "decorators": [],
            "docstring": "Merge security policies.",
            "args": [
              "default",
              "provided"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_generate_compliance_report",
            "line": 1752,
            "async": false,
            "decorators": [],
            "docstring": "Generate security compliance report.",
            "args": [
              "security_result"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "generate_terminal_workflows",
            "line": 887,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "psutil",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 15
          },
          {
            "module": "random",
            "alias": null,
            "line": 41
          },
          {
            "module": "random",
            "alias": null,
            "line": 112
          },
          {
            "module": "random",
            "alias": null,
            "line": 188
          },
          {
            "module": "random",
            "alias": null,
            "line": 269
          },
          {
            "module": "random",
            "alias": null,
            "line": 454
          },
          {
            "module": "random",
            "alias": null,
            "line": 626
          },
          {
            "module": "random",
            "alias": null,
            "line": 708
          },
          {
            "module": "random",
            "alias": null,
            "line": 791
          },
          {
            "module": "random",
            "alias": null,
            "line": 904
          },
          {
            "module": "random",
            "alias": null,
            "line": 1019
          },
          {
            "module": "random",
            "alias": null,
            "line": 1126
          },
          {
            "module": "random",
            "alias": null,
            "line": 1202
          },
          {
            "module": "random",
            "alias": null,
            "line": 1289
          },
          {
            "module": "random",
            "alias": null,
            "line": 1411
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_terminal_session",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "manage_session_lifecycle",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "execute_terminal_commands",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 169,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "monitor_session_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 252,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "configure_terminal_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 356,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "backup_session_state",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 435,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "provide_command_assistance",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 554,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_terminal_output",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 609,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "suggest_command_improvements",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 691,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "detect_terminal_issues",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 774,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "generate_terminal_workflows",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 887,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "optimize_llm_interactions",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1002,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "integrate_with_tekton_components",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "synchronize_session_data",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1185,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "manage_terminal_security",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1272,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "track_terminal_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1394,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "_merge_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1556,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "_merge_security_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/tools.py",
            "line": 1741,
            "priority": "medium",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 1860,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "get_all_capabilities",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Get all Terma MCP capabilities.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Get all Terma MCP tools.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "capabilities.TerminalManagementCapability",
            "from": "capabilities",
            "name": "TerminalManagementCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.LLMIntegrationCapability",
            "from": "capabilities",
            "name": "LLMIntegrationCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.SystemIntegrationCapability",
            "from": "capabilities",
            "name": "SystemIntegrationCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "tools.terminal_management_tools",
            "from": "tools",
            "name": "terminal_management_tools",
            "alias": null,
            "line": 14
          },
          {
            "module": "tools.llm_integration_tools",
            "from": "tools",
            "name": "llm_integration_tools",
            "alias": null,
            "line": 14
          },
          {
            "module": "tools.system_integration_tools",
            "from": "tools",
            "name": "system_integration_tools",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/__init__.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/__init__.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 44,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 19,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "TerminalManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 31,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "TerminalManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 54,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "LLMIntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 66,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "LLMIntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 87,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "SystemIntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 97,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "SystemIntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TerminalManagementCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for creating, managing, and monitoring terminal sessions.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMIntegrationCapability",
            "line": 47,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for AI-powered terminal assistance and analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SystemIntegrationCapability",
            "line": 80,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for integrating terminal sessions with Tekton ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TerminalManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TerminalManagementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 19,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TerminalManagementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "LLMIntegrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMIntegrationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMIntegrationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SystemIntegrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 80,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SystemIntegrationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SystemIntegrationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/terma/core/mcp/capabilities.py",
            "line": 97,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 116,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/bin/activate_this.py",
      "analysis": {
        "functions": [],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "__future__.annotations",
            "from": "__future__",
            "name": "annotations",
            "alias": null,
            "line": 31
          },
          {
            "module": "os",
            "alias": null,
            "line": 33
          },
          {
            "module": "site",
            "alias": null,
            "line": 34
          },
          {
            "module": "sys",
            "alias": null,
            "line": 35
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": []
      },
      "line_count": 59,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
      "analysis": {
        "functions": [
          {
            "name": "patch_dist",
            "line": 9,
            "async": false,
            "decorators": [],
            "docstring": "Distutils allows user to configure some arguments via a configuration file:\nhttps://docs.python.org/3.11/install/index.html#distutils-configuration-files.\n\nSome of this arguments though don't make sense in context of the virtual environment files, let's fix them up.",
            "args": [
              "dist"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "parse_config_files",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "find_spec",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "fullname",
              "path",
              "target"
            ],
            "class": "_Finder",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "exec_module",
            "line": 88,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": null,
            "args": [
              "old",
              "module"
            ],
            "class": "_Finder",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_module",
            "line": 94,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": null,
            "args": [
              "old",
              "name"
            ],
            "class": "_Finder",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "_Finder",
            "line": 40,
            "methods": [
              "find_spec",
              "exec_module",
              "load_module"
            ],
            "decorators": [],
            "docstring": "A meta path finder that allows patching the imported distutils modules.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "sys",
            "alias": null,
            "line": 4
          },
          {
            "module": "threading",
            "alias": null,
            "line": 54
          },
          {
            "module": "functools.partial",
            "from": "functools",
            "name": "partial",
            "alias": null,
            "line": 64
          },
          {
            "module": "importlib.util.find_spec",
            "from": "importlib.util",
            "name": "find_spec",
            "alias": null,
            "line": 65
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "patch_dist",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
            "line": 9,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "parse_config_files",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
            "line": 19,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "_Finder",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "_Finder.find_spec",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
            "line": 50,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "_Finder.exec_module",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
            "line": 88,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "_Finder.load_module",
            "file": "/Users/cskoons/projects/github/Tekton/Terma/venv/lib/python3.10/site-packages/_virtualenv.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 101,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 25,
    "total_functions": 177,
    "total_classes": 27,
    "total_landmarks": 147,
    "patterns": [
      "fastapi",
      "async",
      "error_handling",
      "mcp",
      "websocket"
    ],
    "api_endpoints": 23,
    "mcp_tools": 0
  }
}