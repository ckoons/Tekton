{
  "component": "Apollo",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/setup.py",
      "analysis": {
        "functions": [
          {
            "name": "read",
            "line": 11,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "fname"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "setuptools.setup",
            "from": "setuptools",
            "name": "setup",
            "alias": null,
            "line": 9
          },
          {
            "module": "setuptools.find_packages",
            "from": "setuptools",
            "name": "find_packages",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "read",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/setup.py",
            "line": 11,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 49,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
      "analysis": {
        "functions": [
          {
            "name": "get_hermes_url",
            "line": 38,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the message filter.\n\nArgs:\n    filter_expression: Filter expression to parse",
            "args": [
              "self",
              "filter_expression"
            ],
            "class": "MessageFilter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_parse_expression",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Parse a filter expression into a structured format.\n\nThe expression format is a simple key-value format with optional\noperators for comparison. For example:\n\n- \"context_id=123\" - Exact match\n- \"priority>5\" - Greater than\n- \"source=~athena.*\" - Regex match\n\nArgs:\n    expression: Filter expression to parse\n    \nReturns:\n    Parsed expression as a dict",
            "args": [
              "self",
              "expression"
            ],
            "class": "MessageFilter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "matches",
            "line": 113,
            "async": false,
            "decorators": [],
            "docstring": "Check if a message matches this filter.\n\nArgs:\n    message: Message to check\n    \nReturns:\n    True if the message matches, False otherwise",
            "args": [
              "self",
              "message"
            ],
            "class": "MessageFilter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes client.\n\nArgs:\n    base_url: Base URL for Hermes API, defaults to config\n    timeout: Timeout for HTTP requests in seconds",
            "args": [
              "self",
              "base_url",
              "timeout"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 218,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to Hermes.\n\nArgs:\n    message: Message to send\n    \nReturns:\n    True if sent successfully, False otherwise",
            "args": [
              "self",
              "message"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_batch",
            "line": 247,
            "async": true,
            "decorators": [],
            "docstring": "Send a batch of messages to Hermes.\n\nArgs:\n    batch: Batch of messages to send\n    \nReturns:\n    True if sent successfully, False otherwise",
            "args": [
              "self",
              "batch"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe",
            "line": 276,
            "async": true,
            "decorators": [],
            "docstring": "Create a subscription in Hermes.\n\nArgs:\n    subscription: Subscription to create\n    \nReturns:\n    Subscription ID if created successfully, None otherwise",
            "args": [
              "self",
              "subscription"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe",
            "line": 307,
            "async": true,
            "decorators": [],
            "docstring": "Delete a subscription from Hermes.\n\nArgs:\n    subscription_id: ID of subscription to delete\n    \nReturns:\n    True if deleted successfully, False otherwise",
            "args": [
              "self",
              "subscription_id"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "close",
            "line": 332,
            "async": true,
            "decorators": [],
            "docstring": "Close the HTTP client.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 345,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Message Handler.\n\nArgs:\n    component_name: Name of this component\n    hermes_client: Client for Hermes, created if not provided\n    protocol_enforcer: Protocol enforcer for validating messages\n    message_queue_limit: Maximum messages in queue\n    retry_interval: Interval for retrying failed deliveries in seconds\n    max_retry_count: Maximum retry attempts for failed deliveries\n    delivery_history_limit: Maximum delivery records to keep\n    data_dir: Directory for storing message data",
            "args": [
              "self",
              "component_name",
              "hermes_client",
              "protocol_enforcer",
              "message_queue_limit",
              "retry_interval",
              "max_retry_count",
              "delivery_history_limit",
              "data_dir"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 416,
            "async": true,
            "decorators": [],
            "docstring": "Start the message handler.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 446,
            "async": true,
            "decorators": [],
            "docstring": "Stop the message handler.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_process_outbound_messages",
            "line": 473,
            "async": true,
            "decorators": [],
            "docstring": "Process outbound messages from the queue.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_process_batched_messages",
            "line": 498,
            "async": true,
            "decorators": [],
            "docstring": "Process batched messages on an interval.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_flush_batch",
            "line": 523,
            "async": true,
            "decorators": [],
            "docstring": "Flush the current batch of messages to Hermes.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_process_inbound_messages",
            "line": 551,
            "async": true,
            "decorators": [],
            "docstring": "Process inbound messages from the queue.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_retry_failed_deliveries",
            "line": 589,
            "async": true,
            "decorators": [],
            "docstring": "Retry failed message deliveries.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_inbound_message",
            "line": 639,
            "async": true,
            "decorators": [],
            "docstring": "Handle an inbound message.\n\nArgs:\n    message: Message to handle",
            "args": [
              "self",
              "message"
            ],
            "class": "MessageHandler",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_record_delivery",
            "line": 691,
            "async": false,
            "decorators": [],
            "docstring": "Record a message delivery attempt.\n\nArgs:\n    message_id: ID of message delivered\n    subscription_id: ID of subscription receiving the message\n    status: Delivery status\n    error_message: Optional error message if delivery failed",
            "args": [
              "self",
              "message_id",
              "subscription_id",
              "status",
              "error_message"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_save_delivery_records",
            "line": 737,
            "async": true,
            "decorators": [],
            "docstring": "Save delivery records to disk.",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "send_message",
            "line": 758,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to other components via Hermes.\n\nArgs:\n    message: Message to send\n    \nReturns:\n    True if queued successfully, False otherwise",
            "args": [
              "self",
              "message"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "receive_message",
            "line": 790,
            "async": true,
            "decorators": [],
            "docstring": "Receive a message from another component.\n\nThis method is called by the API when a message is received.\n\nArgs:\n    message: Message received\n    \nReturns:\n    True if queued successfully, False otherwise",
            "args": [
              "self",
              "message"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_local",
            "line": 816,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to messages locally.\n\nArgs:\n    message_types: Types of messages to subscribe to\n    callback: Callback function to call when message received\n    filter_expression: Optional filter expression\n    \nReturns:\n    Subscription ID",
            "args": [
              "self",
              "message_types",
              "callback",
              "filter_expression"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe_local",
            "line": 853,
            "async": true,
            "decorators": [],
            "docstring": "Unsubscribe from local messages.\n\nArgs:\n    subscription_id: ID of subscription to remove\n    \nReturns:\n    True if unsubscribed successfully, False otherwise",
            "args": [
              "self",
              "subscription_id"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_remote",
            "line": 875,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to messages from Hermes.\n\nArgs:\n    message_types: Types of messages to subscribe to\n    callback_url: URL to call when message received\n    filter_expression: Optional filter expression\n    \nReturns:\n    Subscription ID if created successfully, None otherwise",
            "args": [
              "self",
              "message_types",
              "callback_url",
              "filter_expression"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe_remote",
            "line": 918,
            "async": true,
            "decorators": [],
            "docstring": "Unsubscribe from remote messages.\n\nArgs:\n    subscription_id: ID of subscription to remove\n    \nReturns:\n    True if unsubscribed successfully, False otherwise",
            "args": [
              "self",
              "subscription_id"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_remote_message",
            "line": 945,
            "async": true,
            "decorators": [],
            "docstring": "Handle a message received from Hermes.\n\nArgs:\n    message: Message received",
            "args": [
              "self",
              "message"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context_message",
            "line": 955,
            "async": true,
            "decorators": [],
            "docstring": "Create and send a context-related message.\n\nArgs:\n    message_type: Type of message to create\n    context_id: Context identifier\n    payload: Message payload\n    priority: Message priority\n    metadata: Optional message metadata\n    \nReturns:\n    Created message",
            "args": [
              "self",
              "message_type",
              "context_id",
              "payload",
              "priority",
              "metadata"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_action_message",
            "line": 991,
            "async": true,
            "decorators": [],
            "docstring": "Create and send an action-related message.\n\nArgs:\n    message_type: Type of message to create\n    context_id: Context identifier\n    action_id: Action identifier\n    payload: Message payload\n    priority: Message priority\n    metadata: Optional message metadata\n    \nReturns:\n    Created message",
            "args": [
              "self",
              "message_type",
              "context_id",
              "action_id",
              "payload",
              "priority",
              "metadata"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_budget_message",
            "line": 1032,
            "async": true,
            "decorators": [],
            "docstring": "Create and send a budget-related message.\n\nArgs:\n    message_type: Type of message to create\n    context_id: Optional context identifier\n    component_id: Component identifier\n    payload: Message payload\n    priority: Message priority\n    metadata: Optional message metadata\n    \nReturns:\n    Created message",
            "args": [
              "self",
              "message_type",
              "context_id",
              "component_id",
              "payload",
              "priority",
              "metadata"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_command_message",
            "line": 1073,
            "async": true,
            "decorators": [],
            "docstring": "Create and send a command message.\n\nArgs:\n    component: Component to send command to\n    command: Command name\n    parameters: Command parameters\n    context_id: Optional context identifier\n    priority: Message priority\n    metadata: Optional message metadata\n    \nReturns:\n    Created message",
            "args": [
              "self",
              "component",
              "command",
              "parameters",
              "context_id",
              "priority",
              "metadata"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_query_message",
            "line": 1115,
            "async": true,
            "decorators": [],
            "docstring": "Create and send a query message.\n\nArgs:\n    component: Component to query\n    query: Query name\n    parameters: Query parameters\n    context_id: Optional context identifier\n    priority: Message priority\n    metadata: Optional message metadata\n    \nReturns:\n    Created message",
            "args": [
              "self",
              "component",
              "query",
              "parameters",
              "context_id",
              "priority",
              "metadata"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_message_callback",
            "line": 1157,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for a specific message type.\n\nThis is a convenience method for registering callbacks for specific\nmessage types, rather than creating a full subscription.\n\nArgs:\n    message_type: Type of message to register for\n    callback: Callback function to call when message received",
            "args": [
              "self",
              "message_type",
              "callback"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_callback_message",
            "line": 1184,
            "async": true,
            "decorators": [],
            "docstring": "Handle a message for registered callbacks.\n\nArgs:\n    message: Message received",
            "args": [
              "self",
              "message"
            ],
            "class": "MessageHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_queue_stats",
            "line": 1203,
            "async": false,
            "decorators": [],
            "docstring": "Get statistics about the message queues.\n\nReturns:\n    Dictionary with queue statistics",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_delivery_stats",
            "line": 1222,
            "async": false,
            "decorators": [],
            "docstring": "Get statistics about message delivery.\n\nReturns:\n    Dictionary with delivery statistics",
            "args": [
              "self"
            ],
            "class": "MessageHandler",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MessageFilter",
            "line": 45,
            "methods": [
              "__init__",
              "_parse_expression",
              "matches"
            ],
            "decorators": [],
            "docstring": "Filter for message subscriptions.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HermesClient",
            "line": 203,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with Hermes message bus.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageHandler",
            "line": 337,
            "methods": [
              "__init__",
              "_record_delivery",
              "register_message_callback",
              "get_queue_stats",
              "get_delivery_stats"
            ],
            "decorators": [],
            "docstring": "Message handler for Apollo that manages communication with other components.\n\nThis class provides messaging functionality for Apollo, including sending\nand receiving messages, managing subscriptions, and integrating with Hermes.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "create_action_message",
            "line": 991,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "httpx",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 16
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 17
          },
          {
            "module": "re",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.message.TektonMessage",
            "from": "apollo.models.message",
            "name": "TektonMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.MessageType",
            "from": "apollo.models.message",
            "name": "MessageType",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.MessagePriority",
            "from": "apollo.models.message",
            "name": "MessagePriority",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.ContextMessage",
            "from": "apollo.models.message",
            "name": "ContextMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.ActionMessage",
            "from": "apollo.models.message",
            "name": "ActionMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.BudgetMessage",
            "from": "apollo.models.message",
            "name": "BudgetMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.ProtocolMessage",
            "from": "apollo.models.message",
            "name": "ProtocolMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.PredictionMessage",
            "from": "apollo.models.message",
            "name": "PredictionMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.CommandMessage",
            "from": "apollo.models.message",
            "name": "CommandMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.QueryMessage",
            "from": "apollo.models.message",
            "name": "QueryMessage",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.MessageBatch",
            "from": "apollo.models.message",
            "name": "MessageBatch",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.MessageSubscription",
            "from": "apollo.models.message",
            "name": "MessageSubscription",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.MessageDeliveryStatus",
            "from": "apollo.models.message",
            "name": "MessageDeliveryStatus",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.message.MessageDeliveryRecord",
            "from": "apollo.models.message",
            "name": "MessageDeliveryRecord",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.core.protocol_enforcer.ProtocolEnforcer",
            "from": "apollo.core.protocol_enforcer",
            "name": "ProtocolEnforcer",
            "alias": null,
            "line": 36
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_hermes_url",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 38,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MessageFilter",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MessageFilter._parse_expression",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 58,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MessageFilter.matches",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 113,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "HermesClient",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 203,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesClient.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 218,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.send_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 247,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 276,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 307,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "HermesClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 332,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "MessageHandler",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 337,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MessageHandler.start",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 416,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 446,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler._retry_failed_deliveries",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 589,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MessageHandler._handle_inbound_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 639,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MessageHandler._save_delivery_records",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 737,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "MessageHandler.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 758,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.receive_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 790,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.subscribe_local",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 816,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.unsubscribe_local",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 853,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.subscribe_remote",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 875,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.unsubscribe_remote",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 918,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.create_context_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 955,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.create_action_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 991,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.create_budget_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 1032,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.create_command_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 1073,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.create_query_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 1115,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageHandler.register_message_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 1157,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageHandler.get_queue_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 1203,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageHandler.get_delivery_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/message_handler.py",
            "line": 1222,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1234,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "linear_regression",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Pure Python implementation of linear regression.\n\nArgs:\n    x_values: List of x coordinates\n    y_values: List of y coordinates\n    \nReturns:\n    Tuple of (slope, intercept, r_value, p_value, std_err)\n    Note: p_value and std_err are simplified approximations",
            "args": [
              "x_values",
              "y_values"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 89,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the prediction rule.\n\nArgs:\n    name: Rule name\n    description: Rule description\n    weight: Rule weight for combining predictions",
            "args": [
              "self",
              "name",
              "description",
              "weight"
            ],
            "class": "PredictionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict",
            "line": 102,
            "async": true,
            "decorators": [],
            "docstring": "Make a prediction for a context based on current state and history.\n\nArgs:\n    context_id: Context identifier\n    current_state: Current context state\n    history: Historical context records\n    horizon_seconds: Prediction horizon in seconds\n    \nReturns:\n    Prediction for future context state or None",
            "args": [
              "self",
              "context_id",
              "current_state",
              "history",
              "horizon_seconds"
            ],
            "class": "PredictionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 127,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the token utilization rule.",
            "args": [
              "self",
              "weight"
            ],
            "class": "TokenUtilizationRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": "Make a prediction based on token utilization trend.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "history",
              "horizon_seconds"
            ],
            "class": "TokenUtilizationRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_estimate_health_score",
            "line": 195,
            "async": false,
            "decorators": [],
            "docstring": "Estimate a health score for the context based on metrics.\n\nThis is a simplified version of the context observer's calculation.\n\nArgs:\n    metrics: Context metrics\n    \nReturns:\n    Health score between 0.0 and 1.0 (higher is better)",
            "args": [
              "self",
              "metrics"
            ],
            "class": "TokenUtilizationRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_determine_health_status",
            "line": 219,
            "async": false,
            "decorators": [],
            "docstring": "Determine the health status category based on the health score.\n\nArgs:\n    health_score: Numerical health score between 0.0 and 1.0\n    \nReturns:\n    ContextHealth enum value",
            "args": [
              "self",
              "health_score"
            ],
            "class": "TokenUtilizationRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 244,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repetition detection rule.",
            "args": [
              "self",
              "weight"
            ],
            "class": "RepetitionDetectionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict",
            "line": 252,
            "async": true,
            "decorators": [],
            "docstring": "Make a prediction based on repetition score trend.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "history",
              "horizon_seconds"
            ],
            "class": "RepetitionDetectionRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_estimate_health_score",
            "line": 316,
            "async": false,
            "decorators": [],
            "docstring": "Estimate a health score for the context based on repetition metrics.\n\nArgs:\n    metrics: Context metrics\n    \nReturns:\n    Health score between 0.0 and 1.0 (higher is better)",
            "args": [
              "self",
              "metrics"
            ],
            "class": "RepetitionDetectionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_determine_health_status",
            "line": 338,
            "async": false,
            "decorators": [],
            "docstring": "Determine health status from score.",
            "args": [
              "self",
              "health_score"
            ],
            "class": "RepetitionDetectionRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 355,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the latency trend rule.",
            "args": [
              "self",
              "weight"
            ],
            "class": "LatencyTrendRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict",
            "line": 363,
            "async": true,
            "decorators": [],
            "docstring": "Make a prediction based on latency trend.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "history",
              "horizon_seconds"
            ],
            "class": "LatencyTrendRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_estimate_health_score",
            "line": 437,
            "async": false,
            "decorators": [],
            "docstring": "Estimate a health score based on latency and token rate.\n\nArgs:\n    metrics: Context metrics\n    \nReturns:\n    Health score between 0.0 and 1.0 (higher is better)",
            "args": [
              "self",
              "metrics"
            ],
            "class": "LatencyTrendRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_determine_health_status",
            "line": 463,
            "async": false,
            "decorators": [],
            "docstring": "Determine health status from score.",
            "args": [
              "self",
              "health_score"
            ],
            "class": "LatencyTrendRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 480,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the heuristic rule.",
            "args": [
              "self",
              "weight"
            ],
            "class": "HeuristicRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict",
            "line": 488,
            "async": true,
            "decorators": [],
            "docstring": "Make a prediction based on current state and simple heuristics.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "history",
              "horizon_seconds"
            ],
            "class": "HeuristicRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_estimate_health_score",
            "line": 555,
            "async": false,
            "decorators": [],
            "docstring": "Estimate a health score based on all metrics.\n\nArgs:\n    metrics: Context metrics\n    \nReturns:\n    Health score between 0.0 and 1.0 (higher is better)",
            "args": [
              "self",
              "metrics"
            ],
            "class": "HeuristicRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_determine_health_status",
            "line": 595,
            "async": false,
            "decorators": [],
            "docstring": "Determine health status from score.",
            "args": [
              "self",
              "health_score"
            ],
            "class": "HeuristicRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 618,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Predictive Engine.\n\nArgs:\n    context_observer: Observer for context metrics\n    prediction_horizon: Prediction horizon in seconds (default: 60 seconds)\n    prediction_interval: Interval for making predictions in seconds\n    min_history_points: Minimum history points required for prediction\n    prediction_limit: Maximum predictions to keep per context\n    data_dir: Directory for storing prediction data",
            "args": [
              "self",
              "context_observer",
              "prediction_horizon",
              "prediction_interval",
              "min_history_points",
              "prediction_limit",
              "data_dir"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 677,
            "async": true,
            "decorators": [],
            "docstring": "Start the prediction engine.",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 690,
            "async": true,
            "decorators": [],
            "docstring": "Stop the prediction engine.",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_prediction_loop",
            "line": 708,
            "async": true,
            "decorators": [],
            "docstring": "Main loop for making predictions periodically.",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_make_predictions",
            "line": 723,
            "async": true,
            "decorators": [],
            "docstring": "Make predictions for all active contexts.",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_combine_predictions",
            "line": 780,
            "async": true,
            "decorators": [],
            "docstring": "Combine multiple predictions into a single consensus prediction.\n\nArgs:\n    predictions: List of predictions to combine\n    \nReturns:\n    Combined prediction",
            "args": [
              "self",
              "predictions"
            ],
            "class": "PredictiveEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_determine_health_status",
            "line": 866,
            "async": false,
            "decorators": [],
            "docstring": "Determine the health status category based on the health score.\n\nArgs:\n    health_score: Numerical health score between 0.0 and 1.0\n    \nReturns:\n    ContextHealth enum value",
            "args": [
              "self",
              "health_score"
            ],
            "class": "PredictiveEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_evaluate_predictions",
            "line": 887,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate the accuracy of past predictions against current reality.",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_compare_prediction_with_reality",
            "line": 922,
            "async": false,
            "decorators": [],
            "docstring": "Compare a prediction with current reality to evaluate accuracy.\n\nArgs:\n    prediction: The prediction to evaluate\n    current_state: Current context state",
            "args": [
              "self",
              "prediction",
              "current_state"
            ],
            "class": "PredictiveEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_prediction",
            "line": 953,
            "async": false,
            "decorators": [],
            "docstring": "Get the latest prediction for a specific context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Latest prediction or None if no predictions exist",
            "args": [
              "self",
              "context_id"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_predictions",
            "line": 968,
            "async": false,
            "decorators": [],
            "docstring": "Get the latest prediction for all contexts.\n\nReturns:\n    Dictionary mapping context IDs to their latest predictions",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prediction_accuracy",
            "line": 981,
            "async": false,
            "decorators": [],
            "docstring": "Get average prediction accuracy for each rule.\n\nReturns:\n    Dictionary mapping rule names to their average accuracy",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_predictions_by_health",
            "line": 993,
            "async": false,
            "decorators": [],
            "docstring": "Get all predictions with a specific predicted health status.\n\nArgs:\n    health: Health status to filter by\n    \nReturns:\n    List of predictions with the specified health status",
            "args": [
              "self",
              "health"
            ],
            "class": "PredictiveEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_critical_predictions",
            "line": 1015,
            "async": false,
            "decorators": [],
            "docstring": "Get predictions that indicate critical future issues.\n\nReturns:\n    List of predictions with critical health status",
            "args": [
              "self"
            ],
            "class": "PredictiveEngine",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PredictionRule",
            "line": 86,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Base class for prediction rules.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TokenUtilizationRule",
            "line": 124,
            "methods": [
              "__init__",
              "_estimate_health_score",
              "_determine_health_status"
            ],
            "decorators": [],
            "docstring": "Predicts future token utilization based on recent trends.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RepetitionDetectionRule",
            "line": 241,
            "methods": [
              "__init__",
              "_estimate_health_score",
              "_determine_health_status"
            ],
            "decorators": [],
            "docstring": "Predicts future repetition based on trend analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LatencyTrendRule",
            "line": 352,
            "methods": [
              "__init__",
              "_estimate_health_score",
              "_determine_health_status"
            ],
            "decorators": [],
            "docstring": "Predicts future performance issues based on latency trends.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HeuristicRule",
            "line": 477,
            "methods": [
              "__init__",
              "_estimate_health_score",
              "_determine_health_status"
            ],
            "decorators": [],
            "docstring": "Simple heuristic-based prediction for contexts with limited history.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PredictiveEngine",
            "line": 609,
            "methods": [
              "__init__",
              "_determine_health_status",
              "_compare_prediction_with_reality",
              "get_prediction",
              "get_all_predictions",
              "get_prediction_accuracy",
              "get_predictions_by_health",
              "get_critical_predictions"
            ],
            "decorators": [],
            "docstring": "Predictive engine for Apollo that forecasts future context states.\n\nThis class analyzes context metrics history to predict future context states,\nidentify potential issues before they occur, and provide recommendations for\nproactive interventions.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 16
          },
          {
            "module": "collections.deque",
            "from": "collections",
            "name": "deque",
            "alias": null,
            "line": 17
          },
          {
            "module": "apollo.models.context.ContextMetrics",
            "from": "apollo.models.context",
            "name": "ContextMetrics",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextState",
            "from": "apollo.models.context",
            "name": "ContextState",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextHistoryRecord",
            "from": "apollo.models.context",
            "name": "ContextHistoryRecord",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextPrediction",
            "from": "apollo.models.context",
            "name": "ContextPrediction",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextHealth",
            "from": "apollo.models.context",
            "name": "ContextHealth",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.core.context_observer.ContextObserver",
            "from": "apollo.core.context_observer",
            "name": "ContextObserver",
            "alias": null,
            "line": 26
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "linear_regression",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PredictionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 86,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PredictionRule.predict",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 102,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "TokenUtilizationRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 124,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TokenUtilizationRule.predict",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 135,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "RepetitionDetectionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 241,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RepetitionDetectionRule.predict",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 252,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "LatencyTrendRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 352,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LatencyTrendRule.predict",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 363,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "HeuristicRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 477,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HeuristicRule.predict",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 488,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "PredictiveEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 609,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.start",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 677,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 690,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PredictiveEngine._make_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 723,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PredictiveEngine._combine_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 780,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PredictiveEngine._evaluate_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 887,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.get_prediction",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 953,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.get_all_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 968,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.get_prediction_accuracy",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 981,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.get_predictions_by_health",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 993,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PredictiveEngine.get_critical_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/predictive_engine.py",
            "line": 1015,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1022,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 89,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Token Budget Manager.\n\nArgs:\n    data_dir: Directory for storing budget data\n    policy_file: Path to budget policy configuration file\n    cleanup_interval: Interval for cleaning up expired allocations (seconds)",
            "args": [
              "self",
              "data_dir",
              "policy_file",
              "cleanup_interval"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 186,
            "async": true,
            "decorators": [],
            "docstring": "Start the budget management process.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 199,
            "async": true,
            "decorators": [],
            "docstring": "Stop the budget management process.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_cleanup_loop",
            "line": 223,
            "async": true,
            "decorators": [],
            "docstring": "Periodic task to clean up expired allocations.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_cleanup_expired_allocations",
            "line": 237,
            "async": false,
            "decorators": [],
            "docstring": "Clean up expired allocations.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_determine_tier",
            "line": 256,
            "async": false,
            "decorators": [],
            "docstring": "Determine the appropriate budget tier based on component, provider, and model.\n\nArgs:\n    component: Component ID\n    provider: Provider ID\n    model: Model ID\n    \nReturns:\n    BudgetTier",
            "args": [
              "self",
              "component",
              "provider",
              "model"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_period_key",
            "line": 288,
            "async": false,
            "decorators": [],
            "docstring": "Get the key for a budget period.\n\nArgs:\n    period: Budget period\n    now: Current datetime (default: now)\n    \nReturns:\n    String key for the period",
            "args": [
              "self",
              "period",
              "now"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_period_start_end",
            "line": 315,
            "async": false,
            "decorators": [],
            "docstring": "Get the start and end datetimes for a budget period.\n\nArgs:\n    period: Budget period\n    now: Current datetime (default: now)\n    \nReturns:\n    Tuple of (start_datetime, end_datetime)",
            "args": [
              "self",
              "period",
              "now"
            ],
            "class": "TokenBudgetManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_applicable_policies",
            "line": 357,
            "async": false,
            "decorators": [],
            "docstring": "Get all policies that apply to a given tier, component, and task type.\n\nArgs:\n    tier: Budget tier\n    component: Component ID (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    List of applicable BudgetPolicy objects",
            "args": [
              "self",
              "tier",
              "component",
              "task_type"
            ],
            "class": "TokenBudgetManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_update_usage_counter",
            "line": 402,
            "async": false,
            "decorators": [],
            "docstring": "Update the usage counter for a specific period.\n\nArgs:\n    tier: Budget tier\n    period: Budget period\n    component: Component ID (optional)\n    task_type: Task type (optional)\n    tokens: Number of tokens to add",
            "args": [
              "self",
              "tier",
              "period",
              "component",
              "task_type",
              "tokens"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_usage_for_period",
            "line": 443,
            "async": false,
            "decorators": [],
            "docstring": "Get the total token usage for a specific period.\n\nArgs:\n    tier: Budget tier\n    period: Budget period\n    component: Component ID (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    Total token usage for the period",
            "args": [
              "self",
              "tier",
              "period",
              "component",
              "task_type"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_budget_exceeded",
            "line": 479,
            "async": false,
            "decorators": [],
            "docstring": "Check if any budget policies have been exceeded.\n\nArgs:\n    tier: Budget tier\n    component: Component ID (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    List of exceeded BudgetPolicy objects",
            "args": [
              "self",
              "tier",
              "component",
              "task_type"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_trigger_callback",
            "line": 519,
            "async": false,
            "decorators": [],
            "docstring": "Trigger registered callbacks for an event.\n\nArgs:\n    event_type: Type of event\n    *args: Arguments to pass to callbacks\n    **kwargs: Keyword arguments to pass to callbacks",
            "args": [
              "self",
              "event_type"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_load_policies",
            "line": 543,
            "async": false,
            "decorators": [],
            "docstring": "Load budget policies from file.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_save_policies",
            "line": 573,
            "async": false,
            "decorators": [],
            "docstring": "Save budget policies to file.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_create_default_policies",
            "line": 596,
            "async": false,
            "decorators": [],
            "docstring": "Create default budget policies for each tier and period.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save_usage_records",
            "line": 615,
            "async": false,
            "decorators": [],
            "docstring": "Save recent usage records to file.",
            "args": [
              "self"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "allocate_budget",
            "line": 638,
            "async": true,
            "decorators": [],
            "docstring": "Allocate a token budget for an LLM operation.\n\nArgs:\n    context_id: Context identifier\n    component: Component ID\n    task_type: Task type\n    provider: Provider ID (optional)\n    model: Model ID (optional)\n    priority: Task priority (1-10)\n    token_count: Requested token count (optional)\n    expiration: Expiration time (optional)\n    metadata: Additional metadata (optional)\n    \nReturns:\n    BudgetAllocation or None if allocation failed",
            "args": [
              "self",
              "context_id",
              "component",
              "task_type",
              "provider",
              "model",
              "priority",
              "token_count",
              "expiration",
              "metadata"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 714,
            "async": false,
            "decorators": [],
            "docstring": "Record token usage against an allocation.\n\nArgs:\n    context_id: Context identifier\n    tokens: Number of tokens used\n    usage_type: Type of usage (input, output, total)\n    operation_id: Operation identifier (optional)\n    metadata: Additional metadata (optional)\n    \nReturns:\n    Number of tokens actually recorded (limited by allocation)",
            "args": [
              "self",
              "context_id",
              "tokens",
              "usage_type",
              "operation_id",
              "metadata"
            ],
            "class": "TokenBudgetManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_allocation",
            "line": 797,
            "async": false,
            "decorators": [],
            "docstring": "Get the budget allocation for a context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    BudgetAllocation or None if not found",
            "args": [
              "self",
              "context_id"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_allocation",
            "line": 809,
            "async": false,
            "decorators": [],
            "docstring": "Update a budget allocation.\n\nArgs:\n    context_id: Context identifier\n    additional_tokens: Additional tokens to allocate (optional)\n    extend_expiration: Extension to expiration time (optional)\n    is_active: New active status (optional)\n    \nReturns:\n    Updated BudgetAllocation or None if not found",
            "args": [
              "self",
              "context_id",
              "additional_tokens",
              "extend_expiration",
              "is_active"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_budget_summary",
            "line": 850,
            "async": false,
            "decorators": [],
            "docstring": "Get a summary of budget usage.\n\nArgs:\n    tier: Budget tier (optional, if None, summarize all tiers)\n    period: Budget period\n    component: Component ID (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    List of BudgetSummary objects",
            "args": [
              "self",
              "tier",
              "period",
              "component",
              "task_type"
            ],
            "class": "TokenBudgetManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "register_callback",
            "line": 936,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for a specific event type.\n\nArgs:\n    event_type: Type of event to register for\n    callback: Callback function",
            "args": [
              "self",
              "event_type",
              "callback"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_policy",
            "line": 951,
            "async": false,
            "decorators": [],
            "docstring": "Add or update a budget policy.\n\nArgs:\n    policy: Budget policy to add\n    \nReturns:\n    Policy ID",
            "args": [
              "self",
              "policy"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_policy",
            "line": 972,
            "async": false,
            "decorators": [],
            "docstring": "Get a budget policy by ID.\n\nArgs:\n    policy_id: Policy identifier\n    \nReturns:\n    BudgetPolicy or None if not found",
            "args": [
              "self",
              "policy_id"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_policy",
            "line": 984,
            "async": false,
            "decorators": [],
            "docstring": "Update a budget policy.\n\nArgs:\n    policy_id: Policy identifier\n    **kwargs: Fields to update\n    \nReturns:\n    Updated BudgetPolicy or None if not found",
            "args": [
              "self",
              "policy_id"
            ],
            "class": "TokenBudgetManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_policy",
            "line": 1019,
            "async": false,
            "decorators": [],
            "docstring": "Delete a budget policy.\n\nArgs:\n    policy_id: Policy identifier\n    \nReturns:\n    True if policy was deleted",
            "args": [
              "self",
              "policy_id"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_tier",
            "line": 1041,
            "async": false,
            "decorators": [],
            "docstring": "Get the budget tier for a model.\n\nArgs:\n    model: Model identifier\n    \nReturns:\n    BudgetTier",
            "args": [
              "self",
              "model"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_model_tier",
            "line": 1053,
            "async": false,
            "decorators": [],
            "docstring": "Set the budget tier for a model.\n\nArgs:\n    model: Model identifier\n    tier: Budget tier",
            "args": [
              "self",
              "model",
              "tier"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_tier",
            "line": 1063,
            "async": false,
            "decorators": [],
            "docstring": "Get the budget tier for a component.\n\nArgs:\n    component: Component identifier\n    \nReturns:\n    BudgetTier or None if not set",
            "args": [
              "self",
              "component"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_component_tier",
            "line": 1075,
            "async": false,
            "decorators": [],
            "docstring": "Set the budget tier for a component.\n\nArgs:\n    component: Component identifier\n    tier: Budget tier",
            "args": [
              "self",
              "component",
              "tier"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_provider_tier",
            "line": 1085,
            "async": false,
            "decorators": [],
            "docstring": "Get the default budget tier for a provider.\n\nArgs:\n    provider: Provider identifier\n    \nReturns:\n    BudgetTier",
            "args": [
              "self",
              "provider"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_provider_tier",
            "line": 1097,
            "async": false,
            "decorators": [],
            "docstring": "Set the default budget tier for a provider.\n\nArgs:\n    provider: Provider identifier\n    tier: Budget tier",
            "args": [
              "self",
              "provider",
              "tier"
            ],
            "class": "TokenBudgetManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TokenBudgetManager",
            "line": 33,
            "methods": [
              "__init__",
              "_cleanup_expired_allocations",
              "_determine_tier",
              "_get_period_key",
              "_get_period_start_end",
              "_get_applicable_policies",
              "_update_usage_counter",
              "_get_usage_for_period",
              "_check_budget_exceeded",
              "_trigger_callback",
              "_load_policies",
              "_save_policies",
              "_create_default_policies",
              "_save_usage_records",
              "record_usage",
              "get_allocation",
              "update_allocation",
              "get_budget_summary",
              "register_callback",
              "add_policy",
              "get_policy",
              "update_policy",
              "delete_policy",
              "get_model_tier",
              "set_model_tier",
              "get_component_tier",
              "set_component_tier",
              "get_provider_tier",
              "set_provider_tier"
            ],
            "decorators": [],
            "docstring": "Manages token budgets for LLM operations across components.\n\nThis class is responsible for allocating token budgets based on task\nrequirements and priorities, tracking token usage, and enforcing budget\npolicies to prevent token exhaustion.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 15
          },
          {
            "module": "heapq",
            "alias": null,
            "line": 16
          },
          {
            "module": "apollo.models.budget.BudgetTier",
            "from": "apollo.models.budget",
            "name": "BudgetTier",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.BudgetPeriod",
            "from": "apollo.models.budget",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.BudgetPolicyType",
            "from": "apollo.models.budget",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.TaskPriority",
            "from": "apollo.models.budget",
            "name": "TaskPriority",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.BudgetPolicy",
            "from": "apollo.models.budget",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.BudgetAllocation",
            "from": "apollo.models.budget",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.BudgetUsageRecord",
            "from": "apollo.models.budget",
            "name": "BudgetUsageRecord",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.budget.BudgetSummary",
            "from": "apollo.models.budget",
            "name": "BudgetSummary",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TokenBudgetManager",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.start",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 199,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager._get_period_start_end",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 315,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager._get_applicable_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 357,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager._load_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 543,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager._save_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 573,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager._save_usage_records",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 615,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.allocate_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 638,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 714,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.get_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 797,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.update_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 809,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.get_budget_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 850,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.register_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 936,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.add_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 951,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.get_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 972,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.update_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 984,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.delete_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1019,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.get_model_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1041,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.set_model_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1053,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.get_component_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1063,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.set_component_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1075,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.get_provider_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1085,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetManager.set_provider_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/token_budget.py",
            "line": 1097,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1105,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Context Observer.\n\nArgs:\n    rhetor_interface: Interface for communicating with Rhetor\n    history_limit: Maximum number of historical records to keep per context\n    polling_interval: Interval in seconds for polling metrics\n    data_dir: Directory for storing context data",
            "args": [
              "self",
              "rhetor_interface",
              "history_limit",
              "polling_interval",
              "data_dir"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 90,
            "async": true,
            "decorators": [],
            "docstring": "Start the context monitoring process.",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 103,
            "async": true,
            "decorators": [],
            "docstring": "Stop the context monitoring process.",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_monitoring_loop",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Main monitoring loop that polls for metrics periodically.",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_collect_metrics",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": "Collect metrics from Rhetor for all active contexts.",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_calculate_health_score",
            "line": 257,
            "async": false,
            "decorators": [],
            "docstring": "Calculate a health score for the context based on metrics.\n\nArgs:\n    metrics: Context metrics\n    \nReturns:\n    Health score between 0.0 and 1.0 (higher is better)",
            "args": [
              "self",
              "metrics"
            ],
            "class": "ContextObserver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_determine_health_status",
            "line": 303,
            "async": false,
            "decorators": [],
            "docstring": "Determine the health status category based on the health score.\n\nArgs:\n    health_score: Numerical health score between 0.0 and 1.0\n    \nReturns:\n    ContextHealth enum value",
            "args": [
              "self",
              "health_score"
            ],
            "class": "ContextObserver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_save_context_history",
            "line": 324,
            "async": true,
            "decorators": [],
            "docstring": "Save context history to disk.\n\nArgs:\n    context_id: Context identifier",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_trigger_callbacks",
            "line": 351,
            "async": true,
            "decorators": [],
            "docstring": "Trigger registered callbacks for an event.\n\nArgs:\n    event_type: Type of event\n    *args: Arguments to pass to callbacks\n    **kwargs: Keyword arguments to pass to callbacks",
            "args": [
              "self",
              "event_type"
            ],
            "class": "ContextObserver",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_callback",
            "line": 372,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for a specific event type.\n\nArgs:\n    event_type: Type of event to register for\n    callback: Callback function",
            "args": [
              "self",
              "event_type",
              "callback"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_state",
            "line": 387,
            "async": false,
            "decorators": [],
            "docstring": "Get the current state of a context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    ContextState or None if not found",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_context_states",
            "line": 399,
            "async": false,
            "decorators": [],
            "docstring": "Get states for all active contexts.\n\nReturns:\n    List of ContextState objects",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_history",
            "line": 408,
            "async": false,
            "decorators": [],
            "docstring": "Get history for a specific context.\n\nArgs:\n    context_id: Context identifier\n    limit: Maximum number of records to return (newest first)\n    \nReturns:\n    List of ContextHistoryRecord objects",
            "args": [
              "self",
              "context_id",
              "limit"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_health_distribution",
            "line": 429,
            "async": false,
            "decorators": [],
            "docstring": "Get distribution of context health across all active contexts.\n\nReturns:\n    Dictionary mapping health status to count",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_contexts",
            "line": 443,
            "async": false,
            "decorators": [],
            "docstring": "Get contexts with critical health status.\n\nReturns:\n    List of ContextState objects with critical health",
            "args": [
              "self"
            ],
            "class": "ContextObserver",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "suggest_action",
            "line": 455,
            "async": true,
            "decorators": [],
            "docstring": "Suggest an action for a context based on its health.\n\nThis is a simple heuristic-based action suggestion that will be replaced\nby more sophisticated logic in the Action Planner.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Suggested ContextAction or None",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ContextObserver",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ContextObserver",
            "line": 31,
            "methods": [
              "__init__",
              "_calculate_health_score",
              "_determine_health_status",
              "register_callback",
              "get_context_state",
              "get_all_context_states",
              "get_context_history",
              "get_health_distribution",
              "get_critical_contexts"
            ],
            "decorators": [],
            "docstring": "Monitors and analyzes LLM context usage across Tekton components.\n\nThis class is responsible for collecting context metrics from Rhetor,\ncalculating health scores, and maintaining historical data for trend analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 16
          },
          {
            "module": "apollo.models.context.ContextMetrics",
            "from": "apollo.models.context",
            "name": "ContextMetrics",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.context.ContextState",
            "from": "apollo.models.context",
            "name": "ContextState",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.context.ContextHistoryRecord",
            "from": "apollo.models.context",
            "name": "ContextHistoryRecord",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.context.ContextHealth",
            "from": "apollo.models.context",
            "name": "ContextHealth",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.context.ContextAction",
            "from": "apollo.models.context",
            "name": "ContextAction",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.core.interfaces.rhetor.RhetorInterface",
            "from": "apollo.core.interfaces.rhetor",
            "name": "RhetorInterface",
            "alias": null,
            "line": 25
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ContextObserver",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ContextObserver.start",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 90,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextObserver.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextObserver._collect_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 135,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ContextObserver._save_context_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 324,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ContextObserver.register_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 372,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObserver.get_context_state",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 387,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObserver.get_all_context_states",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 399,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObserver.get_context_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 408,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObserver.get_health_distribution",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 429,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObserver.get_critical_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 443,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObserver.suggest_action",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/context_observer.py",
            "line": 455,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 504,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the action rule.\n\nArgs:\n    name: Rule name\n    description: Rule description",
            "args": [
              "self",
              "name",
              "description"
            ],
            "class": "ActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate whether to generate an action for a context.\n\nArgs:\n    context_id: Context identifier\n    current_state: Current context state (may be None)\n    prediction: Predicted future state (may be None)\n    \nReturns:\n    Action to take or None",
            "args": [
              "self",
              "context_id",
              "current_state",
              "prediction"
            ],
            "class": "ActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 90,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the token utilization action rule.",
            "args": [
              "self"
            ],
            "class": "TokenUtilizationActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate based on current and predicted token utilization.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "prediction"
            ],
            "class": "TokenUtilizationActionRule",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 170,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repetition action rule.",
            "args": [
              "self"
            ],
            "class": "RepetitionActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate based on current and predicted repetition scores.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "prediction"
            ],
            "class": "RepetitionActionRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 238,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the performance action rule.",
            "args": [
              "self"
            ],
            "class": "PerformanceActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate",
            "line": 245,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate based on current and predicted performance metrics.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "prediction"
            ],
            "class": "PerformanceActionRule",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 323,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the health action rule.",
            "args": [
              "self"
            ],
            "class": "HealthActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate",
            "line": 330,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate based on current and predicted health status.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "prediction"
            ],
            "class": "HealthActionRule",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 430,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the preventive action rule.",
            "args": [
              "self"
            ],
            "class": "PreventiveActionRule",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate",
            "line": 437,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate based on context age and complexity.",
            "args": [
              "self",
              "context_id",
              "current_state",
              "prediction"
            ],
            "class": "PreventiveActionRule",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 488,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Action Planner.\n\nArgs:\n    context_observer: Observer for context metrics\n    predictive_engine: Engine for context predictions\n    planning_interval: Interval for planning actions in seconds\n    max_actions_per_context: Maximum actions to keep per context\n    data_dir: Directory for storing action data",
            "args": [
              "self",
              "context_observer",
              "predictive_engine",
              "planning_interval",
              "max_actions_per_context",
              "data_dir"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 550,
            "async": true,
            "decorators": [],
            "docstring": "Start the action planner.",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 563,
            "async": true,
            "decorators": [],
            "docstring": "Stop the action planner.",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_planning_loop",
            "line": 581,
            "async": true,
            "decorators": [],
            "docstring": "Main loop for planning actions periodically.",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_plan_actions",
            "line": 596,
            "async": true,
            "decorators": [],
            "docstring": "Plan actions for all active contexts.",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_clean_expired_actions",
            "line": 657,
            "async": true,
            "decorators": [],
            "docstring": "Remove expired actions.",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_trigger_callbacks",
            "line": 677,
            "async": true,
            "decorators": [],
            "docstring": "Trigger registered callbacks for an event.\n\nArgs:\n    event_type: Type of event\n    *args: Arguments to pass to callbacks\n    **kwargs: Keyword arguments to pass to callbacks",
            "args": [
              "self",
              "event_type"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_callback",
            "line": 698,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for a specific event type.\n\nArgs:\n    event_type: Type of event to register for\n    callback: Callback function",
            "args": [
              "self",
              "event_type",
              "callback"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_actions",
            "line": 713,
            "async": false,
            "decorators": [],
            "docstring": "Get all actions for a specific context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    List of actions for the context",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_highest_priority_action",
            "line": 725,
            "async": false,
            "decorators": [],
            "docstring": "Get the highest priority action for a context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Highest priority action or None",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_actions",
            "line": 745,
            "async": false,
            "decorators": [],
            "docstring": "Get all actions for all contexts.\n\nReturns:\n    Dictionary mapping context IDs to lists of actions",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_actions",
            "line": 754,
            "async": false,
            "decorators": [],
            "docstring": "Get all critical priority actions.\n\nReturns:\n    List of critical actions",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_actionable_now",
            "line": 770,
            "async": false,
            "decorators": [],
            "docstring": "Get actions that should be taken now.\n\nReturns:\n    List of actions that should be taken now",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "mark_action_applied",
            "line": 790,
            "async": true,
            "decorators": [],
            "docstring": "Mark an action as having been applied.\n\nArgs:\n    action_id: Action identifier",
            "args": [
              "self",
              "action_id"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "save_action_history",
            "line": 823,
            "async": true,
            "decorators": [],
            "docstring": "Save action history for a context to disk.\n\nArgs:\n    context_id: Context identifier",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ActionPlanner",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_action_stats",
            "line": 850,
            "async": false,
            "decorators": [],
            "docstring": "Get statistics on actions by type.\n\nReturns:\n    Dictionary mapping action types to counts",
            "args": [
              "self"
            ],
            "class": "ActionPlanner",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ActionType",
            "line": 33,
            "methods": [],
            "decorators": [],
            "docstring": "Types of actions that can be taken on a context.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionPriority",
            "line": 45,
            "methods": [],
            "decorators": [],
            "docstring": "Priority levels for actions.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionRule",
            "line": 53,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Base class for action rules.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TokenUtilizationActionRule",
            "line": 87,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Rule for handling high token utilization.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RepetitionActionRule",
            "line": 167,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Rule for handling repetition issues.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PerformanceActionRule",
            "line": 235,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Rule for handling performance issues.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HealthActionRule",
            "line": 320,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Rule for handling general health issues.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PreventiveActionRule",
            "line": 427,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Rule for preventive maintenance on long-running contexts.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionPlanner",
            "line": 479,
            "methods": [
              "__init__",
              "register_callback",
              "get_actions",
              "get_highest_priority_action",
              "get_all_actions",
              "get_critical_actions",
              "get_actionable_now",
              "get_action_stats"
            ],
            "decorators": [],
            "docstring": "Action planner for Apollo that determines appropriate corrective actions.\n\nThis class uses rule-based decision making to generate actions based on \ncurrent context states and predictions about future states. It prioritizes\nactions and determines appropriate timing for interventions.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 16
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 17
          },
          {
            "module": "apollo.models.context.ContextMetrics",
            "from": "apollo.models.context",
            "name": "ContextMetrics",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextState",
            "from": "apollo.models.context",
            "name": "ContextState",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextPrediction",
            "from": "apollo.models.context",
            "name": "ContextPrediction",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextHealth",
            "from": "apollo.models.context",
            "name": "ContextHealth",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextAction",
            "from": "apollo.models.context",
            "name": "ContextAction",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.core.context_observer.ContextObserver",
            "from": "apollo.core.context_observer",
            "name": "ContextObserver",
            "alias": null,
            "line": 26
          },
          {
            "module": "apollo.core.predictive_engine.PredictiveEngine",
            "from": "apollo.core.predictive_engine",
            "name": "PredictiveEngine",
            "alias": null,
            "line": 27
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ActionType",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ActionPriority",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ActionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 53,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ActionRule.evaluate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "TokenUtilizationActionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 87,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TokenUtilizationActionRule.evaluate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "RepetitionActionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 167,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RepetitionActionRule.evaluate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "PerformanceActionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 235,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PerformanceActionRule.evaluate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 245,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "HealthActionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 320,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HealthActionRule.evaluate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 330,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "PreventiveActionRule",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 427,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PreventiveActionRule.evaluate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 437,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "ActionPlanner",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 479,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ActionPlanner.start",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 550,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 563,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ActionPlanner._plan_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 596,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ActionPlanner.register_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 698,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.get_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 713,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.get_highest_priority_action",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 725,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.get_all_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 745,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.get_critical_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 754,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.get_actionable_now",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 770,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.mark_action_applied",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 790,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ActionPlanner.save_action_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 823,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ActionPlanner.get_action_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/action_planner.py",
            "line": 850,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 869,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ApolloComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 46,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Apollo-specific services.",
            "args": [
              "self"
            ],
            "class": "ApolloComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 134,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Apollo-specific resources.",
            "args": [
              "self"
            ],
            "class": "ApolloComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "ApolloComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 172,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "ApolloComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ApolloComponent",
            "line": 20,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Apollo local attention and prediction component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 4
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 5
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 7
          },
          {
            "module": "apollo.core.apollo_manager.ApolloManager",
            "from": "apollo.core.apollo_manager",
            "name": "ApolloManager",
            "alias": null,
            "line": 8
          },
          {
            "module": "apollo.core.context_observer.ContextObserver",
            "from": "apollo.core.context_observer",
            "name": "ContextObserver",
            "alias": null,
            "line": 9
          },
          {
            "module": "apollo.core.token_budget.TokenBudgetManager",
            "from": "apollo.core.token_budget",
            "name": "TokenBudgetManager",
            "alias": null,
            "line": 10
          },
          {
            "module": "apollo.core.predictive_engine.PredictiveEngine",
            "from": "apollo.core.predictive_engine",
            "name": "PredictiveEngine",
            "alias": null,
            "line": 11
          },
          {
            "module": "apollo.core.action_planner.ActionPlanner",
            "from": "apollo.core.action_planner",
            "name": "ActionPlanner",
            "alias": null,
            "line": 12
          },
          {
            "module": "apollo.core.protocol_enforcer.ProtocolEnforcer",
            "from": "apollo.core.protocol_enforcer",
            "name": "ProtocolEnforcer",
            "alias": null,
            "line": 13
          },
          {
            "module": "apollo.core.message_handler.MessageHandler",
            "from": "apollo.core.message_handler",
            "name": "MessageHandler",
            "alias": null,
            "line": 14
          },
          {
            "module": "apollo.core.message_handler.HermesClient",
            "from": "apollo.core.message_handler",
            "name": "HermesClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "apollo.core.interfaces.rhetor.RhetorInterface",
            "from": "apollo.core.interfaces.rhetor",
            "name": "RhetorInterface",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ApolloComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_component.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloComponent._component_specific_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_component.py",
            "line": 134,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ApolloComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_component.py",
            "line": 162,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ApolloComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_component.py",
            "line": 172,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 188,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 74,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Apollo Manager.\n\nArgs:\n    rhetor_interface: Interface for communicating with Rhetor\n    data_dir: Root directory for storing data\n    enable_predictive: Whether to enable the predictive engine\n    enable_actions: Whether to enable the action planner\n    enable_message_handler: Whether to enable the message handler\n    enable_protocol_enforcer: Whether to enable the protocol enforcer\n    enable_token_budget: Whether to enable the token budget",
            "args": [
              "self",
              "rhetor_interface",
              "data_dir",
              "enable_predictive",
              "enable_actions",
              "enable_message_handler",
              "enable_protocol_enforcer",
              "enable_token_budget"
            ],
            "class": "ApolloManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_connect_components",
            "line": 158,
            "async": false,
            "decorators": [],
            "docstring": "Set up connections between components.",
            "args": [
              "self"
            ],
            "class": "ApolloManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_on_context_health_change",
            "line": 173,
            "async": true,
            "decorators": [],
            "docstring": "Handle context health change events.\n\nArgs:\n    context_state: Current context state\n    previous_health: Previous health status",
            "args": [
              "self",
              "context_state",
              "previous_health"
            ],
            "class": "ApolloManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 190,
            "async": true,
            "decorators": [],
            "docstring": "Start all Apollo components.",
            "args": [
              "self"
            ],
            "class": "ApolloManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "register_tool",
            "line": 227,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "tool_spec"
            ],
            "class": "DummyToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 258,
            "async": true,
            "decorators": [],
            "docstring": "Stop all Apollo components.",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_context_state",
            "line": 288,
            "async": false,
            "decorators": [],
            "docstring": "Get the current state of a context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    ContextState or None if not found",
            "args": [
              "self",
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_context_states",
            "line": 300,
            "async": false,
            "decorators": [],
            "docstring": "Get states for all active contexts.\n\nReturns:\n    List of ContextState objects",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_history",
            "line": 309,
            "async": false,
            "decorators": [],
            "docstring": "Get history for a specific context.\n\nArgs:\n    context_id: Context identifier\n    limit: Maximum number of records to return\n    \nReturns:\n    List of context history records",
            "args": [
              "self",
              "context_id",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_health_distribution",
            "line": 322,
            "async": false,
            "decorators": [],
            "docstring": "Get distribution of context health across all active contexts.\n\nReturns:\n    Dictionary mapping health status to count",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_contexts",
            "line": 331,
            "async": false,
            "decorators": [],
            "docstring": "Get contexts with critical health status.\n\nReturns:\n    List of ContextState objects with critical health",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "suggest_action",
            "line": 340,
            "async": true,
            "decorators": [],
            "docstring": "Suggest an action for a context based on its health.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Suggested ContextAction or None",
            "args": [
              "self",
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prediction",
            "line": 354,
            "async": false,
            "decorators": [],
            "docstring": "Get the latest prediction for a specific context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Latest prediction or None if no predictions exist",
            "args": [
              "self",
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_predictions",
            "line": 369,
            "async": false,
            "decorators": [],
            "docstring": "Get the latest prediction for all contexts.\n\nReturns:\n    Dictionary mapping context IDs to their latest predictions",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_predictions_by_health",
            "line": 381,
            "async": false,
            "decorators": [],
            "docstring": "Get all predictions with a specific predicted health status.\n\nArgs:\n    health: Health status to filter by\n    \nReturns:\n    List of predictions with the specified health status",
            "args": [
              "self",
              "health"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_predictions",
            "line": 396,
            "async": false,
            "decorators": [],
            "docstring": "Get predictions that indicate critical future issues.\n\nReturns:\n    List of predictions with critical health status",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_actions",
            "line": 410,
            "async": false,
            "decorators": [],
            "docstring": "Get all actions for a specific context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    List of actions for the context",
            "args": [
              "self",
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_highest_priority_action",
            "line": 425,
            "async": false,
            "decorators": [],
            "docstring": "Get the highest priority action for a context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Highest priority action or None",
            "args": [
              "self",
              "context_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_actions",
            "line": 440,
            "async": false,
            "decorators": [],
            "docstring": "Get all actions for all contexts.\n\nReturns:\n    Dictionary mapping context IDs to lists of actions",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_critical_actions",
            "line": 452,
            "async": false,
            "decorators": [],
            "docstring": "Get all critical priority actions.\n\nReturns:\n    List of critical actions",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_actionable_now",
            "line": 464,
            "async": false,
            "decorators": [],
            "docstring": "Get actions that should be taken now.\n\nReturns:\n    List of actions that should be taken now",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mark_action_applied",
            "line": 476,
            "async": true,
            "decorators": [],
            "docstring": "Mark an action as having been applied.\n\nArgs:\n    action_id: Action identifier",
            "args": [
              "self",
              "action_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_system_status",
            "line": 490,
            "async": false,
            "decorators": [],
            "docstring": "Get overall system status summary.\n\nReturns:\n    Dictionary with system status information",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_dashboard",
            "line": 533,
            "async": false,
            "decorators": [],
            "docstring": "Get comprehensive dashboard data for a specific context.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    Dictionary with context dashboard information",
            "args": [
              "self",
              "context_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_mcp_capabilities",
            "line": 586,
            "async": false,
            "decorators": [],
            "docstring": "Get all MCP capabilities from Apollo.\n\nReturns:\n    List of MCP capabilities",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_mcp_tools",
            "line": 598,
            "async": false,
            "decorators": [],
            "docstring": "Get all MCP tools from Apollo.\n\nReturns:\n    List of MCP tools",
            "args": [
              "self"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_fastmcp_request",
            "line": 610,
            "async": true,
            "decorators": [],
            "docstring": "Process a FastMCP request.\n\nArgs:\n    request: The FastMCP request\n    \nReturns:\n    MCPResponse object",
            "args": [
              "self",
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "process_mcp_request",
            "line": 710,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP request.\n\nArgs:\n    content: Request content\n    context: Optional context information\n    \nReturns:\n    MCP response",
            "args": [
              "self",
              "content",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ApolloManager",
            "line": 66,
            "methods": [
              "__init__",
              "_connect_components",
              "get_context_state",
              "get_all_context_states",
              "get_context_history",
              "get_health_distribution",
              "get_critical_contexts",
              "get_prediction",
              "get_all_predictions",
              "get_predictions_by_health",
              "get_critical_predictions",
              "get_actions",
              "get_highest_priority_action",
              "get_all_actions",
              "get_critical_actions",
              "get_actionable_now",
              "get_system_status",
              "get_context_dashboard",
              "get_mcp_capabilities",
              "get_mcp_tools"
            ],
            "decorators": [],
            "docstring": "High-level manager for Apollo components.\n\nThis class coordinates the Context Observer, Predictive Engine, and Action\nPlanner components, providing a simplified interface for the Apollo API.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DummyToolRegistry",
            "line": 226,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "apollo.models.context.ContextState",
            "from": "apollo.models.context",
            "name": "ContextState",
            "alias": null,
            "line": 16
          },
          {
            "module": "apollo.models.context.ContextPrediction",
            "from": "apollo.models.context",
            "name": "ContextPrediction",
            "alias": null,
            "line": 16
          },
          {
            "module": "apollo.models.context.ContextAction",
            "from": "apollo.models.context",
            "name": "ContextAction",
            "alias": null,
            "line": 16
          },
          {
            "module": "apollo.models.context.ContextHealth",
            "from": "apollo.models.context",
            "name": "ContextHealth",
            "alias": null,
            "line": 16
          },
          {
            "module": "apollo.core.context_observer.ContextObserver",
            "from": "apollo.core.context_observer",
            "name": "ContextObserver",
            "alias": null,
            "line": 22
          },
          {
            "module": "apollo.core.predictive_engine.PredictiveEngine",
            "from": "apollo.core.predictive_engine",
            "name": "PredictiveEngine",
            "alias": null,
            "line": 23
          },
          {
            "module": "apollo.core.action_planner.ActionPlanner",
            "from": "apollo.core.action_planner",
            "name": "ActionPlanner",
            "alias": null,
            "line": 24
          },
          {
            "module": "apollo.core.interfaces.rhetor.RhetorInterface",
            "from": "apollo.core.interfaces.rhetor",
            "name": "RhetorInterface",
            "alias": null,
            "line": 25
          },
          {
            "module": "apollo.core.message_handler.MessageHandler",
            "from": "apollo.core.message_handler",
            "name": "MessageHandler",
            "alias": null,
            "line": 26
          },
          {
            "module": "apollo.core.protocol_enforcer.ProtocolEnforcer",
            "from": "apollo.core.protocol_enforcer",
            "name": "ProtocolEnforcer",
            "alias": null,
            "line": 27
          },
          {
            "module": "apollo.core.token_budget.TokenBudgetManager",
            "from": "apollo.core.token_budget",
            "name": "TokenBudgetManager",
            "alias": null,
            "line": 28
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 36
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_tool",
            "alias": null,
            "line": 36
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_processor",
            "alias": null,
            "line": 36
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 41
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPResponse",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPResponse",
            "alias": null,
            "line": 41
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 41
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 41
          },
          {
            "module": "apollo.core.mcp.fastmcp_available",
            "from": "apollo.core.mcp",
            "name": "fastmcp_available",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.register_action_planning_tools",
            "from": "apollo.core.mcp",
            "name": "register_action_planning_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.register_context_tools",
            "from": "apollo.core.mcp",
            "name": "register_context_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.register_message_tools",
            "from": "apollo.core.mcp",
            "name": "register_message_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.register_prediction_tools",
            "from": "apollo.core.mcp",
            "name": "register_prediction_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.register_protocol_tools",
            "from": "apollo.core.mcp",
            "name": "register_protocol_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.register_budget_tools",
            "from": "apollo.core.mcp",
            "name": "register_budget_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.get_capabilities",
            "from": "apollo.core.mcp",
            "name": "get_capabilities",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.get_tools",
            "from": "apollo.core.mcp",
            "name": "get_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "apollo.core.mcp.tools.observe_context",
            "from": "apollo.core.mcp.tools",
            "name": "observe_context",
            "alias": null,
            "line": 648
          },
          {
            "module": "apollo.core.mcp.tools.list_contexts",
            "from": "apollo.core.mcp.tools",
            "name": "list_contexts",
            "alias": null,
            "line": 651
          },
          {
            "module": "apollo.core.mcp.tools.get_context_details",
            "from": "apollo.core.mcp.tools",
            "name": "get_context_details",
            "alias": null,
            "line": 654
          },
          {
            "module": "apollo.core.mcp.tools.get_context_health",
            "from": "apollo.core.mcp.tools",
            "name": "get_context_health",
            "alias": null,
            "line": 657
          },
          {
            "module": "apollo.core.mcp.tools.allocate_budget",
            "from": "apollo.core.mcp.tools",
            "name": "allocate_budget",
            "alias": null,
            "line": 660
          },
          {
            "module": "apollo.core.mcp.tools.check_budget",
            "from": "apollo.core.mcp.tools",
            "name": "check_budget",
            "alias": null,
            "line": 663
          },
          {
            "module": "apollo.core.mcp.tools.check_protocol_compliance",
            "from": "apollo.core.mcp.tools",
            "name": "check_protocol_compliance",
            "alias": null,
            "line": 666
          },
          {
            "module": "apollo.core.mcp.tools.list_protocol_violations",
            "from": "apollo.core.mcp.tools",
            "name": "list_protocol_violations",
            "alias": null,
            "line": 669
          },
          {
            "module": "apollo.core.mcp.tools.list_actions",
            "from": "apollo.core.mcp.tools",
            "name": "list_actions",
            "alias": null,
            "line": 672
          },
          {
            "module": "apollo.core.mcp.tools.get_critical_actions",
            "from": "apollo.core.mcp.tools",
            "name": "get_critical_actions",
            "alias": null,
            "line": 675
          },
          {
            "module": "apollo.core.mcp.tools.get_prediction",
            "from": "apollo.core.mcp.tools",
            "name": "get_prediction",
            "alias": null,
            "line": 678
          },
          {
            "module": "apollo.core.mcp.tools.get_predictions_by_health",
            "from": "apollo.core.mcp.tools",
            "name": "get_predictions_by_health",
            "alias": null,
            "line": 681
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ApolloManager",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 66,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloManager.start",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 190,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "DummyToolRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 226,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DummyToolRegistry.register_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 227,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "stop",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_context_state",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 288,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_context_states",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 300,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_context_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 309,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_health_distribution",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 322,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_critical_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 331,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "suggest_action",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_prediction",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 354,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 369,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_predictions_by_health",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 381,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_critical_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 396,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 410,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_highest_priority_action",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 425,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 440,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_critical_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 452,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_actionable_now",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 464,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mark_action_applied",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 476,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_system_status",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 490,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_context_dashboard",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 533,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_mcp_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 586,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_mcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 598,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "process_fastmcp_request",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 610,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "process_mcp_request",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/apollo_manager.py",
            "line": 710,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 893,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the protocol validator.\n\nArgs:\n    protocol: Protocol definition",
            "args": [
              "self",
              "protocol"
            ],
            "class": "ProtocolValidator",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Validate a message against the protocol.\n\nArgs:\n    message: Message to validate\n    context: Additional context for validation\n    \nReturns:\n    ProtocolViolation if validation fails, None otherwise",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "ProtocolValidator",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Validate message format.",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "MessageFormatValidator",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "validate",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Validate request flow.",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "RequestFlowValidator",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "validate",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "Validate response format.",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "ResponseFormatValidator",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "validate",
            "line": 272,
            "async": true,
            "decorators": [],
            "docstring": "Validate event sequencing.",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "EventSequenceValidator",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 355,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Protocol Enforcer.\n\nArgs:\n    protocols_dir: Directory with protocol definitions\n    load_defaults: Whether to load default protocols\n    violation_history_limit: Maximum violations to keep in history\n    data_dir: Directory for storing protocol data",
            "args": [
              "self",
              "protocols_dir",
              "load_defaults",
              "violation_history_limit",
              "data_dir"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_default_protocols",
            "line": 421,
            "async": false,
            "decorators": [],
            "docstring": "Load default protocol definitions.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_protocols_from_dir",
            "line": 519,
            "async": false,
            "decorators": [],
            "docstring": "Load protocol definitions from directory.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "add_protocol",
            "line": 556,
            "async": false,
            "decorators": [],
            "docstring": "Add a new protocol definition.\n\nArgs:\n    protocol: Protocol definition to add\n    \nReturns:\n    True if added successfully, False otherwise",
            "args": [
              "self",
              "protocol"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_protocol",
            "line": 591,
            "async": false,
            "decorators": [],
            "docstring": "Update an existing protocol definition.\n\nArgs:\n    protocol: Updated protocol definition\n    \nReturns:\n    True if updated successfully, False otherwise",
            "args": [
              "self",
              "protocol"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save_protocol",
            "line": 621,
            "async": false,
            "decorators": [],
            "docstring": "Save protocol definition to file.\n\nArgs:\n    protocol: Protocol definition to save",
            "args": [
              "self",
              "protocol"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "remove_protocol",
            "line": 640,
            "async": false,
            "decorators": [],
            "docstring": "Remove a protocol definition.\n\nArgs:\n    protocol_id: ID of protocol to remove\n    \nReturns:\n    True if removed successfully, False otherwise",
            "args": [
              "self",
              "protocol_id"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_protocol",
            "line": 676,
            "async": false,
            "decorators": [],
            "docstring": "Get a protocol definition by ID.\n\nArgs:\n    protocol_id: Protocol identifier\n    \nReturns:\n    Protocol definition or None if not found",
            "args": [
              "self",
              "protocol_id"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_protocols",
            "line": 688,
            "async": false,
            "decorators": [],
            "docstring": "Get all protocol definitions.\n\nReturns:\n    List of all protocol definitions",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_applicable_protocols",
            "line": 697,
            "async": false,
            "decorators": [],
            "docstring": "Get protocols applicable to a component, endpoint, or message type.\n\nArgs:\n    component: Component name\n    endpoint: Optional endpoint path\n    message_type: Optional message type\n    \nReturns:\n    List of applicable protocol definitions",
            "args": [
              "self",
              "component",
              "endpoint",
              "message_type"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "validate_message",
            "line": 772,
            "async": true,
            "decorators": [],
            "docstring": "Validate a message against applicable protocols.\n\nArgs:\n    message: Message to validate\n    context: Additional context for validation\n    \nReturns:\n    List of protocol violations",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "apply_corrections",
            "line": 876,
            "async": true,
            "decorators": [],
            "docstring": "Apply automatic corrections to a message based on violations.\n\nOnly called for protocols with ADAPT enforcement mode.\n\nArgs:\n    message: Original message\n    violations: Protocol violations\n    \nReturns:\n    Corrected message",
            "args": [
              "self",
              "message",
              "violations"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_message",
            "line": 938,
            "async": true,
            "decorators": [],
            "docstring": "Validate a message and handle it according to protocol enforcement.\n\nThis method validates the message, applies corrections if needed,\nand blocks messages that violate ENFORCE protocols.\n\nArgs:\n    message: Message to validate and handle\n    context: Additional context for validation\n    \nReturns:\n    Handled message (possibly corrected) or empty dict if blocked",
            "args": [
              "self",
              "message",
              "context"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "register_callback",
            "line": 991,
            "async": false,
            "decorators": [],
            "docstring": "Register a callback for a specific event type.\n\nArgs:\n    event_type: Type of event to register for\n    callback: Callback function",
            "args": [
              "self",
              "event_type",
              "callback"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_trigger_callbacks",
            "line": 1006,
            "async": true,
            "decorators": [],
            "docstring": "Trigger registered callbacks for an event.\n\nArgs:\n    event_type: Type of event\n    *args: Arguments to pass to callbacks\n    **kwargs: Keyword arguments to pass to callbacks",
            "args": [
              "self",
              "event_type"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_violations",
            "line": 1027,
            "async": false,
            "decorators": [],
            "docstring": "Get protocol violations filtered by criteria.\n\nArgs:\n    component: Optional component filter\n    protocol_id: Optional protocol ID filter\n    severity: Optional severity filter\n    limit: Maximum number of violations to return\n    \nReturns:\n    List of protocol violations matching criteria",
            "args": [
              "self",
              "component",
              "protocol_id",
              "severity",
              "limit"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_protocol_stats",
            "line": 1064,
            "async": false,
            "decorators": [],
            "docstring": "Get statistics for a specific protocol.\n\nArgs:\n    protocol_id: Protocol identifier\n    \nReturns:\n    Protocol statistics or None if not found",
            "args": [
              "self",
              "protocol_id"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_stats",
            "line": 1076,
            "async": false,
            "decorators": [],
            "docstring": "Get statistics for all protocols.\n\nReturns:\n    Dictionary mapping protocol IDs to their statistics",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_violation_summary",
            "line": 1085,
            "async": false,
            "decorators": [],
            "docstring": "Get summary of violations by severity.\n\nReturns:\n    Dictionary mapping severity to count",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_violation_history",
            "line": 1099,
            "async": false,
            "decorators": [],
            "docstring": "Clear the violation history.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reset_stats",
            "line": 1104,
            "async": false,
            "decorators": [],
            "docstring": "Reset all protocol statistics.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_violation_history",
            "line": 1116,
            "async": false,
            "decorators": [],
            "docstring": "Save violation history to disk.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_violation_history",
            "line": 1134,
            "async": false,
            "decorators": [],
            "docstring": "Load violation history from disk.\n\nArgs:\n    filename: Path to violation history file",
            "args": [
              "self",
              "filename"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "save_stats",
            "line": 1157,
            "async": false,
            "decorators": [],
            "docstring": "Save protocol statistics to disk.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_stats",
            "line": 1178,
            "async": false,
            "decorators": [],
            "docstring": "Load protocol statistics from disk.",
            "args": [
              "self"
            ],
            "class": "ProtocolEnforcer",
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "ProtocolValidator",
            "line": 38,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Base class for protocol validators.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageFormatValidator",
            "line": 68,
            "methods": [],
            "decorators": [],
            "docstring": "Validator for message format protocols.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RequestFlowValidator",
            "line": 142,
            "methods": [],
            "decorators": [],
            "docstring": "Validator for request flow protocols.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResponseFormatValidator",
            "line": 214,
            "methods": [],
            "decorators": [],
            "docstring": "Validator for response format protocols.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EventSequenceValidator",
            "line": 269,
            "methods": [],
            "decorators": [],
            "docstring": "Validator for event sequencing protocols.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProtocolEnforcer",
            "line": 347,
            "methods": [
              "__init__",
              "_load_default_protocols",
              "_load_protocols_from_dir",
              "add_protocol",
              "update_protocol",
              "_save_protocol",
              "remove_protocol",
              "get_protocol",
              "get_all_protocols",
              "get_applicable_protocols",
              "register_callback",
              "get_violations",
              "get_protocol_stats",
              "get_all_stats",
              "get_violation_summary",
              "clear_violation_history",
              "reset_stats",
              "save_violation_history",
              "load_violation_history",
              "save_stats",
              "load_stats"
            ],
            "decorators": [],
            "docstring": "Protocol enforcer for Apollo that ensures communication standards.\n\nThis class manages protocol definitions, validates messages against them,\nand tracks compliance with established protocols across Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "re",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 16
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 17
          },
          {
            "module": "jsonschema",
            "alias": null,
            "line": 18
          },
          {
            "module": "apollo.models.protocol.ProtocolDefinition",
            "from": "apollo.models.protocol",
            "name": "ProtocolDefinition",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.ProtocolViolation",
            "from": "apollo.models.protocol",
            "name": "ProtocolViolation",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.ProtocolStats",
            "from": "apollo.models.protocol",
            "name": "ProtocolStats",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.ProtocolType",
            "from": "apollo.models.protocol",
            "name": "ProtocolType",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.ProtocolSeverity",
            "from": "apollo.models.protocol",
            "name": "ProtocolSeverity",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.ProtocolScope",
            "from": "apollo.models.protocol",
            "name": "ProtocolScope",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.EnforcementMode",
            "from": "apollo.models.protocol",
            "name": "EnforcementMode",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.MessageFormatRule",
            "from": "apollo.models.protocol",
            "name": "MessageFormatRule",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.RequestFlowRule",
            "from": "apollo.models.protocol",
            "name": "RequestFlowRule",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.ResponseFormatRule",
            "from": "apollo.models.protocol",
            "name": "ResponseFormatRule",
            "alias": null,
            "line": 20
          },
          {
            "module": "apollo.models.protocol.EventSequenceRule",
            "from": "apollo.models.protocol",
            "name": "EventSequenceRule",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ProtocolValidator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ProtocolValidator.validate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "MessageFormatValidator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 68,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MessageFormatValidator.validate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "RequestFlowValidator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 142,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RequestFlowValidator.validate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "ResponseFormatValidator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 214,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ResponseFormatValidator.validate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "EventSequenceValidator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 269,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EventSequenceValidator.validate",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 272,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "ProtocolEnforcer",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 347,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer._load_protocols_from_dir",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 519,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.add_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 556,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.update_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 591,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer._save_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 621,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.remove_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 640,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 676,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_all_protocols",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 688,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_applicable_protocols",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 697,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.validate_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 772,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.apply_corrections",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 876,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.handle_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 938,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.register_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 991,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_violations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1027,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_protocol_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1064,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_all_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1076,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.get_violation_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1085,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.clear_violation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1099,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.reset_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.save_violation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1116,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.load_violation_history",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1134,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.save_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1157,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcer.load_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/protocol_enforcer.py",
            "line": 1178,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 1203,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
      "analysis": {
        "functions": [
          {
            "name": "set_expiration_time",
            "line": 84,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Set default expiration time if not provided.",
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remaining_tokens",
            "line": 92,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the number of remaining tokens in the allocation.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "usage_percentage",
            "line": 97,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the percentage of allocated tokens used.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_expired",
            "line": 104,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the allocation has expired.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 110,
            "async": false,
            "decorators": [],
            "docstring": "Record token usage against this allocation.\n\nArgs:\n    tokens: Number of tokens used\n    \nReturns:\n    Number of tokens actually recorded (limited by allocation)",
            "args": [
              "self",
              "tokens"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remaining",
            "line": 168,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the number of remaining tokens in the budget.",
            "args": [
              "self"
            ],
            "class": "BudgetSummary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_exceeded",
            "line": 173,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the budget has been exceeded.",
            "args": [
              "self"
            ],
            "class": "BudgetSummary",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BudgetTier",
            "line": 15,
            "methods": [],
            "decorators": [],
            "docstring": "Token budget tiers for different model capabilities.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPeriod",
            "line": 22,
            "methods": [],
            "decorators": [],
            "docstring": "Budget period types.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicyType",
            "line": 32,
            "methods": [],
            "decorators": [],
            "docstring": "Types of budget enforcement policies.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskPriority",
            "line": 40,
            "methods": [],
            "decorators": [],
            "docstring": "Priority levels for tasks.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicy",
            "line": 48,
            "methods": [],
            "decorators": [],
            "docstring": "Policy for token budget enforcement.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetAllocation",
            "line": 65,
            "methods": [
              "set_expiration_time",
              "remaining_tokens",
              "usage_percentage",
              "is_expired",
              "record_usage"
            ],
            "decorators": [],
            "docstring": "Token budget allocation for a specific LLM operation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetUsageRecord",
            "line": 137,
            "methods": [],
            "decorators": [],
            "docstring": "Record of token usage for a specific operation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetSummary",
            "line": 153,
            "methods": [
              "remaining",
              "is_exceeded"
            ],
            "decorators": [],
            "docstring": "Summary of budget usage for a component or task type.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BudgetTier",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPeriod",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicyType",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskPriority",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicy",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 48,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetAllocation",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 65,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.set_expiration_time",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 84,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.remaining_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 92,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.usage_percentage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 97,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.is_expired",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 110,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetUsageRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 137,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetSummary",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 153,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetSummary.remaining",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 168,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetSummary.is_exceeded",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/budget.py",
            "line": 173,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 175,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 89,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ContextMessage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 98,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ActionMessage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "BudgetMessage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ProtocolMessage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 125,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "PredictionMessage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 134,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "CommandMessage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "QueryMessage",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MessageType",
            "line": 16,
            "methods": [],
            "decorators": [],
            "docstring": "Types of messages handled by Apollo.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessagePriority",
            "line": 60,
            "methods": [],
            "decorators": [],
            "docstring": "Priority levels for messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TektonMessage",
            "line": 68,
            "methods": [],
            "decorators": [],
            "docstring": "Base message model for Tekton component communication.\n\nThis is the standard message format used for communication between\nApollo and other Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextMessage",
            "line": 87,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message related to LLM context events.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionMessage",
            "line": 96,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message related to corrective actions.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetMessage",
            "line": 105,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message related to token budget management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProtocolMessage",
            "line": 114,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message related to protocol enforcement.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PredictionMessage",
            "line": 123,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message related to predictive operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CommandMessage",
            "line": 132,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message for commanding operations on components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "QueryMessage",
            "line": 141,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message for querying data from components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageBatch",
            "line": 150,
            "methods": [],
            "decorators": [],
            "docstring": "Batch of messages for efficient transmission.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageSubscription",
            "line": 159,
            "methods": [],
            "decorators": [],
            "docstring": "Subscription for receiving messages of specific types.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageDeliveryStatus",
            "line": 170,
            "methods": [],
            "decorators": [],
            "docstring": "Status of message delivery.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageDeliveryRecord",
            "line": 178,
            "methods": [],
            "decorators": [],
            "docstring": "Record of message delivery attempt.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 11
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MessageType",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MessagePriority",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 60,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TektonMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 68,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ContextMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 87,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ActionMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 96,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 105,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProtocolMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 114,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PredictionMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 123,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "CommandMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 132,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "QueryMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 141,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MessageBatch",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 150,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MessageSubscription",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 159,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MessageDeliveryStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 170,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MessageDeliveryRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/models/message.py",
            "line": 178,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 186,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
      "analysis": {
        "functions": [
          {
            "name": "get_apollo_port",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Apollo client.\n\nArgs:\n    base_url: Base URL for Apollo API, defaults to localhost with configured port\n    timeout: Timeout for HTTP requests in seconds",
            "args": [
              "self",
              "base_url",
              "timeout"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 60,
            "async": true,
            "decorators": [],
            "docstring": "Close the HTTP client.",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_health",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Get health information from Apollo.\n\nReturns:\n    Health information",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_contexts",
            "line": 75,
            "async": true,
            "decorators": [],
            "docstring": "Get all contexts from Apollo.\n\nArgs:\n    status: Optional status filter\n    \nReturns:\n    API response with contexts",
            "args": [
              "self",
              "status"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Get a specific context from Apollo.\n\nArgs:\n    context_id: Context identifier\n    include_history: Whether to include history\n    history_limit: Maximum history records to return\n    \nReturns:\n    API response with context details",
            "args": [
              "self",
              "context_id",
              "include_history",
              "history_limit"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_dashboard",
            "line": 116,
            "async": true,
            "decorators": [],
            "docstring": "Get dashboard data for a context from Apollo.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    API response with context dashboard",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_predictions",
            "line": 130,
            "async": true,
            "decorators": [],
            "docstring": "Get all predictions from Apollo.\n\nArgs:\n    health: Optional health filter\n    \nReturns:\n    API response with predictions",
            "args": [
              "self",
              "health"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prediction",
            "line": 146,
            "async": true,
            "decorators": [],
            "docstring": "Get a prediction for a specific context from Apollo.\n\nArgs:\n    context_id: Context identifier\n    \nReturns:\n    API response with prediction",
            "args": [
              "self",
              "context_id"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_actions",
            "line": 160,
            "async": true,
            "decorators": [],
            "docstring": "Get all actions from Apollo.\n\nArgs:\n    critical_only: Whether to only return critical actions\n    actionable_now: Whether to only return actions that should be taken now\n    \nReturns:\n    API response with actions",
            "args": [
              "self",
              "critical_only",
              "actionable_now"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_actions_for_context",
            "line": 184,
            "async": true,
            "decorators": [],
            "docstring": "Get actions for a specific context from Apollo.\n\nArgs:\n    context_id: Context identifier\n    highest_priority_only: Whether to only return the highest priority action\n    \nReturns:\n    API response with actions",
            "args": [
              "self",
              "context_id",
              "highest_priority_only"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mark_action_applied",
            "line": 206,
            "async": true,
            "decorators": [],
            "docstring": "Mark an action as applied.\n\nArgs:\n    action_id: Action identifier\n    \nReturns:\n    API response",
            "args": [
              "self",
              "action_id"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_protocols",
            "line": 220,
            "async": true,
            "decorators": [],
            "docstring": "Get all protocols from Apollo.\n\nArgs:\n    type: Optional type filter\n    scope: Optional scope filter\n    \nReturns:\n    API response with protocols",
            "args": [
              "self",
              "type",
              "scope"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_protocol",
            "line": 244,
            "async": true,
            "decorators": [],
            "docstring": "Get a specific protocol from Apollo.\n\nArgs:\n    protocol_id: Protocol identifier\n    \nReturns:\n    API response with protocol details",
            "args": [
              "self",
              "protocol_id"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_protocol_violations",
            "line": 258,
            "async": true,
            "decorators": [],
            "docstring": "Get protocol violations from Apollo.\n\nArgs:\n    component: Optional component filter\n    protocol_id: Optional protocol ID filter\n    severity: Optional severity filter\n    limit: Maximum violations to return\n    \nReturns:\n    API response with violations",
            "args": [
              "self",
              "component",
              "protocol_id",
              "severity",
              "limit"
            ],
            "class": "ApolloClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_system_status",
            "line": 289,
            "async": true,
            "decorators": [],
            "docstring": "Get system status from Apollo.\n\nReturns:\n    API response with system status",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_health_metrics",
            "line": 300,
            "async": true,
            "decorators": [],
            "docstring": "Get health metrics from Apollo.\n\nReturns:\n    API response with health metrics",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prediction_metrics",
            "line": 311,
            "async": true,
            "decorators": [],
            "docstring": "Get prediction metrics from Apollo.\n\nReturns:\n    API response with prediction metrics",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_action_metrics",
            "line": 322,
            "async": true,
            "decorators": [],
            "docstring": "Get action metrics from Apollo.\n\nReturns:\n    API response with action metrics",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_protocol_metrics",
            "line": 333,
            "async": true,
            "decorators": [],
            "docstring": "Get protocol metrics from Apollo.\n\nReturns:\n    API response with protocol metrics",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_message_metrics",
            "line": 344,
            "async": true,
            "decorators": [],
            "docstring": "Get message metrics from Apollo.\n\nReturns:\n    API response with message metrics",
            "args": [
              "self"
            ],
            "class": "ApolloClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_status",
            "line": 358,
            "async": true,
            "decorators": [],
            "docstring": "Handle status command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_contexts",
            "line": 425,
            "async": true,
            "decorators": [],
            "docstring": "Handle contexts command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_context",
            "line": 521,
            "async": true,
            "decorators": [],
            "docstring": "Handle context command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_predictions",
            "line": 696,
            "async": true,
            "decorators": [],
            "docstring": "Handle predictions command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_actions",
            "line": 794,
            "async": true,
            "decorators": [],
            "docstring": "Handle actions command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_protocols",
            "line": 890,
            "async": true,
            "decorators": [],
            "docstring": "Handle protocols command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_metrics",
            "line": 1037,
            "async": true,
            "decorators": [],
            "docstring": "Handle metrics command.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_parser",
            "line": 1322,
            "async": false,
            "decorators": [],
            "docstring": "Create command-line parser.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 1456,
            "async": true,
            "decorators": [],
            "docstring": "Main entry point.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ApolloClient",
            "line": 44,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with the Apollo API.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "argparse",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "httpx",
            "alias": null,
            "line": 17
          },
          {
            "module": "tabulate",
            "alias": null,
            "line": 18
          },
          {
            "module": "rich",
            "alias": null,
            "line": 19
          },
          {
            "module": "rich.console.Console",
            "from": "rich.console",
            "name": "Console",
            "alias": null,
            "line": 20
          },
          {
            "module": "rich.table.Table",
            "from": "rich.table",
            "name": "Table",
            "alias": null,
            "line": 21
          },
          {
            "module": "rich.progress.Progress",
            "from": "rich.progress",
            "name": "Progress",
            "alias": null,
            "line": 22
          },
          {
            "module": "rich.progress.SpinnerColumn",
            "from": "rich.progress",
            "name": "SpinnerColumn",
            "alias": null,
            "line": 22
          },
          {
            "module": "rich.progress.TextColumn",
            "from": "rich.progress",
            "name": "TextColumn",
            "alias": null,
            "line": 22
          },
          {
            "module": "rich.panel.Panel",
            "from": "rich.panel",
            "name": "Panel",
            "alias": null,
            "line": 23
          },
          {
            "module": "rich.tree.Tree",
            "from": "rich.tree",
            "name": "Tree",
            "alias": null,
            "line": 24
          },
          {
            "module": "rich.syntax.Syntax",
            "from": "rich.syntax",
            "name": "Syntax",
            "alias": null,
            "line": 25
          },
          {
            "module": "rich.pretty.Pretty",
            "from": "rich.pretty",
            "name": "Pretty",
            "alias": null,
            "line": 26
          },
          {
            "module": "apollo.models.context.ContextHealth",
            "from": "apollo.models.context",
            "name": "ContextHealth",
            "alias": null,
            "line": 31
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_apollo_port",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ApolloClient",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 44,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 60,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_health",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 75,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_context_dashboard",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 130,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_prediction",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 146,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 160,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_actions_for_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 184,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.mark_action_applied",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 206,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_protocols",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 220,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_protocol_violations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_system_status",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 289,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_health_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 300,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_prediction_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 311,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_action_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 322,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_protocol_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 333,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloClient.get_message_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 344,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_status",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 358,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 425,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 521,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 696,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 794,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_protocols",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 890,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 1037,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "create_parser",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 1322,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/cli/main.py",
            "line": 1456,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 1489,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 65,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Apollo-specific components during startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 111,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint for the Apollo API.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 124,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check the health of the Apollo component following Tekton standards.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 134,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 146,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 111,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 124,
            "method": "@get",
            "async": true
          },
          {
            "name": "ready",
            "line": 134,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 146,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "sys",
            "alias": null,
            "line": 13
          },
          {
            "module": "time",
            "alias": null,
            "line": 14
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 17
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 21
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 22
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 23
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.utils.tekton_startup.tekton_component_startup",
            "from": "shared.utils.tekton_startup",
            "name": "tekton_component_startup",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 40
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 41
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 42
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 42
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 42
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 42
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 42
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 42
          },
          {
            "module": "apollo.core.apollo_component.ApolloComponent",
            "from": "apollo.core.apollo_component",
            "name": "ApolloComponent",
            "alias": null,
            "line": 52
          },
          {
            "module": "apollo.api.routes.api_router",
            "from": "apollo.api.routes",
            "name": "api_router",
            "alias": null,
            "line": 55
          },
          {
            "module": "apollo.api.routes.ws_router",
            "from": "apollo.api.routes",
            "name": "ws_router",
            "alias": null,
            "line": 55
          },
          {
            "module": "apollo.api.routes.metrics_router",
            "from": "apollo.api.routes",
            "name": "metrics_router",
            "alias": null,
            "line": 55
          },
          {
            "module": "apollo.api.endpoints.mcp.mcp_router",
            "from": "apollo.api.endpoints.mcp",
            "name": "mcp_router",
            "alias": null,
            "line": 56
          },
          {
            "module": "apollo.core.mcp.hermes_bridge.ApolloMCPBridge",
            "from": "apollo.core.mcp.hermes_bridge",
            "name": "ApolloMCPBridge",
            "alias": null,
            "line": 78
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 211
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/app.py",
            "line": 65,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/app.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/app.py",
            "line": 124,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/app.py",
            "line": 134,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/app.py",
            "line": 146,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 222,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/dependencies.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 14,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_apollo_manager",
            "line": 27,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the Apollo Manager instance from the application state.\n\nThis function is used as a FastAPI dependency to inject the Apollo Manager\ninto route handlers. It ensures the manager exists and is properly initialized.\n\nArgs:\n    request: FastAPI request object\n    \nReturns:\n    Apollo Manager instance\n    \nRaises:\n    HTTPException: If the Apollo Manager is not initialized",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 13,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.status",
            "from": "fastapi",
            "name": "status",
            "alias": null,
            "line": 9
          },
          {
            "module": "apollo.core.apollo_manager.ApolloManager",
            "from": "apollo.core.apollo_manager",
            "name": "ApolloManager",
            "alias": null,
            "line": 24
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/dependencies.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/dependencies.py",
            "line": 15,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/dependencies.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/dependencies.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_apollo_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/dependencies.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 54,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
      "analysis": {
        "functions": [
          {
            "name": "get_all_contexts",
            "line": 71,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all active contexts.\n\nReturns information about all contexts currently being monitored by Apollo.\nOptionally filter by health status.",
            "args": [
              "apollo_manager",
              "status"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 117,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get details for a specific context.\n\nReturns detailed information about a specific context identified by ID.\nOptionally includes context history.",
            "args": [
              "context_id",
              "apollo_manager",
              "include_history",
              "history_limit"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_context_dashboard",
            "line": 174,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get dashboard data for a specific context.\n\nReturns comprehensive dashboard data for a specific context,\nincluding metrics, predictions, and actions.",
            "args": [
              "context_id",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_predictions",
            "line": 213,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all predictions.\n\nReturns all context predictions currently maintained by Apollo.\nOptionally filter by predicted health status.",
            "args": [
              "apollo_manager",
              "health"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_prediction",
            "line": 258,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get prediction for a specific context.\n\nReturns the latest prediction for a specific context identified by ID.",
            "args": [
              "context_id",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "request_prediction",
            "line": 297,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Request a new prediction for a context.\n\nCreates a new prediction based on provided metrics and context info.",
            "args": [
              "request",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_actions",
            "line": 318,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all actions.\n\nReturns all actions currently recommended by Apollo.\nOptionally filter by critical priority or actionable now.",
            "args": [
              "apollo_manager",
              "critical_only",
              "actionable_now"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_actions_for_context",
            "line": 360,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get actions for a specific context.\n\nReturns actions recommended for a specific context identified by ID.\nOptionally returns only the highest priority action.",
            "args": [
              "context_id",
              "apollo_manager",
              "highest_priority_only"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "mark_action_applied",
            "line": 404,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Mark an action as applied.\n\nNotifies Apollo that an action has been applied by a component.",
            "args": [
              "action_id",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_budget",
            "line": 434,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Allocate a token budget.\n\nRequests a token budget allocation for an operation.",
            "args": [
              "request",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_protocols",
            "line": 489,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all protocol definitions.\n\nReturns all protocol definitions currently managed by Apollo.\nOptionally filter by type or scope.",
            "args": [
              "apollo_manager",
              "type",
              "scope"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_protocol",
            "line": 557,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific protocol definition.\n\nReturns a specific protocol definition identified by ID.",
            "args": [
              "protocol_id",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_protocol",
            "line": 609,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new protocol definition.\n\nAdds a new protocol to be enforced by Apollo.",
            "args": [
              "protocol",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_protocol",
            "line": 653,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a protocol definition.\n\nUpdates an existing protocol definition.",
            "args": [
              "protocol_id",
              "protocol",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_protocol",
            "line": 706,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a protocol definition.\n\nRemoves a protocol from enforcement.",
            "args": [
              "protocol_id",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_protocol_violations",
            "line": 749,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get protocol violations.\n\nReturns protocol violations recorded by Apollo.\nOptionally filter by component, protocol ID, or severity.",
            "args": [
              "apollo_manager",
              "component",
              "protocol_id",
              "severity",
              "limit"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 812,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a message from Apollo.\n\nSends a message to other components via the message handler.",
            "args": [
              "message",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_subscription",
            "line": 856,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a message subscription.\n\nSubscribes to messages of specific types.",
            "args": [
              "message_types",
              "filter_expression",
              "callback_url",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_subscription",
            "line": 916,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a message subscription.\n\nUnsubscribes from messages.",
            "args": [
              "subscription_id",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_system_status",
            "line": 961,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get Apollo system status.\n\nReturns comprehensive status information about Apollo components.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 991,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time communication.\n\nProvides real-time updates for context monitoring, actions, and predictions.",
            "args": [
              "websocket",
              "token"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_health_metrics",
            "line": 1113,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get context health metrics.\n\nReturns metrics on context health distribution.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_prediction_metrics",
            "line": 1164,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get prediction metrics.\n\nReturns metrics on prediction accuracy and distribution.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_action_metrics",
            "line": 1220,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get action metrics.\n\nReturns metrics on recommended actions.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_protocol_metrics",
            "line": 1288,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get protocol metrics.\n\nReturns metrics on protocol enforcement.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_message_metrics",
            "line": 1341,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get message metrics.\n\nReturns metrics on message handling.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "get_all_contexts",
            "line": 71,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_context",
            "line": 117,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_context_dashboard",
            "line": 174,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_all_predictions",
            "line": 213,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_prediction",
            "line": 258,
            "method": "@get",
            "async": true
          },
          {
            "name": "request_prediction",
            "line": 297,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_all_actions",
            "line": 318,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_actions_for_context",
            "line": 360,
            "method": "@get",
            "async": true
          },
          {
            "name": "mark_action_applied",
            "line": 404,
            "method": "@post",
            "async": true
          },
          {
            "name": "allocate_budget",
            "line": 434,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_all_protocols",
            "line": 489,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_protocol",
            "line": 557,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_protocol",
            "line": 609,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_protocol",
            "line": 653,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_protocol",
            "line": 706,
            "method": "@delete",
            "async": true
          },
          {
            "name": "get_protocol_violations",
            "line": 749,
            "method": "@get",
            "async": true
          },
          {
            "name": "send_message",
            "line": 812,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_subscription",
            "line": 856,
            "method": "@post",
            "async": true
          },
          {
            "name": "delete_subscription",
            "line": 916,
            "method": "@delete",
            "async": true
          },
          {
            "name": "get_system_status",
            "line": 961,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_health_metrics",
            "line": 1113,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_prediction_metrics",
            "line": 1164,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_action_metrics",
            "line": 1220,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_protocol_metrics",
            "line": 1288,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_message_metrics",
            "line": 1341,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 991,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.BackgroundTasks",
            "from": "fastapi",
            "name": "BackgroundTasks",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 17
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 17
          },
          {
            "module": "apollo.api.models.APIResponse",
            "from": "apollo.api.models",
            "name": "APIResponse",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.ResponseStatus",
            "from": "apollo.api.models",
            "name": "ResponseStatus",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.MonitoringStatus",
            "from": "apollo.api.models",
            "name": "MonitoringStatus",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.MonitoringMetrics",
            "from": "apollo.api.models",
            "name": "MonitoringMetrics",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.SessionInfo",
            "from": "apollo.api.models",
            "name": "SessionInfo",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.BudgetRequest",
            "from": "apollo.api.models",
            "name": "BudgetRequest",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.BudgetResponse",
            "from": "apollo.api.models",
            "name": "BudgetResponse",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.ProtocolRule",
            "from": "apollo.api.models",
            "name": "ProtocolRule",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.DirectiveMessage",
            "from": "apollo.api.models",
            "name": "DirectiveMessage",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.ComponentMessage",
            "from": "apollo.api.models",
            "name": "ComponentMessage",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.api.models.PredictionRequest",
            "from": "apollo.api.models",
            "name": "PredictionRequest",
            "alias": null,
            "line": 19
          },
          {
            "module": "apollo.models.context.ContextState",
            "from": "apollo.models.context",
            "name": "ContextState",
            "alias": null,
            "line": 32
          },
          {
            "module": "apollo.models.context.ContextHealth",
            "from": "apollo.models.context",
            "name": "ContextHealth",
            "alias": null,
            "line": 32
          },
          {
            "module": "apollo.models.context.ContextAction",
            "from": "apollo.models.context",
            "name": "ContextAction",
            "alias": null,
            "line": 32
          },
          {
            "module": "apollo.models.protocol.ProtocolDefinition",
            "from": "apollo.models.protocol",
            "name": "ProtocolDefinition",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.models.protocol.ProtocolViolation",
            "from": "apollo.models.protocol",
            "name": "ProtocolViolation",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.models.protocol.ProtocolType",
            "from": "apollo.models.protocol",
            "name": "ProtocolType",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.models.protocol.ProtocolSeverity",
            "from": "apollo.models.protocol",
            "name": "ProtocolSeverity",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.models.protocol.ProtocolScope",
            "from": "apollo.models.protocol",
            "name": "ProtocolScope",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.models.protocol.EnforcementMode",
            "from": "apollo.models.protocol",
            "name": "EnforcementMode",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.models.message.TektonMessage",
            "from": "apollo.models.message",
            "name": "TektonMessage",
            "alias": null,
            "line": 45
          },
          {
            "module": "apollo.models.message.MessageType",
            "from": "apollo.models.message",
            "name": "MessageType",
            "alias": null,
            "line": 45
          },
          {
            "module": "apollo.models.message.MessagePriority",
            "from": "apollo.models.message",
            "name": "MessagePriority",
            "alias": null,
            "line": 45
          },
          {
            "module": "apollo.api.dependencies.get_apollo_manager",
            "from": "apollo.api.dependencies",
            "name": "get_apollo_manager",
            "alias": null,
            "line": 65
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_all_contexts",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 117,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context_dashboard",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_predictions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 213,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_prediction",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "request_prediction",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 297,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 318,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_actions_for_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 360,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "mark_action_applied",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 404,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "allocate_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 434,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_protocols",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 489,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 557,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 609,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 653,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 706,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "get_protocol_violations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 749,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 812,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_subscription",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 856,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_subscription",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 916,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "get_system_status",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 961,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 991,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_health_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 1113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_prediction_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 1164,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_action_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 1220,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_protocol_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 1288,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_message_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/routes.py",
            "line": 1341,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1383,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Apollo MCP Bridge.",
            "args": [
              "self",
              "apollo_manager",
              "component_name"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 154,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from Apollo manager.",
            "args": [
              "self"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 188,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "ApolloMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ApolloMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Apollo's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Apollo to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "apollo.core.mcp.get_all_tools",
            "from": "apollo.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.utils.requests.process_mcp_request",
            "from": "tekton.mcp.fastmcp.utils.requests",
            "name": "process_mcp_request",
            "alias": null,
            "line": 91
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 92
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ApolloMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ApolloMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/hermes_bridge.py",
            "line": 188,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 213,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "plan_actions",
            "line": 49,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Plan a sequence of actions based on a goal and context.\n\nArgs:\n    goal: Goal to achieve\n    context: Context information\n    max_steps: Maximum number of steps in the plan\n    action_planner: Action planner to use (injected)\n    \nReturns:\n    Action plan",
            "args": [
              "goal",
              "context",
              "max_steps",
              "action_planner"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_action",
            "line": 103,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Execute a single action from a plan.\n\nArgs:\n    action: Action to execute\n    context: Context information\n    action_planner: Action planner to use (injected)\n    \nReturns:\n    Execution result",
            "args": [
              "action",
              "context",
              "action_planner"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_context",
            "line": 157,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Analyze the current context.\n\nArgs:\n    context: Context to analyze\n    focus_areas: Optional areas to focus the analysis on\n    context_observer: Context observer to use (injected)\n    \nReturns:\n    Context analysis",
            "args": [
              "context",
              "focus_areas",
              "context_observer"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_context",
            "line": 208,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Update the context with new information.\n\nArgs:\n    context: Current context\n    updates: Updates to apply to the context\n    context_observer: Context observer to use (injected)\n    \nReturns:\n    Updated context",
            "args": [
              "context",
              "updates",
              "context_observer"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_response",
            "line": 260,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Generate a response to a message.\n\nArgs:\n    message: Message to respond to\n    context: Context information\n    response_type: Type of response to generate\n    message_handler: Message handler to use (injected)\n    \nReturns:\n    Generated response",
            "args": [
              "message",
              "context",
              "response_type",
              "message_handler"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_message",
            "line": 313,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Analyze a message for intent and content.\n\nArgs:\n    message: Message to analyze\n    context: Optional context information\n    message_handler: Message handler to use (injected)\n    \nReturns:\n    Message analysis",
            "args": [
              "message",
              "context",
              "message_handler"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict_next_action",
            "line": 366,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Predict the next action based on context and history.\n\nArgs:\n    context: Current context\n    history: Action history\n    predictive_engine: Predictive engine to use (injected)\n    \nReturns:\n    Predicted next action",
            "args": [
              "context",
              "history",
              "predictive_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "predict_outcome",
            "line": 417,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Predict the outcome of an action.\n\nArgs:\n    action: Action to predict the outcome for\n    context: Current context\n    predictive_engine: Predictive engine to use (injected)\n    \nReturns:\n    Predicted outcome",
            "args": [
              "action",
              "context",
              "predictive_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_protocol",
            "line": 470,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Validate if a message follows the protocol.\n\nArgs:\n    message: Message to validate\n    protocol_name: Name of the protocol to validate against\n    protocol_enforcer: Protocol enforcer to use (injected)\n    \nReturns:\n    Validation result",
            "args": [
              "message",
              "protocol_name",
              "protocol_enforcer"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "enforce_protocol",
            "line": 521,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Enforce protocol rules on a message.\n\nArgs:\n    message: Message to enforce protocol on\n    protocol_name: Name of the protocol to enforce\n    protocol_enforcer: Protocol enforcer to use (injected)\n    \nReturns:\n    Enforced message",
            "args": [
              "message",
              "protocol_name",
              "protocol_enforcer"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_budget",
            "line": 573,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Allocate a token budget for a task.\n\nArgs:\n    task: Task to allocate budget for\n    context_size: Size of the context in tokens\n    model_name: Name of the model to use\n    token_budget: Token budget manager to use (injected)\n    \nReturns:\n    Budget allocation",
            "args": [
              "task",
              "context_size",
              "model_name",
              "token_budget"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "optimize_context",
            "line": 628,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Optimize a context to fit within a token budget.\n\nArgs:\n    context: Context to optimize\n    max_tokens: Maximum number of tokens\n    token_budget: Token budget manager to use (injected)\n    \nReturns:\n    Optimized context",
            "args": [
              "context",
              "max_tokens",
              "token_budget"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_action_planning_tools",
            "line": 671,
            "async": true,
            "decorators": [],
            "docstring": "Register action planning tools with the MCP service.",
            "args": [
              "action_planner",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_context_tools",
            "line": 687,
            "async": true,
            "decorators": [],
            "docstring": "Register context tools with the MCP service.",
            "args": [
              "context_observer",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_message_tools",
            "line": 703,
            "async": true,
            "decorators": [],
            "docstring": "Register message tools with the MCP service.",
            "args": [
              "message_handler",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_prediction_tools",
            "line": 719,
            "async": true,
            "decorators": [],
            "docstring": "Register prediction tools with the MCP service.",
            "args": [
              "predictive_engine",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_protocol_tools",
            "line": 735,
            "async": true,
            "decorators": [],
            "docstring": "Register protocol tools with the MCP service.",
            "args": [
              "protocol_enforcer",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_budget_tools",
            "line": 751,
            "async": true,
            "decorators": [],
            "docstring": "Register budget tools with the MCP service.",
            "args": [
              "token_budget",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 768,
            "async": false,
            "decorators": [],
            "docstring": "Get all Apollo MCP tools.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "plan_actions",
            "line": 49,
            "decorator": "@mcp_capability"
          },
          {
            "name": "plan_actions",
            "line": 49,
            "decorator": "@mcp_tool"
          },
          {
            "name": "execute_action",
            "line": 103,
            "decorator": "@mcp_capability"
          },
          {
            "name": "execute_action",
            "line": 103,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_context",
            "line": 157,
            "decorator": "@mcp_capability"
          },
          {
            "name": "analyze_context",
            "line": 157,
            "decorator": "@mcp_tool"
          },
          {
            "name": "update_context",
            "line": 208,
            "decorator": "@mcp_capability"
          },
          {
            "name": "update_context",
            "line": 208,
            "decorator": "@mcp_tool"
          },
          {
            "name": "generate_response",
            "line": 260,
            "decorator": "@mcp_capability"
          },
          {
            "name": "generate_response",
            "line": 260,
            "decorator": "@mcp_tool"
          },
          {
            "name": "analyze_message",
            "line": 313,
            "decorator": "@mcp_capability"
          },
          {
            "name": "analyze_message",
            "line": 313,
            "decorator": "@mcp_tool"
          },
          {
            "name": "predict_next_action",
            "line": 366,
            "decorator": "@mcp_capability"
          },
          {
            "name": "predict_next_action",
            "line": 366,
            "decorator": "@mcp_tool"
          },
          {
            "name": "predict_outcome",
            "line": 417,
            "decorator": "@mcp_capability"
          },
          {
            "name": "predict_outcome",
            "line": 417,
            "decorator": "@mcp_tool"
          },
          {
            "name": "validate_protocol",
            "line": 470,
            "decorator": "@mcp_capability"
          },
          {
            "name": "validate_protocol",
            "line": 470,
            "decorator": "@mcp_tool"
          },
          {
            "name": "enforce_protocol",
            "line": 521,
            "decorator": "@mcp_capability"
          },
          {
            "name": "enforce_protocol",
            "line": 521,
            "decorator": "@mcp_tool"
          },
          {
            "name": "allocate_budget",
            "line": 573,
            "decorator": "@mcp_capability"
          },
          {
            "name": "allocate_budget",
            "line": 573,
            "decorator": "@mcp_tool"
          },
          {
            "name": "optimize_context",
            "line": 628,
            "decorator": "@mcp_capability"
          },
          {
            "name": "optimize_context",
            "line": 628,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "plan_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "execute_action",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "update_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 208,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "generate_response",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 260,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "analyze_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 313,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "predict_next_action",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 366,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "predict_outcome",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 417,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "validate_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 470,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "enforce_protocol",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 521,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "allocate_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 573,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "optimize_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 628,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "register_action_planning_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 671,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_context_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 687,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_message_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 703,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_prediction_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 719,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_protocol_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 735,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_budget_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 751,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/tools.py",
            "line": 768,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 801,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "get_tools",
            "line": 43,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get all registered MCP tools.\n\nReturns:\n    List of registered tool schemas",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_tool",
            "line": 63,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 64,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 68,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_processor",
            "line": 73,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 74,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_context",
            "line": 78,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools",
            "line": 84,
            "async": false,
            "decorators": [],
            "docstring": "Fallback implementation for get_tools when FastMCP is not available.\n\nReturns:\n    Empty list (no tools available)",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_context",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_context",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_tool",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_processor",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_context",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_context",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.register_component",
            "from": "tekton.mcp.fastmcp",
            "name": "register_component",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.get_capabilities",
            "from": "tekton.mcp.fastmcp",
            "name": "get_capabilities",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.schema.CapabilitySchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "CapabilitySchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ContextSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ContextSchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ContentSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ContentSchema",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.mcp.fastmcp.registry.get_registered_tools",
            "from": "tekton.mcp.fastmcp.registry",
            "name": "get_registered_tools",
            "alias": "_get_registered_tools",
            "line": 38
          },
          {
            "module": "apollo.core.mcp.tools.register_action_planning_tools",
            "from": "apollo.core.mcp.tools",
            "name": "register_action_planning_tools",
            "alias": null,
            "line": 95
          },
          {
            "module": "apollo.core.mcp.tools.register_context_tools",
            "from": "apollo.core.mcp.tools",
            "name": "register_context_tools",
            "alias": null,
            "line": 95
          },
          {
            "module": "apollo.core.mcp.tools.register_message_tools",
            "from": "apollo.core.mcp.tools",
            "name": "register_message_tools",
            "alias": null,
            "line": 95
          },
          {
            "module": "apollo.core.mcp.tools.register_prediction_tools",
            "from": "apollo.core.mcp.tools",
            "name": "register_prediction_tools",
            "alias": null,
            "line": 95
          },
          {
            "module": "apollo.core.mcp.tools.register_protocol_tools",
            "from": "apollo.core.mcp.tools",
            "name": "register_protocol_tools",
            "alias": null,
            "line": 95
          },
          {
            "module": "apollo.core.mcp.tools.register_budget_tools",
            "from": "apollo.core.mcp.tools",
            "name": "register_budget_tools",
            "alias": null,
            "line": 95
          },
          {
            "module": "apollo.core.mcp.tools.get_all_tools",
            "from": "apollo.core.mcp.tools",
            "name": "get_all_tools",
            "alias": null,
            "line": 95
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 43,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 63,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 69,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_processor",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 73,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 74,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 78,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/__init__.py",
            "line": 84,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 125,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ActionPlanningCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 30,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ActionPlanningCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 54,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ActionExecutionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 64,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ActionExecutionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 87,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ContextObservationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 97,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ContextObservationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 120,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "MessageHandlingCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 130,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "MessageHandlingCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 153,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "PredictiveAnalysisCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 163,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "PredictiveAnalysisCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 186,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ProtocolEnforcementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 196,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ProtocolEnforcementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 219,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "TokenBudgetingCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 229,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "TokenBudgetingCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ActionPlanningCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for intelligent action planning and sequence optimization.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ActionExecutionCapability",
            "line": 46,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for executing planned actions with monitoring and adaptation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextObservationCapability",
            "line": 79,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for observing and analyzing environmental context.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageHandlingCapability",
            "line": 112,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for intelligent message processing and routing.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PredictiveAnalysisCapability",
            "line": 145,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for predictive analysis and forecasting.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProtocolEnforcementCapability",
            "line": 178,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for enforcing protocols and maintaining system integrity.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TokenBudgetingCapability",
            "line": 211,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for managing token budgets and resource allocation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ActionPlanningCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ActionPlanningCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionPlanningCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ActionExecutionCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ActionExecutionCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ActionExecutionCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ContextObservationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ContextObservationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextObservationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 97,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MessageHandlingCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 112,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MessageHandlingCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 120,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageHandlingCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PredictiveAnalysisCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 145,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PredictiveAnalysisCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 153,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PredictiveAnalysisCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 163,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ProtocolEnforcementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 178,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 186,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProtocolEnforcementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TokenBudgetingCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 211,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TokenBudgetingCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 219,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TokenBudgetingCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/mcp/capabilities.py",
            "line": 229,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 254,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
      "analysis": {
        "functions": [
          {
            "name": "get_component_port",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_url",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "component_name",
              "protocol"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Rhetor Interface.\n\nArgs:\n    base_url: Base URL for the Rhetor API (default: use port_config)\n    retry_count: Number of retries for failed requests\n    retry_delay: Delay between retries (seconds)\n    timeout: Request timeout (seconds)",
            "args": [
              "self",
              "base_url",
              "retry_count",
              "retry_delay",
              "timeout"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_session",
            "line": 73,
            "async": true,
            "decorators": [],
            "docstring": "Get or create an HTTP session.\n\nReturns:\n    aiohttp.ClientSession",
            "args": [
              "self"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_request",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Make an HTTP request to the Rhetor API with retries.\n\nArgs:\n    method: HTTP method\n    endpoint: API endpoint (without base URL)\n    **kwargs: Additional arguments for the request\n    \nReturns:\n    Response data\n    \nRaises:\n    Exception: If the request fails after retries",
            "args": [
              "self",
              "method",
              "endpoint"
            ],
            "class": "RhetorInterface",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_active_sessions",
            "line": 131,
            "async": true,
            "decorators": [],
            "docstring": "Get information about all active AI specialists as sessions from Rhetor.\n\nReturns:\n    List of session information dictionaries",
            "args": [
              "self"
            ],
            "class": "RhetorInterface",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_session_metrics",
            "line": 164,
            "async": true,
            "decorators": [],
            "docstring": "Get detailed metrics for a specific AI specialist session.\n\nArgs:\n    context_id: Context/Specialist identifier\n    \nReturns:\n    Dictionary of session metrics",
            "args": [
              "self",
              "context_id"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compress_context",
            "line": 194,
            "async": true,
            "decorators": [],
            "docstring": "Request context compression for an AI specialist session.\nNote: Compression not yet implemented in Rhetor.\n\nArgs:\n    context_id: Context/Specialist identifier\n    level: Compression level (light, moderate, aggressive)\n    max_tokens: Maximum tokens to retain after compression\n    \nReturns:\n    True if the request was successful",
            "args": [
              "self",
              "context_id",
              "level",
              "max_tokens"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reset_context",
            "line": 216,
            "async": true,
            "decorators": [],
            "docstring": "Request a context reset for an AI specialist session.\nThis is done by deactivating and reactivating the specialist.\n\nArgs:\n    context_id: Context/Specialist identifier\n    \nReturns:\n    True if the request was successful",
            "args": [
              "self",
              "context_id"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "inject_system_message",
            "line": 243,
            "async": true,
            "decorators": [],
            "docstring": "Inject a system message into an AI specialist context.\n\nArgs:\n    context_id: Context/Specialist identifier\n    message: System message to inject\n    priority: Message priority (0-10)\n    \nReturns:\n    True if the request was successful",
            "args": [
              "self",
              "context_id",
              "message",
              "priority"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect_websocket",
            "line": 278,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the Rhetor WebSocket for real-time updates.\n\nReturns:\n    True if connection was successful",
            "args": [
              "self"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect_websocket",
            "line": 307,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the Rhetor WebSocket.",
            "args": [
              "self"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_to_context_updates",
            "line": 320,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to real-time context updates via WebSocket.\n\nArgs:\n    context_id: Optional context ID to filter updates\n    callback: Callback function for updates\n    \nNote: This is a placeholder for future implementation.",
            "args": [
              "self",
              "context_id",
              "callback"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Close all connections.",
            "args": [
              "self"
            ],
            "class": "RhetorInterface",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RhetorInterface",
            "line": 38,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Interface for communicating with the Rhetor component.\n\nThis class handles API calls to Rhetor for retrieving metrics, context information,\nand sending directives for context management.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "connect_websocket",
            "line": 278,
            "async": true
          },
          {
            "name": "disconnect_websocket",
            "line": 307,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "sys",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 22
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_component_port",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_component_url",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "RhetorInterface",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorInterface.get_active_sessions",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 131,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.get_session_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 164,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.compress_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 194,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.reset_context",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 216,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.inject_system_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 243,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.connect_websocket",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 278,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.disconnect_websocket",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 307,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.subscribe_to_context_updates",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 320,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RhetorInterface.close",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/core/interfaces/rhetor.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 342,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
      "analysis": {
        "functions": [
          {
            "name": "process_message",
            "line": 69,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Process an MCP request through Apollo.\n\nThis endpoint accepts MCP requests and processes them using Apollo's components.",
            "args": [
              "request",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_fastmcp_request",
            "line": 97,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Process a FastMCP request.\n\nHandles a Model Context Protocol request using FastMCP and returns the result.",
            "args": [
              "request",
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 128,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get Apollo's MCP capabilities.\n\nThis endpoint returns information about Apollo's MCP capabilities,\nincluding supported content types, tools, and processors.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools",
            "line": 153,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get Apollo's MCP tools.\n\nThis endpoint returns information about Apollo's MCP tools.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 171,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint for Apollo's MCP implementation.\n\nThis endpoint checks if Apollo's MCP implementation is healthy and returns\ninformation about its current state.",
            "args": [
              "apollo_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ApolloMCPRequest",
            "line": 56,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for Apollo MCP API.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ApolloMCPResponse",
            "line": 61,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for Apollo MCP API.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "process_message",
            "line": 69,
            "method": "@post",
            "async": true
          },
          {
            "name": "process_fastmcp_request",
            "line": 97,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_capabilities",
            "line": 128,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_tools",
            "line": 153,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 171,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPResponse",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPResponse",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 22
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_tool",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_tool",
            "alias": null,
            "line": 32
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_processor",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_processor",
            "alias": null,
            "line": 32
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.MCPProcessingError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "MCPProcessingError",
            "alias": null,
            "line": 33
          },
          {
            "module": "apollo.api.dependencies.get_apollo_manager",
            "from": "apollo.api.dependencies",
            "name": "get_apollo_manager",
            "alias": null,
            "line": 36
          },
          {
            "module": "apollo.core.apollo_manager.ApolloManager",
            "from": "apollo.core.apollo_manager",
            "name": "ApolloManager",
            "alias": null,
            "line": 37
          },
          {
            "module": "apollo.core.action_planner.ActionPlanner",
            "from": "apollo.core.action_planner",
            "name": "ActionPlanner",
            "alias": null,
            "line": 38
          },
          {
            "module": "apollo.core.context_observer.ContextObserver",
            "from": "apollo.core.context_observer",
            "name": "ContextObserver",
            "alias": null,
            "line": 39
          },
          {
            "module": "apollo.core.message_handler.MessageHandler",
            "from": "apollo.core.message_handler",
            "name": "MessageHandler",
            "alias": null,
            "line": 40
          },
          {
            "module": "apollo.core.predictive_engine.PredictiveEngine",
            "from": "apollo.core.predictive_engine",
            "name": "PredictiveEngine",
            "alias": null,
            "line": 41
          },
          {
            "module": "apollo.core.protocol_enforcer.ProtocolEnforcer",
            "from": "apollo.core.protocol_enforcer",
            "name": "ProtocolEnforcer",
            "alias": null,
            "line": 42
          },
          {
            "module": "apollo.core.token_budget.TokenBudgetManager",
            "from": "apollo.core.token_budget",
            "name": "TokenBudgetManager",
            "alias": null,
            "line": 43
          },
          {
            "module": "apollo.api.models.APIResponse",
            "from": "apollo.api.models",
            "name": "APIResponse",
            "alias": null,
            "line": 44
          },
          {
            "module": "apollo.api.models.ResponseStatus",
            "from": "apollo.api.models",
            "name": "ResponseStatus",
            "alias": null,
            "line": 44
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ApolloMCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 56,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ApolloMCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 61,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "process_fastmcp_request",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Apollo/apollo/api/endpoints/mcp.py",
            "line": 171,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 193,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 21,
    "total_functions": 367,
    "total_classes": 64,
    "total_landmarks": 356,
    "patterns": [
      "singleton",
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 34,
    "mcp_tools": 24,
    "websocket_handlers": 4,
    "skipped_files": 8
  }
}