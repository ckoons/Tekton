{
  "component": "Budget",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/constants.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 15,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/constants.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/constants.py",
            "line": 17,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/constants.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/constants.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 229,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the policy enforcer.",
            "args": [
              "self"
            ],
            "class": "PolicyEnforcer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "route_with_budget_awareness",
            "line": 61,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Route a request with budget awareness.\n\nThis method checks if the default model is within budget limits\nand finds alternatives if needed.\n\nArgs:\n    input_text: Input text for cost estimation\n    task_type: Type of task (code, chat, etc.)\n    default_provider: Default provider\n    default_model: Default model\n    component: Component making the request\n    budget_id: Budget ID (optional)\n    priority: Task priority (1-10)\n    \nReturns:\n    Tuple of (provider, model, warnings)",
            "args": [
              "self",
              "input_text",
              "task_type",
              "default_provider",
              "default_model",
              "component",
              "budget_id",
              "priority"
            ],
            "class": "PolicyEnforcer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "select_optimal_tier",
            "line": 228,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Select the optimal tier for a task based on its description.\n\nArgs:\n    task_description: Description of the task\n    default_tier: Default tier to use if no better match\n    \nReturns:\n    Selected BudgetTier",
            "args": [
              "self",
              "task_description",
              "default_tier"
            ],
            "class": "PolicyEnforcer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "recommend_budget_optimization",
            "line": 291,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Provide budget optimization recommendations.\n\nArgs:\n    budget_id: Budget ID (optional)\n    \nReturns:\n    Dictionary with optimization recommendations",
            "args": [
              "self",
              "budget_id"
            ],
            "class": "PolicyEnforcer",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 17,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PolicyEnforcer",
            "line": 48,
            "methods": [
              "__init__",
              "route_with_budget_awareness",
              "select_optimal_tier",
              "recommend_budget_optimization"
            ],
            "decorators": [],
            "docstring": "Enforces budget policies and makes budget-aware decisions.\n\nThis class is responsible for routing requests, selecting models,\nand enforcing budget policies.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 14
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.core.constants.DEFAULT_MODEL_TIERS",
            "from": "budget.core.constants",
            "name": "DEFAULT_MODEL_TIERS",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.core.constants.DEFAULT_PROVIDER_TIERS",
            "from": "budget.core.constants",
            "name": "DEFAULT_PROVIDER_TIERS",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.data.db_models.ProviderPricingDB",
            "from": "budget.data.db_models",
            "name": "ProviderPricingDB",
            "alias": null,
            "line": 156
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 19,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PolicyEnforcer",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 48,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PolicyEnforcer.route_with_budget_awareness",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 61,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PolicyEnforcer.select_optimal_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 228,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PolicyEnforcer.recommend_budget_optimization",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/policy.py",
            "line": 291,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 467,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the budget engine.",
            "args": [
              "self"
            ],
            "class": "BudgetEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_budget",
            "line": 63,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create a new budget.\n\nArgs:\n    name: Budget name\n    description: Budget description\n    owner: Budget owner\n    metadata: Additional metadata\n    \nReturns:\n    Created budget",
            "args": [
              "self",
              "name",
              "description",
              "owner",
              "metadata"
            ],
            "class": "BudgetEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_default_policies",
            "line": 104,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create default policies for a budget.\n\nArgs:\n    budget_id: Budget ID\n    token_limits: Custom token limits by tier and period (optional)\n    cost_limits: Custom cost limits by period (optional)\n    \nReturns:\n    List of created policies",
            "args": [
              "self",
              "budget_id",
              "token_limits",
              "cost_limits"
            ],
            "class": "BudgetEngine",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "set_policy",
            "line": 191,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create or update a budget policy.\n\nArgs:\n    budget_id: Budget ID (optional)\n    period: Budget period\n    token_limit: Token limit (required if cost_limit not provided)\n    cost_limit: Cost limit (required if token_limit not provided)\n    tier: Budget tier (optional)\n    provider: Provider name (optional)\n    component: Component name (optional)\n    task_type: Task type (optional)\n    policy_type: Policy type (warn, hard_limit, etc.)\n    enabled: Whether the policy is enabled\n    \nReturns:\n    Created or updated policy",
            "args": [
              "self",
              "budget_id",
              "period",
              "token_limit",
              "cost_limit",
              "tier",
              "provider",
              "component",
              "task_type",
              "policy_type",
              "enabled"
            ],
            "class": "BudgetEngine",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "disable_policy",
            "line": 315,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Disable a budget policy.\n\nArgs:\n    policy_id: Policy ID\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "policy_id"
            ],
            "class": "BudgetEngine",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_budget_summary",
            "line": 342,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get a summary of budget usage.\n\nArgs:\n    budget_id: Budget ID (optional)\n    period: Budget period\n    tier: Budget tier (optional)\n    provider: Provider name (optional)\n    component: Component name (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    List of budget summaries",
            "args": [
              "self",
              "budget_id",
              "period",
              "tier",
              "provider",
              "component",
              "task_type"
            ],
            "class": "BudgetEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_allocation_matches_policy",
            "line": 481,
            "async": false,
            "decorators": [],
            "docstring": "Check if an allocation matches a policy.\n\nArgs:\n    allocation: Budget allocation\n    policy: Budget policy\n    \nReturns:\n    True if allocation matches policy criteria",
            "args": [
              "self",
              "allocation",
              "policy"
            ],
            "class": "BudgetEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_and_create_alerts",
            "line": 515,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check for budget violations and create alerts.\n\nArgs:\n    budget_id: Budget ID (optional)\n    period: Budget period (optional, checks all periods if not provided)\n    \nReturns:\n    List of created alerts",
            "args": [
              "self",
              "budget_id",
              "period"
            ],
            "class": "BudgetEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_model_recommendations",
            "line": 690,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get model recommendations based on budget constraints.\n\nArgs:\n    provider: Current provider\n    model: Current model\n    task_type: Task type\n    context_size: Estimated context size in tokens\n    \nReturns:\n    List of recommended models with pricing information",
            "args": [
              "self",
              "provider",
              "model",
              "task_type",
              "context_size"
            ],
            "class": "BudgetEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_budget_engine",
            "line": 797,
            "async": false,
            "decorators": [],
            "docstring": "Get the singleton budget engine instance.\n\nReturns:\n    BudgetEngine: The budget engine instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 18,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetEngine",
            "line": 50,
            "methods": [
              "__init__",
              "create_budget",
              "create_default_policies",
              "set_policy",
              "disable_policy",
              "get_budget_summary",
              "_allocation_matches_policy",
              "check_and_create_alerts",
              "get_model_recommendations"
            ],
            "decorators": [],
            "docstring": "Core budget management engine.\n\nThis class provides functionality for creating and managing budgets,\nsetting policies, and generating reports.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 15
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.BudgetSummary",
            "from": "budget.data.models",
            "name": "BudgetSummary",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 31
          },
          {
            "module": "budget.core.constants.DEFAULT_TOKEN_LIMITS",
            "from": "budget.core.constants",
            "name": "DEFAULT_TOKEN_LIMITS",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.core.constants.DEFAULT_COST_LIMITS",
            "from": "budget.core.constants",
            "name": "DEFAULT_COST_LIMITS",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.core.constants.ALERT_THRESHOLDS",
            "from": "budget.core.constants",
            "name": "ALERT_THRESHOLDS",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 47
          },
          {
            "module": "sqlalchemy.and_",
            "from": "sqlalchemy",
            "name": "and_",
            "alias": null,
            "line": 735
          },
          {
            "module": "sqlalchemy.or_",
            "from": "sqlalchemy",
            "name": "or_",
            "alias": null,
            "line": 735
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 736
          },
          {
            "module": "budget.data.db_models.ProviderPricingDB",
            "from": "budget.data.db_models",
            "name": "ProviderPricingDB",
            "alias": null,
            "line": 737
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 50,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetEngine.create_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 63,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetEngine.create_default_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 104,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetEngine.set_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 191,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "BudgetEngine.disable_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 315,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetEngine.get_budget_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 342,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "BudgetEngine.check_and_create_alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 515,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "BudgetEngine.get_model_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 690,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_budget_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/engine.py",
            "line": 797,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 804,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the allocation manager.",
            "args": [
              "self"
            ],
            "class": "AllocationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "determine_tier",
            "line": 64,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Determine the appropriate budget tier based on component, provider, and model.\n\nArgs:\n    component: Component ID\n    provider: Provider ID\n    model: Model ID\n    \nReturns:\n    BudgetTier",
            "args": [
              "self",
              "component",
              "provider",
              "model"
            ],
            "class": "AllocationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_default_allocation",
            "line": 108,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the default token allocation for a task type and priority.\n\nArgs:\n    task_type: Type of task (default, chat, coding, etc.)\n    priority: Task priority (1-10)\n    \nReturns:\n    Default token allocation",
            "args": [
              "self",
              "task_type",
              "priority"
            ],
            "class": "AllocationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "estimate_cost",
            "line": 149,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Estimate the cost for a token allocation.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    tokens: Total tokens to estimate cost for\n    input_ratio: Ratio of input tokens to total tokens\n    \nReturns:\n    Estimated cost in USD",
            "args": [
              "self",
              "provider",
              "model",
              "tokens",
              "input_ratio"
            ],
            "class": "AllocationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_budget",
            "line": 191,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Allocate a token budget for an LLM operation.\n\nArgs:\n    context_id: Context identifier\n    component: Component ID\n    task_type: Task type\n    provider: Provider ID (optional)\n    model: Model ID (optional)\n    priority: Task priority (1-10)\n    token_count: Requested token count (optional)\n    budget_id: Budget ID to allocate from (optional)\n    expiration: Expiration time (optional)\n    metadata: Additional metadata (optional)\n    \nReturns:\n    BudgetAllocation or None if allocation failed",
            "args": [
              "self",
              "context_id",
              "component",
              "task_type",
              "provider",
              "model",
              "priority",
              "token_count",
              "budget_id",
              "expiration",
              "metadata"
            ],
            "class": "AllocationManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 332,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Record token and cost usage.\n\nArgs:\n    context_id: Context identifier\n    input_tokens: Number of input tokens used\n    output_tokens: Number of output tokens used\n    provider: Provider name\n    model: Model name\n    component: Component name\n    task_type: Task type\n    operation_id: Operation identifier (optional)\n    request_id: Request identifier (optional)\n    user_id: User identifier (optional)\n    metadata: Additional metadata (optional)\n    \nReturns:\n    Tuple of (UsageRecord, updated BudgetAllocation or None)",
            "args": [
              "self",
              "context_id",
              "input_tokens",
              "output_tokens",
              "provider",
              "model",
              "component",
              "task_type",
              "operation_id",
              "request_id",
              "user_id",
              "metadata"
            ],
            "class": "AllocationManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "check_budget",
            "line": 451,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check if a request is within budget limits.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_tokens: Input tokens for the request\n    component: Component name\n    task_type: Task type\n    budget_id: Budget ID to check against (optional)\n    \nReturns:\n    Tuple of (True if allowed, info dict with details)",
            "args": [
              "self",
              "provider",
              "model",
              "input_tokens",
              "component",
              "task_type",
              "budget_id"
            ],
            "class": "AllocationManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "set_component_tier",
            "line": 587,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Set the budget tier for a component.\n\nArgs:\n    component: Component identifier\n    tier: Budget tier\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "component",
              "tier"
            ],
            "class": "AllocationManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 19,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AllocationManager",
            "line": 48,
            "methods": [
              "__init__",
              "determine_tier",
              "get_default_allocation",
              "estimate_cost",
              "allocate_budget",
              "record_usage",
              "check_budget",
              "set_component_tier"
            ],
            "decorators": [],
            "docstring": "Manages token and cost budget allocations.\n\nThis class is responsible for creating allocations, tracking usage,\nand enforcing allocation limits.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 16
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.core.constants.DEFAULT_TOKEN_LIMITS",
            "from": "budget.core.constants",
            "name": "DEFAULT_TOKEN_LIMITS",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.core.constants.DEFAULT_ALLOCATIONS",
            "from": "budget.core.constants",
            "name": "DEFAULT_ALLOCATIONS",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.core.constants.DEFAULT_MODEL_TIERS",
            "from": "budget.core.constants",
            "name": "DEFAULT_MODEL_TIERS",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.core.constants.DEFAULT_PROVIDER_TIERS",
            "from": "budget.core.constants",
            "name": "DEFAULT_PROVIDER_TIERS",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 42
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "AllocationManager",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 48,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AllocationManager.determine_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AllocationManager.get_default_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AllocationManager.estimate_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 149,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AllocationManager.allocate_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 191,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "AllocationManager.record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 332,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "AllocationManager.check_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 451,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "AllocationManager.set_component_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/allocation.py",
            "line": 587,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 611,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the usage tracker.",
            "args": [
              "self"
            ],
            "class": "UsageTracker",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_usage_counter",
            "line": 56,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update the in-memory usage counter for a specific period and criteria.\n\nArgs:\n    period: Budget period\n    budget_id: Budget ID (optional)\n    tier: Budget tier (optional)\n    provider: Provider name (optional)\n    component: Component name (optional)\n    task_type: Task type (optional)\n    tokens: Number of tokens to add\n    cost: Cost to add",
            "args": [
              "self",
              "period",
              "budget_id",
              "tier",
              "provider",
              "component",
              "task_type",
              "tokens",
              "cost"
            ],
            "class": "UsageTracker",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_period_key",
            "line": 118,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the key for a budget period.\n\nArgs:\n    period: Budget period\n    now: Current datetime (default: now)\n    \nReturns:\n    String key for the period",
            "args": [
              "self",
              "period",
              "now"
            ],
            "class": "UsageTracker",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_period_start_end",
            "line": 146,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the start and end datetimes for a budget period.\n\nArgs:\n    period: Budget period\n    now: Current datetime (default: now)\n    \nReturns:\n    Tuple of (start_datetime, end_datetime)",
            "args": [
              "self",
              "period",
              "now"
            ],
            "class": "UsageTracker",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_usage_from_memory",
            "line": 189,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get usage data from in-memory counters.\n\nArgs:\n    period: Budget period\n    budget_id: Budget ID (optional)\n    tier: Budget tier (optional)\n    provider: Provider name (optional)\n    component: Component name (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    Dictionary with usage data",
            "args": [
              "self",
              "period",
              "budget_id",
              "tier",
              "provider",
              "component",
              "task_type"
            ],
            "class": "UsageTracker",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_usage_history",
            "line": 245,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get historical usage data for a period.\n\nArgs:\n    period: Budget period\n    days: Number of days to include in history\n    budget_id: Budget ID (optional)\n    provider: Provider name (optional)\n    component: Component name (optional)\n    model: Model name (optional)\n    task_type: Task type (optional)\n    \nReturns:\n    List of usage records by period",
            "args": [
              "self",
              "period",
              "days",
              "budget_id",
              "provider",
              "component",
              "model",
              "task_type"
            ],
            "class": "UsageTracker",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_usage_patterns",
            "line": 400,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Analyze usage patterns to identify trends and optimization opportunities.\n\nArgs:\n    period: Budget period\n    days: Number of days to include in analysis\n    budget_id: Budget ID (optional)\n    \nReturns:\n    Dictionary with usage pattern analysis",
            "args": [
              "self",
              "period",
              "days",
              "budget_id"
            ],
            "class": "UsageTracker",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "process_usage_record",
            "line": 549,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Process a usage record for tracking and analysis.\n\nArgs:\n    record: Usage record to process",
            "args": [
              "self",
              "record"
            ],
            "class": "UsageTracker",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 17,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageTracker",
            "line": 42,
            "methods": [
              "__init__",
              "update_usage_counter",
              "_get_period_key",
              "_get_period_start_end",
              "get_usage_from_memory",
              "get_usage_history",
              "analyze_usage_patterns",
              "process_usage_record"
            ],
            "decorators": [],
            "docstring": "Tracks token and cost usage across different dimensions.\n\nThis class provides functionality for tracking, analyzing,\nand reporting on token and cost usage.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 14
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 30
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 36
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 19,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "UsageTracker",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 42,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "UsageTracker.update_usage_counter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 56,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "UsageTracker._get_period_start_end",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 146,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "UsageTracker.get_usage_from_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 189,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "UsageTracker.get_usage_history",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 245,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "UsageTracker.analyze_usage_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 400,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "UsageTracker.process_usage_record",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/tracking.py",
            "line": 549,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 620,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/budget_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "BudgetComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 24,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Budget-specific services.",
            "args": [
              "self"
            ],
            "class": "BudgetComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 54,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Budget-specific resources.",
            "args": [
              "self"
            ],
            "class": "BudgetComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "BudgetComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "BudgetComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_engine",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Convenience function to get budget engine through component.\nThis maintains compatibility with existing code during migration.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BudgetComponent",
            "line": 13,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Budget management component with financial tracking and MCP support.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 4
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 6
          },
          {
            "module": "budget.core.engine.BudgetEngine",
            "from": "budget.core.engine",
            "name": "BudgetEngine",
            "alias": null,
            "line": 7
          },
          {
            "module": "budget.data.repository.db_manager",
            "from": "budget.data.repository",
            "name": "db_manager",
            "alias": null,
            "line": 8
          },
          {
            "module": "budget.api.websocket_server.ConnectionManager",
            "from": "budget.api.websocket_server",
            "name": "ConnectionManager",
            "alias": null,
            "line": 9
          },
          {
            "module": "starlette.applications.Starlette",
            "from": "starlette.applications",
            "name": "Starlette",
            "alias": null,
            "line": 114
          },
          {
            "module": "starlette.requests.Request",
            "from": "starlette.requests",
            "name": "Request",
            "alias": null,
            "line": 115
          },
          {
            "module": "contextvars",
            "alias": null,
            "line": 116
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 123
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 129
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BudgetComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/budget_component.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/budget_component.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/budget_component.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_budget_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/budget_component.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 130,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes registration client.\n\nArgs:\n    component_id: Unique identifier for this component\n    component_name: Human-readable name\n    component_type: Type of component\n    component_version: Component version\n    hermes_url: Hermes API endpoint\n    endpoint: Budget component endpoint\n    heartbeat_interval: Interval in seconds for sending heartbeats",
            "args": [
              "self",
              "component_id",
              "component_name",
              "component_type",
              "component_version",
              "hermes_url",
              "endpoint",
              "heartbeat_interval"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 222,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Register this component with Hermes.\n\nReturns:\n    True if registration was successful",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_register_via_file",
            "line": 291,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Register via file-based method (for development environments).\n\nReturns:\n    True if registration was successful",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "unregister",
            "line": 349,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Unregister this component from Hermes.\n\nReturns:\n    True if unregistration was successful",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_unregister_via_file",
            "line": 403,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Unregister via file-based method (for development environments).\n\nReturns:\n    True if unregistration was successful",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_heartbeat_loop",
            "line": 436,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Continuously send heartbeats to Hermes.",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_start_heartbeat",
            "line": 478,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Start the heartbeat task.",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_stop_heartbeat",
            "line": 486,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Stop the heartbeat task.",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 499,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Clean up resources and unregister if necessary.\n\nCall this method when shutting down the component.",
            "args": [
              "self"
            ],
            "class": "HermesRegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_budget_component",
            "line": 512,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Register the Budget component with Hermes.\n\nArgs:\n    endpoint: The Budget component API endpoint\n    \nReturns:\n    Registration client if successful, None otherwise",
            "args": [
              "endpoint"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 20,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HermesRegistrationClient",
            "line": 35,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for registering the Budget component with Hermes service registry.\n\nThis class provides functionality to register the Budget component,\nmaintain heartbeats, and gracefully unregister on shutdown.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.api.client.HermesClient",
            "from": "hermes.api.client",
            "name": "HermesClient",
            "alias": null,
            "line": 234
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 243
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 312
          },
          {
            "module": "time",
            "alias": null,
            "line": 313
          },
          {
            "module": "hermes.api.client.HermesClient",
            "from": "hermes.api.client",
            "name": "HermesClient",
            "alias": null,
            "line": 368
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 374
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 439
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "HermesRegistrationClient",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesRegistrationClient.register",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 222,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesRegistrationClient._register_via_file",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 291,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "HermesRegistrationClient.unregister",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 349,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesRegistrationClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 499,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_budget_component",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/utils/hermes_helper.py",
            "line": 512,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 539,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cli",
            "line": 50,
            "async": false,
            "decorators": [
              "@group",
              "@option",
              "@pass_context"
            ],
            "docstring": "Budget component command-line interface.\n\nManage LLM token budgets and cost tracking for Tekton components.",
            "args": [
              "ctx",
              "debug"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 67,
            "async": false,
            "decorators": [
              "@command",
              "@pass_context"
            ],
            "docstring": "Start the Budget API server.",
            "args": [
              "ctx"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "status",
            "line": 81,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "Show the current budget status.",
            "args": [
              "ctx",
              "period",
              "tier",
              "provider",
              "component",
              "format",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_usage",
            "line": 139,
            "async": false,
            "decorators": [
              "@command",
              "@argument",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "Get usage data for a specific period.\n\nPERIOD can be one of: hourly, daily, weekly, monthly",
            "args": [
              "ctx",
              "period",
              "provider",
              "model",
              "component",
              "days",
              "format",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "set_limit",
            "line": 209,
            "async": false,
            "decorators": [
              "@command",
              "@argument",
              "@argument",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "Set a budget limit for a period.\n\nPERIOD can be one of: hourly, daily, weekly, monthly\nLIMIT is the budget amount in USD",
            "args": [
              "ctx",
              "period",
              "limit",
              "budget_id",
              "provider",
              "tier",
              "component",
              "policy_type",
              "warning_threshold",
              "action_threshold",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "allocate",
            "line": 287,
            "async": false,
            "decorators": [
              "@group"
            ],
            "docstring": "Manage budget allocations.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_allocation",
            "line": 302,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "Create a new budget allocation.",
            "args": [
              "ctx",
              "context_id",
              "component",
              "provider",
              "model",
              "tier",
              "tokens",
              "task_type",
              "priority",
              "api_url"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_allocations",
            "line": 344,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "List budget allocations.",
            "args": [
              "ctx",
              "context_id",
              "component",
              "active_only",
              "format",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "release_allocation",
            "line": 396,
            "async": false,
            "decorators": [
              "@command",
              "@argument",
              "@option",
              "@pass_context"
            ],
            "docstring": "Release an allocation, freeing up the unused tokens.",
            "args": [
              "ctx",
              "allocation_id",
              "api_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "prices",
            "line": 414,
            "async": false,
            "decorators": [
              "@group"
            ],
            "docstring": "Manage and view price information.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_prices",
            "line": 424,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "List current prices for models.",
            "args": [
              "ctx",
              "provider",
              "model",
              "format",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_prices",
            "line": 470,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@pass_context"
            ],
            "docstring": "Update prices from all configured sources.",
            "args": [
              "ctx",
              "api_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "recommend",
            "line": 496,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "Get model recommendations based on your requirements.",
            "args": [
              "ctx",
              "task_type",
              "context_size",
              "output_size",
              "prefer_provider",
              "max_cost",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "alerts",
            "line": 557,
            "async": false,
            "decorators": [
              "@group"
            ],
            "docstring": "Manage budget alerts.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_alerts",
            "line": 568,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "List budget alerts.",
            "args": [
              "ctx",
              "budget_id",
              "severity",
              "acknowledged",
              "format",
              "api_url"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "acknowledge_alert",
            "line": 616,
            "async": false,
            "decorators": [
              "@command",
              "@argument",
              "@option",
              "@pass_context"
            ],
            "docstring": "Acknowledge an alert.",
            "args": [
              "ctx",
              "alert_id",
              "api_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calc_cost",
            "line": 638,
            "async": false,
            "decorators": [
              "@command",
              "@option",
              "@option",
              "@option",
              "@option",
              "@option",
              "@pass_context"
            ],
            "docstring": "Calculate cost for a specific model and token count.",
            "args": [
              "ctx",
              "provider",
              "model",
              "input_tokens",
              "output_tokens",
              "api_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 671,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point for the budget CLI.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 26,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "click",
            "alias": null,
            "line": 10
          },
          {
            "module": "requests",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "tabulate.tabulate",
            "from": "tabulate",
            "name": "tabulate",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 23
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.api.app.main",
            "from": "budget.api.app",
            "name": "main",
            "alias": "start_api",
            "line": 70
          },
          {
            "module": "pkg_resources",
            "alias": null,
            "line": 676
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 33,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 34,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "cli",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 50,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "start",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 67,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "status",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 81,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "get_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 139,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "set_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 209,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "allocate",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 287,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 302,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_allocations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 344,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "release_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 396,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 414,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 424,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "update_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 470,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "recommend",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 496,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 557,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "list_alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 568,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "acknowledge_alert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 616,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "calc_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 638,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/cli/main.py",
            "line": 671,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 685,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Apollo adapter.\n\nArgs:\n    api_base_url: Base URL for Apollo API (for migration purposes)",
            "args": [
              "self",
              "api_base_url"
            ],
            "class": "ApolloAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_apollo_budget",
            "line": 75,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get or create a budget for Apollo.\n\nReturns:\n    Budget ID",
            "args": [
              "self"
            ],
            "class": "ApolloAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_tokens",
            "line": 105,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Allocate tokens for Apollo.\n\nArgs:\n    context_id: Context identifier\n    amount: Number of tokens to allocate\n    tier: Token tier (lightweight, midweight, heavyweight)\n    model: Model name (optional)\n    provider: Provider name (optional)\n    task_type: Task type\n    priority: Priority (1-10)\n    \nReturns:\n    Allocation details",
            "args": [
              "self",
              "context_id",
              "amount",
              "tier",
              "model",
              "provider",
              "task_type",
              "priority"
            ],
            "class": "ApolloAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "release_allocation",
            "line": 170,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Release a token allocation.\n\nArgs:\n    allocation_id: Allocation ID\n    \nReturns:\n    Release result",
            "args": [
              "self",
              "allocation_id"
            ],
            "class": "ApolloAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_token_usage",
            "line": 191,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Record token usage for Apollo.\n\nArgs:\n    context_id: Context identifier\n    input_tokens: Number of input tokens used\n    output_tokens: Number of output tokens used\n    provider: Provider name\n    model: Model name\n    request_id: Request ID (optional)\n    \nReturns:\n    Recording result",
            "args": [
              "self",
              "context_id",
              "input_tokens",
              "output_tokens",
              "provider",
              "model",
              "request_id"
            ],
            "class": "ApolloAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_status",
            "line": 245,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get budget status for Apollo.\n\nArgs:\n    period: Budget period (hourly, daily, weekly, monthly)\n    tier: Budget tier (lightweight, midweight, heavyweight)\n    \nReturns:\n    Budget status",
            "args": [
              "self",
              "period",
              "tier"
            ],
            "class": "ApolloAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_allocation_status",
            "line": 313,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get allocation status for Apollo.\n\nArgs:\n    allocation_id: Allocation ID\n    \nReturns:\n    Allocation status",
            "args": [
              "self",
              "allocation_id"
            ],
            "class": "ApolloAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set_budget_limit",
            "line": 366,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Set budget limit for Apollo.\n\nArgs:\n    tier: Budget tier (lightweight, midweight, heavyweight)\n    period: Budget period (hourly, daily, weekly, monthly)\n    limit: Token limit\n    \nReturns:\n    Result of setting the limit",
            "args": [
              "self",
              "tier",
              "period",
              "limit"
            ],
            "class": "ApolloAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "migrate_from_apollo",
            "line": 424,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Migrate data from Apollo's token budget system.\n\nReturns:\n    Migration results",
            "args": [
              "self"
            ],
            "class": "ApolloAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 22,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ApolloAdapter",
            "line": 47,
            "methods": [
              "__init__",
              "_get_or_create_apollo_budget",
              "allocate_tokens",
              "release_allocation",
              "record_token_usage",
              "get_budget_status",
              "get_allocation_status",
              "set_budget_limit"
            ],
            "decorators": [],
            "docstring": "Adapter for integrating with Apollo's token budget system.\n\nThis adapter provides compatibility with Apollo's token budget API,\ntranslating Apollo's calls to the new Budget component's domain model.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "requests",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 19
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 19
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 45
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ApolloAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.allocate_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 105,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.release_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 170,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.record_token_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 191,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.get_budget_status",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 245,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.get_allocation_status",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 313,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.set_budget_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 366,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ApolloAdapter.migrate_from_apollo",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo.py",
            "line": 424,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 535,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Rhetor adapter.\n\nArgs:\n    api_base_url: Base URL for Rhetor API (for migration purposes)\n    db_path: Path to Rhetor's SQLite database (for migration)",
            "args": [
              "self",
              "api_base_url",
              "db_path"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_rhetor_budget",
            "line": 86,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get or create a budget for Rhetor.\n\nReturns:\n    Budget ID",
            "args": [
              "self"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_cost",
            "line": 116,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Calculate the cost of a request.\n\nArgs:\n    provider: Provider name (anthropic, openai, etc.)\n    model: Model name\n    input_text: Input text\n    output_text: Output text (optional)\n    \nReturns:\n    Dictionary with token counts and costs",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "output_text"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "estimate_cost",
            "line": 165,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Estimate the cost of a request before making it.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text\n    estimated_output_length: Estimated output length in characters\n    \nReturns:\n    Dictionary with estimated token counts and costs",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "estimated_output_length"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_completion",
            "line": 192,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Record a completed LLM request.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text\n    output_text: Output text\n    component: Component that made the request\n    task_type: Type of task\n    context_id: Context identifier (optional)\n    metadata: Additional metadata (optional)\n    \nReturns:\n    Dictionary with usage data",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "output_text",
              "component",
              "task_type",
              "context_id",
              "metadata"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_budget",
            "line": 265,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check if a request is within budget limits.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text\n    component: Component making the request\n    task_type: Type of task\n    context_id: Context identifier (optional)\n    \nReturns:\n    Tuple of (True if allowed, info dict with details)",
            "args": [
              "self",
              "provider",
              "model",
              "input_text",
              "component",
              "task_type",
              "context_id"
            ],
            "class": "RhetorAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_usage_summary",
            "line": 393,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get a summary of usage for a period, grouped by provider, model, or component.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    group_by: Field to group by (provider, model, component, task_type)\n    \nReturns:\n    Dictionary with usage summary",
            "args": [
              "self",
              "period",
              "group_by"
            ],
            "class": "RhetorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_time_range_for_period",
            "line": 469,
            "async": false,
            "decorators": [],
            "docstring": "Get time range for a budget period.\n\nArgs:\n    period: Budget period\n    \nReturns:\n    Tuple of (start_time, end_time)",
            "args": [
              "self",
              "period"
            ],
            "class": "RhetorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_budget_limit",
            "line": 505,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the budget limit for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    provider: Provider name or \"all\" for global limit\n    \nReturns:\n    Budget limit amount (0 if no limit set)",
            "args": [
              "self",
              "period",
              "provider"
            ],
            "class": "RhetorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set_budget_limit",
            "line": 540,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Set the budget limit for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    limit_amount: Budget limit amount\n    provider: Provider name or \"all\" for global limit\n    enforcement: Budget enforcement policy (ignore, warn, enforce)\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "period",
              "limit_amount",
              "provider",
              "enforcement"
            ],
            "class": "RhetorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set_enforcement_policy",
            "line": 589,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Set the budget enforcement policy for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    policy: Budget enforcement policy (ignore, warn, enforce)\n    provider: Provider name or \"all\" for global policy\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "period",
              "policy",
              "provider"
            ],
            "class": "RhetorAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_enforcement_policy",
            "line": 642,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the budget enforcement policy for a period.\n\nArgs:\n    period: Budget period (daily, weekly, monthly)\n    provider: Provider name or \"all\" for global policy\n    \nReturns:\n    Budget enforcement policy (ignore, warn, enforce)",
            "args": [
              "self",
              "period",
              "provider"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "route_with_budget_awareness",
            "line": 673,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Route a request with budget awareness.\n\nArgs:\n    input_text: Input text for cost estimation\n    task_type: Type of task (code, chat, etc.)\n    default_provider: Default provider\n    default_model: Default model\n    component: Component making the request\n    \nReturns:\n    Tuple of (provider, model, warnings)",
            "args": [
              "self",
              "input_text",
              "task_type",
              "default_provider",
              "default_model",
              "component"
            ],
            "class": "RhetorAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_free_models",
            "line": 760,
            "async": false,
            "decorators": [],
            "docstring": "Get list of free models.\n\nReturns:\n    List of free models",
            "args": [
              "self"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_tiers",
            "line": 782,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get models categorized by pricing tier.\n\nReturns:\n    Dictionary with models by tier",
            "args": [
              "self"
            ],
            "class": "RhetorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "migrate_from_rhetor",
            "line": 826,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Migrate data from Rhetor's budget system.\n\nReturns:\n    Migration results",
            "args": [
              "self"
            ],
            "class": "RhetorAdapter",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_extract_rhetor_pricing",
            "line": 991,
            "async": false,
            "decorators": [],
            "docstring": "Extract pricing data from Rhetor's hardcoded pricing.\n\nReturns:\n    Dictionary with pricing data",
            "args": [
              "self"
            ],
            "class": "RhetorAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 23,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RhetorAdapter",
            "line": 49,
            "methods": [
              "__init__",
              "_get_or_create_rhetor_budget",
              "calculate_cost",
              "estimate_cost",
              "record_completion",
              "check_budget",
              "get_usage_summary",
              "_get_time_range_for_period",
              "get_budget_limit",
              "set_budget_limit",
              "set_enforcement_policy",
              "get_enforcement_policy",
              "route_with_budget_awareness",
              "_get_free_models",
              "get_model_tiers",
              "_extract_rhetor_pricing"
            ],
            "decorators": [],
            "docstring": "Adapter for integrating with Rhetor's cost budget system.\n\nThis adapter provides compatibility with Rhetor's budget API,\ntranslating Rhetor's calls to the new Budget component's domain model.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "sqlite3",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          },
          {
            "module": "requests",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 20
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 20
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 36
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 46
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "RhetorAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 49,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.calculate_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 116,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.estimate_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 165,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.record_completion",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 192,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.check_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 265,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.get_usage_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 393,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.get_budget_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 505,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.set_budget_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 540,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.set_enforcement_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 589,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.get_enforcement_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 642,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.route_with_budget_awareness",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 673,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.get_model_tiers",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 782,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RhetorAdapter.migrate_from_rhetor",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/rhetor.py",
            "line": 826,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 1053,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the price manager.",
            "args": [
              "self"
            ],
            "class": "PriceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 69,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Initialize the price manager and load adapters.\n\nThis method loads the available price sources from the database\nand initializes the corresponding adapters.",
            "args": [
              "self"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_update_scheduler",
            "line": 102,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Background task for scheduled price updates.",
            "args": [
              "self"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_default_sources",
            "line": 125,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create default price sources if none exist.",
            "args": [
              "self"
            ],
            "class": "PriceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_adapter",
            "line": 183,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Initialize an adapter for a price source.\n\nArgs:\n    source: The price source\n    \nReturns:\n    True if adapter was initialized, False otherwise",
            "args": [
              "self",
              "source"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_all_prices",
            "line": 225,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update pricing data from all sources and verify against each other.\n\nReturns:\n    Summary of the update operation",
            "args": [
              "self"
            ],
            "class": "PriceManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_prices_from_source",
            "line": 303,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update pricing data from a specific source.\n\nArgs:\n    source_id: The source ID\n    \nReturns:\n    Summary of the update operation",
            "args": [
              "self",
              "source_id"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_verify_and_update_prices",
            "line": 365,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Verify and update pricing data in the database.\n\nArgs:\n    all_prices: Pricing data from all sources\n    \nReturns:\n    Tuple of (verified_count, updated_count)",
            "args": [
              "self",
              "all_prices"
            ],
            "class": "PriceManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_verify_price_agreement",
            "line": 450,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Verify price agreement across multiple sources.\n\nArgs:\n    provider: The provider name\n    model: The model name\n    model_prices: Pricing data from all sources\n    \nReturns:\n    Tuple of (verified, primary_source_id)",
            "args": [
              "self",
              "provider",
              "model",
              "model_prices"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_is_price_match",
            "line": 509,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check if two prices are within tolerance.\n\nArgs:\n    price1: First price\n    price2: Second price\n    \nReturns:\n    True if prices match within tolerance, False otherwise",
            "args": [
              "self",
              "price1",
              "price2"
            ],
            "class": "PriceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_update_price",
            "line": 535,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update a price in the database.\n\nArgs:\n    provider: The provider name\n    model: The model name\n    source_id: The source ID\n    price_data: The pricing data\n    verified: Whether the price was verified by multiple sources\n    \nReturns:\n    True if the price was updated, False otherwise",
            "args": [
              "self",
              "provider",
              "model",
              "source_id",
              "price_data",
              "verified"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_price_changes",
            "line": 607,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Calculate changes between two pricing objects.\n\nArgs:\n    old_pricing: The old pricing object\n    new_pricing: The new pricing object\n    \nReturns:\n    Dictionary of changes",
            "args": [
              "self",
              "old_pricing",
              "new_pricing"
            ],
            "class": "PriceManager",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 21,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceManager",
            "line": 46,
            "methods": [
              "__init__",
              "_verify_price_agreement",
              "_is_price_match",
              "_calculate_price_changes"
            ],
            "decorators": [],
            "docstring": "Manager for price source adapters and price verification.\n\nThis class coordinates the fetching and verification of pricing data\nfrom multiple sources, and updates the pricing database accordingly.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 18
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 18
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.PriceUpdateRecord",
            "from": "budget.data.models",
            "name": "PriceUpdateRecord",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.PriceSource",
            "from": "budget.data.models",
            "name": "PriceSource",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.repository.update_repo",
            "from": "budget.data.repository",
            "name": "update_repo",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.repository.source_repo",
            "from": "budget.data.repository",
            "name": "source_repo",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.adapters.price_sources.PriceSourceAdapter",
            "from": "budget.adapters.price_sources",
            "name": "PriceSourceAdapter",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.adapters.price_sources.LiteLLMAdapter",
            "from": "budget.adapters.price_sources",
            "name": "LiteLLMAdapter",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.adapters.price_sources.LLMPricesAdapter",
            "from": "budget.adapters.price_sources",
            "name": "LLMPricesAdapter",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.adapters.price_sources.PretrainedAIAdapter",
            "from": "budget.adapters.price_sources",
            "name": "PretrainedAIAdapter",
            "alias": null,
            "line": 42
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PriceManager",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PriceManager.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PriceManager.update_all_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PriceManager.update_prices_from_source",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 303,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PriceManager._verify_and_update_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_manager.py",
            "line": 365,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 665,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM adapter.",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the LLM client by trying different available clients.\n\nReturns:\n    bool: True if initialization succeeded, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_try_hermes_client",
            "line": 86,
            "async": true,
            "decorators": [],
            "docstring": "Try to initialize the Hermes LLM client.\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_try_tekton_client",
            "line": 107,
            "async": true,
            "decorators": [],
            "docstring": "Try to initialize the Tekton LLM client.\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_try_direct_api",
            "line": 137,
            "async": true,
            "decorators": [],
            "docstring": "Try to initialize direct API clients.\n\nReturns:\n    bool: True if successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "complete",
            "line": 171,
            "async": true,
            "decorators": [],
            "docstring": "Generate a completion using the LLM.\n\nArgs:\n    model: The model to use\n    prompt: The prompt to send to the model\n    system: Optional system message (for chat models)\n    temperature: Randomness parameter (0.0 to 1.0)\n    max_tokens: Maximum tokens to generate\n    stop: Optional list of stop sequences\n    **kwargs: Additional parameters to pass to the model\n    \nReturns:\n    Dict[str, Any]: The model's response",
            "args": [
              "self",
              "model",
              "prompt",
              "system",
              "temperature",
              "max_tokens",
              "stop"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_complete_hermes",
            "line": 216,
            "async": true,
            "decorators": [],
            "docstring": "Generate a completion using the Hermes LLM client.\n\nArgs:\n    model: The model to use\n    prompt: The prompt to send to the model\n    system: Optional system message (for chat models)\n    temperature: Randomness parameter (0.0 to 1.0)\n    max_tokens: Maximum tokens to generate\n    stop: Optional list of stop sequences\n    **kwargs: Additional parameters to pass to the model\n    \nReturns:\n    Dict[str, Any]: The model's response",
            "args": [
              "self",
              "model",
              "prompt",
              "system",
              "temperature",
              "max_tokens",
              "stop"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_complete_tekton",
            "line": 274,
            "async": true,
            "decorators": [],
            "docstring": "Generate a completion using the Tekton LLM client.\n\nArgs:\n    model: The model to use\n    prompt: The prompt to send to the model\n    system: Optional system message (for chat models)\n    temperature: Randomness parameter (0.0 to 1.0)\n    max_tokens: Maximum tokens to generate\n    stop: Optional list of stop sequences\n    **kwargs: Additional parameters to pass to the model\n    \nReturns:\n    Dict[str, Any]: The model's response",
            "args": [
              "self",
              "model",
              "prompt",
              "system",
              "temperature",
              "max_tokens",
              "stop"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_complete_direct",
            "line": 340,
            "async": true,
            "decorators": [],
            "docstring": "Generate a completion using direct API access.\n\nArgs:\n    model: The model to use\n    prompt: The prompt to send to the model\n    system: Optional system message (for chat models)\n    temperature: Randomness parameter (0.0 to 1.0)\n    max_tokens: Maximum tokens to generate\n    stop: Optional list of stop sequences\n    **kwargs: Additional parameters to pass to the model\n    \nReturns:\n    Dict[str, Any]: The model's response",
            "args": [
              "self",
              "model",
              "prompt",
              "system",
              "temperature",
              "max_tokens",
              "stop"
            ],
            "class": "LLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_llm_client",
            "line": 411,
            "async": true,
            "decorators": [],
            "docstring": "Get a cached LLM client or create a new one.\n\nReturns:\n    LLMAdapter: The LLM adapter instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 25,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMAdapter",
            "line": 40,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Adapter for making LLM API calls from the Budget component.\n\nSupports:\n- Hermes LLM Client (preferred)\n- Tekton LLM Client\n- Direct API calls to OpenAI, Anthropic, etc.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 22
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 22
          },
          {
            "module": "budget.utils.hermes_helper.get_hermes_client",
            "from": "budget.utils.hermes_helper",
            "name": "get_hermes_client",
            "alias": null,
            "line": 95
          },
          {
            "module": "tekton_llm_client.Client",
            "from": "tekton_llm_client",
            "name": "Client",
            "alias": "TektonClient",
            "line": 117
          },
          {
            "module": "openai",
            "alias": null,
            "line": 146
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 33,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "LLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.complete",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 171,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter._complete_direct",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 340,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_llm_client",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/llm_adapter.py",
            "line": 411,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 432,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the enhanced Apollo adapter.",
            "args": [
              "self"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "provide_model_guidance",
            "line": 66,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Provide guidance on model selection based on task requirements.\n\nArgs:\n    context_id: Context identifier\n    task_type: Type of task (code, chat, reasoning, etc.)\n    task_description: Description of the task\n    provider_preferences: Preferred providers in order\n    max_cost: Maximum cost allowed for the task\n    preferred_tier: Preferred model tier\n    \nReturns:\n    Dictionary with model recommendations",
            "args": [
              "self",
              "context_id",
              "task_type",
              "task_description",
              "provider_preferences",
              "max_cost",
              "preferred_tier"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_determine_model_tier",
            "line": 186,
            "async": false,
            "decorators": [],
            "docstring": "Determine the tier of a model based on its capabilities.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    \nReturns:\n    Budget tier or None if unknown",
            "args": [
              "self",
              "provider",
              "model"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_sort_model_candidates",
            "line": 227,
            "async": false,
            "decorators": [],
            "docstring": "Sort model candidates based on preferences and constraints.\n\nArgs:\n    candidates: List of candidate models\n    task_type: Type of task\n    provider_preferences: Preferred providers in order\n    preferred_tier: Preferred model tier\n    approaching_limit: Whether we're approaching budget limits\n    \nReturns:\n    Sorted list of model candidates",
            "args": [
              "self",
              "candidates",
              "task_type",
              "provider_preferences",
              "preferred_tier",
              "approaching_limit"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_recommendation_reasoning",
            "line": 301,
            "async": false,
            "decorators": [],
            "docstring": "Generate reasoning for model recommendations.\n\nArgs:\n    task_type: Type of task\n    task_description: Description of the task\n    approaching_limit: Whether we're approaching budget limits\n    recommended_models: List of recommended models\n    preferred_tier: Preferred model tier\n    \nReturns:\n    Reasoning text",
            "args": [
              "self",
              "task_type",
              "task_description",
              "approaching_limit",
              "recommended_models",
              "preferred_tier"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_token_usage_analytics",
            "line": 392,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get detailed analytics for token usage.\n\nArgs:\n    period: Budget period\n    provider: Filter by provider\n    model: Filter by model\n    component: Filter by component\n    task_type: Filter by task type\n    start_date: Custom start date\n    end_date: Custom end date\n    \nReturns:\n    Dictionary with token usage analytics",
            "args": [
              "self",
              "period",
              "provider",
              "model",
              "component",
              "task_type",
              "start_date",
              "end_date"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "migrate_pricing_data",
            "line": 637,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Migrate pricing data from Apollo.\n\nReturns:\n    Migration results",
            "args": [
              "self"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_completion_efficiency",
            "line": 774,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get completion efficiency metrics for a provider/model.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    context_id: Filter by context ID (optional)\n    period: Budget period\n    \nReturns:\n    Dictionary with efficiency metrics",
            "args": [
              "self",
              "provider",
              "model",
              "context_id",
              "period"
            ],
            "class": "ApolloEnhancedAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 22,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ApolloEnhancedAdapter",
            "line": 51,
            "methods": [
              "__init__",
              "provide_model_guidance",
              "_determine_model_tier",
              "_sort_model_candidates",
              "_generate_recommendation_reasoning",
              "get_token_usage_analytics",
              "get_completion_efficiency"
            ],
            "decorators": [],
            "docstring": "Enhanced adapter for Apollo's token budget system.\n\nThis class extends the base Apollo adapter with advanced features like\nprovider guidance, comprehensive pricing migration, and improved analytics.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "requests",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 19
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 19
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.adapters.apollo.apollo_adapter",
            "from": "budget.adapters.apollo",
            "name": "apollo_adapter",
            "alias": null,
            "line": 48
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ApolloEnhancedAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 51,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter.provide_model_guidance",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 66,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter._determine_model_tier",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 186,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter._sort_model_candidates",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 227,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter._generate_recommendation_reasoning",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 301,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter.get_token_usage_analytics",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 392,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter.migrate_pricing_data",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 637,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ApolloEnhancedAdapter.get_completion_efficiency",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/apollo_enhancements.py",
            "line": 774,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 1025,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_limits",
            "line": 97,
            "async": false,
            "decorators": [
              "@model_validator"
            ],
            "docstring": "Validate that either token_limit or cost_limit is provided.",
            "args": [
              "self"
            ],
            "class": "CreatePolicyRequest",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_allocation_reference",
            "line": 191,
            "async": false,
            "decorators": [
              "@model_validator"
            ],
            "docstring": "Validate that either context_id or allocation_id is provided.",
            "args": [
              "self"
            ],
            "class": "RecordUsageRequest",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_budget_response",
            "line": 491,
            "async": false,
            "decorators": [],
            "docstring": "Convert a Budget model to a BudgetResponse.",
            "args": [
              "budget"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_policy_response",
            "line": 505,
            "async": false,
            "decorators": [],
            "docstring": "Convert a BudgetPolicy model to a PolicyResponse.",
            "args": [
              "policy"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_allocation_response",
            "line": 526,
            "async": false,
            "decorators": [],
            "docstring": "Convert a BudgetAllocation model to an AllocationResponse.",
            "args": [
              "allocation"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_usage_record_response",
            "line": 553,
            "async": false,
            "decorators": [],
            "docstring": "Convert a UsageRecord model to a UsageRecordResponse.",
            "args": [
              "record"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_alert_response",
            "line": 577,
            "async": false,
            "decorators": [],
            "docstring": "Convert an Alert model to an AlertResponse.",
            "args": [
              "alert"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_price_response",
            "line": 593,
            "async": false,
            "decorators": [],
            "docstring": "Convert a ProviderPricing model to a PriceResponse.",
            "args": [
              "price"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_budget_summary_response",
            "line": 616,
            "async": false,
            "decorators": [],
            "docstring": "Convert a BudgetSummary model to a BudgetSummaryResponse.",
            "args": [
              "summary"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_model_recommendation_response",
            "line": 641,
            "async": false,
            "decorators": [],
            "docstring": "Convert a model recommendation to a ModelRecommendationResponse.",
            "args": [
              "recommendation"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 20,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CreateBudgetRequest",
            "line": 40,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for creating a budget.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UpdateBudgetRequest",
            "line": 62,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for updating a budget.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CreatePolicyRequest",
            "line": 81,
            "methods": [
              "validate_limits"
            ],
            "decorators": [],
            "docstring": "Request model for creating a budget policy.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UpdatePolicyRequest",
            "line": 118,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for updating a budget policy.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CreateAllocationRequest",
            "line": 139,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for creating a budget allocation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RecordUsageRequest",
            "line": 175,
            "methods": [
              "validate_allocation_reference"
            ],
            "decorators": [],
            "docstring": "Request model for recording usage.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "GetUsageSummaryRequest",
            "line": 216,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for getting usage summary.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ModelRecommendationRequest",
            "line": 239,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for getting model recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceRequest",
            "line": 259,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for getting current price.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetResponse",
            "line": 276,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for budget.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PolicyResponse",
            "line": 288,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for budget policy.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AllocationResponse",
            "line": 307,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for budget allocation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageRecordResponse",
            "line": 332,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for usage record.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageSummaryResponse",
            "line": 354,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for usage summary.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetSummaryResponse",
            "line": 366,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for budget summary.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AlertResponse",
            "line": 389,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for alert.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceResponse",
            "line": 403,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for price information.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ModelRecommendationResponse",
            "line": 424,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for model recommendation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ErrorResponse",
            "line": 434,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for errors.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SuccessResponse",
            "line": 440,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for success messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetListResponse",
            "line": 447,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for budget list.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PolicyListResponse",
            "line": 454,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for policy list.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AllocationListResponse",
            "line": 461,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for allocation list.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageRecordListResponse",
            "line": 468,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for usage record list.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AlertListResponse",
            "line": 475,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for alert list.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ModelRecommendationListResponse",
            "line": 482,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for model recommendation list.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 11
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.model_validator",
            "from": "pydantic",
            "name": "model_validator",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 17
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 33
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "CreateBudgetRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 40,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "UpdateBudgetRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 62,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "CreatePolicyRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 81,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CreatePolicyRequest.validate_limits",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 97,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "UpdatePolicyRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 118,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "CreateAllocationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 139,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RecordUsageRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 175,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RecordUsageRequest.validate_allocation_reference",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 191,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "GetUsageSummaryRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 216,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ModelRecommendationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 239,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 259,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 276,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PolicyResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 288,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AllocationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 307,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "UsageRecordResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 332,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "UsageSummaryResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 354,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetSummaryResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 366,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AlertResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 389,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 403,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ModelRecommendationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 424,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ErrorResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 434,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SuccessResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 440,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 447,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PolicyListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 454,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AllocationListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 461,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "UsageRecordListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 468,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AlertListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 475,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ModelRecommendationListResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 482,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "create_budget_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 491,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_policy_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 505,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_allocation_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 526,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_usage_record_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 553,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_alert_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 577,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_price_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 593,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_budget_summary_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 616,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_model_recommendation_response",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/models.py",
            "line": 641,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 651,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_mcp_message",
            "line": 154,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Process an MCP protocol message.\n\nThis endpoint handles incoming MCP messages from other components and routes\nthem to the appropriate message handler based on the message type.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_allocate_tokens",
            "line": 214,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.allocate_tokens message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_check_budget",
            "line": 294,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.check_budget message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_record_usage",
            "line": 380,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.record_usage message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_get_budget_status",
            "line": 506,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.get_budget_status message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_get_model_recommendations",
            "line": 620,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.get_model_recommendations message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_route_with_budget_awareness",
            "line": 681,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.route_with_budget_awareness message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_get_usage_analytics",
            "line": 761,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Handle a budget.get_usage_analytics message.\n\nArgs:\n    message: The MCP request message\n    \nReturns:\n    MCPResponse: The response message",
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "publish_budget_event",
            "line": 834,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Publish a budget event using the MCP protocol.\n\nThis function creates an MCPEvent and can be used to publish events to \nHermes for distribution to other components.\n\nArgs:\n    event_type: Type of event\n    payload: Event payload\n    severity: Event severity (info, warning, error)\n    \nReturns:\n    MCPEvent: The created event",
            "args": [
              "event_type",
              "payload",
              "severity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities_func",
            "line": 876,
            "async": true,
            "decorators": [],
            "docstring": "Get Budget MCP capabilities.",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools_func",
            "line": 883,
            "async": true,
            "decorators": [],
            "docstring": "Get Budget MCP tools.",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_request_func",
            "line": 890,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP request.",
            "args": [
              "engine",
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 26,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPMessage",
            "line": 107,
            "methods": [],
            "decorators": [],
            "docstring": "Base model for MCP messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPRequest",
            "line": 116,
            "methods": [],
            "decorators": [],
            "docstring": "Model for MCP request messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 127,
            "methods": [],
            "decorators": [],
            "docstring": "Model for MCP response messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPEvent",
            "line": 139,
            "methods": [],
            "decorators": [],
            "docstring": "Model for MCP event messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "process_mcp_message",
            "line": 154,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.BackgroundTasks",
            "from": "fastapi",
            "name": "BackgroundTasks",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 18
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 19
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 19
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 23
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 39
          },
          {
            "module": "budget.adapters.apollo_adapter",
            "from": "budget.adapters",
            "name": "apollo_adapter",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.adapters.rhetor_adapter",
            "from": "budget.adapters",
            "name": "rhetor_adapter",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.adapters.apollo_enhanced",
            "from": "budget.adapters",
            "name": "apollo_enhanced",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 48
          },
          {
            "module": "budget.core.engine.get_budget_engine",
            "from": "budget.core.engine",
            "name": "get_budget_engine",
            "alias": null,
            "line": 48
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 52
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 52
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 52
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 52
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 52
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 52
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 58
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 58
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 58
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 58
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPResponse",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPResponse",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 64
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_tool",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_tool",
            "alias": null,
            "line": 74
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_processor",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_processor",
            "alias": null,
            "line": 74
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.MCPProcessingError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "MCPProcessingError",
            "alias": null,
            "line": 75
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.create_mcp_router",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "create_mcp_router",
            "alias": null,
            "line": 76
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_standard_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_standard_mcp_endpoints",
            "alias": null,
            "line": 76
          },
          {
            "module": "budget.core.mcp.get_all_tools",
            "from": "budget.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 86
          },
          {
            "module": "budget.core.mcp.get_all_capabilities",
            "from": "budget.core.mcp",
            "name": "get_all_capabilities",
            "alias": null,
            "line": 86
          },
          {
            "module": "budget.core.mcp.tools.allocate_budget",
            "from": "budget.core.mcp.tools",
            "name": "allocate_budget",
            "alias": null,
            "line": 901
          },
          {
            "module": "budget.core.mcp.tools.check_budget",
            "from": "budget.core.mcp.tools",
            "name": "check_budget",
            "alias": null,
            "line": 901
          },
          {
            "module": "budget.core.mcp.tools.record_usage",
            "from": "budget.core.mcp.tools",
            "name": "record_usage",
            "alias": null,
            "line": 901
          },
          {
            "module": "budget.core.mcp.tools.get_budget_status",
            "from": "budget.core.mcp.tools",
            "name": "get_budget_status",
            "alias": null,
            "line": 901
          },
          {
            "module": "budget.core.mcp.tools.get_model_recommendations",
            "from": "budget.core.mcp.tools",
            "name": "get_model_recommendations",
            "alias": null,
            "line": 901
          },
          {
            "module": "budget.core.mcp.tools.route_with_budget_awareness",
            "from": "budget.core.mcp.tools",
            "name": "route_with_budget_awareness",
            "alias": null,
            "line": 901
          },
          {
            "module": "budget.core.mcp.tools.get_usage_analytics",
            "from": "budget.core.mcp.tools",
            "name": "get_usage_analytics",
            "alias": null,
            "line": 901
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 33,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 34,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MCPMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 107,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 116,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 127,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPEvent",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 139,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "process_mcp_message",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 154,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_allocate_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_check_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 294,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 380,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_get_budget_status",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 506,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_get_model_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 620,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_route_with_budget_awareness",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 681,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_get_usage_analytics",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 761,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "publish_budget_event",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 834,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_capabilities_func",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 876,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_tools_func",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 883,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "process_request_func",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/mcp_endpoints.py",
            "line": 890,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 970,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 76,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Connect a client to a topic.\n\nArgs:\n    websocket: The WebSocket connection\n    topic: The topic to subscribe to",
            "args": [
              "self",
              "websocket",
              "topic"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": "Disconnect a client from all topics.\n\nArgs:\n    websocket: The WebSocket connection to disconnect",
            "args": [
              "self",
              "websocket"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "broadcast",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast a message to all connected clients for a topic.\n\nArgs:\n    message: The message to broadcast",
            "args": [
              "self",
              "message"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "broadcast_raw",
            "line": 157,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast a raw string message to all connected clients for a topic.\n\nArgs:\n    message: The raw message to broadcast\n    topic: The topic to broadcast to",
            "args": [
              "self",
              "message",
              "topic"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "authenticate_client",
            "line": 179,
            "async": true,
            "decorators": [],
            "docstring": "Authenticate a WebSocket client.\n\nArgs:\n    websocket: The WebSocket connection\n    auth_data: Authentication data\n\nReturns:\n    bool: True if authentication succeeded, False otherwise",
            "args": [
              "self",
              "websocket",
              "auth_data"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_client",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe a client to a topic.\n\nArgs:\n    websocket: The WebSocket connection\n    topic: The topic to subscribe to",
            "args": [
              "self",
              "websocket",
              "topic"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe_client",
            "line": 222,
            "async": true,
            "decorators": [],
            "docstring": "Unsubscribe a client from a topic.\n\nArgs:\n    websocket: The WebSocket connection\n    topic: The topic to unsubscribe from",
            "args": [
              "self",
              "websocket",
              "topic"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 238,
            "async": true,
            "decorators": [],
            "docstring": "Process an incoming WebSocket message.\n\nArgs:\n    websocket: The WebSocket connection\n    message_text: The raw message text\n    \nReturns:\n    WebSocketMessage: The response message if any",
            "args": [
              "self",
              "websocket",
              "message_text"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "start_periodic_updates",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Start periodic budget status updates.\n\nArgs:\n    engine: The budget engine to get updates from\n    interval_seconds: How often to send updates",
            "args": [
              "self",
              "engine",
              "interval_seconds"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_periodic_updates",
            "line": 314,
            "async": true,
            "decorators": [],
            "docstring": "Send periodic budget status updates to all clients.\n\nArgs:\n    engine: The budget engine to get updates from\n    interval_seconds: How often to send updates",
            "args": [
              "self",
              "engine",
              "interval_seconds"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "cleanup",
            "line": 361,
            "async": false,
            "decorators": [],
            "docstring": "Stop all background tasks and clean up resources.",
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_websocket_routes",
            "line": 369,
            "async": false,
            "decorators": [],
            "docstring": "Add WebSocket routes to the FastAPI app.\n\nArgs:\n    app: The FastAPI app\n    manager: The WebSocket connection manager\n    engine: The budget engine",
            "args": [
              "app",
              "manager",
              "engine"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "budget_updates",
            "line": 381,
            "async": true,
            "decorators": [
              "@websocket",
              "@log_function"
            ],
            "docstring": "WebSocket endpoint for general budget updates.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "budget_alerts",
            "line": 401,
            "async": true,
            "decorators": [
              "@websocket",
              "@log_function"
            ],
            "docstring": "WebSocket endpoint for budget alerts.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "allocation_updates",
            "line": 421,
            "async": true,
            "decorators": [
              "@websocket",
              "@log_function"
            ],
            "docstring": "WebSocket endpoint for allocation updates.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "price_updates",
            "line": 441,
            "async": true,
            "decorators": [
              "@websocket",
              "@log_function"
            ],
            "docstring": "WebSocket endpoint for price updates.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_ws_message",
            "line": 464,
            "async": false,
            "decorators": [],
            "docstring": "Create a WebSocket message.\n\nArgs:\n    type: The message type\n    topic: The message topic\n    payload: The message payload\n    \nReturns:\n    WebSocketMessage: The formatted message",
            "args": [
              "type",
              "topic",
              "payload"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "notify_budget_update",
            "line": 488,
            "async": true,
            "decorators": [],
            "docstring": "Notify clients of a budget update.\n\nArgs:\n    manager: The WebSocket connection manager\n    budget_id: The budget ID\n    summary: The budget summary",
            "args": [
              "manager",
              "budget_id",
              "summary"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "notify_allocation_update",
            "line": 511,
            "async": true,
            "decorators": [],
            "docstring": "Notify clients of an allocation update.\n\nArgs:\n    manager: The WebSocket connection manager\n    allocation_id: The allocation ID\n    allocation: The allocation data",
            "args": [
              "manager",
              "allocation_id",
              "allocation"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "notify_alert",
            "line": 534,
            "async": true,
            "decorators": [],
            "docstring": "Notify clients of a budget alert.\n\nArgs:\n    manager: The WebSocket connection manager\n    alert: The alert data",
            "args": [
              "manager",
              "alert"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "notify_price_update",
            "line": 552,
            "async": true,
            "decorators": [],
            "docstring": "Notify clients of a price update.\n\nArgs:\n    manager: The WebSocket connection manager\n    provider: The provider name\n    model: The model name\n    update: The price update data",
            "args": [
              "manager",
              "provider",
              "model",
              "update"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 27,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MessageType",
            "line": 46,
            "methods": [],
            "decorators": [],
            "docstring": "Types of messages that can be sent through WebSockets.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebSocketMessage",
            "line": 62,
            "methods": [],
            "decorators": [],
            "docstring": "Schema for messages sent over WebSockets.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ConnectionManager",
            "line": 71,
            "methods": [
              "__init__",
              "disconnect",
              "cleanup"
            ],
            "decorators": [],
            "docstring": "WebSocket connection manager for real-time budget updates.\nHandles connections, disconnections, and message broadcasting.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "add_websocket_routes",
            "line": 369,
            "async": false
          },
          {
            "name": "create_ws_message",
            "line": 464,
            "async": false
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 14
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 24
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 24
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 40
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 34,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MessageType",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebSocketMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 62,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ConnectionManager",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 71,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ConnectionManager.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.broadcast",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 135,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.broadcast_raw",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.authenticate_client",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 179,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.subscribe_client",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.unsubscribe_client",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 222,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 238,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.start_periodic_updates",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 361,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "add_websocket_routes",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 369,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "budget_updates",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 381,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "budget_alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 401,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "allocation_updates",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 421,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "price_updates",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 441,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_ws_message",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 464,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "notify_budget_update",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 488,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "notify_allocation_update",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 511,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "notify_alert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 534,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "notify_price_update",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/websocket_server.py",
            "line": 552,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 576,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_assistant",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": "Dependency to get budget assistant.\n\nReturns:\n    BudgetAssistant: Budget assistant instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_budget",
            "line": 104,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Analyze budget usage patterns and provide insights.\n\nArgs:\n    request: Analysis request\n    assistant: Budget assistant instance\n    \nReturns:\n    AnalysisResponse: Analysis response",
            "args": [
              "request",
              "assistant"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_optimization_recommendations",
            "line": 146,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Get cost optimization recommendations.\n\nArgs:\n    request: Optimization request\n    assistant: Budget assistant instance\n    \nReturns:\n    OptimizationResponse: Optimization response",
            "args": [
              "request",
              "assistant"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "recommend_model",
            "line": 188,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Recommend the best model for a specific task.\n\nArgs:\n    request: Model recommendation request\n    assistant: Budget assistant instance\n    \nReturns:\n    ModelRecommendationResponse: Model recommendation response",
            "args": [
              "request",
              "assistant"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 25,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AnalysisRequest",
            "line": 45,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for budget analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "OptimizationRequest",
            "line": 51,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for optimization recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ModelRecommendationRequest",
            "line": 57,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for model recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AnalysisResponse",
            "line": 67,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for budget analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "OptimizationResponse",
            "line": 74,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for optimization recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ModelRecommendationResponse",
            "line": 81,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for model recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "analyze_budget",
            "line": 104,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_optimization_recommendations",
            "line": 146,
            "method": "@post",
            "async": true
          },
          {
            "name": "recommend_model",
            "line": 188,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 22
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 22
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.service.assistant.create_budget_assistant",
            "from": "budget.service.assistant",
            "name": "create_budget_assistant",
            "alias": null,
            "line": 39
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 33,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "AnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "OptimizationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 51,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ModelRecommendationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 57,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AnalysisResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 67,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "OptimizationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 74,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ModelRecommendationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 81,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_assistant",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_optimization_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 146,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "recommend_model",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/assistant_endpoints.py",
            "line": 188,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 230,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 53,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 60,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup_callback",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Budget component (includes Hermes registration).",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "general_exception_handler",
            "line": 151,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": "Handle general exceptions.",
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_exception_handler",
            "line": 160,
            "async": true,
            "decorators": [
              "@exception_handler"
            ],
            "docstring": "Handle HTTP exceptions.",
            "args": [
              "request",
              "exc"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 170,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint to verify API is running.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 190,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint with basic information.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 52,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "health_check",
            "line": 170,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 190,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 18
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.utils.shutdown.GracefulShutdown",
            "from": "shared.utils.shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 35
          },
          {
            "module": "shared.utils.startup.component_startup",
            "from": "shared.utils.startup",
            "name": "component_startup",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.utils.startup.StartupMetrics",
            "from": "shared.utils.startup",
            "name": "StartupMetrics",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.utils.errors.StartupError",
            "from": "shared.utils.errors",
            "name": "StartupError",
            "alias": null,
            "line": 37
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 49
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.endpoints.router",
            "from": "budget.api.endpoints",
            "name": "router",
            "alias": "budget_router",
            "line": 65
          },
          {
            "module": "budget.api.mcp_endpoints.mcp_router",
            "from": "budget.api.mcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 66
          },
          {
            "module": "budget.api.assistant_endpoints.router",
            "from": "budget.api.assistant_endpoints",
            "name": "router",
            "alias": "assistant_router",
            "line": 67
          },
          {
            "module": "budget.api.models.ErrorResponse",
            "from": "budget.api.models",
            "name": "ErrorResponse",
            "alias": null,
            "line": 68
          },
          {
            "module": "budget.data.repository.db_manager",
            "from": "budget.data.repository",
            "name": "db_manager",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.utils.hermes_helper.register_budget_component",
            "from": "budget.utils.hermes_helper",
            "name": "register_budget_component",
            "alias": null,
            "line": 72
          },
          {
            "module": "budget.core.budget_component.BudgetComponent",
            "from": "budget.core.budget_component",
            "name": "BudgetComponent",
            "alias": null,
            "line": 78
          },
          {
            "module": "budget.api.websocket_server.ConnectionManager",
            "from": "budget.api.websocket_server",
            "name": "ConnectionManager",
            "alias": null,
            "line": 84
          },
          {
            "module": "budget.api.websocket_server.add_websocket_routes",
            "from": "budget.api.websocket_server",
            "name": "add_websocket_routes",
            "alias": null,
            "line": 84
          },
          {
            "module": "budget.api.websocket_server.notify_budget_update",
            "from": "budget.api.websocket_server",
            "name": "notify_budget_update",
            "alias": null,
            "line": 84
          },
          {
            "module": "budget.api.websocket_server.notify_allocation_update",
            "from": "budget.api.websocket_server",
            "name": "notify_allocation_update",
            "alias": null,
            "line": 84
          },
          {
            "module": "budget.api.websocket_server.notify_alert",
            "from": "budget.api.websocket_server",
            "name": "notify_alert",
            "alias": null,
            "line": 84
          },
          {
            "module": "budget.api.websocket_server.notify_price_update",
            "from": "budget.api.websocket_server",
            "name": "notify_price_update",
            "alias": null,
            "line": 84
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 101
          },
          {
            "module": "tekton.mcp.fastmcp.utils.tooling.ToolRegistry",
            "from": "tekton.mcp.fastmcp.utils.tooling",
            "name": "ToolRegistry",
            "alias": null,
            "line": 102
          },
          {
            "module": "budget.core.mcp.register_budget_tools",
            "from": "budget.core.mcp",
            "name": "register_budget_tools",
            "alias": null,
            "line": 103
          },
          {
            "module": "budget.core.mcp.register_analytics_tools",
            "from": "budget.core.mcp",
            "name": "register_analytics_tools",
            "alias": null,
            "line": 103
          },
          {
            "module": "budget.core.mcp.hermes_bridge.BudgetMCPBridge",
            "from": "budget.core.mcp.hermes_bridge",
            "name": "BudgetMCPBridge",
            "alias": null,
            "line": 115
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 253
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 254
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 52,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 60,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "general_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 151,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_exception_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 160,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/app.py",
            "line": 190,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 264,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_budget",
            "line": 89,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Create a new budget.\n\nArgs:\n    request: The budget creation request\n    user: The authenticated user\n\nReturns:\n    The created budget",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_budgets",
            "line": 124,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List budgets with optional filtering.\n\nArgs:\n    pagination: Pagination parameters\n    is_active: Filter by active status\n    owner: Filter by owner\n    user: The authenticated user\n\nReturns:\n    List of budgets with pagination info",
            "args": [
              "pagination",
              "is_active",
              "owner",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget",
            "line": 170,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get a budget by ID.\n\nArgs:\n    budget_id: The budget ID\n    user: The authenticated user\n\nReturns:\n    The budget\n\nRaises:\n    HTTPException: If the budget is not found",
            "args": [
              "budget_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_budget",
            "line": 200,
            "async": true,
            "decorators": [
              "@put",
              "@log_function"
            ],
            "docstring": "Update a budget.\n\nArgs:\n    request: The budget update request\n    budget_id: The budget ID\n    user: The authenticated user\n\nReturns:\n    The updated budget\n\nRaises:\n    HTTPException: If the budget is not found",
            "args": [
              "request",
              "budget_id",
              "user"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "delete_budget",
            "line": 250,
            "async": true,
            "decorators": [
              "@delete",
              "@log_function"
            ],
            "docstring": "Delete a budget (soft delete by setting is_active to False).\n\nArgs:\n    budget_id: The budget ID\n    user: The authenticated user\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException: If the budget is not found",
            "args": [
              "budget_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_budget_policies",
            "line": 287,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List policies for a budget.\n\nArgs:\n    budget_id: The budget ID\n    pagination: Pagination parameters\n    user: The authenticated user\n\nReturns:\n    List of policies\n\nRaises:\n    HTTPException: If the budget is not found",
            "args": [
              "budget_id",
              "pagination",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_budget_allocations",
            "line": 334,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List allocations for a budget.\n\nArgs:\n    budget_id: The budget ID\n    pagination: Pagination parameters\n    is_active: Filter by active status\n    user: The authenticated user\n\nReturns:\n    List of allocations\n\nRaises:\n    HTTPException: If the budget is not found",
            "args": [
              "budget_id",
              "pagination",
              "is_active",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_budget_summary",
            "line": 387,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get a summary of budget usage.\n\nArgs:\n    budget_id: The budget ID\n    period: The budget period\n    user: The authenticated user\n\nReturns:\n    Budget summary\n\nRaises:\n    HTTPException: If the budget is not found",
            "args": [
              "budget_id",
              "period",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_policy",
            "line": 437,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Create a new budget policy.\n\nArgs:\n    request: The policy creation request\n    user: The authenticated user\n\nReturns:\n    The created policy",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_policies",
            "line": 486,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List policies with optional filtering.\n\nArgs:\n    pagination: Pagination parameters\n    period: Filter by period\n    tier: Filter by tier\n    provider: Filter by provider\n    component: Filter by component\n    task_type: Filter by task type\n    enabled: Filter by enabled status\n    user: The authenticated user\n\nReturns:\n    List of policies with pagination info",
            "args": [
              "pagination",
              "period",
              "tier",
              "provider",
              "component",
              "task_type",
              "enabled",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_policy",
            "line": 561,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get a policy by ID.\n\nArgs:\n    policy_id: The policy ID\n    user: The authenticated user\n\nReturns:\n    The policy\n\nRaises:\n    HTTPException: If the policy is not found",
            "args": [
              "policy_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_policy",
            "line": 591,
            "async": true,
            "decorators": [
              "@put",
              "@log_function"
            ],
            "docstring": "Update a policy.\n\nArgs:\n    request: The policy update request\n    policy_id: The policy ID\n    user: The authenticated user\n\nReturns:\n    The updated policy\n\nRaises:\n    HTTPException: If the policy is not found",
            "args": [
              "request",
              "policy_id",
              "user"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "delete_policy",
            "line": 644,
            "async": true,
            "decorators": [
              "@delete",
              "@log_function"
            ],
            "docstring": "Disable a policy (soft delete by setting enabled to False).\n\nArgs:\n    policy_id: The policy ID\n    user: The authenticated user\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException: If the policy is not found",
            "args": [
              "policy_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "create_allocation",
            "line": 676,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Create a new budget allocation.\n\nArgs:\n    request: The allocation creation request\n    user: The authenticated user\n\nReturns:\n    The created allocation",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_allocations",
            "line": 726,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List allocations with optional filtering.\n\nArgs:\n    pagination: Pagination parameters\n    context_id: Filter by context ID\n    component: Filter by component\n    tier: Filter by tier\n    provider: Filter by provider\n    model: Filter by model\n    task_type: Filter by task type\n    is_active: Filter by active status\n    user: The authenticated user\n\nReturns:\n    List of allocations with pagination info",
            "args": [
              "pagination",
              "context_id",
              "component",
              "tier",
              "provider",
              "model",
              "task_type",
              "is_active",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_allocation",
            "line": 798,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get an allocation by ID.\n\nArgs:\n    allocation_id: The allocation ID\n    user: The authenticated user\n\nReturns:\n    The allocation\n\nRaises:\n    HTTPException: If the allocation is not found",
            "args": [
              "allocation_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "release_allocation",
            "line": 828,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Release an allocation (mark as inactive).\n\nArgs:\n    allocation_id: The allocation ID\n    user: The authenticated user\n\nReturns:\n    Success message\n\nRaises:\n    HTTPException: If the allocation is not found",
            "args": [
              "allocation_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_allocation_by_context",
            "line": 858,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get an active allocation by context ID.\n\nArgs:\n    context_id: The context ID\n    user: The authenticated user\n\nReturns:\n    The allocation\n\nRaises:\n    HTTPException: If the allocation is not found",
            "args": [
              "context_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 893,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Record token usage.\n\nArgs:\n    request: The usage record request\n    user: The authenticated user\n\nReturns:\n    The created usage record",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_usage_records",
            "line": 934,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List usage records with optional filtering.\n\nArgs:\n    pagination: Pagination parameters\n    context_id: Filter by context ID\n    allocation_id: Filter by allocation ID\n    component: Filter by component\n    provider: Filter by provider\n    model: Filter by model\n    task_type: Filter by task type\n    start_date: Filter by start date\n    end_date: Filter by end date\n    user: The authenticated user\n\nReturns:\n    List of usage records with pagination info",
            "args": [
              "pagination",
              "context_id",
              "allocation_id",
              "component",
              "provider",
              "model",
              "task_type",
              "start_date",
              "end_date",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_usage_record",
            "line": 1007,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get a usage record by ID.\n\nArgs:\n    record_id: The record ID\n    user: The authenticated user\n\nReturns:\n    The usage record\n\nRaises:\n    HTTPException: If the record is not found",
            "args": [
              "record_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_usage_summary",
            "line": 1037,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Get usage summary.\n\nArgs:\n    request: The usage summary request\n    user: The authenticated user\n\nReturns:\n    Usage summary",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_alerts",
            "line": 1079,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List alerts with optional filtering.\n\nArgs:\n    pagination: Pagination parameters\n    budget_id: Filter by budget ID\n    severity: Filter by severity\n    type: Filter by type\n    acknowledged: Filter by acknowledgement status\n    user: The authenticated user\n\nReturns:\n    List of alerts with pagination info",
            "args": [
              "pagination",
              "budget_id",
              "severity",
              "type",
              "acknowledged",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_alert",
            "line": 1141,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get an alert by ID.\n\nArgs:\n    alert_id: The alert ID\n    user: The authenticated user\n\nReturns:\n    The alert\n\nRaises:\n    HTTPException: If the alert is not found",
            "args": [
              "alert_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "acknowledge_alert",
            "line": 1171,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Acknowledge an alert.\n\nArgs:\n    alert_id: The alert ID\n    user: The authenticated user\n\nReturns:\n    The updated alert\n\nRaises:\n    HTTPException: If the alert is not found",
            "args": [
              "alert_id",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_budget_alerts",
            "line": 1201,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Check for budget violations and create alerts.\n\nArgs:\n    budget_id: The budget ID to check\n    period: The period to check\n    user: The authenticated user\n\nReturns:\n    List of created alerts",
            "args": [
              "budget_id",
              "period",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_prices",
            "line": 1243,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "List current prices with optional filtering.\n\nArgs:\n    provider: Filter by provider\n    model: Filter by model\n    user: The authenticated user\n\nReturns:\n    List of prices",
            "args": [
              "provider",
              "model",
              "user"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_current_price",
            "line": 1303,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Get current price for a provider and model.\n\nArgs:\n    request: The price request\n    user: The authenticated user\n\nReturns:\n    Current price information\n\nRaises:\n    HTTPException: If the price is not found",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_price_history",
            "line": 1336,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Get price history for a provider and model.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    user: The authenticated user\n\nReturns:\n    Price history",
            "args": [
              "provider",
              "model",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_recommendations",
            "line": 1364,
            "async": true,
            "decorators": [
              "@post",
              "@log_function"
            ],
            "docstring": "Get model recommendations based on budget constraints.\n\nArgs:\n    request: The recommendation request\n    user: The authenticated user\n\nReturns:\n    List of recommended models",
            "args": [
              "request",
              "user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 1432,
            "async": true,
            "decorators": [
              "@get",
              "@log_function"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 19,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "create_budget",
            "line": 89,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_budgets",
            "line": 124,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_budget",
            "line": 170,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_budget",
            "line": 200,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_budget",
            "line": 250,
            "method": "@delete",
            "async": true
          },
          {
            "name": "list_budget_policies",
            "line": 287,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_budget_allocations",
            "line": 334,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_budget_summary",
            "line": 387,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_policy",
            "line": 437,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_policies",
            "line": 486,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_policy",
            "line": 561,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_policy",
            "line": 591,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_policy",
            "line": 644,
            "method": "@delete",
            "async": true
          },
          {
            "name": "create_allocation",
            "line": 676,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_allocations",
            "line": 726,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_allocation",
            "line": 798,
            "method": "@get",
            "async": true
          },
          {
            "name": "release_allocation",
            "line": 828,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_allocation_by_context",
            "line": 858,
            "method": "@get",
            "async": true
          },
          {
            "name": "record_usage",
            "line": 893,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_usage_records",
            "line": 934,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_usage_record",
            "line": 1007,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_usage_summary",
            "line": 1037,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_alerts",
            "line": 1079,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_alert",
            "line": 1141,
            "method": "@get",
            "async": true
          },
          {
            "name": "acknowledge_alert",
            "line": 1171,
            "method": "@post",
            "async": true
          },
          {
            "name": "check_budget_alerts",
            "line": 1201,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_prices",
            "line": 1243,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_current_price",
            "line": 1303,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_price_history",
            "line": 1336,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_model_recommendations",
            "line": 1364,
            "method": "@post",
            "async": true
          },
          {
            "name": "health_check",
            "line": 1432,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 16
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 32
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.core.tracking.tracking_manager",
            "from": "budget.core.tracking",
            "name": "tracking_manager",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.core.policy.policy_manager",
            "from": "budget.core.policy",
            "name": "policy_manager",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.update_repo",
            "from": "budget.data.repository",
            "name": "update_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.repository.source_repo",
            "from": "budget.data.repository",
            "name": "source_repo",
            "alias": null,
            "line": 38
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.PriceUpdateRecord",
            "from": "budget.data.models",
            "name": "PriceUpdateRecord",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.PriceSource",
            "from": "budget.data.models",
            "name": "PriceSource",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.data.models.BudgetSummary",
            "from": "budget.data.models",
            "name": "BudgetSummary",
            "alias": null,
            "line": 44
          },
          {
            "module": "budget.api.models.CreateBudgetRequest",
            "from": "budget.api.models",
            "name": "CreateBudgetRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.UpdateBudgetRequest",
            "from": "budget.api.models",
            "name": "UpdateBudgetRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.CreatePolicyRequest",
            "from": "budget.api.models",
            "name": "CreatePolicyRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.UpdatePolicyRequest",
            "from": "budget.api.models",
            "name": "UpdatePolicyRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.CreateAllocationRequest",
            "from": "budget.api.models",
            "name": "CreateAllocationRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.RecordUsageRequest",
            "from": "budget.api.models",
            "name": "RecordUsageRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.GetUsageSummaryRequest",
            "from": "budget.api.models",
            "name": "GetUsageSummaryRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.ModelRecommendationRequest",
            "from": "budget.api.models",
            "name": "ModelRecommendationRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.PriceRequest",
            "from": "budget.api.models",
            "name": "PriceRequest",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.BudgetResponse",
            "from": "budget.api.models",
            "name": "BudgetResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.PolicyResponse",
            "from": "budget.api.models",
            "name": "PolicyResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.AllocationResponse",
            "from": "budget.api.models",
            "name": "AllocationResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.UsageRecordResponse",
            "from": "budget.api.models",
            "name": "UsageRecordResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.UsageSummaryResponse",
            "from": "budget.api.models",
            "name": "UsageSummaryResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.BudgetSummaryResponse",
            "from": "budget.api.models",
            "name": "BudgetSummaryResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.AlertResponse",
            "from": "budget.api.models",
            "name": "AlertResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.PriceResponse",
            "from": "budget.api.models",
            "name": "PriceResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.ModelRecommendationResponse",
            "from": "budget.api.models",
            "name": "ModelRecommendationResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.ErrorResponse",
            "from": "budget.api.models",
            "name": "ErrorResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.SuccessResponse",
            "from": "budget.api.models",
            "name": "SuccessResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.BudgetListResponse",
            "from": "budget.api.models",
            "name": "BudgetListResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.PolicyListResponse",
            "from": "budget.api.models",
            "name": "PolicyListResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.AllocationListResponse",
            "from": "budget.api.models",
            "name": "AllocationListResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.UsageRecordListResponse",
            "from": "budget.api.models",
            "name": "UsageRecordListResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.AlertListResponse",
            "from": "budget.api.models",
            "name": "AlertListResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.ModelRecommendationListResponse",
            "from": "budget.api.models",
            "name": "ModelRecommendationListResponse",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_budget_response",
            "from": "budget.api.models",
            "name": "create_budget_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_policy_response",
            "from": "budget.api.models",
            "name": "create_policy_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_allocation_response",
            "from": "budget.api.models",
            "name": "create_allocation_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_usage_record_response",
            "from": "budget.api.models",
            "name": "create_usage_record_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_alert_response",
            "from": "budget.api.models",
            "name": "create_alert_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_price_response",
            "from": "budget.api.models",
            "name": "create_price_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_budget_summary_response",
            "from": "budget.api.models",
            "name": "create_budget_summary_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.models.create_model_recommendation_response",
            "from": "budget.api.models",
            "name": "create_model_recommendation_response",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.api.dependencies.get_authenticated_user",
            "from": "budget.api.dependencies",
            "name": "get_authenticated_user",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.api.dependencies.pagination_params",
            "from": "budget.api.dependencies",
            "name": "pagination_params",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.api.dependencies.budget_id_param",
            "from": "budget.api.dependencies",
            "name": "budget_id_param",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.api.dependencies.policy_id_param",
            "from": "budget.api.dependencies",
            "name": "policy_id_param",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.api.dependencies.allocation_id_param",
            "from": "budget.api.dependencies",
            "name": "allocation_id_param",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.api.dependencies.record_id_param",
            "from": "budget.api.dependencies",
            "name": "record_id_param",
            "alias": null,
            "line": 69
          },
          {
            "module": "budget.api.dependencies.alert_id_param",
            "from": "budget.api.dependencies",
            "name": "alert_id_param",
            "alias": null,
            "line": 69
          },
          {
            "module": "sqlalchemy.and_",
            "from": "sqlalchemy",
            "name": "and_",
            "alias": null,
            "line": 1266
          },
          {
            "module": "sqlalchemy.or_",
            "from": "sqlalchemy",
            "name": "or_",
            "alias": null,
            "line": 1266
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 1267
          },
          {
            "module": "budget.data.db_models.ProviderPricingDB",
            "from": "budget.data.db_models",
            "name": "ProviderPricingDB",
            "alias": null,
            "line": 1268
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_budgets",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 124,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "delete_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 250,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "list_budget_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 287,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_budget_allocations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_budget_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 387,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 437,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 486,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 561,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 591,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "delete_policy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 644,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "create_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 676,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_allocations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 726,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 798,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "release_allocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 828,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_allocation_by_context",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 858,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 893,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_usage_records",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 934,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_usage_record",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1007,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_usage_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1037,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1079,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_alert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1141,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "acknowledge_alert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1171,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "check_budget_alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1201,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1243,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_current_price",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1303,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_price_history",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1336,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_model_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1364,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/endpoints.py",
            "line": 1432,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1441,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_authenticated_user",
            "line": 37,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Authenticate the user based on API key or Bearer token.\n\nArgs:\n    api_key: The API key from the X-API-Key header\n    authorization: The Bearer token from the Authorization header\n    \nReturns:\n    A dictionary containing user information\n\nRaises:\n    HTTPException: If authentication fails",
            "args": [
              "api_key",
              "authorization"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "pagination_params",
            "line": 81,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get pagination parameters.\n\nArgs:\n    page: The page number (1-indexed)\n    limit: The number of items per page\n    \nReturns:\n    A dictionary containing pagination parameters",
            "args": [
              "page",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "budget_id_param",
            "line": 105,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Validate and return the budget ID.",
            "args": [
              "budget_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "policy_id_param",
            "line": 113,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Validate and return the policy ID.",
            "args": [
              "policy_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocation_id_param",
            "line": 121,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Validate and return the allocation ID.",
            "args": [
              "allocation_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_id_param",
            "line": 129,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Validate and return the record ID.",
            "args": [
              "record_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "alert_id_param",
            "line": 137,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Validate and return the alert ID.",
            "args": [
              "alert_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 18,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Security",
            "from": "fastapi",
            "name": "Security",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.security.APIKeyHeader",
            "from": "fastapi.security",
            "name": "APIKeyHeader",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_authenticated_user",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "pagination_params",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "budget_id_param",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "policy_id_param",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "allocation_id_param",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 121,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "record_id_param",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "alert_id_param",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/api/dependencies.py",
            "line": 137,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 142,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 53,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the budget assistant.\n\nArgs:\n    llm_client: Client for making LLM API calls\n    engine: Budget engine instance",
            "args": [
              "self",
              "llm_client",
              "engine"
            ],
            "class": "BudgetAssistant",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_prompt_templates",
            "line": 74,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates from the prompt_templates directory.\n\nReturns:\n    Dict[str, Any]: Dictionary of loaded prompt templates",
            "args": [
              "self"
            ],
            "class": "BudgetAssistant",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "analyze_budget",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Analyze budget usage patterns and provide insights.\n\nArgs:\n    period: Budget period to analyze\n    days: Number of days of data to include\n    \nReturns:\n    Dict[str, Any]: Analysis results",
            "args": [
              "self",
              "period",
              "days"
            ],
            "class": "BudgetAssistant",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_optimization_recommendations",
            "line": 191,
            "async": true,
            "decorators": [],
            "docstring": "Get cost optimization recommendations based on usage patterns.\n\nArgs:\n    period: Budget period to analyze\n    days: Number of days of data to include\n    \nReturns:\n    Dict[str, Any]: Optimization recommendations",
            "args": [
              "self",
              "period",
              "days"
            ],
            "class": "BudgetAssistant",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "recommend_model",
            "line": 301,
            "async": true,
            "decorators": [],
            "docstring": "Recommend the best model for a specific task based on requirements and budget.\n\nArgs:\n    task_description: Description of the task\n    input_length: Expected input length in tokens\n    output_length: Expected output length in tokens\n    usage_frequency: How many times the task will be performed daily\n    budget_limit: Maximum budget in USD\n    priority_areas: Areas of importance (e.g., accuracy, speed)\n    \nReturns:\n    Dict[str, Any]: Model recommendations",
            "args": [
              "self",
              "task_description",
              "input_length",
              "output_length",
              "usage_frequency",
              "budget_limit",
              "priority_areas"
            ],
            "class": "BudgetAssistant",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_aggregate_by_component",
            "line": 447,
            "async": true,
            "decorators": [],
            "docstring": "Aggregate usage data by component.\n\nArgs:\n    usage_records: List of usage records\n    \nReturns:\n    Dict[str, Any]: Aggregated data by component",
            "args": [
              "self",
              "usage_records"
            ],
            "class": "BudgetAssistant",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_aggregate_by_model",
            "line": 493,
            "async": true,
            "decorators": [],
            "docstring": "Aggregate usage data by model.\n\nArgs:\n    usage_records: List of usage records\n    \nReturns:\n    Dict[str, Any]: Aggregated data by model",
            "args": [
              "self",
              "usage_records"
            ],
            "class": "BudgetAssistant",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_budget_assistant",
            "line": 542,
            "async": true,
            "decorators": [],
            "docstring": "Factory function to create a budget assistant instance.\n\nReturns:\n    BudgetAssistant: Initialized budget assistant",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 27,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetAssistant",
            "line": 45,
            "methods": [
              "__init__",
              "_load_prompt_templates"
            ],
            "decorators": [],
            "docstring": "LLM-based budget assistant that provides insights and recommendations.\n\nUses prompt templates and LLM calls to analyze budget data and generate\nactionable recommendations for cost optimization.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 24
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 24
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 40
          },
          {
            "module": "budget.core.engine.get_budget_engine",
            "from": "budget.core.engine",
            "name": "get_budget_engine",
            "alias": null,
            "line": 551
          },
          {
            "module": "budget.adapters.llm_adapter.get_llm_client",
            "from": "budget.adapters.llm_adapter",
            "name": "get_llm_client",
            "alias": null,
            "line": 552
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 34,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetAssistant",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetAssistant._load_prompt_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 74,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "BudgetAssistant.analyze_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetAssistant.get_optimization_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 191,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetAssistant.recommend_model",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 301,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "create_budget_assistant",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/service/assistant.py",
            "line": 542,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 560,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_date_must_be_after_effective_date",
            "line": 153,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that end_date is after effective_date if both are provided.",
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "ProviderPricing",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "either_token_or_cost_limit",
            "line": 192,
            "async": false,
            "decorators": [
              "@model_validator"
            ],
            "docstring": "Ensure that either token_limit or cost_limit is provided.",
            "args": [
              "self"
            ],
            "class": "BudgetPolicy",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_date_must_be_after_start_date",
            "line": 200,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Validate that end_date is after start_date if both are provided.",
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "BudgetPolicy",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_expiration_time",
            "line": 279,
            "async": false,
            "decorators": [
              "@field_validator",
              "@classmethod"
            ],
            "docstring": "Set default expiration time if not provided.",
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remaining_tokens",
            "line": 287,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the number of remaining tokens in the allocation.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "usage_percentage",
            "line": 292,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the percentage of allocated tokens used.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_expired",
            "line": 299,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the allocation has expired.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocation",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 305,
            "async": false,
            "decorators": [],
            "docstring": "Record token usage against this allocation.\n\nArgs:\n    input_tokens: Number of input tokens used\n    output_tokens: Number of output tokens used\n    cost: Actual cost (if known)\n    \nReturns:\n    Number of tokens actually recorded (limited by allocation)",
            "args": [
              "self",
              "input_tokens",
              "output_tokens",
              "cost"
            ],
            "class": "BudgetAllocation",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "remaining_tokens",
            "line": 477,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the number of remaining tokens in the budget.",
            "args": [
              "self"
            ],
            "class": "BudgetSummary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remaining_cost",
            "line": 484,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the remaining cost budget.",
            "args": [
              "self"
            ],
            "class": "BudgetSummary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "token_limit_exceeded",
            "line": 491,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the token budget has been exceeded.",
            "args": [
              "self"
            ],
            "class": "BudgetSummary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cost_limit_exceeded",
            "line": 498,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the cost budget has been exceeded.",
            "args": [
              "self"
            ],
            "class": "BudgetSummary",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 20,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetTier",
            "line": 33,
            "methods": [],
            "decorators": [],
            "docstring": "Token budget tiers for different model capabilities.\n\nCategorizes models based on their capabilities and typical cost/token usage:\n- LOCAL_LIGHTWEIGHT: Small, efficient models for basic tasks (e.g., CodeLlama)\n- LOCAL_MIDWEIGHT: Mid-range models with good capabilities (e.g., Local Claude Haiku)\n- REMOTE_HEAVYWEIGHT: High-capability models (e.g., Claude 3.7 Sonnet, GPT-4)",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPeriod",
            "line": 47,
            "methods": [],
            "decorators": [],
            "docstring": "Budget period types.\n\nDefines the time periods for budget allocation and enforcement:\n- HOURLY: Per-hour limits\n- DAILY: Per-day limits\n- WEEKLY: Per-week limits (starting Monday)\n- MONTHLY: Per-month limits (calendar month)\n- PER_SESSION: Limits specific to a user session\n- PER_TASK: Limits for a single task",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicyType",
            "line": 67,
            "methods": [],
            "decorators": [],
            "docstring": "Types of budget enforcement policies.\n\nDefines how budget limits are enforced:\n- IGNORE: Track but don't enforce\n- WARN: Track and warn when exceeded\n- SOFT_LIMIT: Track and recommend actions (like downgrades)\n- HARD_LIMIT: Track and enforce limits strictly",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskPriority",
            "line": 83,
            "methods": [],
            "decorators": [],
            "docstring": "Priority levels for tasks.\n\nHigher priority tasks may be allowed to exceed soft limits:\n- LOW: Non-critical background tasks\n- NORMAL: Standard operations\n- HIGH: Important tasks with some flexibility\n- CRITICAL: Essential tasks that must complete",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceType",
            "line": 99,
            "methods": [],
            "decorators": [],
            "docstring": "Types of pricing structures.\n\nDefines how prices are calculated:\n- TOKEN_BASED: Priced per token (typical for most LLMs)\n- CHARACTER_BASED: Priced per character (some specialized models)\n- IMAGE_BASED: Priced per image or by image dimensions\n- TIME_BASED: Priced by computation time\n- FIXED: Fixed price per request",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProviderPricing",
            "line": 117,
            "methods": [
              "end_date_must_be_after_effective_date"
            ],
            "decorators": [],
            "docstring": "Provider and model-specific pricing information.\n\nTracks the pricing details for a specific model:\n- Input/output token costs\n- Version information\n- Source of the pricing data\n- Effective dates for the pricing",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicy",
            "line": 160,
            "methods": [
              "either_token_or_cost_limit",
              "end_date_must_be_after_start_date"
            ],
            "decorators": [],
            "docstring": "Policy for token budget and cost enforcement.\n\nDefines limits and enforcement policies for a specific budget period:\n- Type of enforcement (warn, enforce, etc.)\n- Budget period (daily, weekly, etc.)\n- Token or cost limits\n- Warning thresholds",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Budget",
            "line": 207,
            "methods": [],
            "decorators": [],
            "docstring": "Top-level budget container.\n\nDefines a budget with its properties:\n- ID and name\n- Budget type and scope\n- Associated policies\n- Creation and modification dates",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetAllocation",
            "line": 233,
            "methods": [
              "set_expiration_time",
              "remaining_tokens",
              "usage_percentage",
              "is_expired",
              "record_usage"
            ],
            "decorators": [],
            "docstring": "Token and cost budget allocation for a specific operation.\n\nTracks resources allocated for a specific task:\n- Context and component identification\n- Token allocation and usage\n- Cost estimates and actual costs\n- Expiration and status tracking",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageRecord",
            "line": 370,
            "methods": [],
            "decorators": [],
            "docstring": "Record of token and cost usage for a specific operation.\n\nDetailed tracking of LLM usage:\n- Request identification\n- Token consumption (input and output)\n- Costs and pricing\n- Contextual information for analysis",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Alert",
            "line": 412,
            "methods": [],
            "decorators": [],
            "docstring": "Notification for budget events.\n\nAlerts for budget status changes:\n- Warnings, violations\n- Price changes\n- Policy triggers",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetSummary",
            "line": 439,
            "methods": [
              "remaining_tokens",
              "remaining_cost",
              "token_limit_exceeded",
              "cost_limit_exceeded"
            ],
            "decorators": [],
            "docstring": "Summary of budget usage.\n\nAggregated view of budget status:\n- Usage totals\n- Limits and thresholds\n- Period information",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceUpdateRecord",
            "line": 505,
            "methods": [],
            "decorators": [],
            "docstring": "Record of a price update operation.\n\nTracks changes to pricing data:\n- What changed and when\n- Source of the new data\n- Verification status",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceSource",
            "line": 531,
            "methods": [],
            "decorators": [],
            "docstring": "Information about a price data source.\n\nMetadata for price sources:\n- Reliability score\n- Update frequency\n- Authentication details",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.model_validator",
            "from": "pydantic",
            "name": "model_validator",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.ConfigDict",
            "from": "pydantic",
            "name": "ConfigDict",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetTier",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPeriod",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicyType",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 67,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskPriority",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 83,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceType",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 99,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProviderPricing",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 117,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ProviderPricing.end_date_must_be_after_effective_date",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 153,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicy",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 160,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetPolicy.either_token_or_cost_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 192,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetPolicy.end_date_must_be_after_start_date",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 200,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 207,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetAllocation",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 233,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.set_expiration_time",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 279,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.remaining_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 287,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.usage_percentage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 292,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.is_expired",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 299,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocation.record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 305,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "UsageRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 370,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Alert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 412,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetSummary",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 439,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetSummary.remaining_tokens",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 477,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetSummary.remaining_cost",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 484,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetSummary.token_limit_exceeded",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 491,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetSummary.cost_limit_exceeded",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 498,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PriceUpdateRecord",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 505,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceSource",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/models.py",
            "line": 531,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 557,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 275,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the database manager.",
            "args": [
              "self",
              "connection_string"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 293,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Initialize the database connection and create tables if needed.",
            "args": [
              "self"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_initial_data",
            "line": 317,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Load initial data into the database if tables are empty.",
            "args": [
              "self"
            ],
            "class": "DatabaseManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_load_price_sources",
            "line": 344,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Load initial price sources.",
            "args": [
              "self",
              "session"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_initial_pricing",
            "line": 360,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Load initial pricing data.",
            "args": [
              "self",
              "session"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_session",
            "line": 383,
            "async": false,
            "decorators": [],
            "docstring": "Get a database session.",
            "args": [
              "self"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 389,
            "async": false,
            "decorators": [],
            "docstring": "Close the database connection.",
            "args": [
              "self"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__del__",
            "line": 394,
            "async": false,
            "decorators": [],
            "docstring": "Clean up when the object is deleted.",
            "args": [
              "self"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 410,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository with model classes.",
            "args": [
              "self",
              "model_class",
              "pydantic_class"
            ],
            "class": "DatabaseRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_to_pydantic",
            "line": 415,
            "async": false,
            "decorators": [],
            "docstring": "Convert a database model to a Pydantic model.",
            "args": [
              "self",
              "db_model"
            ],
            "class": "DatabaseRepository",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_to_db_model",
            "line": 431,
            "async": false,
            "decorators": [],
            "docstring": "Convert a Pydantic model to a database model.",
            "args": [
              "self",
              "pydantic_model"
            ],
            "class": "DatabaseRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_by_id",
            "line": 443,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get a record by its primary key.",
            "args": [
              "self",
              "id_value",
              "session"
            ],
            "class": "DatabaseRepository",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_all",
            "line": 463,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get all records, optionally with pagination.",
            "args": [
              "self",
              "limit",
              "offset",
              "session"
            ],
            "class": "DatabaseRepository",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create",
            "line": 491,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create a new record.",
            "args": [
              "self",
              "model",
              "session"
            ],
            "class": "DatabaseRepository",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "update",
            "line": 522,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update an existing record.",
            "args": [
              "self",
              "model",
              "session"
            ],
            "class": "DatabaseRepository",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "delete",
            "line": 580,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Delete a record by its primary key.",
            "args": [
              "self",
              "id_value",
              "session"
            ],
            "class": "DatabaseRepository",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "upsert",
            "line": 610,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create or update a record.",
            "args": [
              "self",
              "model",
              "session"
            ],
            "class": "DatabaseRepository",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 28,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetDBModel",
            "line": 58,
            "methods": [],
            "decorators": [],
            "docstring": "Base class for Budget entity tables.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetDB",
            "line": 65,
            "methods": [],
            "decorators": [],
            "docstring": "Budget database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicyDB",
            "line": 83,
            "methods": [],
            "decorators": [],
            "docstring": "Budget policy database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetAllocationDB",
            "line": 108,
            "methods": [],
            "decorators": [],
            "docstring": "Budget allocation database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageRecordDB",
            "line": 146,
            "methods": [],
            "decorators": [],
            "docstring": "Usage record database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AlertDB",
            "line": 180,
            "methods": [],
            "decorators": [],
            "docstring": "Alert database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProviderPricingDB",
            "line": 197,
            "methods": [],
            "decorators": [],
            "docstring": "Provider pricing database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceUpdateRecordDB",
            "line": 226,
            "methods": [],
            "decorators": [],
            "docstring": "Price update record database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceSourceDB",
            "line": 249,
            "methods": [],
            "decorators": [],
            "docstring": "Price source database model.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DatabaseManager",
            "line": 268,
            "methods": [
              "__init__",
              "initialize",
              "_load_initial_data",
              "_load_price_sources",
              "_load_initial_pricing",
              "get_session",
              "close",
              "__del__"
            ],
            "decorators": [],
            "docstring": "Database manager for Budget component.\n\nHandles database connection, session management, and ORM operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DatabaseRepository",
            "line": 403,
            "methods": [
              "__init__",
              "_to_pydantic",
              "_to_db_model",
              "get_by_id",
              "get_all",
              "create",
              "update",
              "delete",
              "upsert"
            ],
            "decorators": [],
            "docstring": "Base repository for database operations.\n\nProvides common CRUD operations for database models.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "sqlalchemy.create_engine",
            "from": "sqlalchemy",
            "name": "create_engine",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.Column",
            "from": "sqlalchemy",
            "name": "Column",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.String",
            "from": "sqlalchemy",
            "name": "String",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.Integer",
            "from": "sqlalchemy",
            "name": "Integer",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.Float",
            "from": "sqlalchemy",
            "name": "Float",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.Boolean",
            "from": "sqlalchemy",
            "name": "Boolean",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.DateTime",
            "from": "sqlalchemy",
            "name": "DateTime",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.ForeignKey",
            "from": "sqlalchemy",
            "name": "ForeignKey",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.Text",
            "from": "sqlalchemy",
            "name": "Text",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.Enum",
            "from": "sqlalchemy",
            "name": "Enum",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.JSON",
            "from": "sqlalchemy",
            "name": "JSON",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.func",
            "from": "sqlalchemy",
            "name": "func",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.text",
            "from": "sqlalchemy",
            "name": "text",
            "alias": null,
            "line": 15
          },
          {
            "module": "sqlalchemy.ext.declarative.declarative_base",
            "from": "sqlalchemy.ext.declarative",
            "name": "declarative_base",
            "alias": null,
            "line": 19
          },
          {
            "module": "sqlalchemy.orm.relationship",
            "from": "sqlalchemy.orm",
            "name": "relationship",
            "alias": null,
            "line": 20
          },
          {
            "module": "sqlalchemy.orm.sessionmaker",
            "from": "sqlalchemy.orm",
            "name": "sessionmaker",
            "alias": null,
            "line": 20
          },
          {
            "module": "sqlalchemy.orm.scoped_session",
            "from": "sqlalchemy.orm",
            "name": "scoped_session",
            "alias": null,
            "line": 20
          },
          {
            "module": "sqlalchemy.dialects.sqlite.insert",
            "from": "sqlalchemy.dialects.sqlite",
            "name": "insert",
            "alias": "sqlite_insert",
            "line": 21
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 25
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 25
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.PriceUpdateRecord",
            "from": "budget.data.models",
            "name": "PriceUpdateRecord",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.PriceSource",
            "from": "budget.data.models",
            "name": "PriceSource",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.data.models.BudgetSummary",
            "from": "budget.data.models",
            "name": "BudgetSummary",
            "alias": null,
            "line": 41
          },
          {
            "module": "budget.core.constants.DEFAULT_TOKEN_LIMITS",
            "from": "budget.core.constants",
            "name": "DEFAULT_TOKEN_LIMITS",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.core.constants.DEFAULT_COST_LIMITS",
            "from": "budget.core.constants",
            "name": "DEFAULT_COST_LIMITS",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.core.constants.DEFAULT_ALLOCATIONS",
            "from": "budget.core.constants",
            "name": "DEFAULT_ALLOCATIONS",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.core.constants.INITIAL_PRICING_DATA",
            "from": "budget.core.constants",
            "name": "INITIAL_PRICING_DATA",
            "alias": null,
            "line": 49
          },
          {
            "module": "budget.core.constants.DEFAULT_PRICE_SOURCES",
            "from": "budget.core.constants",
            "name": "DEFAULT_PRICE_SOURCES",
            "alias": null,
            "line": 49
          },
          {
            "module": "os",
            "alias": null,
            "line": 281
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 282
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 36,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetDBModel",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 58,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 65,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicyDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 83,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "BudgetAllocationDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 108,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "UsageRecordDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 146,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AlertDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 180,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProviderPricingDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 197,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceUpdateRecordDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 226,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceSourceDB",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 249,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DatabaseManager",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 268,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseManager.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 293,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DatabaseManager._load_initial_data",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 317,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_session",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 383,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.close",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 389,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "DatabaseRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 403,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseRepository.get_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 443,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DatabaseRepository.get_all",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 463,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DatabaseRepository.create",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 491,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseRepository.update",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 522,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "DatabaseRepository.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 580,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseRepository.upsert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/db_models.py",
            "line": 610,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 647,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Initialize with a database repository.",
            "args": [
              "self",
              "db_repository"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_by_id",
            "line": 63,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get a model by its ID.\n\nArgs:\n    id_value: The ID of the model to retrieve\n    \nReturns:\n    The model if found, None otherwise",
            "args": [
              "self",
              "id_value"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all",
            "line": 77,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get all models, optionally with pagination.\n\nArgs:\n    limit: Maximum number of models to retrieve\n    offset: Number of models to skip\n    \nReturns:\n    List of models",
            "args": [
              "self",
              "limit",
              "offset"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create",
            "line": 92,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create a new model.\n\nArgs:\n    model: The model to create\n    \nReturns:\n    The created model",
            "args": [
              "self",
              "model"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update",
            "line": 106,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update an existing model.\n\nArgs:\n    model: The model to update\n    \nReturns:\n    The updated model if successful, None otherwise",
            "args": [
              "self",
              "model"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "delete",
            "line": 120,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Delete a model by its ID.\n\nArgs:\n    id_value: The ID of the model to delete\n    \nReturns:\n    True if the model was deleted, False otherwise",
            "args": [
              "self",
              "id_value"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "upsert",
            "line": 134,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create or update a model.\n\nArgs:\n    model: The model to create or update\n    \nReturns:\n    The created or updated model",
            "args": [
              "self",
              "model"
            ],
            "class": "Repository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "BudgetRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_by_name",
            "line": 156,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get a budget by its name.\n\nArgs:\n    name: The name of the budget to retrieve\n    \nReturns:\n    The budget if found, None otherwise",
            "args": [
              "self",
              "name"
            ],
            "class": "BudgetRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_active_budgets",
            "line": 182,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get all active budgets.\n\nReturns:\n    List of active budgets",
            "args": [
              "self"
            ],
            "class": "BudgetRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "BudgetPolicyRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_by_budget_id",
            "line": 211,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get all policies for a budget.\n\nArgs:\n    budget_id: The ID of the budget\n    \nReturns:\n    List of budget policies",
            "args": [
              "self",
              "budget_id"
            ],
            "class": "BudgetPolicyRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_active_policies",
            "line": 237,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get active policies matching the specified criteria.\n\nArgs:\n    tier: Filter by budget tier\n    provider: Filter by provider\n    component: Filter by component\n    task_type: Filter by task type\n    \nReturns:\n    List of matching active policies",
            "args": [
              "self",
              "tier",
              "provider",
              "component",
              "task_type"
            ],
            "class": "BudgetPolicyRepository",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 294,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "BudgetAllocationRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_by_context_id",
            "line": 299,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get an allocation by its context ID.\n\nArgs:\n    context_id: The context ID to retrieve allocation for\n    \nReturns:\n    The allocation if found, None otherwise",
            "args": [
              "self",
              "context_id"
            ],
            "class": "BudgetAllocationRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_active_allocations",
            "line": 328,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get active allocations matching the specified criteria.\n\nArgs:\n    budget_id: Filter by budget ID\n    component: Filter by component\n    tier: Filter by budget tier\n    provider: Filter by provider\n    model: Filter by model\n    task_type: Filter by task type\n    \nReturns:\n    List of matching active allocations",
            "args": [
              "self",
              "budget_id",
              "component",
              "tier",
              "provider",
              "model",
              "task_type"
            ],
            "class": "BudgetAllocationRepository",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_usage",
            "line": 390,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update usage for an allocation.\n\nArgs:\n    allocation_id: The ID of the allocation to update\n    input_tokens: Number of input tokens used\n    output_tokens: Number of output tokens used\n    cost: Actual cost if known\n    \nReturns:\n    Updated allocation if successful, None otherwise",
            "args": [
              "self",
              "allocation_id",
              "input_tokens",
              "output_tokens",
              "cost"
            ],
            "class": "BudgetAllocationRepository",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 463,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "UsageRecordRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_usage_for_period",
            "line": 468,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get usage records for a specific period.\n\nArgs:\n    period: Budget period\n    budget_id: Filter by budget ID\n    provider: Filter by provider\n    component: Filter by component\n    model: Filter by model\n    task_type: Filter by task type\n    start_time: Custom start time (overrides period)\n    end_time: Custom end time (overrides period)\n    \nReturns:\n    List of matching usage records",
            "args": [
              "self",
              "period",
              "budget_id",
              "provider",
              "component",
              "model",
              "task_type",
              "start_time",
              "end_time"
            ],
            "class": "UsageRecordRepository",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_usage_summary",
            "line": 543,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get a summary of usage for a period.\n\nArgs:\n    period: Budget period\n    budget_id: Filter by budget ID\n    provider: Filter by provider\n    component: Filter by component\n    model: Filter by model\n    task_type: Filter by task type\n    start_time: Custom start time (overrides period)\n    end_time: Custom end time (overrides period)\n    \nReturns:\n    Dictionary with usage summary",
            "args": [
              "self",
              "period",
              "budget_id",
              "provider",
              "component",
              "model",
              "task_type",
              "start_time",
              "end_time"
            ],
            "class": "UsageRecordRepository",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 639,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "AlertRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_unacknowledged_alerts",
            "line": 644,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get unacknowledged alerts.\n\nArgs:\n    budget_id: Filter by budget ID\n    severity: Filter by severity\n    \nReturns:\n    List of unacknowledged alerts",
            "args": [
              "self",
              "budget_id",
              "severity"
            ],
            "class": "AlertRepository",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "acknowledge_alert",
            "line": 684,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Acknowledge an alert.\n\nArgs:\n    alert_id: The ID of the alert to acknowledge\n    user_id: The ID of the user acknowledging the alert\n    \nReturns:\n    Updated alert if successful, None otherwise",
            "args": [
              "self",
              "alert_id",
              "user_id"
            ],
            "class": "AlertRepository",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 734,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "ProviderPricingRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_current_pricing",
            "line": 739,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get current pricing for a provider and model.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    \nReturns:\n    Current pricing if found, None otherwise",
            "args": [
              "self",
              "provider",
              "model"
            ],
            "class": "ProviderPricingRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_pricing_history",
            "line": 778,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get pricing history for a provider and model.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    \nReturns:\n    List of pricing entries sorted by effective date",
            "args": [
              "self",
              "provider",
              "model"
            ],
            "class": "ProviderPricingRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 815,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "PriceUpdateRecordRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 823,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the repository.",
            "args": [
              "self"
            ],
            "class": "PriceSourceRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_active_sources",
            "line": 828,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get all active price sources.\n\nReturns:\n    List of active price sources",
            "args": [
              "self"
            ],
            "class": "PriceSourceRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_sources_for_update",
            "line": 851,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get price sources that are due for update.\n\nReturns:\n    List of price sources due for update",
            "args": [
              "self"
            ],
            "class": "PriceSourceRepository",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_source_timestamp",
            "line": 880,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Update the last_update and next_update timestamps for a price source.\n\nArgs:\n    source_id: The ID of the price source\n    success: Whether the update was successful\n    \nReturns:\n    Updated price source if successful, None otherwise",
            "args": [
              "self",
              "source_id",
              "success"
            ],
            "class": "PriceSourceRepository",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 21,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Repository",
            "line": 51,
            "methods": [
              "__init__",
              "get_by_id",
              "get_all",
              "create",
              "update",
              "delete",
              "upsert"
            ],
            "decorators": [],
            "docstring": "Generic repository interface.\n\nProvides a consistent interface for data access operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetRepository",
            "line": 148,
            "methods": [
              "__init__",
              "get_by_name",
              "get_active_budgets"
            ],
            "decorators": [],
            "docstring": "Repository for Budget models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetPolicyRepository",
            "line": 203,
            "methods": [
              "__init__",
              "get_by_budget_id",
              "get_active_policies"
            ],
            "decorators": [],
            "docstring": "Repository for BudgetPolicy models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetAllocationRepository",
            "line": 291,
            "methods": [
              "__init__",
              "get_by_context_id",
              "get_active_allocations",
              "update_usage"
            ],
            "decorators": [],
            "docstring": "Repository for BudgetAllocation models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "UsageRecordRepository",
            "line": 460,
            "methods": [
              "__init__",
              "get_usage_for_period",
              "get_usage_summary"
            ],
            "decorators": [],
            "docstring": "Repository for UsageRecord models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AlertRepository",
            "line": 636,
            "methods": [
              "__init__",
              "get_unacknowledged_alerts",
              "acknowledge_alert"
            ],
            "decorators": [],
            "docstring": "Repository for Alert models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProviderPricingRepository",
            "line": 731,
            "methods": [
              "__init__",
              "get_current_pricing",
              "get_pricing_history"
            ],
            "decorators": [],
            "docstring": "Repository for ProviderPricing models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceUpdateRecordRepository",
            "line": 812,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Repository for PriceUpdateRecord models.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceSourceRepository",
            "line": 820,
            "methods": [
              "__init__",
              "get_active_sources",
              "get_sources_for_update",
              "update_source_timestamp"
            ],
            "decorators": [],
            "docstring": "Repository for PriceSource models.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Generic",
            "from": "typing",
            "name": "Generic",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 18
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 18
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.PriceUpdateRecord",
            "from": "budget.data.models",
            "name": "PriceUpdateRecord",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.PriceSource",
            "from": "budget.data.models",
            "name": "PriceSource",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.models.BudgetSummary",
            "from": "budget.data.models",
            "name": "BudgetSummary",
            "alias": null,
            "line": 34
          },
          {
            "module": "budget.data.db_models.db_manager",
            "from": "budget.data.db_models",
            "name": "db_manager",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.budget_repository",
            "from": "budget.data.db_models",
            "name": "budget_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.policy_repository",
            "from": "budget.data.db_models",
            "name": "policy_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.allocation_repository",
            "from": "budget.data.db_models",
            "name": "allocation_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.usage_repository",
            "from": "budget.data.db_models",
            "name": "usage_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.alert_repository",
            "from": "budget.data.db_models",
            "name": "alert_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.pricing_repository",
            "from": "budget.data.db_models",
            "name": "pricing_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.update_repository",
            "from": "budget.data.db_models",
            "name": "update_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.source_repository",
            "from": "budget.data.db_models",
            "name": "source_repository",
            "alias": null,
            "line": 42
          },
          {
            "module": "budget.data.db_models.BudgetDB",
            "from": "budget.data.db_models",
            "name": "BudgetDB",
            "alias": null,
            "line": 171
          },
          {
            "module": "budget.data.db_models.BudgetDB",
            "from": "budget.data.db_models",
            "name": "BudgetDB",
            "alias": null,
            "line": 194
          },
          {
            "module": "budget.data.db_models.BudgetPolicyDB",
            "from": "budget.data.db_models",
            "name": "BudgetPolicyDB",
            "alias": null,
            "line": 226
          },
          {
            "module": "budget.data.db_models.BudgetPolicyDB",
            "from": "budget.data.db_models",
            "name": "BudgetPolicyDB",
            "alias": null,
            "line": 261
          },
          {
            "module": "budget.data.db_models.BudgetAllocationDB",
            "from": "budget.data.db_models",
            "name": "BudgetAllocationDB",
            "alias": null,
            "line": 314
          },
          {
            "module": "budget.data.db_models.BudgetAllocationDB",
            "from": "budget.data.db_models",
            "name": "BudgetAllocationDB",
            "alias": null,
            "line": 356
          },
          {
            "module": "budget.data.db_models.BudgetAllocationDB",
            "from": "budget.data.db_models",
            "name": "BudgetAllocationDB",
            "alias": null,
            "line": 416
          },
          {
            "module": "budget.data.db_models.UsageRecordDB",
            "from": "budget.data.db_models",
            "name": "UsageRecordDB",
            "alias": null,
            "line": 517
          },
          {
            "module": "budget.data.db_models.AlertDB",
            "from": "budget.data.db_models",
            "name": "AlertDB",
            "alias": null,
            "line": 664
          },
          {
            "module": "budget.data.db_models.AlertDB",
            "from": "budget.data.db_models",
            "name": "AlertDB",
            "alias": null,
            "line": 704
          },
          {
            "module": "budget.data.db_models.ProviderPricingDB",
            "from": "budget.data.db_models",
            "name": "ProviderPricingDB",
            "alias": null,
            "line": 760
          },
          {
            "module": "budget.data.db_models.ProviderPricingDB",
            "from": "budget.data.db_models",
            "name": "ProviderPricingDB",
            "alias": null,
            "line": 799
          },
          {
            "module": "budget.data.db_models.PriceSourceDB",
            "from": "budget.data.db_models",
            "name": "PriceSourceDB",
            "alias": null,
            "line": 840
          },
          {
            "module": "budget.data.db_models.PriceSourceDB",
            "from": "budget.data.db_models",
            "name": "PriceSourceDB",
            "alias": null,
            "line": 863
          },
          {
            "module": "budget.data.db_models.PriceSourceDB",
            "from": "budget.data.db_models",
            "name": "PriceSourceDB",
            "alias": null,
            "line": 901
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Repository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 51,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Repository.get_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 63,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Repository.get_all",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 77,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Repository.create",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 92,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Repository.update",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 106,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Repository.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 120,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Repository.upsert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 134,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 148,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetRepository.get_by_name",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 156,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetRepository.get_active_budgets",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 182,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetPolicyRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 203,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetPolicyRepository.get_by_budget_id",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 211,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetPolicyRepository.get_active_policies",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 237,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetAllocationRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 291,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetAllocationRepository.get_by_context_id",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 299,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAllocationRepository.get_active_allocations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 328,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "BudgetAllocationRepository.update_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 390,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "class_definition",
            "name": "UsageRecordRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 460,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "UsageRecordRepository.get_usage_for_period",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 468,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "UsageRecordRepository.get_usage_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 543,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "AlertRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 636,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AlertRepository.get_unacknowledged_alerts",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 644,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "AlertRepository.acknowledge_alert",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 684,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "class_definition",
            "name": "ProviderPricingRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 731,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ProviderPricingRepository.get_current_pricing",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 739,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ProviderPricingRepository.get_pricing_history",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 778,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PriceUpdateRecordRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 812,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PriceSourceRepository",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 820,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PriceSourceRepository.get_active_sources",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 828,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PriceSourceRepository.get_sources_for_update",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 851,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PriceSourceRepository.update_source_timestamp",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/data/repository.py",
            "line": 880,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 942,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Budget MCP Bridge.",
            "args": [
              "self",
              "budget_engine",
              "component_name"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 129,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 150,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from budget engine.",
            "args": [
              "self"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "BudgetMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BudgetMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Budget's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Budget to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "budget.core.mcp.get_all_tools",
            "from": "budget.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "budget.api.mcp_endpoints.process_request_func",
            "from": "budget.api.mcp_endpoints",
            "name": "process_request_func",
            "alias": null,
            "line": 91
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 92
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BudgetMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BudgetMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/hermes_bridge.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 202,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "allocate_budget",
            "line": 69,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Handle a budget allocation request.\n\nArgs:\n    context_id: Context ID for this allocation\n    amount: Number of tokens to allocate\n    component: Component requesting allocation\n    tier: Optional budget tier\n    provider: Optional provider name\n    model: Optional model name\n    task_type: Type of task for this allocation\n    priority: Priority of this allocation\n    allocation_manager_instance: Allocation manager (injected)\n    \nReturns:\n    Allocation result",
            "args": [
              "context_id",
              "amount",
              "component",
              "tier",
              "provider",
              "model",
              "task_type",
              "priority",
              "allocation_manager_instance"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_budget",
            "line": 146,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Check if a request is within budget limits.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_text: Input text for token estimation\n    component: Component requesting budget check\n    task_type: Type of task\n    context_id: Optional context ID\n    engine_instance: Budget engine (injected)\n    \nReturns:\n    Budget check result",
            "args": [
              "provider",
              "model",
              "input_text",
              "component",
              "task_type",
              "context_id",
              "engine_instance"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "record_usage",
            "line": 226,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Record token usage for a request.\n\nArgs:\n    provider: Provider name\n    model: Model name\n    input_tokens: Number of input tokens (provide either this OR input_text)\n    output_tokens: Number of output tokens (provide either this OR output_text)\n    input_text: Input text for token counting (provide either this OR input_tokens)\n    output_text: Output text for token counting (provide either this OR output_tokens)\n    component: Component recording usage\n    task_type: Type of task\n    context_id: Context ID for this usage record\n    allocation_id: Optional allocation ID for existing allocation\n    request_id: Optional request ID\n    metadata: Optional metadata\n    allocation_manager_instance: Allocation manager (injected)\n    \nReturns:\n    Usage record result",
            "args": [
              "provider",
              "model",
              "input_tokens",
              "output_tokens",
              "input_text",
              "output_text",
              "component",
              "task_type",
              "context_id",
              "allocation_id",
              "request_id",
              "metadata",
              "allocation_manager_instance"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_budget_status",
            "line": 359,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get budget status for a component or tier.\n\nArgs:\n    period: Budget period ('daily', 'weekly', 'monthly')\n    tier: Optional tier to filter by\n    provider: Optional provider to filter by\n    component: Optional component name (determines response format)\n    engine_instance: Budget engine (injected)\n    \nReturns:\n    Budget status",
            "args": [
              "period",
              "tier",
              "provider",
              "component",
              "engine_instance"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_model_recommendations",
            "line": 472,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get model recommendations based on budget and task.\n\nArgs:\n    provider: Optional provider name\n    model: Optional model name\n    task_type: Type of task\n    context_size: Approximate context size in tokens\n    engine_instance: Budget engine (injected)\n    \nReturns:\n    Model recommendations",
            "args": [
              "provider",
              "model",
              "task_type",
              "context_size",
              "engine_instance"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "route_with_budget_awareness",
            "line": 531,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Route to appropriate model based on budget awareness.\n\nArgs:\n    input_text: Input text for token estimation and task analysis\n    task_type: Type of task\n    default_provider: Default provider name\n    default_model: Default model name\n    component: Component requesting routing\n    engine_instance: Budget engine (injected)\n    \nReturns:\n    Routing decision",
            "args": [
              "input_text",
              "task_type",
              "default_provider",
              "default_model",
              "component",
              "engine_instance"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_usage_analytics",
            "line": 609,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get token usage analytics.\n\nArgs:\n    period: Time period for analytics ('daily', 'weekly', 'monthly')\n    provider: Optional provider name to filter by\n    model: Optional model name to filter by\n    component: Optional component name to filter by\n    task_type: Optional task type to filter by\n    start_date: Optional start date (ISO format)\n    end_date: Optional end date (ISO format)\n    engine_instance: Budget engine (injected)\n    \nReturns:\n    Usage analytics",
            "args": [
              "period",
              "provider",
              "model",
              "component",
              "task_type",
              "start_date",
              "end_date",
              "engine_instance"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_budget_tools",
            "line": 669,
            "async": true,
            "decorators": [],
            "docstring": "Register budget management tools with the MCP service.",
            "args": [
              "engine",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_analytics_tools",
            "line": 693,
            "async": true,
            "decorators": [],
            "docstring": "Register analytics tools with the MCP service.",
            "args": [
              "engine",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 707,
            "async": false,
            "decorators": [],
            "docstring": "Get all Budget MCP tools.",
            "args": [
              "budget_engine_instance"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_capabilities",
            "line": 732,
            "async": false,
            "decorators": [],
            "docstring": "Get all Budget MCP capabilities.",
            "args": [
              "budget_engine_instance"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "allocate_budget",
            "line": 69,
            "decorator": "@mcp_capability"
          },
          {
            "name": "allocate_budget",
            "line": 69,
            "decorator": "@mcp_tool"
          },
          {
            "name": "check_budget",
            "line": 146,
            "decorator": "@mcp_capability"
          },
          {
            "name": "check_budget",
            "line": 146,
            "decorator": "@mcp_tool"
          },
          {
            "name": "record_usage",
            "line": 226,
            "decorator": "@mcp_capability"
          },
          {
            "name": "record_usage",
            "line": 226,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_budget_status",
            "line": 359,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_budget_status",
            "line": 359,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_model_recommendations",
            "line": 472,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_model_recommendations",
            "line": 472,
            "decorator": "@mcp_tool"
          },
          {
            "name": "route_with_budget_awareness",
            "line": 531,
            "decorator": "@mcp_capability"
          },
          {
            "name": "route_with_budget_awareness",
            "line": 531,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_usage_analytics",
            "line": 609,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_usage_analytics",
            "line": 609,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 16
          },
          {
            "module": "budget.data.models.BudgetTier",
            "from": "budget.data.models",
            "name": "BudgetTier",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.BudgetPeriod",
            "from": "budget.data.models",
            "name": "BudgetPeriod",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.BudgetPolicyType",
            "from": "budget.data.models",
            "name": "BudgetPolicyType",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.TaskPriority",
            "from": "budget.data.models",
            "name": "TaskPriority",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.Budget",
            "from": "budget.data.models",
            "name": "Budget",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.BudgetPolicy",
            "from": "budget.data.models",
            "name": "BudgetPolicy",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.BudgetAllocation",
            "from": "budget.data.models",
            "name": "BudgetAllocation",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.UsageRecord",
            "from": "budget.data.models",
            "name": "UsageRecord",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.data.models.Alert",
            "from": "budget.data.models",
            "name": "Alert",
            "alias": null,
            "line": 37
          },
          {
            "module": "budget.adapters.apollo_adapter",
            "from": "budget.adapters",
            "name": "apollo_adapter",
            "alias": null,
            "line": 43
          },
          {
            "module": "budget.adapters.rhetor_adapter",
            "from": "budget.adapters",
            "name": "rhetor_adapter",
            "alias": null,
            "line": 43
          },
          {
            "module": "budget.adapters.apollo_enhanced",
            "from": "budget.adapters",
            "name": "apollo_enhanced",
            "alias": null,
            "line": 43
          },
          {
            "module": "budget.core.engine.budget_engine",
            "from": "budget.core.engine",
            "name": "budget_engine",
            "alias": null,
            "line": 46
          },
          {
            "module": "budget.core.allocation.allocation_manager",
            "from": "budget.core.allocation",
            "name": "allocation_manager",
            "alias": null,
            "line": 47
          },
          {
            "module": "budget.data.repository.budget_repo",
            "from": "budget.data.repository",
            "name": "budget_repo",
            "alias": null,
            "line": 50
          },
          {
            "module": "budget.data.repository.policy_repo",
            "from": "budget.data.repository",
            "name": "policy_repo",
            "alias": null,
            "line": 50
          },
          {
            "module": "budget.data.repository.allocation_repo",
            "from": "budget.data.repository",
            "name": "allocation_repo",
            "alias": null,
            "line": 50
          },
          {
            "module": "budget.data.repository.usage_repo",
            "from": "budget.data.repository",
            "name": "usage_repo",
            "alias": null,
            "line": 50
          },
          {
            "module": "budget.data.repository.alert_repo",
            "from": "budget.data.repository",
            "name": "alert_repo",
            "alias": null,
            "line": 50
          },
          {
            "module": "budget.data.repository.pricing_repo",
            "from": "budget.data.repository",
            "name": "pricing_repo",
            "alias": null,
            "line": 50
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 713
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 738
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "allocate_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "check_budget",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 146,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "record_usage",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 226,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "get_budget_status",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 359,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "get_model_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 472,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "route_with_budget_awareness",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 531,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_usage_analytics",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 609,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "register_budget_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 669,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_analytics_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 693,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 707,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/tools.py",
            "line": 732,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 772,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "BudgetManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 35,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "BudgetManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 58,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ModelRecommendationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 72,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ModelRecommendationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 94,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "BudgetAnalyticsCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 108,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "BudgetAnalyticsCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 130,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "CostOptimizationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 144,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "CostOptimizationCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BudgetManagementCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for budget allocation and resource management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ModelRecommendationCapability",
            "line": 50,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for AI model selection and optimization recommendations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetAnalyticsCapability",
            "line": 86,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for budget analytics and reporting.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "CostOptimizationCapability",
            "line": 122,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for cost optimization and efficiency improvements.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BudgetManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetManagementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetManagementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ModelRecommendationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 50,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ModelRecommendationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 58,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ModelRecommendationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetAnalyticsCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 86,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetAnalyticsCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "BudgetAnalyticsCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "CostOptimizationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 122,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CostOptimizationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CostOptimizationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/core/mcp/capabilities.py",
            "line": 144,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 164,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the web scraper adapter.\n\nArgs:\n    source_id: The ID of the price source in the database\n    source_name: The name of the price source\n    base_url: The base URL of the website\n    scraper_config: Configuration for the scraper\n    cache_dir: Directory for cache files\n    cache_ttl: Cache time-to-live in seconds\n    requests_per_minute: Maximum requests per minute\n    requests_per_day: Maximum requests per day",
            "args": [
              "self",
              "source_id",
              "source_name",
              "base_url",
              "scraper_config",
              "cache_dir",
              "cache_ttl",
              "requests_per_minute",
              "requests_per_day"
            ],
            "class": "WebScraperAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fetch_prices",
            "line": 97,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Fetch pricing data by scraping websites.\n\nReturns:\n    A dictionary of provider -> model -> pricing data\n    \nRaises:\n    Exception: If scraping fails and no fallback is available",
            "args": [
              "self"
            ],
            "class": "WebScraperAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 139,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check if the website is accessible.\n\nReturns:\n    True if the site is accessible, False otherwise",
            "args": [
              "self"
            ],
            "class": "WebScraperAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_fetch_html",
            "line": 160,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Fetch HTML content from a URL.\n\nArgs:\n    url: The URL to fetch\n    \nReturns:\n    The HTML content\n    \nRaises:\n    Exception: If fetching fails",
            "args": [
              "self",
              "url"
            ],
            "class": "WebScraperAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_parse_html",
            "line": 189,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Parse HTML to extract pricing data.\n\nThis is a placeholder that should be overridden by subclasses.\n\nArgs:\n    html: The HTML content to parse\n    \nReturns:\n    Extracted pricing data\n    \nRaises:\n    NotImplementedError: If not implemented by subclass",
            "args": [
              "self",
              "html"
            ],
            "class": "WebScraperAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_fallback_pricing",
            "line": 207,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get fallback pricing data if scraping fails.\n\nReturns:\n    Fallback pricing data\n    \nRaises:\n    Exception: If no fallback is available",
            "args": [
              "self"
            ],
            "class": "WebScraperAdapter",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 242,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLMPrices.com adapter.\n\nArgs:\n    source_id: The ID of the price source in the database\n    cache_dir: Directory for cache files\n    cache_ttl: Cache time-to-live in seconds",
            "args": [
              "self",
              "source_id",
              "cache_dir",
              "cache_ttl"
            ],
            "class": "LLMPricesAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_parse_html",
            "line": 273,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Parse HTML from LLMPrices.com to extract pricing data.\n\nArgs:\n    html: The HTML content to parse\n    \nReturns:\n    Extracted pricing data",
            "args": [
              "self",
              "html"
            ],
            "class": "LLMPricesAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_extract_price",
            "line": 357,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Extract a price value from text.\n\nArgs:\n    price_text: The price text (e.g., \"$0.0001/1K tokens\")\n    \nReturns:\n    The price per token as a float",
            "args": [
              "self",
              "price_text"
            ],
            "class": "LLMPricesAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_guess_provider",
            "line": 381,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Guess the provider from a model name.\n\nArgs:\n    model_name: The model name\n    \nReturns:\n    The guessed provider name",
            "args": [
              "self",
              "model_name"
            ],
            "class": "LLMPricesAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_normalize_provider_model",
            "line": 409,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Normalize provider and model names for consistency.\n\nArgs:\n    provider: The raw provider name\n    model: The raw model name\n    \nReturns:\n    Tuple of (normalized_provider, normalized_model)",
            "args": [
              "self",
              "provider",
              "model"
            ],
            "class": "LLMPricesAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "normalize_model",
            "line": 434,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "provider",
              "model"
            ],
            "class": "LLMPricesAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 458,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Pretrained.ai adapter.\n\nArgs:\n    source_id: The ID of the price source in the database\n    cache_dir: Directory for cache files\n    cache_ttl: Cache time-to-live in seconds",
            "args": [
              "self",
              "source_id",
              "cache_dir",
              "cache_ttl"
            ],
            "class": "PretrainedAIAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_parse_html",
            "line": 489,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Parse HTML from Pretrained.ai to extract pricing data.\n\nArgs:\n    html: The HTML content to parse\n    \nReturns:\n    Extracted pricing data",
            "args": [
              "self",
              "html"
            ],
            "class": "PretrainedAIAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_extract_price",
            "line": 581,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Extract a price value from text.\n\nArgs:\n    price_text: The price text (e.g., \"$0.0001 per 1K tokens\")\n    \nReturns:\n    The price per token as a float",
            "args": [
              "self",
              "price_text"
            ],
            "class": "PretrainedAIAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_normalize_provider",
            "line": 607,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Normalize provider name for consistency.\n\nArgs:\n    provider: The raw provider name\n    \nReturns:\n    Normalized provider name",
            "args": [
              "self",
              "provider"
            ],
            "class": "PretrainedAIAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_normalize_model",
            "line": 635,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Normalize model name for consistency.\n\nArgs:\n    provider: The provider name\n    model_name: The raw model name\n    \nReturns:\n    Normalized model name",
            "args": [
              "self",
              "provider",
              "model_name"
            ],
            "class": "PretrainedAIAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 22,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebScraperAdapter",
            "line": 37,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Base adapter for scraping pricing data from websites.\n\nThis class provides common functionality for website scrapers:\n- HTTP requests with proper headers and error handling\n- HTML parsing with BeautifulSoup\n- Rate limiting to avoid overloading sites\n- Caching to reduce scraping frequency",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMPricesAdapter",
            "line": 237,
            "methods": [
              "__init__",
              "_extract_price",
              "_guess_provider",
              "_normalize_provider_model"
            ],
            "decorators": [],
            "docstring": "Adapter for scraping pricing data from LLMPrices.com.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PretrainedAIAdapter",
            "line": 453,
            "methods": [
              "__init__",
              "_extract_price",
              "_normalize_provider",
              "_normalize_model"
            ],
            "decorators": [],
            "docstring": "Adapter for scraping pricing data from Pretrained.ai.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "re",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "bs4.BeautifulSoup",
            "from": "bs4",
            "name": "BeautifulSoup",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 19
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 19
          },
          {
            "module": "budget.adapters.price_sources.base.PriceSourceAdapter",
            "from": "budget.adapters.price_sources.base",
            "name": "PriceSourceAdapter",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.adapters.price_sources.base.FileCacheAdapter",
            "from": "budget.adapters.price_sources.base",
            "name": "FileCacheAdapter",
            "alias": null,
            "line": 35
          },
          {
            "module": "budget.adapters.price_sources.base.RateLimitedAdapter",
            "from": "budget.adapters.price_sources.base",
            "name": "RateLimitedAdapter",
            "alias": null,
            "line": 35
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WebScraperAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WebScraperAdapter.fetch_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WebScraperAdapter.health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WebScraperAdapter._get_fallback_pricing",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 207,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "class_definition",
            "name": "LLMPricesAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 237,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMPricesAdapter._parse_html",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 273,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "LLMPricesAdapter._guess_provider",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 381,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "LLMPricesAdapter.normalize_model",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 434,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PretrainedAIAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 453,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PretrainedAIAdapter._parse_html",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 489,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PretrainedAIAdapter._normalize_provider",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 607,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PretrainedAIAdapter._normalize_model",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/web_scraper.py",
            "line": 635,
            "priority": "medium",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 667,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LiteLLM adapter.\n\nArgs:\n    source_id: The ID of the price source in the database\n    api_key: LiteLLM API key (optional)\n    cache_dir: Directory for cache files\n    cache_ttl: Cache time-to-live in seconds\n    requests_per_minute: Maximum requests per minute",
            "args": [
              "self",
              "source_id",
              "api_key",
              "cache_dir",
              "cache_ttl",
              "requests_per_minute"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fetch_prices",
            "line": 86,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Fetch pricing data from LiteLLM.\n\nReturns:\n    A dictionary of provider -> model -> pricing data\n    \nRaises:\n    Exception: If fetching prices fails and no fallback is available",
            "args": [
              "self"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 138,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check if the LiteLLM API is accessible.\n\nReturns:\n    True if the API is healthy, False otherwise",
            "args": [
              "self"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_transform_litellm_data",
            "line": 163,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Transform LiteLLM pricing data to our standard format.\n\nArgs:\n    data: The raw data from LiteLLM API\n    \nReturns:\n    Transformed pricing data",
            "args": [
              "self",
              "data"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_parse_model_key",
            "line": 203,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Parse a LiteLLM model key into provider and model.\n\nArgs:\n    model_key: The LiteLLM model key (e.g., \"anthropic/claude-3-opus-20240229\")\n    \nReturns:\n    Tuple of (provider, model)",
            "args": [
              "self",
              "model_key"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_fallback_pricing",
            "line": 227,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get fallback pricing data if API is unavailable.\n\nReturns:\n    Fallback pricing data\n    \nRaises:\n    Exception: If no fallback is available",
            "args": [
              "self"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_get_hardcoded_fallback",
            "line": 261,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get hardcoded fallback pricing data.\n\nReturns:\n    Hardcoded pricing data",
            "args": [
              "self"
            ],
            "class": "LiteLLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 20,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LiteLLMAdapter",
            "line": 35,
            "methods": [
              "__init__",
              "_transform_litellm_data",
              "_parse_model_key",
              "_get_hardcoded_fallback"
            ],
            "decorators": [],
            "docstring": "Adapter for fetching pricing data from LiteLLM.\n\nThis adapter retrieves model pricing information directly from\nLiteLLM's pricing data, which is used for their model routing.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 17
          },
          {
            "module": "budget.adapters.price_sources.base.PriceSourceAdapter",
            "from": "budget.adapters.price_sources.base",
            "name": "PriceSourceAdapter",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.adapters.price_sources.base.FileCacheAdapter",
            "from": "budget.adapters.price_sources.base",
            "name": "FileCacheAdapter",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.adapters.price_sources.base.RateLimitedAdapter",
            "from": "budget.adapters.price_sources.base",
            "name": "RateLimitedAdapter",
            "alias": null,
            "line": 33
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "LiteLLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LiteLLMAdapter.fetch_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 86,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LiteLLMAdapter.health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 138,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LiteLLMAdapter._get_fallback_pricing",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/litellm.py",
            "line": 227,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 346,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
      "analysis": {
        "functions": [
          {
            "name": "__getattr__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dummy_log",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the price source adapter.\n\nArgs:\n    source_id: The ID of the price source in the database\n    source_name: The name of the price source\n    auth_config: Authentication configuration for the source (optional)",
            "args": [
              "self",
              "source_id",
              "source_name",
              "auth_config"
            ],
            "class": "PriceSourceAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fetch_prices",
            "line": 57,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Fetch pricing data from the source.\n\nReturns:\n    A dictionary of provider -> model -> pricing data\n    Format: {\n        \"provider1\": {\n            \"model1\": {\n                \"input_cost_per_token\": 0.0001,\n                \"output_cost_per_token\": 0.0002,\n                ...\n            },\n            ...\n        },\n        ...\n    }\n\nRaises:\n    Exception: If fetching prices fails",
            "args": [
              "self"
            ],
            "class": "PriceSourceAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 81,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Check if the price source is healthy and accessible.\n\nReturns:\n    True if the source is healthy, False otherwise",
            "args": [
              "self"
            ],
            "class": "PriceSourceAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_pricing_object",
            "line": 91,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Create a ProviderPricing object from raw price data.\n\nArgs:\n    provider: The provider name\n    model: The model name\n    price_data: The raw price data for the model\n    \nReturns:\n    A ProviderPricing object",
            "args": [
              "self",
              "provider",
              "model",
              "price_data"
            ],
            "class": "PriceSourceAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_error",
            "line": 139,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Format an error for logging and reporting.\n\nArgs:\n    error: The exception that occurred\n    \nReturns:\n    A dictionary with error details",
            "args": [
              "self",
              "error"
            ],
            "class": "PriceSourceAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 164,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the file cache.\n\nArgs:\n    cache_dir: Directory for cache files (defaults to .cache in current dir)\n    cache_ttl: Cache time-to-live in seconds (defaults to 1 hour)",
            "args": [
              "self",
              "cache_dir",
              "cache_ttl"
            ],
            "class": "FileCacheAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_cache_path",
            "line": 179,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get the cache file path for a key.\n\nArgs:\n    key: The cache key\n    \nReturns:\n    Path to the cache file",
            "args": [
              "self",
              "key"
            ],
            "class": "FileCacheAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_from_cache",
            "line": 194,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Get data from cache if available and not expired.\n\nArgs:\n    key: The cache key\n    \nReturns:\n    Cached data if available and fresh, None otherwise",
            "args": [
              "self",
              "key"
            ],
            "class": "FileCacheAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "save_to_cache",
            "line": 228,
            "async": false,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Save data to cache.\n\nArgs:\n    key: The cache key\n    data: The data to cache\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "key",
              "data"
            ],
            "class": "FileCacheAdapter",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the rate limiter.\n\nArgs:\n    requests_per_minute: Maximum requests per minute\n    requests_per_day: Maximum requests per day (optional)",
            "args": [
              "self",
              "requests_per_minute",
              "requests_per_day"
            ],
            "class": "RateLimitedAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_rate_limit",
            "line": 279,
            "async": true,
            "decorators": [
              "@log_function"
            ],
            "docstring": "Check if current request would exceed rate limits.\n\nReturns:\n    True if request is allowed, False if rate limited",
            "args": [
              "self"
            ],
            "class": "RateLimitedAdapter",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DebugLog",
            "line": 20,
            "methods": [
              "__getattr__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PriceSourceAdapter",
            "line": 35,
            "methods": [
              "__init__",
              "create_pricing_object",
              "format_error"
            ],
            "decorators": [],
            "docstring": "Base class for price source adapters.\n\nThis abstract class defines the interface that all price source adapters\nmust implement to fetch pricing data from external sources.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "FileCacheAdapter",
            "line": 156,
            "methods": [
              "__init__",
              "get_cache_path",
              "get_from_cache",
              "save_to_cache"
            ],
            "decorators": [],
            "docstring": "Mixin for file-based caching of price data.\n\nThis class provides methods for caching price data to disk\nand retrieving it when needed.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RateLimitedAdapter",
            "line": 251,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Mixin for rate-limited access to price sources.\n\nThis class provides methods for rate limiting requests to\nexternal APIs to avoid hitting rate limits.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "abc",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.debug.debug_utils.debug_log",
            "from": "shared.debug.debug_utils",
            "name": "debug_log",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.debug.debug_utils.log_function",
            "from": "shared.debug.debug_utils",
            "name": "log_function",
            "alias": null,
            "line": 17
          },
          {
            "module": "budget.data.models.ProviderPricing",
            "from": "budget.data.models",
            "name": "ProviderPricing",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.PriceType",
            "from": "budget.data.models",
            "name": "PriceType",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.PriceUpdateRecord",
            "from": "budget.data.models",
            "name": "PriceUpdateRecord",
            "alias": null,
            "line": 33
          },
          {
            "module": "budget.data.models.PriceSource",
            "from": "budget.data.models",
            "name": "PriceSource",
            "alias": null,
            "line": 33
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog.dummy_log",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PriceSourceAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PriceSourceAdapter.fetch_prices",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 57,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PriceSourceAdapter.health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PriceSourceAdapter.create_pricing_object",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 91,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "PriceSourceAdapter.format_error",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 139,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "FileCacheAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 156,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FileCacheAdapter.get_cache_path",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 179,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FileCacheAdapter.get_from_cache",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 194,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "FileCacheAdapter.save_to_cache",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 228,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "class_definition",
            "name": "RateLimitedAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 251,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RateLimitedAdapter.check_rate_limit",
            "file": "/Users/cskoons/projects/github/Tekton/Budget/budget/adapters/price_sources/base.py",
            "line": 279,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 310,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 30,
    "total_functions": 450,
    "total_classes": 123,
    "total_landmarks": 473,
    "patterns": [
      "singleton",
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 37,
    "mcp_tools": 14,
    "websocket_handlers": 2,
    "skipped_files": 10
  }
}