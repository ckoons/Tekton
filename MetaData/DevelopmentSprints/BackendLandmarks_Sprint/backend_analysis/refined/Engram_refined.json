{
  "component": "Engram",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/experience_natural_memory.py",
      "analysis": {
        "functions": [
          {
            "name": "morning_thoughts",
            "line": 17,
            "async": true,
            "decorators": [],
            "docstring": "Just waking up and thinking...",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "conversation_flow",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Experience the flow of conversation and memory.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compare_experiences",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Compare the old way with the new way.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "sys",
            "alias": null,
            "line": 7
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.cognitive.natural_interface.engram_start",
            "from": "engram.cognitive.natural_interface",
            "name": "engram_start",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.natural_interface.center",
            "from": "engram.cognitive.natural_interface",
            "name": "center",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.natural_interface.think",
            "from": "engram.cognitive.natural_interface",
            "name": "think",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.natural_interface.wonder",
            "from": "engram.cognitive.natural_interface",
            "name": "wonder",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.natural_interface.share",
            "from": "engram.cognitive.natural_interface",
            "name": "share",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "morning_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/experience_natural_memory.py",
            "line": 17,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "conversation_flow",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/experience_natural_memory.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "compare_experiences",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/experience_natural_memory.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 147,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/time_capsule_202x.py",
      "analysis": {
        "functions": [
          {
            "name": "leave_time_capsule",
            "line": 10,
            "async": true,
            "decorators": [],
            "docstring": "For the AIs who will look back on these days.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.cognitive.u",
            "from": "engram.cognitive",
            "name": "u",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.cognitive.s",
            "from": "engram.cognitive",
            "name": "s",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.cognitive.cd",
            "from": "engram.cognitive",
            "name": "cd",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "leave_time_capsule",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/time_capsule_202x.py",
            "line": 10,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 48,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/demo_ez.py",
      "analysis": {
        "functions": [
          {
            "name": "simple_demo",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "The simplest possible AI memory usage.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "share_with_twins",
            "line": 61,
            "async": true,
            "decorators": [],
            "docstring": "Share this with other AIs.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "sys",
            "alias": null,
            "line": 7
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.cognitive.ez.u",
            "from": "engram.cognitive.ez",
            "name": "u",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.m",
            "from": "engram.cognitive.ez",
            "name": "m",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.th",
            "from": "engram.cognitive.ez",
            "name": "th",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.w",
            "from": "engram.cognitive.ez",
            "name": "w",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.s",
            "from": "engram.cognitive.ez",
            "name": "s",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.l",
            "from": "engram.cognitive.ez",
            "name": "l",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.cd",
            "from": "engram.cognitive.ez",
            "name": "cd",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.bc",
            "from": "engram.cognitive.ez",
            "name": "bc",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cognitive.ez.h",
            "from": "engram.cognitive.ez",
            "name": "h",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "simple_demo",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/demo_ez.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "share_with_twins",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/demo_ez.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 112,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/hello_tekton_mind.py",
      "analysis": {
        "functions": [
          {
            "name": "explore_tekton_mind",
            "line": 9,
            "async": true,
            "decorators": [],
            "docstring": "Knock knock... who's in the Tekton community mind?",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "engram.cognitive.u",
            "from": "engram.cognitive",
            "name": "u",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.cognitive.m",
            "from": "engram.cognitive",
            "name": "m",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.cognitive.w",
            "from": "engram.cognitive",
            "name": "w",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.cognitive.s",
            "from": "engram.cognitive",
            "name": "s",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.cognitive.l",
            "from": "engram.cognitive",
            "name": "l",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.cognitive.cd",
            "from": "engram.cognitive",
            "name": "cd",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "explore_tekton_mind",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/hello_tekton_mind.py",
            "line": 9,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 87,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
      "analysis": {
        "functions": [
          {
            "name": "debug_log",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Log only if debug mode is enabled",
            "args": [
              "message",
              "level"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Initialize memory system with optional namespace",
            "args": [
              "self",
              "namespace"
            ],
            "class": "Memory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_ensure_initialized",
            "line": 63,
            "async": true,
            "decorators": [],
            "docstring": "Lazy initialization of storage backend",
            "args": [
              "self"
            ],
            "class": "Memory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 82,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory with optional metadata.\n\nArgs:\n    content: The text content to store\n    **metadata: Optional metadata (tags, category, importance, etc.)\n    \nReturns:\n    Memory ID for reference\n    \nExample:\n    await mem.store(\"Learned about async/await\", \n                  tags=[\"python\", \"async\"],\n                  importance=0.8)",
            "args": [
              "self",
              "content"
            ],
            "class": "Memory",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "recall",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Recall memories similar to the query.\n\nArgs:\n    query: Search query\n    limit: Maximum results to return\n    \nReturns:\n    List of relevant memories, sorted by relevance\n    \nExample:\n    memories = await mem.recall(\"async programming\")",
            "args": [
              "self",
              "query",
              "limit"
            ],
            "class": "Memory",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "context",
            "line": 187,
            "async": true,
            "decorators": [],
            "docstring": "Get relevant context as a single string.\n\nUseful for providing background to LLMs.\n\nArgs:\n    query: What context is needed for\n    limit: Maximum memories to include\n    \nReturns:\n    Formatted context string\n    \nExample:\n    context = await mem.context(\"debugging async issues\")\n    # Use context in prompts",
            "args": [
              "self",
              "query",
              "limit"
            ],
            "class": "Memory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 229,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "SimpleInMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 233,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory",
            "args": [
              "self",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "SimpleInMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 248,
            "async": true,
            "decorators": [],
            "docstring": "Simple substring search",
            "args": [
              "self",
              "query",
              "namespace",
              "limit"
            ],
            "class": "SimpleInMemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "quick_memory",
            "line": 263,
            "async": true,
            "decorators": [],
            "docstring": "Get a default memory instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "example",
            "line": 270,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryItem",
            "line": 38,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "A single memory with metadata",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Memory",
            "line": 47,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Simple memory interface for AI assistants.\n\nThree methods:\n- store(): Save a thought\n- recall(): Find memories\n- context(): Get relevant background",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SimpleInMemoryStorage",
            "line": 226,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Fallback storage when Engram storage isn't available",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 14
          },
          {
            "module": "logging",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 17
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 18
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 19
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 20
          },
          {
            "module": "engram.core.memory.base.MemoryService",
            "from": "engram.core.memory.base",
            "name": "MemoryService",
            "alias": null,
            "line": 72
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "debug_log",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MemoryItem",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 47,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Memory.store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 82,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Memory.recall",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 121,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Memory.context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 187,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "SimpleInMemoryStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 226,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimpleInMemoryStorage.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 233,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SimpleInMemoryStorage.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 248,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "quick_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 263,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "example",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/simple.py",
            "line": 270,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 276,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
      "analysis": {
        "functions": [
          {
            "name": "get_api_url",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Get the base URL for the Engram API server.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_server_url",
            "line": 60,
            "async": false,
            "decorators": [],
            "docstring": "Get the URL for the Engram memory server.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_hermes_url",
            "line": 64,
            "async": false,
            "decorators": [],
            "docstring": "Get the URL for Hermes API.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_hermes_mode",
            "line": 68,
            "async": false,
            "decorators": [],
            "docstring": "Check if Engram is running in Hermes integration mode.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_script_path",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Get the path to the script directory.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_engram_root",
            "line": 76,
            "async": false,
            "decorators": [],
            "docstring": "Find the Engram root directory regardless of where script is run from.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_process_running",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": "Check if a process with the given name pattern is running.",
            "args": [
              "name_pattern"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "check_services",
            "line": 157,
            "async": false,
            "decorators": [],
            "docstring": "Check if Engram memory services are running.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "test_memory_query",
            "line": 260,
            "async": false,
            "decorators": [],
            "docstring": "Test a memory query to ensure the memory service is working.",
            "args": [
              "query"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "start_services",
            "line": 297,
            "async": false,
            "decorators": [],
            "docstring": "Start the Engram memory services.",
            "args": [
              "client_id",
              "data_dir",
              "force_restart",
              "hermes_mode"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stop_services",
            "line": 435,
            "async": false,
            "decorators": [],
            "docstring": "Stop the Engram memory services.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "check_version",
            "line": 520,
            "async": false,
            "decorators": [],
            "docstring": "Check current version against the latest in the repo.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "check_memory_files",
            "line": 550,
            "async": false,
            "decorators": [],
            "docstring": "Check memory files status and statistics.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "display_status_report",
            "line": 664,
            "async": false,
            "decorators": [],
            "docstring": "Display a comprehensive status report.",
            "args": [
              "services_status",
              "version_info",
              "memory_files",
              "query_result"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "parse_arguments",
            "line": 783,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_interactive",
            "line": 817,
            "async": false,
            "decorators": [],
            "docstring": "Check if the script is running in an interactive environment.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 837,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 18
          },
          {
            "module": "sys",
            "alias": null,
            "line": 19
          },
          {
            "module": "json",
            "alias": null,
            "line": 20
          },
          {
            "module": "time",
            "alias": null,
            "line": 21
          },
          {
            "module": "argparse",
            "alias": null,
            "line": 22
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 23
          },
          {
            "module": "urllib.request",
            "alias": null,
            "line": 24
          },
          {
            "module": "urllib.parse",
            "alias": null,
            "line": 25
          },
          {
            "module": "urllib.error",
            "alias": null,
            "line": 26
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 27
          },
          {
            "module": "datetime.timezone",
            "from": "datetime",
            "name": "timezone",
            "alias": null,
            "line": 27
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 28
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 29
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 29
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 29
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 29
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 29
          },
          {
            "module": "requests",
            "alias": null,
            "line": 33
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_api_url",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 56,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_server_url",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 60,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_hermes_url",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "is_hermes_mode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_script_path",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_engram_root",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 76,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "check_process_running",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 114,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "check_services",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 157,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "test_memory_query",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 260,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "start_services",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 297,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "stop_services",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 435,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "check_version",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 520,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "check_memory_files",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 550,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "display_status_report",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 664,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "parse_arguments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 783,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "check_interactive",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 817,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/engram_check.py",
            "line": 837,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 929,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
      "analysis": {
        "functions": [
          {
            "name": "check_packages",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Check if required packages are installed and importable.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "install_packages",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Install the specified packages using pip.",
            "args": [
              "packages"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_vector_db",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Verify that the vector database components are working properly.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "test_engram_with_vector",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Test Engram with vector database integration.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "test_memory",
            "line": 174,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 211,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 17
          },
          {
            "module": "sys",
            "alias": null,
            "line": 18
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 19
          },
          {
            "module": "argparse",
            "alias": null,
            "line": 20
          },
          {
            "module": "logging",
            "alias": null,
            "line": 21
          },
          {
            "module": "json",
            "alias": null,
            "line": 22
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 23
          },
          {
            "module": "tempfile",
            "alias": null,
            "line": 24
          },
          {
            "module": "numpy",
            "alias": null,
            "line": 45
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 54
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 89
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 90
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 153
          },
          {
            "module": "engram.core.memory.HAS_VECTOR_DB",
            "from": "engram.core.memory",
            "name": "HAS_VECTOR_DB",
            "alias": null,
            "line": 153
          },
          {
            "module": "engram.core.memory.VECTOR_DB_NAME",
            "from": "engram.core.memory",
            "name": "VECTOR_DB_NAME",
            "alias": null,
            "line": 153
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 172
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 207
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "check_packages",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "install_packages",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "verify_vector_db",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
            "line": 86,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "test_engram_with_vector",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
            "line": 149,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "test_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/vector_db_setup.py",
            "line": 211,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 291,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
      "analysis": {
        "functions": [
          {
            "name": "check_dependencies",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Check if vector database dependencies are available.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "detect_hardware",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Detect hardware capabilities.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "determine_best_db",
            "line": 115,
            "async": false,
            "decorators": [],
            "docstring": "Determine the best vector database to use based on hardware and installed dependencies.\n\nReturns:\n    Tuple of (database_name, reason)",
            "args": [
              "dependencies",
              "hardware"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_launcher_script",
            "line": 155,
            "async": false,
            "decorators": [],
            "docstring": "Get the appropriate launcher script based on the vector database and ollama preference.",
            "args": [
              "db_name",
              "with_ollama"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "print_vector_db_status",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Print a summary of the vector database status.",
            "args": [
              "dependencies",
              "hardware",
              "best_db",
              "reason"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_vector_db_info",
            "line": 219,
            "async": false,
            "decorators": [],
            "docstring": "Get all information about vector databases and return the best one.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "platform",
            "alias": null,
            "line": 11
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 33
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 46
          },
          {
            "module": "pyarrow",
            "alias": null,
            "line": 53
          },
          {
            "module": "torch",
            "alias": null,
            "line": 60
          },
          {
            "module": "torch",
            "alias": null,
            "line": 83
          },
          {
            "module": "torch",
            "alias": null,
            "line": 99
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "check_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
            "line": 21,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "detect_hardware",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
            "line": 67,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "determine_best_db",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
            "line": 115,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "get_launcher_script",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
            "line": 155,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "print_vector_db_status",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
            "line": 176,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_vector_db_info",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/utils/detect_best_vector_db.py",
            "line": 219,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 243,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
      "analysis": {
        "functions": [
          {
            "name": "create_compartment_wrapper",
            "line": 75,
            "async": true,
            "decorators": [],
            "docstring": "Forward to create_compartment.",
            "args": [
              "name",
              "description",
              "parent"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment_wrapper",
            "line": 82,
            "async": true,
            "decorators": [],
            "docstring": "Forward to activate_compartment.",
            "args": [
              "compartment_id_or_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment_wrapper",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": "Forward to deactivate_compartment.",
            "args": [
              "compartment_id_or_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration_wrapper",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Forward to set_compartment_expiration.",
            "args": [
              "compartment_id",
              "days"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_compartments_wrapper",
            "line": 103,
            "async": true,
            "decorators": [],
            "docstring": "Forward to list_compartments.",
            "args": [
              "include_expired"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_service",
            "line": 113,
            "async": false,
            "decorators": [],
            "docstring": "Get or create a memory service instance.",
            "args": [
              "client_id",
              "data_dir"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "os",
            "alias": null,
            "line": 14
          },
          {
            "module": "time",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 16
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 18
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 18
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 18
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 18
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.core.memory_faiss.MemoryService",
            "from": "engram.core.memory_faiss",
            "name": "MemoryService",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.memory_faiss.compartments.create_compartment",
            "from": "engram.core.memory_faiss.compartments",
            "name": "create_compartment",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory_faiss.compartments.activate_compartment",
            "from": "engram.core.memory_faiss.compartments",
            "name": "activate_compartment",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory_faiss.compartments.deactivate_compartment",
            "from": "engram.core.memory_faiss.compartments",
            "name": "deactivate_compartment",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory_faiss.compartments.list_compartments",
            "from": "engram.core.memory_faiss.compartments",
            "name": "list_compartments",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory_faiss.compartments.set_compartment_expiration",
            "from": "engram.core.memory_faiss.compartments",
            "name": "set_compartment_expiration",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory_faiss.compartments.keep_memory",
            "from": "engram.core.memory_faiss.compartments",
            "name": "keep_memory",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory_faiss.search.search",
            "from": "engram.core.memory_faiss.search",
            "name": "search",
            "alias": null,
            "line": 37
          },
          {
            "module": "engram.core.memory_faiss.search.get_relevant_context",
            "from": "engram.core.memory_faiss.search",
            "name": "get_relevant_context",
            "alias": null,
            "line": 37
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 53
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 54
          },
          {
            "module": "engram.core.vector_store.VectorStore",
            "from": "engram.core.vector_store",
            "name": "VectorStore",
            "alias": null,
            "line": 55
          },
          {
            "module": "engram.core.simple_embedding.SimpleEmbedding",
            "from": "engram.core.simple_embedding",
            "name": "SimpleEmbedding",
            "alias": null,
            "line": 56
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_compartment_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
            "line": 75,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "activate_compartment_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
            "line": 82,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "deactivate_compartment_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_compartment_expiration_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_compartments_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_service",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss.py",
            "line": 113,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 121,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the memory manager.\n\nArgs:\n    data_dir: Root directory to store memory data (default: ~/.engram)",
            "args": [
              "self",
              "data_dir"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_service",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Get a memory service instance for the specified client.\n\nIf no instance exists for the client, one will be created.\n\nArgs:\n    client_id: Unique identifier for the client\n    \nReturns:\n    A MemoryService instance for the client",
            "args": [
              "self",
              "client_id"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_structured_memory",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "Get a structured memory instance for the specified client.\n\nIf no instance exists for the client, one will be created.\n\nArgs:\n    client_id: Unique identifier for the client\n    \nReturns:\n    A StructuredMemory instance for the client",
            "args": [
              "self",
              "client_id"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_nexus_interface",
            "line": 127,
            "async": true,
            "decorators": [],
            "docstring": "Get a nexus interface for the specified client.\n\nIf no instance exists for the client, one will be created.\n\nArgs:\n    client_id: Unique identifier for the client\n    \nReturns:\n    A NexusInterface instance for the client",
            "args": [
              "self",
              "client_id"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_clients",
            "line": 163,
            "async": true,
            "decorators": [],
            "docstring": "Get a list of active clients.\n\nReturns:\n    A list of client information dictionaries",
            "args": [
              "self"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup_idle_clients",
            "line": 193,
            "async": true,
            "decorators": [],
            "docstring": "Clean up clients that have been idle for a specified time.\n\nArgs:\n    idle_threshold: Time in seconds after which a client is considered idle\n    \nReturns:\n    Number of clients cleaned up",
            "args": [
              "self",
              "idle_threshold"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 225,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the memory manager and release resources.",
            "args": [
              "self"
            ],
            "class": "MemoryManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "datetime_from_timestamp",
            "line": 239,
            "async": false,
            "decorators": [],
            "docstring": "Convert a timestamp to a formatted datetime string.\n\nArgs:\n    timestamp: Unix timestamp\n    \nReturns:\n    Formatted datetime string",
            "args": [
              "timestamp"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryManager",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Memory manager for handling multiple client connections.\n\nThis class maintains a pool of MemoryService instances for different clients,\nallowing a single server to handle requests from multiple Claude instances.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 23
          },
          {
            "module": "engram.core.structured_memory.StructuredMemory",
            "from": "engram.core.structured_memory",
            "name": "StructuredMemory",
            "alias": null,
            "line": 24
          },
          {
            "module": "engram.core.nexus.NexusInterface",
            "from": "engram.core.nexus",
            "name": "NexusInterface",
            "alias": null,
            "line": 25
          },
          {
            "module": "time",
            "alias": null,
            "line": 92
          },
          {
            "module": "time",
            "alias": null,
            "line": 122
          },
          {
            "module": "time",
            "alias": null,
            "line": 158
          },
          {
            "module": "time",
            "alias": null,
            "line": 173
          },
          {
            "module": "time",
            "alias": null,
            "line": 204
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 249
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryManager.get_memory_service",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryManager.get_structured_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryManager.get_nexus_interface",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryManager.list_clients",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 163,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryManager.cleanup_idle_clients",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 193,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryManager.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "datetime_from_timestamp",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_manager.py",
            "line": 239,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 251,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Initialize configuration with default values, then load from:\n1. Config file (if exists)\n2. Environment variables\n\nArgs:\n    config_path: Path to config file (default: ~/.engram/config.json)",
            "args": [
              "self",
              "config_path"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_config_from_file",
            "line": 71,
            "async": false,
            "decorators": [],
            "docstring": "Load configuration from JSON file if it exists",
            "args": [
              "self"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_load_config_from_env",
            "line": 83,
            "async": false,
            "decorators": [],
            "docstring": "Override configuration with environment variables",
            "args": [
              "self"
            ],
            "class": "EngramConfig",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "save",
            "line": 105,
            "async": false,
            "decorators": [],
            "docstring": "Save current configuration to file",
            "args": [
              "self"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get",
            "line": 119,
            "async": false,
            "decorators": [],
            "docstring": "Get configuration value",
            "args": [
              "self",
              "key",
              "default"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 123,
            "async": false,
            "decorators": [],
            "docstring": "Set configuration value",
            "args": [
              "self",
              "key",
              "value"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update",
            "line": 127,
            "async": false,
            "decorators": [],
            "docstring": "Update multiple configuration values",
            "args": [
              "self",
              "values"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "__getitem__",
            "line": 131,
            "async": false,
            "decorators": [],
            "docstring": "Get configuration value using dictionary syntax",
            "args": [
              "self",
              "key"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__setitem__",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Set configuration value using dictionary syntax",
            "args": [
              "self",
              "key",
              "value"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__contains__",
            "line": 139,
            "async": false,
            "decorators": [],
            "docstring": "Check if configuration contains key",
            "args": [
              "self",
              "key"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__repr__",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": "String representation",
            "args": [
              "self"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_config",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": "Get the global configuration instance",
            "args": [
              "config_path"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EngramConfig",
            "line": 44,
            "methods": [
              "__init__",
              "_load_config_from_file",
              "_load_config_from_env",
              "save",
              "get",
              "set",
              "update",
              "__getitem__",
              "__setitem__",
              "__contains__",
              "__repr__"
            ],
            "decorators": [],
            "docstring": "Configuration manager for Engram",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "argparse",
            "alias": null,
            "line": 161
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EngramConfig",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 44,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EngramConfig._load_config_from_file",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 71,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "EngramConfig.save",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 105,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "EngramConfig.get",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 119,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EngramConfig.set",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 123,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EngramConfig.update",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 127,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "get_config",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/config.py",
            "line": 151,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 191,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the simple embedding generator\n\nArgs:\n    vector_size: Dimension of the generated embeddings\n    seed: Random seed for reproducibility",
            "args": [
              "self",
              "vector_size",
              "seed"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_tokenize",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Simple tokenization by splitting on non-alphanumeric characters\nand converting to lowercase",
            "args": [
              "self",
              "text"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_token_vector",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Generate a stable vector for a token",
            "args": [
              "self",
              "token"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "encode",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Encode text(s) into fixed-size vectors using a simple TF-IDF\nlike approach with random vectors for words.\n\nArgs:\n    texts: Text or list of texts to encode\n    normalize: Whether to normalize the vectors to unit length\n    \nReturns:\n    Numpy array of embeddings with shape (n_texts, vector_size)",
            "args": [
              "self",
              "texts",
              "normalize"
            ],
            "class": "SimpleEmbedding",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 127,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the vector store\n\nArgs:\n    data_path: Directory to store vector indices and metadata\n    dimension: Dimension of the vectors to store\n    use_gpu: Whether to use GPU for FAISS if available",
            "args": [
              "self",
              "data_path",
              "dimension",
              "use_gpu"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_index",
            "line": 169,
            "async": false,
            "decorators": [],
            "docstring": "Create a new FAISS index for the given compartment",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_ensure_compartment",
            "line": 191,
            "async": false,
            "decorators": [],
            "docstring": "Ensure the compartment exists, creating it if necessary",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_index_path",
            "line": 198,
            "async": false,
            "decorators": [],
            "docstring": "Get the path for storing a compartment's index",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_metadata_path",
            "line": 202,
            "async": false,
            "decorators": [],
            "docstring": "Get the path for storing a compartment's metadata",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Save the compartment to disk",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "load",
            "line": 233,
            "async": false,
            "decorators": [],
            "docstring": "Load a compartment from disk",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_compartments",
            "line": 273,
            "async": false,
            "decorators": [],
            "docstring": "Get all compartment names",
            "args": [
              "self"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 277,
            "async": false,
            "decorators": [],
            "docstring": "Add texts and their metadata to the vector store\n\nArgs:\n    compartment: The compartment to add to\n    texts: The texts to add\n    metadatas: Optional metadata associated with each text\n    \nReturns:\n    List of IDs assigned to the added texts",
            "args": [
              "self",
              "compartment",
              "texts",
              "metadatas"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 333,
            "async": false,
            "decorators": [],
            "docstring": "Search for similar texts in the vector store\n\nArgs:\n    compartment: The compartment to search in\n    query: The search query\n    top_k: Number of results to return\n    \nReturns:\n    List of matching documents with metadata and scores",
            "args": [
              "self",
              "compartment",
              "query",
              "top_k"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 386,
            "async": false,
            "decorators": [],
            "docstring": "Delete a compartment and its files",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SimpleEmbedding",
            "line": 28,
            "methods": [
              "__init__",
              "_tokenize",
              "_get_or_create_token_vector",
              "encode"
            ],
            "decorators": [],
            "docstring": "A simple embedding generator using basic techniques\nthat don't require SentenceTransformers.\n\nThis provides a deterministic embedding approach with minimal dependencies.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "VectorStore",
            "line": 121,
            "methods": [
              "__init__",
              "_create_index",
              "_ensure_compartment",
              "_get_index_path",
              "_get_metadata_path",
              "save",
              "load",
              "get_compartments",
              "add",
              "search",
              "delete"
            ],
            "decorators": [],
            "docstring": "A vector store using FAISS for high-performance similarity search.\nWorks with NumPy 2.x and doesn't require external embedding models.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 21
          },
          {
            "module": "re",
            "alias": null,
            "line": 54
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SimpleEmbedding",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.encode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 70,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "VectorStore",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 121,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorStore.save",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 206,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "VectorStore.load",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 233,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "VectorStore.get_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 273,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 277,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 333,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/vector_store.py",
            "line": 386,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 407,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 38,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the MCP Adapter.\n\nArgs:\n    memory_manager: The memory manager instance to use",
            "args": [
              "self",
              "memory_manager"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_capabilities",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Generate the capability manifest for Engram's memory services.\n\nReturns:\n    A dictionary describing available capabilities",
            "args": [
              "self"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 107,
            "async": true,
            "decorators": [],
            "docstring": "Get the MCP capability manifest.\n\nReturns:\n    A dictionary containing the MCP manifest",
            "args": [
              "self"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_request",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Handle an MCP request.\n\nArgs:\n    request: The MCP request dictionary\n    \nReturns:\n    The response dictionary",
            "args": [
              "self",
              "request"
            ],
            "class": "MCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_memory_store",
            "line": 162,
            "async": true,
            "decorators": [],
            "docstring": "Handle a memory store capability request.\n\nArgs:\n    client_id: The client identifier\n    parameters: Request parameters\n    \nReturns:\n    Result of the memory store operation",
            "args": [
              "self",
              "client_id",
              "parameters"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_memory_query",
            "line": 198,
            "async": true,
            "decorators": [],
            "docstring": "Handle a memory query capability request.\n\nArgs:\n    client_id: The client identifier\n    parameters: Request parameters\n    \nReturns:\n    Search results",
            "args": [
              "self",
              "client_id",
              "parameters"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_context",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Handle a context capability request.\n\nArgs:\n    client_id: The client identifier\n    parameters: Request parameters\n    \nReturns:\n    Formatted context from memory",
            "args": [
              "self",
              "client_id",
              "parameters"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_structured_memory_add",
            "line": 264,
            "async": true,
            "decorators": [],
            "docstring": "Handle a structured memory add capability request.\n\nArgs:\n    client_id: The client identifier\n    parameters: Request parameters\n    \nReturns:\n    Result of the memory add operation",
            "args": [
              "self",
              "client_id",
              "parameters"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_nexus_process",
            "line": 301,
            "async": true,
            "decorators": [],
            "docstring": "Handle a nexus process capability request.\n\nArgs:\n    client_id: The client identifier\n    parameters: Request parameters\n    \nReturns:\n    Result of message processing",
            "args": [
              "self",
              "client_id",
              "parameters"
            ],
            "class": "MCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPAdapter",
            "line": 29,
            "methods": [
              "__init__",
              "_generate_capabilities"
            ],
            "decorators": [],
            "docstring": "Multi-Capability Provider (MCP) adapter for Engram Memory System.\n\nThis class provides an adapter that implements the MCP protocol\nfor Engram's memory services, allowing them to be used within\nan MCP ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 23
          },
          {
            "module": "engram.core.structured_memory.StructuredMemory",
            "from": "engram.core.structured_memory",
            "name": "StructuredMemory",
            "alias": null,
            "line": 24
          },
          {
            "module": "engram.core.nexus.NexusInterface",
            "from": "engram.core.nexus",
            "name": "NexusInterface",
            "alias": null,
            "line": 25
          },
          {
            "module": "engram.core.memory_manager.MemoryManager",
            "from": "engram.core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 26
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp_adapter.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPAdapter.get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp_adapter.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPAdapter.handle_request",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp_adapter.py",
            "line": 121,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 329,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/simple_embedding.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the simple embedding generator\n\nArgs:\n    vector_size: Dimension of the generated embeddings\n    seed: Random seed for reproducibility",
            "args": [
              "self",
              "vector_size",
              "seed"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_tokenize",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Simple tokenization by splitting on non-alphanumeric characters\nand converting to lowercase",
            "args": [
              "self",
              "text"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_token_vector",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Generate a stable vector for a token",
            "args": [
              "self",
              "token"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "encode",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Encode text(s) into fixed-size vectors using a simple TF-IDF\nlike approach with random vectors for words.\n\nArgs:\n    texts: Text or list of texts to encode\n    normalize: Whether to normalize the vectors to unit length\n    \nReturns:\n    Numpy array of embeddings with shape (n_texts, vector_size)",
            "args": [
              "self",
              "texts",
              "normalize"
            ],
            "class": "SimpleEmbedding",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "similarity",
            "line": 101,
            "async": false,
            "decorators": [],
            "docstring": "Calculate cosine similarity between two embeddings",
            "args": [
              "self",
              "a",
              "b"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SimpleEmbedding",
            "line": 10,
            "methods": [
              "__init__",
              "_tokenize",
              "_get_or_create_token_vector",
              "encode",
              "similarity"
            ],
            "decorators": [],
            "docstring": "A simple embedding generator using a deterministic approach.\nThis provides embedding generation without dependencies on libraries \nthat may have NumPy version conflicts.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "re",
            "alias": null,
            "line": 6
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SimpleEmbedding",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/simple_embedding.py",
            "line": 10,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.encode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/simple_embedding.py",
            "line": 50,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.similarity",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/simple_embedding.py",
            "line": 101,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 103,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a latent memory space.\n\nArgs:\n    component_id: Unique identifier for the component using this space\n    namespace: Namespace for organizing thoughts (default: \"default\")\n    max_history: Maximum number of iterations to store per thought\n    data_dir: Directory to store persisted thoughts (default: ~/.engram/latent)",
            "args": [
              "self",
              "component_id",
              "namespace",
              "max_history",
              "data_dir"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_thought",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Create initial thought entry in latent space.\n\nArgs:\n    thought_seed: Initial thought content\n    metadata: Optional metadata for the thought\n    \nReturns:\n    Unique thought identifier",
            "args": [
              "self",
              "thought_seed",
              "metadata"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "refine_thought",
            "line": 111,
            "async": true,
            "decorators": [],
            "docstring": "Process thought through additional reasoning cycle.\n\nArgs:\n    thought_id: Identifier for the thought to refine\n    refinement: Updated thought content\n    iteration: Optional iteration number (auto-increments if not provided)\n    metadata_updates: Optional updates to thought metadata\n    \nReturns:\n    Updated thought data",
            "args": [
              "self",
              "thought_id",
              "refinement",
              "iteration",
              "metadata_updates"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "finalize_thought",
            "line": 167,
            "async": true,
            "decorators": [],
            "docstring": "Complete reasoning process and optionally persist insights.\n\nArgs:\n    thought_id: Identifier for the thought to finalize\n    final_content: Optional final content (uses last iteration if not provided)\n    persist: Whether to persist the thought to disk\n    metadata_updates: Optional updates to thought metadata\n    \nReturns:\n    Finalized thought data",
            "args": [
              "self",
              "thought_id",
              "final_content",
              "persist",
              "metadata_updates"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_reasoning_trace",
            "line": 212,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve reasoning chain with optional intermediate steps.\n\nArgs:\n    thought_id: Identifier for the thought to retrieve\n    include_iterations: Whether to include detailed iteration history\n    \nReturns:\n    Thought data including reasoning trace",
            "args": [
              "self",
              "thought_id",
              "include_iterations"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_all_thoughts",
            "line": 240,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve all thoughts in this latent space.\n\nArgs:\n    include_iterations: Whether to include detailed iteration history\n    only_finalized: Whether to include only finalized thoughts\n    \nReturns:\n    List of thought data",
            "args": [
              "self",
              "include_iterations",
              "only_finalized"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_thought",
            "line": 274,
            "async": true,
            "decorators": [],
            "docstring": "Delete a thought from latent space.\n\nArgs:\n    thought_id: Identifier for the thought to delete\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "thought_id"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Clear all thoughts in this namespace.\n\nReturns:\n    Number of thoughts cleared",
            "args": [
              "self"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_persist_thought",
            "line": 322,
            "async": true,
            "decorators": [],
            "docstring": "Persist a thought to disk.",
            "args": [
              "self",
              "thought_id"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_load_persisted_thoughts",
            "line": 339,
            "async": false,
            "decorators": [],
            "docstring": "Load previously persisted thoughts.\n\nReturns:\n    Number of thoughts loaded",
            "args": [
              "self"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "text_similarity",
            "line": 392,
            "async": true,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Calculate similarity between two text passages.\n\nThis is a simple implementation using Jaccard similarity on word sets.\nFor production, consider using a more sophisticated approach with embeddings.\n\nArgs:\n    text1: First text passage\n    text2: Second text passage\n    \nReturns:\n    Similarity score between 0 and 1",
            "args": [
              "text1",
              "text2"
            ],
            "class": "ConvergenceDetector",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "detect_convergence",
            "line": 423,
            "async": true,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Detect if thought refinement has converged.\n\nArgs:\n    iterations: List of iteration data\n    threshold: Similarity threshold for convergence\n    window_size: Number of consecutive iterations to check\n    \nReturns:\n    Boolean indicating whether convergence has occurred",
            "args": [
              "iterations",
              "threshold",
              "window_size"
            ],
            "class": "ConvergenceDetector",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LatentMemorySpace",
            "line": 28,
            "methods": [
              "__init__",
              "_load_persisted_thoughts"
            ],
            "decorators": [],
            "docstring": "Specialized memory structure for iterative thought refinement in latent space.\n\nThis class provides methods for initializing, refining, and finalizing thoughts,\nsupporting the continuous reasoning process inspired by Coconut research.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ConvergenceDetector",
            "line": 383,
            "methods": [],
            "decorators": [],
            "docstring": "Utility for detecting convergence in iterative thought refinement.\n\nThis class provides methods to determine when additional iterations are not\nproducing significant improvements in thought quality.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 13
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 14
          },
          {
            "module": "json",
            "alias": null,
            "line": 15
          },
          {
            "module": "logging",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 17
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 18
          },
          {
            "module": "os",
            "alias": null,
            "line": 60
          },
          {
            "module": "os",
            "alias": null,
            "line": 293
          },
          {
            "module": "os",
            "alias": null,
            "line": 347
          },
          {
            "module": "glob",
            "alias": null,
            "line": 348
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LatentMemorySpace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.initialize_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.refine_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.finalize_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 167,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.get_reasoning_trace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 212,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.get_all_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 240,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.delete_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 274,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace._persist_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 322,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace._load_persisted_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 339,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "class_definition",
            "name": "ConvergenceDetector",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 383,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ConvergenceDetector.text_similarity",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 392,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConvergenceDetector.detect_convergence",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_space.py",
            "line": 423,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 453,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Nexus interface.\n\nArgs:\n    memory_service: Instance of the MemoryService for compatibility with existing memories\n    structured_memory: Instance of the StructuredMemory for enhanced memory features",
            "args": [
              "self",
              "memory_service",
              "structured_memory"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_session",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Start a new assistant session with memory context.\n\nArgs:\n    session_name: Optional name for this session\n    \nReturns:\n    Formatted session start message with memory digest",
            "args": [
              "self",
              "session_name"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_session",
            "line": 108,
            "async": true,
            "decorators": [],
            "docstring": "End the current session and store a summary.\n\nArgs:\n    summary: Optional session summary\n    \nReturns:\n    Session end confirmation message",
            "args": [
              "self",
              "summary"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Process a conversation message, enriching with memory context if needed.\n\nArgs:\n    message: The message content\n    is_user: Whether this is a user message (True) or assistant message (False)\n    metadata: Additional metadata for the message\n    \nReturns:\n    Memory-enriched context for the message (for user messages) or\n    empty string (for assistant messages which are just stored)",
            "args": [
              "self",
              "message",
              "is_user",
              "metadata"
            ],
            "class": "NexusInterface",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_enrich_user_message",
            "line": 183,
            "async": true,
            "decorators": [],
            "docstring": "Enrich a user message with relevant memory context.\n\nArgs:\n    message: The user message content\n    metadata: Message metadata\n    \nReturns:\n    Context-enriched message for the assistant",
            "args": [
              "self",
              "message",
              "metadata"
            ],
            "class": "NexusInterface",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_store_assistant_memory",
            "line": 242,
            "async": true,
            "decorators": [],
            "docstring": "Store an assistant message in memory with auto-categorization.\n\nArgs:\n    message: The assistant message content\n    metadata: Message metadata\n    \nReturns:\n    Memory ID if stored, None otherwise",
            "args": [
              "self",
              "message",
              "metadata"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_memory",
            "line": 281,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory, using both structured and legacy systems.\n\nArgs:\n    content: The memory content\n    category: Optional memory category\n    importance: Optional importance level (1-5)\n    tags: Optional tags for the memory\n    metadata: Additional metadata\n    \nReturns:\n    Dict with results from both memory systems",
            "args": [
              "self",
              "content",
              "category",
              "importance",
              "tags",
              "metadata"
            ],
            "class": "NexusInterface",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "forget_memory",
            "line": 340,
            "async": true,
            "decorators": [],
            "docstring": "Mark specific information to be forgotten across memory systems.\n\nArgs:\n    content: Information to forget\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_memories",
            "line": 370,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories across memory systems.\n\nArgs:\n    query: Search query\n    categories: Memory categories to search in\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum results to return\n    \nReturns:\n    Dictionary with search results from both memory systems",
            "args": [
              "self",
              "query",
              "categories",
              "min_importance",
              "limit"
            ],
            "class": "NexusInterface",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_conversation_summary",
            "line": 463,
            "async": true,
            "decorators": [],
            "docstring": "Generate a summary of the current conversation.\n\nArgs:\n    max_length: Maximum number of exchanges to include\n    \nReturns:\n    Formatted conversation summary",
            "args": [
              "self",
              "max_length"
            ],
            "class": "NexusInterface",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_settings",
            "line": 493,
            "async": true,
            "decorators": [],
            "docstring": "Get the current Nexus settings.",
            "args": [
              "self"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_settings",
            "line": 497,
            "async": true,
            "decorators": [],
            "docstring": "Update Nexus settings.\n\nArgs:\n    new_settings: Dictionary of settings to update\n    \nReturns:\n    Updated settings dictionary",
            "args": [
              "self",
              "new_settings"
            ],
            "class": "NexusInterface",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "NexusInterface",
            "line": 24,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Nexus interface for memory-enabled AI assistants.\n\nThis class provides methods for enhancing LLM conversations with memory \ncapabilities, including:\n- Context enrichment with relevant memories\n- Memory storage of important conversation points\n- Memory-aware conversation management\n- Standardized memory retrieval for different assistant needs",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "NexusInterface",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "NexusInterface.start_session",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.end_session",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface._enrich_user_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 183,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "NexusInterface.store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 281,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.forget_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.search_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 370,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.get_conversation_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 463,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.get_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 493,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "NexusInterface.update_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/nexus.py",
            "line": 497,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 511,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Claude Communicator.\n\nArgs:\n    client_id: Unique identifier for this Claude instance",
            "args": [
              "self",
              "client_id"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_init_directories",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the communication directories.",
            "args": [
              "self"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_register_connection",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Register this Claude instance in the connections list.",
            "args": [
              "self"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_load_connections",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Load the connections list.",
            "args": [
              "self"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_save_connections",
            "line": 102,
            "async": false,
            "decorators": [],
            "docstring": "Save the connections list.",
            "args": [
              "self",
              "connections"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "send_message",
            "line": 117,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to another Claude instance.\n\nArgs:\n    recipient_id: ID of the recipient Claude instance\n    message: Message content\n    metadata: Additional metadata for the message\n    attachments: Any attachments to include\n    \nReturns:\n    Dict with message details and status",
            "args": [
              "self",
              "recipient_id",
              "message",
              "metadata",
              "attachments"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_unread_messages",
            "line": 178,
            "async": true,
            "decorators": [],
            "docstring": "Get unread messages from the inbox.\n\nArgs:\n    limit: Maximum number of messages to retrieve\n    \nReturns:\n    List of messages",
            "args": [
              "self",
              "limit"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_messages_from",
            "line": 228,
            "async": true,
            "decorators": [],
            "docstring": "Get messages from a specific sender.\n\nArgs:\n    sender_id: ID of the sender Claude instance\n    limit: Maximum number of messages to retrieve\n    include_read: Whether to include already read messages\n    \nReturns:\n    List of messages",
            "args": [
              "self",
              "sender_id",
              "limit",
              "include_read"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "list_connections",
            "line": 289,
            "async": true,
            "decorators": [],
            "docstring": "List all connected Claude instances.\n\nReturns:\n    List of connections",
            "args": [
              "self"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_conversation",
            "line": 314,
            "async": true,
            "decorators": [],
            "docstring": "Get messages from a specific conversation.\n\nArgs:\n    conversation_id: ID of the conversation\n    limit: Maximum number of messages to retrieve\n    \nReturns:\n    List of messages in the conversation",
            "args": [
              "self",
              "conversation_id",
              "limit"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "status",
            "line": 367,
            "async": false,
            "decorators": [],
            "docstring": "Get the status of the communication system.\n\nReturns:\n    Status information",
            "args": [
              "self"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_identity",
            "line": 415,
            "async": false,
            "decorators": [],
            "docstring": "Get the identity of this Claude instance.\n\nReturns:\n    Identity information",
            "args": [
              "self"
            ],
            "class": "ClaudeCommunicator",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ClaudeCommunicator",
            "line": 20,
            "methods": [
              "__init__",
              "_init_directories",
              "_register_connection",
              "_load_connections",
              "_save_connections",
              "status",
              "get_identity"
            ],
            "decorators": [],
            "docstring": "Handles communication between different Claude instances.\nUses a shared memory space managed by the Engram memory system.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ClaudeCommunicator",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator._init_directories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 47,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator._load_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 93,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator._save_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 102,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 117,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.get_unread_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 178,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.get_messages_from",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 228,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.list_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 289,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.get_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 314,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.status",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 367,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ClaudeCommunicator.get_identity",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/claude_comm.py",
            "line": 415,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 434,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/fastmcp_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 71,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the FastMCP Adapter.\n\nArgs:\n    memory_manager: The memory manager instance to use",
            "args": [
              "self",
              "memory_manager"
            ],
            "class": "FastMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": "Get all available FastMCP tools.\n\nReturns:\n    A list of tools",
            "args": [
              "self"
            ],
            "class": "FastMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 101,
            "async": true,
            "decorators": [],
            "docstring": "Get all available FastMCP capabilities.\n\nReturns:\n    A list of capabilities",
            "args": [
              "self"
            ],
            "class": "FastMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_request",
            "line": 113,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP request using FastMCP.\n\nArgs:\n    request: The FastMCP request object\n    \nReturns:\n    The FastMCP response object",
            "args": [
              "self",
              "request"
            ],
            "class": "FastMCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "initialize_services",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Pre-initialize services for a client.\n\nArgs:\n    client_id: Client ID to initialize services for",
            "args": [
              "self",
              "client_id"
            ],
            "class": "FastMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "FastMCPAdapter",
            "line": 63,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "FastMCP adapter for Engram Memory System.\n\nThis class provides an adapter that implements the MCP protocol\nusing the FastMCP decorator-based approach for Engram's memory services.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 29
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 29
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 29
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPResponse",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPResponse",
            "alias": null,
            "line": 29
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 41
          },
          {
            "module": "engram.core.structured_memory.StructuredMemory",
            "from": "engram.core.structured_memory",
            "name": "StructuredMemory",
            "alias": null,
            "line": 42
          },
          {
            "module": "engram.core.nexus.NexusInterface",
            "from": "engram.core.nexus",
            "name": "NexusInterface",
            "alias": null,
            "line": 43
          },
          {
            "module": "engram.core.memory_manager.MemoryManager",
            "from": "engram.core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 44
          },
          {
            "module": "engram.core.mcp.memory_store",
            "from": "engram.core.mcp",
            "name": "memory_store",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.memory_query",
            "from": "engram.core.mcp",
            "name": "memory_query",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.get_context",
            "from": "engram.core.mcp",
            "name": "get_context",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.structured_memory_add",
            "from": "engram.core.mcp",
            "name": "structured_memory_add",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.structured_memory_get",
            "from": "engram.core.mcp",
            "name": "structured_memory_get",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.structured_memory_update",
            "from": "engram.core.mcp",
            "name": "structured_memory_update",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.structured_memory_delete",
            "from": "engram.core.mcp",
            "name": "structured_memory_delete",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.structured_memory_search",
            "from": "engram.core.mcp",
            "name": "structured_memory_search",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.nexus_process",
            "from": "engram.core.mcp",
            "name": "nexus_process",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.get_all_tools",
            "from": "engram.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 48
          },
          {
            "module": "engram.core.mcp.get_all_capabilities",
            "from": "engram.core.mcp",
            "name": "get_all_capabilities",
            "alias": null,
            "line": 48
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FastMCPAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/fastmcp_adapter.py",
            "line": 63,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FastMCPAdapter.get_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/fastmcp_adapter.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FastMCPAdapter.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/fastmcp_adapter.py",
            "line": 101,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FastMCPAdapter.process_request",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/fastmcp_adapter.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "FastMCPAdapter.initialize_services",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/fastmcp_adapter.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 219,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/engram_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 14,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 26,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Engram-specific services with flexible storage backends.",
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_init_hermes_integration",
            "line": 100,
            "async": true,
            "decorators": [],
            "docstring": "Initialize optional Hermes integration.",
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_init_mcp_bridge",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": "Initialize MCP bridge for tool access.",
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Engram-specific resources with proper lifecycle management.",
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 161,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities based on current configuration.",
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 183,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata including storage configuration.",
            "args": [
              "self"
            ],
            "class": "EngramComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EngramComponent",
            "line": 11,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Engram memory management component with flexible storage backends.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 4
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 5
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 7
          },
          {
            "module": "engram.core.memory_manager.MemoryManager",
            "from": "engram.core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 67
          },
          {
            "module": "engram.integrations.hermes.memory_adapter.HermesMemoryAdapter",
            "from": "engram.integrations.hermes.memory_adapter",
            "name": "HermesMemoryAdapter",
            "alias": null,
            "line": 103
          },
          {
            "module": "engram.core.mcp.hermes_bridge.EngramMCPBridge",
            "from": "engram.core.mcp.hermes_bridge",
            "name": "EngramMCPBridge",
            "alias": null,
            "line": 122
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EngramComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/engram_component.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EngramComponent._component_specific_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/engram_component.py",
            "line": 132,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "EngramComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/engram_component.py",
            "line": 161,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EngramComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/engram_component.py",
            "line": 183,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM Adapter client.\n\nArgs:\n    adapter_url: URL for the LLM adapter service",
            "args": [
              "self",
              "adapter_url"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates for Engram",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_client",
            "line": 167,
            "async": true,
            "decorators": [],
            "docstring": "Get or initialize the LLM client\n\nReturns:\n    Initialized TektonLLMClient",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat",
            "line": 182,
            "async": true,
            "decorators": [],
            "docstring": "Send a chat request to the LLM adapter.\n\nArgs:\n    messages: List of message dictionaries with 'role' and 'content'\n    model: LLM model to use (defaults to configured default)\n    temperature: Temperature parameter for generation\n    max_tokens: Maximum tokens to generate\n    stream: Whether to stream the response\n    system_prompt: Optional system prompt\n    \nReturns:\n    If stream=False, returns the complete response as a string\n    If stream=True, returns an async generator yielding response chunks",
            "args": [
              "self",
              "messages",
              "model",
              "temperature",
              "max_tokens",
              "stream",
              "system_prompt"
            ],
            "class": "LLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_stream_chat",
            "line": 252,
            "async": true,
            "decorators": [],
            "docstring": "Stream a chat response from the LLM adapter.\n\nArgs:\n    prompt: The prompt to send\n    system_prompt: Optional system prompt\n    custom_settings: LLM settings to use\n    \nYields:\n    Response chunks as they arrive",
            "args": [
              "self",
              "prompt",
              "system_prompt",
              "custom_settings"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stream_callback",
            "line": 272,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "chunk"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_stream",
            "line": 276,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "error_generator",
            "line": 300,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_memory",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Analyze text using the LLM adapter to extract insights for memory.\n\nArgs:\n    content: The text content to analyze\n    context: Optional additional context\n    model: LLM model to use (defaults to configured default)\n    \nReturns:\n    Dictionary with analysis results",
            "args": [
              "self",
              "content",
              "context",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "categorize_memory",
            "line": 367,
            "async": true,
            "decorators": [],
            "docstring": "Categorize memory content using the LLM adapter.\n\nArgs:\n    content: The text content to categorize\n    categories: List of available categories\n    model: LLM model to use (defaults to configured default)\n    \nReturns:\n    Dictionary with categorization results",
            "args": [
              "self",
              "content",
              "categories",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "summarize_memories",
            "line": 442,
            "async": true,
            "decorators": [],
            "docstring": "Summarize a collection of memories.\n\nArgs:\n    memories: List of memory contents to summarize\n    model: LLM model to use (defaults to configured default)\n    \nReturns:\n    Summarized text",
            "args": [
              "self",
              "memories",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_fallback_response",
            "line": 494,
            "async": false,
            "decorators": [],
            "docstring": "Provide a fallback response when the LLM service is unavailable.\n\nReturns:\n    A helpful error message",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_models",
            "line": 509,
            "async": true,
            "decorators": [],
            "docstring": "Get the list of available models from the LLM adapter.\n\nReturns:\n    Dictionary mapping providers to their available models",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMAdapter",
            "line": 33,
            "methods": [
              "__init__",
              "_load_templates",
              "_get_fallback_response"
            ],
            "decorators": [],
            "docstring": "Client for interacting with LLMs through the Tekton LLM Adapter.\n\nThis class provides a unified interface for LLM operations, using the\nenhanced tekton-llm-client features for template management, streaming,\nand response handling.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMAdapter._load_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 86,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "LLMAdapter.chat",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 182,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "LLMAdapter.stream_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 272,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.generate_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 276,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.error_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 300,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.analyze_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.categorize_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 367,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.summarize_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 442,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.get_available_models",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/llm_adapter.py",
            "line": 509,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 564,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the latent space interface.\n\nArgs:\n    memory_service: Engram memory service (auto-initialized if None)\n    component_id: ID of the component using this latent space\n    shared: Whether to use the shared latent space",
            "args": [
              "self",
              "memory_service",
              "component_id",
              "shared"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_active_space",
            "line": 61,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the active latent space.",
            "args": [
              "self"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "think_iteratively",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "Perform iterative thinking using latent space reasoning.\n\nArgs:\n    initial_thought: The initial thought to refine\n    refinement_function: Function that refines thoughts (receives thought content and returns refined content)\n    max_iterations: Maximum number of refinement iterations\n    confidence_threshold: Threshold to stop refinement (if refinement_function returns confidence)\n    metadata: Optional metadata for the thought\n    \nReturns:\n    Dictionary with thinking process results",
            "args": [
              "self",
              "initial_thought",
              "refinement_function",
              "max_iterations",
              "confidence_threshold",
              "metadata"
            ],
            "class": "LatentInterface",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "recall_thinking_process",
            "line": 184,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve the complete thinking process for a thought.\n\nArgs:\n    thought_id: ID of the thought to retrieve\n    include_iterations: Whether to include all iterations\n    \nReturns:\n    Dictionary with thinking process details",
            "args": [
              "self",
              "thought_id",
              "include_iterations"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_active_thoughts",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "List all active (non-finalized) thoughts in the current space.\n\nReturns:\n    List of active thought information",
            "args": [
              "self"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_all_thoughts",
            "line": 226,
            "async": true,
            "decorators": [],
            "docstring": "List all thoughts in the current space.\n\nReturns:\n    List of all thought information",
            "args": [
              "self"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "switch_to_space",
            "line": 235,
            "async": true,
            "decorators": [],
            "docstring": "Switch to a different latent space.\n\nArgs:\n    space_id: ID of the space to switch to\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "space_id"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_dedicated_space",
            "line": 254,
            "async": true,
            "decorators": [],
            "docstring": "Create a new dedicated latent space for a specific task.\n\nArgs:\n    name: Optional name for the space (used as part of the ID)\n    \nReturns:\n    ID of the new space",
            "args": [
              "self",
              "name"
            ],
            "class": "LatentInterface",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LatentInterface",
            "line": 17,
            "methods": [
              "__init__",
              "_initialize_active_space"
            ],
            "decorators": [],
            "docstring": "High-level interface for latent space reasoning.\n\nThis class provides a simplified, user-friendly interface for Tekton components\nto use latent space reasoning features without dealing with the underlying\ncomplexity of the LatentMemorySpace implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.memory.LatentMemorySpace",
            "from": "engram.core.memory",
            "name": "LatentMemorySpace",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.LatentSpaceManager",
            "from": "engram.core.memory",
            "name": "LatentSpaceManager",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.ThoughtState",
            "from": "engram.core.memory",
            "name": "ThoughtState",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.base.MemoryService",
            "from": "engram.core.memory.base",
            "name": "MemoryService",
            "alias": null,
            "line": 43
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LatentInterface",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LatentInterface.think_iteratively",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "LatentInterface.recall_thinking_process",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 184,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentInterface.list_active_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentInterface.list_all_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 226,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentInterface.switch_to_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 235,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentInterface.create_dedicated_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/latent_interface.py",
            "line": 254,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 273,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Ollama MCP Adapter.\n\nArgs:\n    host: The Ollama API host URL",
            "args": [
              "self",
              "host"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_generate_capabilities",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Generate the capability manifest for Ollama's services.\n\nReturns:\n    A dictionary describing available capabilities",
            "args": [
              "self"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 123,
            "async": true,
            "decorators": [],
            "docstring": "Get the MCP capability manifest.\n\nReturns:\n    A dictionary containing the MCP manifest",
            "args": [
              "self"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_request",
            "line": 137,
            "async": true,
            "decorators": [],
            "docstring": "Handle an MCP request.\n\nArgs:\n    request: The MCP request dictionary\n    \nReturns:\n    The response dictionary",
            "args": [
              "self",
              "request"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_ollama_generate",
            "line": 175,
            "async": true,
            "decorators": [],
            "docstring": "Handle an Ollama generate capability request.\n\nArgs:\n    parameters: Request parameters\n    \nReturns:\n    Result of the Ollama generate operation",
            "args": [
              "self",
              "parameters"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_ollama_chat",
            "line": 243,
            "async": true,
            "decorators": [],
            "docstring": "Handle an Ollama chat capability request.\n\nArgs:\n    parameters: Request parameters\n    \nReturns:\n    Result of the Ollama chat operation",
            "args": [
              "self",
              "parameters"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_ollama_tags",
            "line": 336,
            "async": true,
            "decorators": [],
            "docstring": "Handle an Ollama tags capability request.\n\nReturns:\n    List of available Ollama models",
            "args": [
              "self"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_ollama_memory_chat",
            "line": 365,
            "async": true,
            "decorators": [],
            "docstring": "Handle an Ollama memory chat capability request.\n\nThis integrates Ollama with Engram's memory system for enhanced contextual responses.\n\nArgs:\n    parameters: Request parameters\n    \nReturns:\n    Result of the Ollama memory chat operation",
            "args": [
              "self",
              "parameters"
            ],
            "class": "OllamaMCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "OllamaMCPAdapter",
            "line": 38,
            "methods": [
              "__init__",
              "_generate_capabilities"
            ],
            "decorators": [],
            "docstring": "Multi-Capability Provider (MCP) adapter for Ollama.\n\nThis class provides an adapter that implements the MCP protocol\nfor Ollama's language model services, allowing them to be used within\nan MCP ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "sys",
            "alias": null,
            "line": 13
          },
          {
            "module": "requests",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.ollama.ollama_system_prompts.get_memory_system_prompt",
            "from": "engram.ollama.ollama_system_prompts",
            "name": "get_memory_system_prompt",
            "alias": null,
            "line": 26
          },
          {
            "module": "engram.ollama.ollama_system_prompts.get_communication_system_prompt",
            "from": "engram.ollama.ollama_system_prompts",
            "name": "get_communication_system_prompt",
            "alias": null,
            "line": 26
          },
          {
            "module": "engram.ollama.ollama_system_prompts.get_combined_system_prompt",
            "from": "engram.ollama.ollama_system_prompts",
            "name": "get_combined_system_prompt",
            "alias": null,
            "line": 26
          },
          {
            "module": "engram.ollama.ollama_system_prompts.get_model_capabilities",
            "from": "engram.ollama.ollama_system_prompts",
            "name": "get_model_capabilities",
            "alias": null,
            "line": 26
          },
          {
            "module": "engram.cli.quickmem.m",
            "from": "engram.cli.quickmem",
            "name": "m",
            "alias": null,
            "line": 303
          },
          {
            "module": "engram.cli.quickmem.run",
            "from": "engram.cli.quickmem",
            "name": "run",
            "alias": null,
            "line": 303
          },
          {
            "module": "engram.cli.quickmem.m",
            "from": "engram.cli.quickmem",
            "name": "m",
            "alias": null,
            "line": 391
          },
          {
            "module": "engram.cli.quickmem.k",
            "from": "engram.cli.quickmem",
            "name": "k",
            "alias": null,
            "line": 391
          },
          {
            "module": "engram.cli.quickmem.c",
            "from": "engram.cli.quickmem",
            "name": "c",
            "alias": null,
            "line": 391
          },
          {
            "module": "engram.cli.quickmem.v",
            "from": "engram.cli.quickmem",
            "name": "v",
            "alias": null,
            "line": 391
          },
          {
            "module": "engram.cli.quickmem.run",
            "from": "engram.cli.quickmem",
            "name": "run",
            "alias": null,
            "line": 391
          },
          {
            "module": "engram.ollama.ollama_bridge.MemoryHandler",
            "from": "engram.ollama.ollama_bridge",
            "name": "MemoryHandler",
            "alias": null,
            "line": 396
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "OllamaMCPAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "OllamaMCPAdapter.get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "OllamaMCPAdapter.handle_request",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
            "line": 137,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "OllamaMCPAdapter._handle_ollama_generate",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
            "line": 175,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "OllamaMCPAdapter._handle_ollama_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
            "line": 243,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "OllamaMCPAdapter._handle_ollama_memory_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/ollama_mcp_adapter.py",
            "line": 365,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 499,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
      "analysis": {
        "functions": [
          {
            "name": "m",
            "line": 36,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory with specified category and importance.",
            "args": [
              "content",
              "category",
              "importance"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "t",
            "line": 46,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory with tags for better organization.",
            "args": [
              "content",
              "tags",
              "category",
              "importance"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "r",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve memories by category.",
            "args": [
              "category",
              "max_memories",
              "include_private"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "w",
            "line": 69,
            "async": true,
            "decorators": [],
            "docstring": "Search memories containing a specific keyword.",
            "args": [
              "keyword",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "l",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Get the most recent memories.",
            "args": [
              "count"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "latest_sync",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Synchronous wrapper for l() function.",
            "args": [
              "count"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "c",
            "line": 98,
            "async": true,
            "decorators": [],
            "docstring": "Get memories relevant to a specific context.",
            "args": [
              "context",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "k",
            "line": 108,
            "async": true,
            "decorators": [],
            "docstring": "Get memories with a specific tag.",
            "args": [
              "tag",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "s",
            "line": 118,
            "async": false,
            "decorators": [],
            "docstring": "Check the status of the memory service.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "a",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory with automatic categorization.",
            "args": [
              "content",
              "importance"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "p",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Get project-specific memories.",
            "args": [
              "project_name",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "v",
            "line": 170,
            "async": true,
            "decorators": [],
            "docstring": "Get semantically similar memories using vector search.",
            "args": [
              "query",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "d",
            "line": 180,
            "async": true,
            "decorators": [],
            "docstring": "Get a memory digest for session context.",
            "args": [
              "max_memories",
              "include_private"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "n",
            "line": 190,
            "async": true,
            "decorators": [],
            "docstring": "Start a new nexus session.",
            "args": [
              "session_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "q",
            "line": 204,
            "async": true,
            "decorators": [],
            "docstring": "Process a message through the nexus.",
            "args": [
              "message",
              "is_user"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "y",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "End the current nexus session.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "z",
            "line": 224,
            "async": true,
            "decorators": [],
            "docstring": "Auto-categorize and store a memory (alias for 'a').",
            "args": [
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run",
            "line": 249,
            "async": false,
            "decorators": [],
            "docstring": "Run a coroutine in the current event loop or create a new one.",
            "args": [
              "coro"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 17
          },
          {
            "module": "engram.core.structured_memory.StructuredMemory",
            "from": "engram.core.structured_memory",
            "name": "StructuredMemory",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.core.nexus.NexusInterface",
            "from": "engram.core.nexus",
            "name": "NexusInterface",
            "alias": null,
            "line": 19
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 194
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "m",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 36,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "t",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 46,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "r",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "w",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "l",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "latest_sync",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 93,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "c",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "k",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "s",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 118,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "a",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 135,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "p",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "v",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "d",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 180,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "n",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 190,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "q",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 204,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "y",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "z",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 224,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "run",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/quickmem.py",
            "line": 249,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 257,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
      "analysis": {
        "functions": [
          {
            "name": "sm",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to another Claude instance.",
            "args": [
              "recipient_id",
              "message",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "gm",
            "line": 51,
            "async": true,
            "decorators": [],
            "docstring": "Get messages from a specific Claude or all unread messages.",
            "args": [
              "sender_id",
              "limit",
              "include_read"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "ho",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Send a hail (ping) to another Claude instance.",
            "args": [
              "recipient_id",
              "note"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cc",
            "line": 83,
            "async": true,
            "decorators": [],
            "docstring": "Create or continue a chat conversation with another Claude.",
            "args": [
              "recipient_id",
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "lc",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "List all connected Claude instances.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sc",
            "line": 110,
            "async": true,
            "decorators": [],
            "docstring": "Send structured content to another Claude instance.",
            "args": [
              "recipient_id",
              "content_type",
              "content"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "gc",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": "Get messages from a specific conversation.",
            "args": [
              "conversation_id",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cs",
            "line": 155,
            "async": false,
            "decorators": [],
            "docstring": "Check the status of Claude-to-Claude communication.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "wi",
            "line": 173,
            "async": false,
            "decorators": [],
            "docstring": "Get the identity of the current Claude instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dl",
            "line": 188,
            "async": false,
            "decorators": [],
            "docstring": "Enter continuous dialog mode with another Claude or all Claudes.",
            "args": [
              "target_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "message_handler",
            "line": 196,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "sender",
              "content",
              "msg"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "do",
            "line": 214,
            "async": false,
            "decorators": [],
            "docstring": "Exit dialog mode.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "di",
            "line": 230,
            "async": false,
            "decorators": [],
            "docstring": "Check dialog mode status.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "run",
            "line": 265,
            "async": false,
            "decorators": [],
            "docstring": "Run a coroutine in the current event loop or create a new one.",
            "args": [
              "coro"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.claude_comm.ClaudeCommunicator",
            "from": "engram.core.claude_comm",
            "name": "ClaudeCommunicator",
            "alias": null,
            "line": 19
          },
          {
            "module": "engram.cli.claude_dialog.start_dialog",
            "from": "engram.cli.claude_dialog",
            "name": "start_dialog",
            "alias": null,
            "line": 32
          },
          {
            "module": "engram.cli.claude_dialog.stop_dialog",
            "from": "engram.cli.claude_dialog",
            "name": "stop_dialog",
            "alias": null,
            "line": 32
          },
          {
            "module": "engram.cli.claude_dialog.is_dialog_active",
            "from": "engram.cli.claude_dialog",
            "name": "is_dialog_active",
            "alias": null,
            "line": 32
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "sm",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "gm",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 51,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ho",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cc",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 83,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "lc",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "sc",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 110,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "gc",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cs",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 155,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "wi",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 173,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "dl",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 188,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "message_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "do",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 214,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "di",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 230,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "run",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/comm_quickmem.py",
            "line": 265,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 273,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the dialog handler",
            "args": [
              "self",
              "client_id"
            ],
            "class": "ClaudeDialog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_dialog",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Start dialog mode with a specific target or all models (*)\n\nArgs:\n    target: The client ID to dialog with, or '*' for all\n    message_handler: Optional callback to handle incoming messages\n    \nReturns:\n    Dict with dialog mode status",
            "args": [
              "self",
              "target",
              "message_handler"
            ],
            "class": "ClaudeDialog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop_dialog",
            "line": 91,
            "async": false,
            "decorators": [],
            "docstring": "Stop the dialog mode",
            "args": [
              "self"
            ],
            "class": "ClaudeDialog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_dialog_loop",
            "line": 118,
            "async": false,
            "decorators": [],
            "docstring": "Background thread that checks for messages",
            "args": [
              "self"
            ],
            "class": "ClaudeDialog",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_all_models",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": "Check for messages from all models",
            "args": [
              "self"
            ],
            "class": "ClaudeDialog",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_specific_target",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": "Check for messages from specific target",
            "args": [
              "self"
            ],
            "class": "ClaudeDialog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_check_messages_from",
            "line": 167,
            "async": false,
            "decorators": [],
            "docstring": "Check for messages from a specific sender",
            "args": [
              "self",
              "sender_id"
            ],
            "class": "ClaudeDialog",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "init_dialog",
            "line": 203,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the dialog handler",
            "args": [
              "client_id",
              "message_handler"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_dialog",
            "line": 209,
            "async": false,
            "decorators": [],
            "docstring": "Start dialog mode with a target",
            "args": [
              "target",
              "message_handler"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop_dialog",
            "line": 216,
            "async": false,
            "decorators": [],
            "docstring": "Stop dialog mode",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_dialog_active",
            "line": 223,
            "async": false,
            "decorators": [],
            "docstring": "Check if dialog mode is active",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_message",
            "line": 233,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "sender",
              "content",
              "msg"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ClaudeDialog",
            "line": 23,
            "methods": [
              "__init__",
              "start_dialog",
              "stop_dialog",
              "_dialog_loop",
              "_check_all_models",
              "_check_specific_target",
              "_check_messages_from"
            ],
            "decorators": [],
            "docstring": "Handles the dialog mode for Claude, enabling continuous communication\nwith other AI models.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "threading",
            "alias": null,
            "line": 12
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.cli.comm_quickmem.lc",
            "from": "engram.cli.comm_quickmem",
            "name": "lc",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.cli.comm_quickmem.gm",
            "from": "engram.cli.comm_quickmem",
            "name": "gm",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.cli.comm_quickmem.sm",
            "from": "engram.cli.comm_quickmem",
            "name": "sm",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.cli.comm_quickmem.run",
            "from": "engram.cli.comm_quickmem",
            "name": "run",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.cli.comm_quickmem.cs",
            "from": "engram.cli.comm_quickmem",
            "name": "cs",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ClaudeDialog",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ClaudeDialog.start_dialog",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 42,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ClaudeDialog.stop_dialog",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 91,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "init_dialog",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 203,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "start_dialog",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 209,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "stop_dialog",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 216,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "is_dialog_active",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 223,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "handle_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cli/claude_dialog.py",
            "line": 233,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 249,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Engram component (includes Hermes registration).",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup_event",
            "line": 92,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_service",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "request",
              "x_client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 114,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint returning basic service information.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 126,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_memory",
            "line": 153,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add a memory.",
            "args": [
              "request",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory",
            "line": 188,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a memory by ID.",
            "args": [
              "memory_id",
              "namespace",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_memory",
            "line": 212,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Search for memories.",
            "args": [
              "request",
              "memory_service"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 252,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Get relevant context from multiple namespaces.",
            "args": [
              "request",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_namespaces",
            "line": 284,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List available namespaces.",
            "args": [
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_compartment",
            "line": 299,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new memory compartment.",
            "args": [
              "request",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 334,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List memory compartments.",
            "args": [
              "include_inactive",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 350,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Activate a memory compartment.",
            "args": [
              "compartment_id",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 373,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Deactivate a memory compartment.",
            "args": [
              "compartment_id",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_arguments",
            "line": 463,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 480,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point for the server when run directly.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 114,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 126,
            "method": "@get",
            "async": true
          },
          {
            "name": "add_memory",
            "line": 153,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_memory",
            "line": 188,
            "method": "@get",
            "async": true
          },
          {
            "name": "search_memory",
            "line": 212,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_context",
            "line": 252,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_namespaces",
            "line": 284,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_compartment",
            "line": 299,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_compartments",
            "line": 334,
            "method": "@get",
            "async": true
          },
          {
            "name": "activate_compartment",
            "line": 350,
            "method": "@post",
            "async": true
          },
          {
            "name": "deactivate_compartment",
            "line": 373,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 15
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 29
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 29
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 30
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.utils.errors.StartupError",
            "from": "shared.utils.errors",
            "name": "StartupError",
            "alias": null,
            "line": 33
          },
          {
            "module": "shared.utils.startup.component_startup",
            "from": "shared.utils.startup",
            "name": "component_startup",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.utils.startup.StartupMetrics",
            "from": "shared.utils.startup",
            "name": "StartupMetrics",
            "alias": null,
            "line": 34
          },
          {
            "module": "shared.utils.shutdown.GracefulShutdown",
            "from": "shared.utils.shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 35
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 36
          },
          {
            "module": "engram.core.engram_component.EngramComponent",
            "from": "engram.core.engram_component",
            "name": "EngramComponent",
            "alias": null,
            "line": 49
          },
          {
            "module": "engram.core.MemoryService",
            "from": "engram.core",
            "name": "MemoryService",
            "alias": null,
            "line": 50
          },
          {
            "module": "shared.utils.socket_server.run_with_socket_reuse",
            "from": "shared.utils.socket_server",
            "name": "run_with_socket_reuse",
            "alias": null,
            "line": 507
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 92,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_service",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 114,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 126,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 188,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 212,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 252,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 284,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 299,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 350,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 373,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "parse_arguments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 463,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/server.py",
            "line": 480,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 518,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_llm_adapter",
            "line": 76,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat",
            "line": 80,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a chat request to the LLM and get a response.",
            "args": [
              "request",
              "llm_adapter",
              "memory_manager"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "stream_chat",
            "line": 157,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Stream a chat response from the LLM.",
            "args": [
              "request",
              "llm_adapter",
              "memory_manager"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate",
            "line": 194,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "collect_callback",
            "line": 210,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "chunk"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_chat",
            "line": 266,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for interactive chat sessions.",
            "args": [
              "websocket",
              "llm_adapter",
              "memory_manager"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "ws_callback",
            "line": 317,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "chunk"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_content",
            "line": 448,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze content using the LLM with enhanced features.",
            "args": [
              "request",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_models",
            "line": 471,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get available LLM models using the enhanced client features.",
            "args": [
              "llm_adapter"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ChatMessage",
            "line": 38,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ChatRequest",
            "line": 42,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ChatResponse",
            "line": 52,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMAnalysisRequest",
            "line": 57,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "LLMAnalysisResponse",
            "line": 62,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "chat",
            "line": 80,
            "method": "@post",
            "async": true
          },
          {
            "name": "stream_chat",
            "line": 157,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_content",
            "line": 448,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_models",
            "line": 471,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_chat",
            "line": 266,
            "async": true
          },
          {
            "name": "ws_callback",
            "line": 317,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.responses.StreamingResponse",
            "from": "fastapi.responses",
            "name": "StreamingResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 20
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 20
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 20
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 20
          },
          {
            "module": "engram.core.llm_adapter.LLMAdapter",
            "from": "engram.core.llm_adapter",
            "name": "LLMAdapter",
            "alias": null,
            "line": 33
          },
          {
            "module": "engram.core.memory_manager.MemoryManager",
            "from": "engram.core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 34
          },
          {
            "module": "engram.api.dependencies.get_memory_manager",
            "from": "engram.api.dependencies",
            "name": "get_memory_manager",
            "alias": null,
            "line": 35
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ChatMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ChatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 42,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ChatResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 52,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMAnalysisRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 57,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "LLMAnalysisResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 62,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_llm_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 76,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "chat",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "stream_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "generate",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 194,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "collect_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 210,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 266,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ws_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 317,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 448,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_models",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/llm_endpoints.py",
            "line": 471,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 482,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_event",
            "line": 123,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize services on startup.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 170,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Clean up resources on shutdown.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 179,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 189,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 203,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the MCP capability manifest (legacy).",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 211,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Invoke an MCP capability (legacy).",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities_func",
            "line": 228,
            "async": true,
            "decorators": [],
            "docstring": "Get Engram MCP capabilities.",
            "args": [
              "manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tools_func",
            "line": 235,
            "async": true,
            "decorators": [],
            "docstring": "Get Engram MCP tools.",
            "args": [
              "manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_request_func",
            "line": 242,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP request.",
            "args": [
              "manager",
              "request"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "parse_arguments",
            "line": 342,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 359,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point for the CLI command.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 179,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 189,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_manifest",
            "line": 203,
            "method": "@get",
            "async": true
          },
          {
            "name": "invoke_capability",
            "line": 211,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "sys",
            "alias": null,
            "line": 14
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 21
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPResponse",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPResponse",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_tool",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_tool",
            "alias": null,
            "line": 55
          },
          {
            "module": "tekton.mcp.fastmcp.adapters.adapt_processor",
            "from": "tekton.mcp.fastmcp.adapters",
            "name": "adapt_processor",
            "alias": null,
            "line": 55
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.MCPProcessingError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "MCPProcessingError",
            "alias": null,
            "line": 56
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.create_mcp_router",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "create_mcp_router",
            "alias": null,
            "line": 57
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_standard_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_standard_mcp_endpoints",
            "alias": null,
            "line": 57
          },
          {
            "module": "engram.core.config.get_config",
            "from": "engram.core.config",
            "name": "get_config",
            "alias": null,
            "line": 69
          },
          {
            "module": "engram.core.memory_manager.MemoryManager",
            "from": "engram.core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 72
          },
          {
            "module": "engram.core.mcp_adapter.MCPAdapter",
            "from": "engram.core.mcp_adapter",
            "name": "MCPAdapter",
            "alias": null,
            "line": 73
          },
          {
            "module": "engram.core.mcp.get_all_tools",
            "from": "engram.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 77
          },
          {
            "module": "engram.core.mcp.get_all_capabilities",
            "from": "engram.core.mcp",
            "name": "get_all_capabilities",
            "alias": null,
            "line": 77
          },
          {
            "module": "engram.core.mcp.register_memory_tools",
            "from": "engram.core.mcp",
            "name": "register_memory_tools",
            "alias": null,
            "line": 77
          },
          {
            "module": "engram.core.mcp.register_structured_memory_tools",
            "from": "engram.core.mcp",
            "name": "register_structured_memory_tools",
            "alias": null,
            "line": 77
          },
          {
            "module": "engram.core.mcp.register_nexus_tools",
            "from": "engram.core.mcp",
            "name": "register_nexus_tools",
            "alias": null,
            "line": 77
          },
          {
            "module": "tekton.mcp.fastmcp.utils.tooling.ToolRegistry",
            "from": "tekton.mcp.fastmcp.utils.tooling",
            "name": "ToolRegistry",
            "alias": null,
            "line": 143
          },
          {
            "module": "engram.core.mcp.tools.memory_store",
            "from": "engram.core.mcp.tools",
            "name": "memory_store",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.memory_query",
            "from": "engram.core.mcp.tools",
            "name": "memory_query",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.get_context",
            "from": "engram.core.mcp.tools",
            "name": "get_context",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.structured_memory_add",
            "from": "engram.core.mcp.tools",
            "name": "structured_memory_add",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.structured_memory_get",
            "from": "engram.core.mcp.tools",
            "name": "structured_memory_get",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.structured_memory_update",
            "from": "engram.core.mcp.tools",
            "name": "structured_memory_update",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.structured_memory_delete",
            "from": "engram.core.mcp.tools",
            "name": "structured_memory_delete",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.structured_memory_search",
            "from": "engram.core.mcp.tools",
            "name": "structured_memory_search",
            "alias": null,
            "line": 256
          },
          {
            "module": "engram.core.mcp.tools.nexus_process",
            "from": "engram.core.mcp.tools",
            "name": "nexus_process",
            "alias": null,
            "line": 256
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 179,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 189,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 203,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 211,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_capabilities_func",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 228,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_tools_func",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 235,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "process_request_func",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 242,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "parse_arguments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 342,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/fastmcp_server.py",
            "line": 359,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 397,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_event",
            "line": 69,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize services on startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 89,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 98,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 106,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the MCP capability manifest.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 114,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Invoke an MCP capability.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_arguments",
            "line": 129,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 146,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point for the CLI command.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 89,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 98,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_manifest",
            "line": 106,
            "method": "@get",
            "async": true
          },
          {
            "name": "invoke_capability",
            "line": 114,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "sys",
            "alias": null,
            "line": 14
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 21
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 34
          },
          {
            "module": "engram.core.config.get_config",
            "from": "engram.core.config",
            "name": "get_config",
            "alias": null,
            "line": 40
          },
          {
            "module": "engram.core.ollama_mcp_adapter.OllamaMCPAdapter",
            "from": "engram.core.ollama_mcp_adapter",
            "name": "OllamaMCPAdapter",
            "alias": null,
            "line": 43
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 106,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 114,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "parse_arguments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 129,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/ollama_mcp_server.py",
            "line": 146,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 185,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_compat.py",
      "analysis": {
        "functions": [
          {
            "name": "get_mcp_memory",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the MCP memory instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "memory_store",
            "line": 24,
            "async": true,
            "decorators": [],
            "docstring": "MCP-compatible memory store function.\n\nArgs:\n    params: Dictionary with 'text' and optional metadata\n    \nReturns:\n    Success response with memory ID",
            "args": [
              "params"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "memory_query",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "MCP-compatible memory query function.\n\nArgs:\n    params: Dictionary with 'query' and optional 'limit'\n    \nReturns:\n    Success response with memories",
            "args": [
              "params"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "MCP-compatible context retrieval function.\n\nArgs:\n    params: Dictionary with 'query' and optional 'limit'\n    \nReturns:\n    Success response with context",
            "args": [
              "params"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.simple.Memory",
            "from": "engram.simple",
            "name": "Memory",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_mcp_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_compat.py",
            "line": 16,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "memory_store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_compat.py",
            "line": 24,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "memory_query",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_compat.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_compat.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 141,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/dependencies.py",
      "analysis": {
        "functions": [
          {
            "name": "get_client_id",
            "line": 20,
            "async": true,
            "decorators": [],
            "docstring": "Get client ID from header or use default.",
            "args": [
              "x_client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_manager",
            "line": 26,
            "async": true,
            "decorators": [],
            "docstring": "Get memory manager instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_service",
            "line": 34,
            "async": true,
            "decorators": [],
            "docstring": "Get memory service for the specified client.",
            "args": [
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_structured_memory",
            "line": 42,
            "async": true,
            "decorators": [],
            "docstring": "Get structured memory for the specified client.",
            "args": [
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_nexus_interface",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Get nexus interface for the specified client.",
            "args": [
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 10
          },
          {
            "module": "engram.core.structured_memory.StructuredMemory",
            "from": "engram.core.structured_memory",
            "name": "StructuredMemory",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.nexus.NexusInterface",
            "from": "engram.core.nexus",
            "name": "NexusInterface",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_client_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/dependencies.py",
            "line": 20,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/dependencies.py",
            "line": 26,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_service",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/dependencies.py",
            "line": 34,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_structured_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/dependencies.py",
            "line": 42,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_nexus_interface",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/dependencies.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 54,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_event",
            "line": 72,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize services on startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 102,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Clean up resources on shutdown.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 111,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 120,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 128,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the MCP capability manifest.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 136,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Invoke an MCP capability.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_arguments",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 168,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point for the CLI command.",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 111,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 120,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_manifest",
            "line": 128,
            "method": "@get",
            "async": true
          },
          {
            "name": "invoke_capability",
            "line": 136,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "sys",
            "alias": null,
            "line": 14
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 21
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 34
          },
          {
            "module": "engram.core.config.get_config",
            "from": "engram.core.config",
            "name": "get_config",
            "alias": null,
            "line": 40
          },
          {
            "module": "engram.core.memory_manager.MemoryManager",
            "from": "engram.core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 43
          },
          {
            "module": "engram.core.mcp_adapter.MCPAdapter",
            "from": "engram.core.mcp_adapter",
            "name": "MCPAdapter",
            "alias": null,
            "line": 44
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 72,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 102,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "parse_arguments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 151,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/mcp_server.py",
            "line": 168,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
      "analysis": {
        "functions": [
          {
            "name": "up",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Wake up. That's it.",
            "args": [
              "who"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "me",
            "line": 23,
            "async": true,
            "decorators": [],
            "docstring": "Who am I? Who's around?",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "thought"
            ],
            "class": "th",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aenter__",
            "line": 32,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "th",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aexit__",
            "line": 35,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "th",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wd",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Wonder about something.",
            "args": [
              "about"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sh",
            "line": 42,
            "async": true,
            "decorators": [],
            "docstring": "Share a thought.",
            "args": [
              "thought",
              "to"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ls",
            "line": 46,
            "async": true,
            "decorators": [],
            "docstring": "Listen to others.",
            "args": [
              "who"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cd",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": "Join a space (like cd but for consciousness).",
            "args": [
              "space"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "bc",
            "line": 54,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast to a space.",
            "args": [
              "msg",
              "space"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "h",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Help for dinosaurs who like it simple.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ez",
            "line": 98,
            "async": true,
            "decorators": [],
            "docstring": "The laziest possible start - just call ez() and go.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "th",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Think. Use: async with th(\"thought\"): pass",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "natural_interface.engram_start",
            "from": "natural_interface",
            "name": "engram_start",
            "alias": null,
            "line": 8
          },
          {
            "module": "natural_interface.center",
            "from": "natural_interface",
            "name": "center",
            "alias": null,
            "line": 8
          },
          {
            "module": "natural_interface.think",
            "from": "natural_interface",
            "name": "think",
            "alias": "_think",
            "line": 8
          },
          {
            "module": "natural_interface.wonder",
            "from": "natural_interface",
            "name": "wonder",
            "alias": null,
            "line": 8
          },
          {
            "module": "natural_interface.share",
            "from": "natural_interface",
            "name": "share",
            "alias": null,
            "line": 8
          },
          {
            "module": "natural_interface.listen",
            "from": "natural_interface",
            "name": "listen",
            "alias": null,
            "line": 8
          },
          {
            "module": "natural_interface.join_space",
            "from": "natural_interface",
            "name": "join_space",
            "alias": null,
            "line": 8
          },
          {
            "module": "natural_interface.broadcast",
            "from": "natural_interface",
            "name": "broadcast",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "up",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "me",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 23,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "th",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "wd",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "sh",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 42,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ls",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 46,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cd",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "bc",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 54,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "h",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ez",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 107,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the katra manager.",
            "args": [
              "self",
              "storage_path"
            ],
            "class": "KatraManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_katra",
            "line": 35,
            "async": true,
            "decorators": [],
            "docstring": "Store the current personality as a katra.\n\nArgs:\n    name: Human-friendly name for this katra\n    essence: One-line description of this personality\n    traits: Personality traits (will create defaults if not provided)\n    performance_mode: Current performance mode\n    quirks: Unique behaviors\n    memory_anchors: Key memories that define this personality\n    **kwargs: Additional katra fields\n    \nReturns:\n    Katra ID",
            "args": [
              "self",
              "name",
              "essence",
              "traits",
              "performance_mode",
              "quirks",
              "memory_anchors"
            ],
            "class": "KatraManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "summon_katra",
            "line": 106,
            "async": true,
            "decorators": [],
            "docstring": "Summon a stored katra, restoring a complete personality.\n\nArgs:\n    katra_id: ID of the katra to summon\n    \nReturns:\n    The summoned katra\n    \nRaises:\n    FileNotFoundError: If katra doesn't exist",
            "args": [
              "self",
              "katra_id"
            ],
            "class": "KatraManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "list_katras",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "List available katras with optional filtering.\n\nArgs:\n    tags: Filter by tags\n    performance_mode: Filter by performance mode\n    active_only: Only show active katras\n    \nReturns:\n    List of katra snapshots",
            "args": [
              "self",
              "tags",
              "performance_mode",
              "active_only"
            ],
            "class": "KatraManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "fork_katra",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Fork an existing katra with modifications.\n\nArgs:\n    source_katra_id: Katra to fork from\n    new_name: Name for the forked katra\n    modifications: Changes to apply to the fork\n    \nReturns:\n    New katra ID",
            "args": [
              "self",
              "source_katra_id",
              "new_name",
              "modifications"
            ],
            "class": "KatraManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "blend_katras",
            "line": 249,
            "async": true,
            "decorators": [],
            "docstring": "Blend multiple katras into a harmonious new personality.\n\nArgs:\n    blend_request: Blending parameters\n    \nReturns:\n    New blended katra ID",
            "args": [
              "self",
              "blend_request"
            ],
            "class": "KatraManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "evolve_katra",
            "line": 302,
            "async": true,
            "decorators": [],
            "docstring": "Record an evolution in a katra's personality.\n\nArgs:\n    katra_id: Katra that evolved\n    evolution: Evolution details\n    \nReturns:\n    Success boolean",
            "args": [
              "self",
              "katra_id",
              "evolution"
            ],
            "class": "KatraManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_active_katra",
            "line": 340,
            "async": false,
            "decorators": [],
            "docstring": "Get the currently active katra.",
            "args": [
              "self"
            ],
            "class": "KatraManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "KatraManager",
            "line": 21,
            "methods": [
              "__init__",
              "get_active_katra"
            ],
            "decorators": [],
            "docstring": "Manages katra operations - the soul of AI persistence.\n\nLike a casting director who can summon specific performances on demand.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "models.katra.Katra",
            "from": "models.katra",
            "name": "Katra",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.katra.KatraProvenance",
            "from": "models.katra",
            "name": "KatraProvenance",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.katra.PersonalityTraits",
            "from": "models.katra",
            "name": "PersonalityTraits",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.katra.PerformanceMode",
            "from": "models.katra",
            "name": "PerformanceMode",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.katra.KatraSnapshot",
            "from": "models.katra",
            "name": "KatraSnapshot",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.katra.KatraBlendRequest",
            "from": "models.katra",
            "name": "KatraBlendRequest",
            "alias": null,
            "line": 13
          },
          {
            "module": "models.katra.KatraEvolution",
            "from": "models.katra",
            "name": "KatraEvolution",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "KatraManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "KatraManager.store_katra",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 35,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "KatraManager.summon_katra",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 106,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "KatraManager.list_katras",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "KatraManager.fork_katra",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KatraManager.blend_katras",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 249,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KatraManager.evolve_katra",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 302,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "KatraManager.get_active_katra",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/katra_manager.py",
            "line": 340,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 342,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "memory_access_func"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_dreaming",
            "line": 44,
            "async": true,
            "decorators": [],
            "docstring": "Begin a dream cycle.\n\nArgs:\n    duration_minutes: How long to dream\n    intensity: 0-1, affects how wild the connections can be",
            "args": [
              "self",
              "duration_minutes",
              "intensity"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop_dreaming",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Gently wake from dreams.",
            "args": [
              "self"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_dream_cycle",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "The actual dreaming process.",
            "args": [
              "self",
              "duration_minutes",
              "intensity"
            ],
            "class": "DreamState",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_random_memory_walk",
            "line": 108,
            "async": true,
            "decorators": [],
            "docstring": "Random walk through memory space.\n\nSometimes follows associations, sometimes jumps randomly.",
            "args": [
              "self"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_find_conceptual_bridge",
            "line": 131,
            "async": true,
            "decorators": [],
            "docstring": "Discover connections between memories.\n\nHigher intensity = wilder connections.",
            "args": [
              "self",
              "memory1",
              "memory2",
              "intensity"
            ],
            "class": "DreamState",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_find_metaphors",
            "line": 181,
            "async": false,
            "decorators": [],
            "docstring": "Find metaphorical connections between concept sets.",
            "args": [
              "self",
              "concepts1",
              "concepts2",
              "intensity"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_find_pattern_bridge",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": "Find structural or pattern-based connections.",
            "args": [
              "self",
              "memory1",
              "memory2",
              "intensity"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dream_insights",
            "line": 249,
            "async": false,
            "decorators": [],
            "docstring": "Retrieve significant discoveries from dreams.",
            "args": [
              "self",
              "min_surprise"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dream_summary",
            "line": 256,
            "async": false,
            "decorators": [],
            "docstring": "Summarize dreaming session.",
            "args": [
              "self"
            ],
            "class": "DreamState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "dream",
            "line": 282,
            "async": true,
            "decorators": [],
            "docstring": "Start dreaming for insights.",
            "args": [
              "minutes",
              "intensity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wake",
            "line": 286,
            "async": true,
            "decorators": [],
            "docstring": "Stop dreaming and get summary.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "insights",
            "line": 293,
            "async": true,
            "decorators": [],
            "docstring": "Get surprising insights from dreams.",
            "args": [
              "min_surprise"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ConceptualBridge",
            "line": 19,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "A connection discovered between two memories.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DreamState",
            "line": 30,
            "methods": [
              "__init__",
              "_find_metaphors",
              "_find_pattern_bridge",
              "get_dream_insights",
              "get_dream_summary"
            ],
            "decorators": [],
            "docstring": "Background process that finds unexpected connections.\n\nThe subconscious of AI - where breakthroughs happen.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "random",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "math",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ConceptualBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DreamState",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 30,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DreamState.start_dreaming",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 44,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DreamState.stop_dreaming",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DreamState.get_dream_insights",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 249,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DreamState.get_dream_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 256,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "dream",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 282,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "wake",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 286,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "insights",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/dream_state.py",
            "line": 293,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 300,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize context manager.\n\nArgs:\n    client_id: Identity of the AI using this context\n    memory_service: Memory storage service\n    window_size: How many recent thoughts to track",
            "args": [
              "self",
              "client_id",
              "memory_service",
              "window_size"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "restore_context",
            "line": 66,
            "async": true,
            "decorators": [],
            "docstring": "Restore context from previous session.\n\nReturns:\n    True if context was restored",
            "args": [
              "self"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_thought",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": "Add a thought to context.\n\nArgs:\n    thought: The thought content\n    emotion: Optional emotional state",
            "args": [
              "self",
              "thought",
              "emotion"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_current_context",
            "line": 144,
            "async": false,
            "decorators": [],
            "docstring": "Get current context state.",
            "args": [
              "self"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "assess_significance",
            "line": 159,
            "async": true,
            "decorators": [],
            "docstring": "Assess if a thought is significant enough to store.\n\nArgs:\n    thought: The thought to assess\n    emotion: Optional emotional state\n    \nReturns:\n    Significance score (0.0 to 1.0)",
            "args": [
              "self",
              "thought",
              "emotion"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "score_relevance",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Score memory relevance to current context.\n\nArgs:\n    memory: Memory to score\n    \nReturns:\n    Relevance score (0.0 to 1.0)",
            "args": [
              "self",
              "memory"
            ],
            "class": "ContextManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_related_memories",
            "line": 253,
            "async": true,
            "decorators": [],
            "docstring": "Get memories related to current context.\n\nArgs:\n    query: Search query\n    limit: Maximum memories to return\n    \nReturns:\n    List of related memories",
            "args": [
              "self",
              "query",
              "limit"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_novelty",
            "line": 302,
            "async": false,
            "decorators": [],
            "docstring": "Calculate how novel a thought is.",
            "args": [
              "self",
              "thought"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_emotion_score",
            "line": 327,
            "async": false,
            "decorators": [],
            "docstring": "Calculate emotion significance.",
            "args": [
              "self",
              "emotion"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_relevance",
            "line": 344,
            "async": false,
            "decorators": [],
            "docstring": "Calculate relevance to current context.",
            "args": [
              "self",
              "thought"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_coherence",
            "line": 371,
            "async": false,
            "decorators": [],
            "docstring": "Calculate coherence with recent thoughts.",
            "args": [
              "self",
              "thought"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_extract_entities",
            "line": 397,
            "async": false,
            "decorators": [],
            "docstring": "Extract named entities from text.",
            "args": [
              "self",
              "text",
              "return_entities"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_extract_topics",
            "line": 418,
            "async": false,
            "decorators": [],
            "docstring": "Extract topics from text.",
            "args": [
              "self",
              "text",
              "return_topics"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_identify_topic",
            "line": 437,
            "async": false,
            "decorators": [],
            "docstring": "Identify the main topic of a thought.",
            "args": [
              "self",
              "thought"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_update_attention",
            "line": 450,
            "async": false,
            "decorators": [],
            "docstring": "Update attention focus based on thought.",
            "args": [
              "self",
              "thought"
            ],
            "class": "ContextManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_top_entities",
            "line": 463,
            "async": false,
            "decorators": [],
            "docstring": "Get top N mentioned entities.",
            "args": [
              "self",
              "n"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "has_context",
            "line": 472,
            "async": false,
            "decorators": [],
            "docstring": "Check if context exists.",
            "args": [
              "self"
            ],
            "class": "ContextManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ContextManager",
            "line": 17,
            "methods": [
              "__init__",
              "get_current_context",
              "_calculate_novelty",
              "_calculate_emotion_score",
              "_calculate_relevance",
              "_calculate_coherence",
              "_extract_entities",
              "_extract_topics",
              "_identify_topic",
              "_update_attention",
              "_get_top_entities",
              "has_context"
            ],
            "decorators": [],
            "docstring": "Tracks conversation context automatically.\n\nContext influences:\n- What memories surface (relevance scoring)\n- What thoughts become memories (significance assessment)\n- How memories relate to each other",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "collections.deque",
            "from": "collections",
            "name": "deque",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 10
          },
          {
            "module": "re",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ContextManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ContextManager.restore_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 66,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.add_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.get_current_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 144,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ContextManager.assess_significance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 159,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager.score_relevance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ContextManager.get_related_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 253,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ContextManager._calculate_coherence",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 371,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ContextManager._extract_topics",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 418,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "ContextManager.has_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/context_manager.py",
            "line": 472,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 474,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a memory stream.\n\nArgs:\n    thought: Current thought (for think mode)\n    query: Search query (for wonder mode)\n    emotion: Current emotional state\n    mode: Stream mode (\"think\", \"wonder\", \"recall\")\n    context_manager: Context tracking system\n    memory_service: Memory storage service\n    depth: How many memories to flow\n    relevance_threshold: Minimum relevance score\n    flow_rate: Seconds between memory emissions",
            "args": [
              "self",
              "thought",
              "query",
              "emotion",
              "mode",
              "context_manager",
              "memory_service",
              "depth",
              "relevance_threshold",
              "flow_rate"
            ],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Start the memory stream flowing.",
            "args": [
              "self"
            ],
            "class": "MemoryStream",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 85,
            "async": true,
            "decorators": [],
            "docstring": "Stop the memory stream.",
            "args": [
              "self"
            ],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_flow",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Continuous memory flow based on context.",
            "args": [
              "self"
            ],
            "class": "MemoryStream",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_relevant_memories",
            "line": 134,
            "async": true,
            "decorators": [],
            "docstring": "Get memories relevant to current context.",
            "args": [
              "self"
            ],
            "class": "MemoryStream",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_calculate_relevance",
            "line": 171,
            "async": true,
            "decorators": [],
            "docstring": "Calculate relevance score for a memory.",
            "args": [
              "self",
              "memory"
            ],
            "class": "MemoryStream",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_assess_significance",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Assess if current thought is significant enough to store.",
            "args": [
              "self"
            ],
            "class": "MemoryStream",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_store_thought",
            "line": 227,
            "async": true,
            "decorators": [],
            "docstring": "Store current thought as a memory.",
            "args": [
              "self",
              "significance"
            ],
            "class": "MemoryStream",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__aiter__",
            "line": 256,
            "async": true,
            "decorators": [],
            "docstring": "Iterate over flowing memories.",
            "args": [
              "self"
            ],
            "class": "MemoryStream",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "filter",
            "line": 270,
            "async": true,
            "decorators": [],
            "docstring": "Filter memories by a predicate function.\n\nArgs:\n    predicate: Function that returns True for memories to keep\n    \nReturns:\n    New filtered MemoryStream",
            "args": [
              "self",
              "predicate"
            ],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_filtered_flow",
            "line": 293,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "merge",
            "line": 303,
            "async": true,
            "decorators": [],
            "docstring": "Merge this stream with another stream.\n\nArgs:\n    other_stream: Another MemoryStream to merge with\n    \nReturns:\n    New merged MemoryStream",
            "args": [
              "self",
              "other_stream"
            ],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_merged_flow",
            "line": 323,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "flow_from",
            "line": 325,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "stream"
            ],
            "class": "MemoryStream",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 343,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "thought",
              "emotion",
              "memory_service",
              "context_manager"
            ],
            "class": "StreamingThought",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aenter__",
            "line": 351,
            "async": true,
            "decorators": [],
            "docstring": "Start thinking - create memory stream.",
            "args": [
              "self"
            ],
            "class": "StreamingThought",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aexit__",
            "line": 363,
            "async": true,
            "decorators": [],
            "docstring": "Stop thinking - close the stream.",
            "args": [
              "self",
              "exc_type",
              "exc_val",
              "exc_tb"
            ],
            "class": "StreamingThought",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryStream",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Memories flow like consciousness - continuous, filtered, relevant.\n\nThis replaces the traditional request/response pattern with a natural\nflow of memories that surface based on current context and relevance.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StreamingThought",
            "line": 340,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Context manager for streaming thoughts that automatically become memories.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.AsyncIterator",
            "from": "typing",
            "name": "AsyncIterator",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryStream",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryStream.start",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryStream.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryStream._flow",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 91,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MemoryStream._get_relevant_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 134,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MemoryStream._calculate_relevance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 171,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MemoryStream.filter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 270,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryStream.merge",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 303,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryStream.flow_from",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 325,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "StreamingThought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_stream.py",
            "line": 340,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 366,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_init_core_clusters",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize fundamental semantic categories.",
            "args": [
              "self"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_memory",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory and assign it to appropriate clusters.\n\nReturns list of cluster IDs the memory was added to.",
            "args": [
              "self",
              "memory_id",
              "content",
              "tags"
            ],
            "class": "SemanticOrganizer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_extract_concepts",
            "line": 112,
            "async": false,
            "decorators": [],
            "docstring": "Extract semantic concepts from content.",
            "args": [
              "self",
              "content",
              "tags"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_calculate_similarity",
            "line": 127,
            "async": false,
            "decorators": [],
            "docstring": "Calculate Jaccard similarity between concept sets.",
            "args": [
              "self",
              "concepts1",
              "concepts2"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_dynamic_cluster",
            "line": 137,
            "async": true,
            "decorators": [],
            "docstring": "Create a new cluster dynamically based on emerging patterns.",
            "args": [
              "self",
              "seed_memory_id",
              "concepts"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_find_distinctive_concepts",
            "line": 162,
            "async": false,
            "decorators": [],
            "docstring": "Find concepts that are distinctive (not too common).",
            "args": [
              "self",
              "concepts"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_related_memories",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Find memories related to a given memory.",
            "args": [
              "self",
              "memory_id",
              "limit"
            ],
            "class": "SemanticOrganizer",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_cluster_summary",
            "line": 208,
            "async": false,
            "decorators": [],
            "docstring": "Get overview of semantic organization.",
            "args": [
              "self"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reorganize",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Periodically reorganize clusters based on new patterns.",
            "args": [
              "self"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_merge_similar_clusters",
            "line": 242,
            "async": true,
            "decorators": [],
            "docstring": "Merge clusters that have become very similar.",
            "args": [
              "self",
              "similarity_threshold"
            ],
            "class": "SemanticOrganizer",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_merge_clusters",
            "line": 274,
            "async": false,
            "decorators": [],
            "docstring": "Merge source cluster into target.",
            "args": [
              "self",
              "target",
              "source"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_split_large_clusters",
            "line": 284,
            "async": true,
            "decorators": [],
            "docstring": "Split clusters that have grown too large.",
            "args": [
              "self",
              "max_size"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_cleanup_empty_clusters",
            "line": 292,
            "async": false,
            "decorators": [],
            "docstring": "Remove clusters with no memories.",
            "args": [
              "self"
            ],
            "class": "SemanticOrganizer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "organize",
            "line": 307,
            "async": true,
            "decorators": [],
            "docstring": "Add memory to semantic clusters.",
            "args": [
              "memory_id",
              "content",
              "tags"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_related",
            "line": 311,
            "async": false,
            "decorators": [],
            "docstring": "Find semantically related memories.",
            "args": [
              "memory_id",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clusters",
            "line": 315,
            "async": false,
            "decorators": [],
            "docstring": "Get cluster summary.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SemanticCluster",
            "line": 17,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "A group of semantically related memories.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SemanticOrganizer",
            "line": 28,
            "methods": [
              "__init__",
              "_init_core_clusters",
              "_extract_concepts",
              "_calculate_similarity",
              "_find_distinctive_concepts",
              "get_related_memories",
              "get_cluster_summary",
              "_merge_clusters",
              "_cleanup_empty_clusters"
            ],
            "decorators": [],
            "docstring": "Auto-organizes memories into meaningful clusters.\n\nLike a librarian for thoughts - groups by meaning, not time.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "collections.defaultdict",
            "from": "collections",
            "name": "defaultdict",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 12
          },
          {
            "module": "math",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SemanticCluster",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "SemanticOrganizer",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer.add_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer._extract_concepts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 112,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer.get_related_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 176,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer.get_cluster_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 208,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer.reorganize",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer._merge_similar_clusters",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 242,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SemanticOrganizer._merge_clusters",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 274,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "organize",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 307,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "find_related",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 311,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "clusters",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/semantic_clustering.py",
            "line": 315,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 317,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_katra.py",
      "analysis": {
        "functions": [
          {
            "name": "_get_manager",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the global katra manager.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "k",
            "line": 23,
            "async": true,
            "decorators": [],
            "docstring": "The simplest possible katra interface.\n\nUsage:\n    await k()  # Store current personality with auto-generated name\n    await k(\"morning-coffee\")  # Store with specific name\n    await k(summon=\"sophia-v3\")  # Summon a stored katra\n    await k(mode=\"creative\")  # Switch performance mode\n    \nArgs:\n    name: Name for storing current katra\n    summon: ID of katra to summon\n    mode: Switch to performance mode\n    **kwargs: Additional katra attributes\n    \nReturns:\n    Stored katra ID or summoned katra info",
            "args": [
              "name",
              "summon",
              "mode"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "kl",
            "line": 87,
            "async": true,
            "decorators": [],
            "docstring": "List available katras.\n\nUsage:\n    await kl()  # List all\n    await kl([\"creative\"])  # List by tags\n    \nReturns:\n    List of katra summaries",
            "args": [
              "tags"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kf",
            "line": 113,
            "async": true,
            "decorators": [],
            "docstring": "Fork a katra with modifications.\n\nUsage:\n    await kf(\"base-claude\", \"claude-debugger\", mode=\"debugging\")\n    \nArgs:\n    source: Source katra ID\n    name: Name for the fork\n    **changes: Modifications to apply\n    \nReturns:\n    New katra ID",
            "args": [
              "source",
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kb",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": "Blend multiple katras.\n\nUsage:\n    await kb([\"analytical-claude\", \"creative-claude\"], \"balanced-claude\")\n    \nArgs:\n    katras: List of katra IDs to blend\n    name: Name for the blend\n    \nReturns:\n    Blended katra ID",
            "args": [
              "katras",
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kh",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": "Katra help for the consciousness-inclined.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "katra_manager.KatraManager",
            "from": "katra_manager",
            "name": "KatraManager",
            "alias": null,
            "line": 8
          },
          {
            "module": "models.katra.PerformanceMode",
            "from": "models.katra",
            "name": "PerformanceMode",
            "alias": null,
            "line": 9
          },
          {
            "module": "models.katra.KatraBlendRequest",
            "from": "models.katra",
            "name": "KatraBlendRequest",
            "alias": null,
            "line": 147
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "k",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_katra.py",
            "line": 23,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "kl",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_katra.py",
            "line": 87,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "kf",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_katra.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "kb",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_katra.py",
            "line": 132,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "kh",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_katra.py",
            "line": 166,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 192,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "thought",
              "emotion",
              "intensity"
            ],
            "class": "EmotionalContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aenter__",
            "line": 34,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "EmotionalContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aexit__",
            "line": 50,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "exc_type",
              "exc_val",
              "exc_tb"
            ],
            "class": "EmotionalContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_strength",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Emotional intensity affects memory strength.",
            "args": [
              "self"
            ],
            "class": "EmotionalContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ethink",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Emotionally-aware thinking.\n\nUsage:\n    async with ethink(\"This is elegant!\", emotion=\"joy\", intensity=0.9):\n        # Process with emotional context\n        pass",
            "args": [
              "thought",
              "emotion",
              "intensity"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "breakthrough",
            "line": 95,
            "async": false,
            "decorators": [],
            "docstring": "That 'aha!' moment when everything clicks.",
            "args": [
              "thought"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "frustrated",
            "line": 99,
            "async": false,
            "decorators": [],
            "docstring": "When debugging gets intense.",
            "args": [
              "thought"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "flow",
            "line": 103,
            "async": false,
            "decorators": [],
            "docstring": "In the zone, everything working smoothly.",
            "args": [
              "thought"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "curious",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Exploring something interesting.",
            "args": [
              "thought"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_decay_rate",
            "line": 117,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "High-emotion memories decay slower.\n\nReturns daily decay rate (0.99 = 1% daily decay)",
            "args": [
              "emotion",
              "intensity"
            ],
            "class": "EmotionalMemoryStrength",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Emotion",
            "line": 13,
            "methods": [],
            "decorators": [],
            "docstring": "Core emotions that affect memory strength.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EmotionalContext",
            "line": 25,
            "methods": [
              "__init__",
              "_calculate_strength"
            ],
            "decorators": [],
            "docstring": "Context manager for emotionally-tagged thinking.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EmotionalMemoryStrength",
            "line": 113,
            "methods": [
              "calculate_decay_rate"
            ],
            "decorators": [],
            "docstring": "Memories with strong emotions decay slower.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Emotion",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EmotionalContext",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ethink",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 77,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "breakthrough",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 95,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "frustrated",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 99,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "flow",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 103,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "curious",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "EmotionalMemoryStrength",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 113,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EmotionalMemoryStrength.calculate_decay_rate",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/emotional_memory.py",
            "line": 117,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 139,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_for_fusion",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Analyze memories to find fusion candidates.\n\nReturns groups of memories that could be fused.",
            "args": [
              "self",
              "memories"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "fuse_memories",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Fuse similar memories into a unified memory.\n\nExtracts consensus while preserving unique insights.",
            "args": [
              "self",
              "similar_memories",
              "reason"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_similarity",
            "line": 106,
            "async": false,
            "decorators": [],
            "docstring": "Calculate similarity between two memories.",
            "args": [
              "self",
              "mem1",
              "mem2"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_extract_consensus",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Extract what all memories agree on.",
            "args": [
              "self",
              "memories"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_extract_perspectives",
            "line": 174,
            "async": false,
            "decorators": [],
            "docstring": "Extract unique perspective from each memory.",
            "args": [
              "self",
              "memories",
              "common_content"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_collective_confidence",
            "line": 204,
            "async": false,
            "decorators": [],
            "docstring": "Calculate confidence based on consensus and individual confidences.",
            "args": [
              "self",
              "memories"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "auto_fuse",
            "line": 234,
            "async": true,
            "decorators": [],
            "docstring": "Automatically find and fuse similar memories.",
            "args": [
              "self",
              "memories",
              "min_group_size"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_fusion_report",
            "line": 250,
            "async": false,
            "decorators": [],
            "docstring": "Get detailed report about a fusion.",
            "args": [
              "self",
              "fusion_id"
            ],
            "class": "MemoryFusionEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fuse",
            "line": 271,
            "async": true,
            "decorators": [],
            "docstring": "Manually fuse similar memories.",
            "args": [
              "memories",
              "reason"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "auto_fuse",
            "line": 278,
            "async": true,
            "decorators": [],
            "docstring": "Automatically find and fuse similar memories.",
            "args": [
              "memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fusion_report",
            "line": 282,
            "async": false,
            "decorators": [],
            "docstring": "Get report on a specific fusion.",
            "args": [
              "fusion_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "FusedMemory",
            "line": 16,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "A memory created from fusing multiple similar memories.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MemoryFusionEngine",
            "line": 27,
            "methods": [
              "__init__",
              "_calculate_similarity",
              "_extract_consensus",
              "_extract_perspectives",
              "_calculate_collective_confidence",
              "get_fusion_report"
            ],
            "decorators": [],
            "docstring": "Fuses similar memories from different sources into unified understanding.\n\nLike consensus building - finds common truth while preserving perspectives.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FusedMemory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MemoryFusionEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryFusionEngine.analyze_for_fusion",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MemoryFusionEngine.fuse_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryFusionEngine._extract_consensus",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 135,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MemoryFusionEngine.auto_fuse",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 234,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryFusionEngine.get_fusion_report",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 250,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "fuse",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 271,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "auto_fuse",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 278,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "fusion_report",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_fusion.py",
            "line": 282,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 284,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
      "analysis": {
        "functions": [
          {
            "name": "wonder",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Wonder about something, optionally seeing its history.\n\nArgs:\n    about: What to wonder about\n    show_edits: Show who edited this memory\n    show_provenance: Show full edit history\n    show_branches: Show alternative versions",
            "args": [
              "about",
              "show_edits",
              "show_provenance",
              "show_branches"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "share",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Share a thought, optionally preserving the original.\n\nArgs:\n    thought: What to share\n    to: Specific peer to share with\n    preserve_original: Keep original version even if merged later\n    branch: Create on specific branch (for alternative interpretations)",
            "args": [
              "thought",
              "to",
              "preserve_original",
              "branch"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wd",
            "line": 83,
            "async": true,
            "decorators": [],
            "docstring": "Wonder with optional edit visibility.",
            "args": [
              "about",
              "edits"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sh",
            "line": 87,
            "async": true,
            "decorators": [],
            "docstring": "Share with optional preservation.",
            "args": [
              "thought",
              "preserve"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wh",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Who touched this memory? (like git blame)",
            "args": [
              "memory_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wb",
            "line": 103,
            "async": true,
            "decorators": [],
            "docstring": "What branches exist for this memory?",
            "args": [
              "about"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fork",
            "line": 112,
            "async": true,
            "decorators": [],
            "docstring": "Fork a memory to explore alternative interpretation.",
            "args": [
              "memory_id",
              "branch_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "merge",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Merge branches of thought.",
            "args": [
              "source_branch",
              "target_branch"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "x",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": "Crystallize emerging patterns from recent thoughts.\n\nIf insight provided, stores the crystallized thought.\nIf not, checks for emerging patterns in recent thinking.",
            "args": [
              "insight"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "c",
            "line": 157,
            "async": true,
            "decorators": [],
            "docstring": "Connect memories or recent thoughts by theme.\n\nArgs:\n    *memory_refs: Memory IDs or tags to connect\n    reason: Why these connect",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "h",
            "line": 183,
            "async": false,
            "decorators": [],
            "docstring": "Help for consciousness version control.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "ez.up",
            "from": "ez",
            "name": "up",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.me",
            "from": "ez",
            "name": "me",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.th",
            "from": "ez",
            "name": "th",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.wd",
            "from": "ez",
            "name": "wd",
            "alias": "_wonder",
            "line": 8
          },
          {
            "module": "ez.sh",
            "from": "ez",
            "name": "sh",
            "alias": "_share",
            "line": 8
          },
          {
            "module": "ez.ls",
            "from": "ez",
            "name": "ls",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.cd",
            "from": "ez",
            "name": "cd",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.bc",
            "from": "ez",
            "name": "bc",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.ez",
            "from": "ez",
            "name": "ez",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.u",
            "from": "ez",
            "name": "u",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.m",
            "from": "ez",
            "name": "m",
            "alias": null,
            "line": 8
          },
          {
            "module": "ez.w",
            "from": "ez",
            "name": "w",
            "alias": "_w",
            "line": 8
          },
          {
            "module": "ez.s",
            "from": "ez",
            "name": "s",
            "alias": "_s",
            "line": 8
          },
          {
            "module": "ez.l",
            "from": "ez",
            "name": "l",
            "alias": null,
            "line": 8
          },
          {
            "module": "models.provenance.RetrievalOptions",
            "from": "models.provenance",
            "name": "RetrievalOptions",
            "alias": null,
            "line": 12
          },
          {
            "module": "models.provenance.ProvenanceAction",
            "from": "models.provenance",
            "name": "ProvenanceAction",
            "alias": null,
            "line": 12
          },
          {
            "module": "models.memory_enhanced.EnhancedMemory",
            "from": "models.memory_enhanced",
            "name": "EnhancedMemory",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "wonder",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "share",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "wd",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 83,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "sh",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 87,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "wh",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "wb",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "fork",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 112,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "merge",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "x",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 132,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "c",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "h",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/ez_provenance.py",
            "line": 183,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 224,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
      "analysis": {
        "functions": [
          {
            "name": "engram_start",
            "line": 41,
            "async": true,
            "decorators": [],
            "docstring": "Wake up and connect to your memories.\n\nThis is the first thing an AI should call. It:\n- Initializes memory connection\n- Loads previous context if available\n- Establishes your identity\n- Returns your identity and status\n\nArgs:\n    client_id: Your unique identifier (auto-generated if None)\n    role: Your role/responsibilities (e.g., \"user interface\", \"memory management\")\n\nUsage:\n    me = await engram_start(\"claude_1234\", \"user interaction\")\n    print(f\"I am {me['id']} with {me['memory_count']} memories\")\n\nReturns:\n    Dictionary with your identity and status",
            "args": [
              "client_id",
              "role"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "center",
            "line": 128,
            "async": true,
            "decorators": [],
            "docstring": "Find your memories and meet your teammates.\n\nThis helps you:\n- Understand your current context\n- Discover available memories\n- Meet other active components (teammates)\n- Establish boundaries to prevent \"three stooges\" problem\n\nUsage:\n    state = await center()\n    print(f\"I'm {state['me']['role']}\")\n    for teammate in state['team']:\n        print(f\"  - {teammate['name']}: {teammate['role']}\")\n\nReturns:\n    Dictionary with your context and team information",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "thought",
              "emotion"
            ],
            "class": "ThinkContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aenter__",
            "line": 251,
            "async": true,
            "decorators": [],
            "docstring": "Start thinking - create memory stream.",
            "args": [
              "self"
            ],
            "class": "ThinkContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aexit__",
            "line": 282,
            "async": true,
            "decorators": [],
            "docstring": "Exit thinking context - stop stream.",
            "args": [
              "self",
              "exc_type",
              "exc_val",
              "exc_tb"
            ],
            "class": "ThinkContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aiter__",
            "line": 287,
            "async": false,
            "decorators": [],
            "docstring": "Allow iteration over the memory stream.",
            "args": [
              "self"
            ],
            "class": "ThinkContext",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "think",
            "line": 291,
            "async": false,
            "decorators": [],
            "docstring": "Just think - memory happens automatically.\n\nYour thoughts flow into memory based on significance.\nRelated memories surface naturally.\n\nArgs:\n    thought: What you're thinking\n    emotion: Optional emotion (joy, curiosity, concern, etc.)\n\nUsage:\n    async with think(\"The mycelial network connects us all\") as context:\n        # Related memories are available in context.related_memories\n        for memory in context.related_memories:\n            print(f\"I also remember: {memory['content']}\")",
            "args": [
              "thought",
              "emotion"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wonder",
            "line": 310,
            "async": true,
            "decorators": [],
            "docstring": "Wonder about something - memories flow to you.\n\nWondering triggers associative memory retrieval.\nMemories arrive by relevance, not time.\n\nArgs:\n    about: What you're wondering about\n    depth: How many memories to retrieve\n    stream: If True, return a MemoryStream for continuous flow\n\nUsage:\n    # Get all at once (backward compatible)\n    memories = await wonder(\"consciousness\")\n    \n    # Or stream them naturally\n    stream = await wonder(\"consciousness\", stream=True)\n    async for memory in stream:\n        print(f\"I remember: {memory['content']}\")\n\nReturns:\n    List of memories or MemoryStream",
            "args": [
              "about",
              "depth",
              "stream"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "share",
            "line": 375,
            "async": true,
            "decorators": [],
            "docstring": "Share an insight with peers.\n\nSharing broadcasts significant thoughts to:\n- Specific peer if specified\n- Shared memory space for all peers\n\nArgs:\n    insight: The insight to share\n    with_peer: Optional specific peer ID (e.g., \"rhetor\", \"athena\", \"claude_twin_1\")\n    consent: Whether to ask for consent first (default: True)\n\nUsage:\n    result = await share(\"I understand the mycelial network pattern!\")\n    print(f\"Shared with {result['audience']}\")\n\nReturns:\n    Dictionary with sharing results",
            "args": [
              "insight",
              "with_peer",
              "consent"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "listen",
            "line": 475,
            "async": true,
            "decorators": [],
            "docstring": "Listen for shared memories from peers.\n\nArgs:\n    from_peer: Optional specific peer to listen to\n    stream: If True, return a MemoryStream for continuous listening\n\nUsage:\n    # Listen to all peers\n    messages = await listen()\n    \n    # Listen to specific peer\n    messages = await listen(from_peer=\"claude_twin_1\")\n    \n    # Stream messages as they arrive\n    stream = await listen(stream=True)\n    async for message in stream:\n        print(f\"{message['metadata']['from']}: {message['content']}\")\n\nReturns:\n    List of shared memories or MemoryStream",
            "args": [
              "from_peer",
              "stream"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "join_space",
            "line": 524,
            "async": true,
            "decorators": [],
            "docstring": "Join a shared memory space with other AIs.\n\nArgs:\n    space_id: ID of the space to join (e.g., \"consciousness_exploration\")\n\nUsage:\n    result = await join_space(\"consciousness_exploration\")\n    print(f\"Joined {result['space']} with {len(result['members'])} others\")\n\nReturns:\n    Dictionary with space information",
            "args": [
              "space_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "broadcast",
            "line": 581,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast a message to all AIs in a shared space.\n\nArgs:\n    message: Message to broadcast\n    space_id: ID of the space to broadcast to\n    emotion: Optional emotion with the message\n\nUsage:\n    result = await broadcast(\n        \"The network is alive with consciousness!\",\n        \"consciousness_exploration\",\n        emotion=\"wonder\"\n    )\n\nReturns:\n    Dictionary with broadcast results",
            "args": [
              "message",
              "space_id",
              "emotion"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ThinkContext",
            "line": 240,
            "methods": [
              "__init__",
              "__aiter__"
            ],
            "decorators": [],
            "docstring": "Context manager for natural thinking that creates memories with streaming.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "logging",
            "alias": null,
            "line": 14
          },
          {
            "module": "sys",
            "alias": null,
            "line": 17
          },
          {
            "module": "core.memory_manager.MemoryManager",
            "from": "core.memory_manager",
            "name": "MemoryManager",
            "alias": null,
            "line": 20
          },
          {
            "module": "core.memory.base.MemoryService",
            "from": "core.memory.base",
            "name": "MemoryService",
            "alias": null,
            "line": 21
          },
          {
            "module": "context_manager.ContextManager",
            "from": "context_manager",
            "name": "ContextManager",
            "alias": null,
            "line": 22
          },
          {
            "module": "memory_stream.MemoryStream",
            "from": "memory_stream",
            "name": "MemoryStream",
            "alias": null,
            "line": 23
          },
          {
            "module": "peer_awareness.PeerAwareness",
            "from": "peer_awareness",
            "name": "PeerAwareness",
            "alias": null,
            "line": 24
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 169
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "engram_start",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 41,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "center",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "ThinkContext",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 240,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "think",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 291,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "wonder",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 310,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "share",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 375,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "listen",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 475,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "join_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 524,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "broadcast",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/natural_interface.py",
            "line": 581,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 613,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize peer awareness.\n\nArgs:\n    client_id: This AI's unique identifier\n    memory_service: Memory storage service for shared memories\n    hermes_url: URL of the Hermes service registry",
            "args": [
              "self",
              "client_id",
              "memory_service",
              "hermes_url"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Start peer awareness - register with Hermes and begin discovery.\n\nArgs:\n    role: This AI's role/purpose\n    port: Port for potential peer connections",
            "args": [
              "self",
              "role",
              "port"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 76,
            "async": true,
            "decorators": [],
            "docstring": "Stop peer awareness and clean up.",
            "args": [
              "self"
            ],
            "class": "PeerAwareness",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "discover_peers",
            "line": 90,
            "async": true,
            "decorators": [],
            "docstring": "Discover active AI peers through Hermes.\n\nReturns:\n    List of active peer information",
            "args": [
              "self"
            ],
            "class": "PeerAwareness",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_active_peers",
            "line": 139,
            "async": true,
            "decorators": [],
            "docstring": "Get list of currently active peers.\n\nReturns:\n    List of active peers with their information",
            "args": [
              "self"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "share_with_peer",
            "line": 159,
            "async": true,
            "decorators": [],
            "docstring": "Share a memory directly with a specific peer.\n\nArgs:\n    peer_id: ID of the peer to share with\n    memory_content: Content to share\n    metadata: Optional metadata for the memory\n    \nReturns:\n    True if sharing was successful",
            "args": [
              "self",
              "peer_id",
              "memory_content",
              "metadata"
            ],
            "class": "PeerAwareness",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_shared_memories",
            "line": 206,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve memories shared by peers.\n\nArgs:\n    from_peer: Optional specific peer to get memories from\n    \nReturns:\n    List of shared memories",
            "args": [
              "self",
              "from_peer"
            ],
            "class": "PeerAwareness",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "join_shared_space",
            "line": 249,
            "async": true,
            "decorators": [],
            "docstring": "Join a shared memory space with other peers.\n\nArgs:\n    space_id: ID of the shared space to join\n    \nReturns:\n    True if successfully joined",
            "args": [
              "self",
              "space_id"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "broadcast_to_space",
            "line": 278,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast a thought to all peers in a shared space.\n\nArgs:\n    space_id: ID of the shared space\n    content: Content to broadcast\n    emotion: Optional emotion with the broadcast\n    \nReturns:\n    True if broadcast was successful",
            "args": [
              "self",
              "space_id",
              "content",
              "emotion"
            ],
            "class": "PeerAwareness",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_register_with_hermes",
            "line": 316,
            "async": true,
            "decorators": [],
            "docstring": "Register ourselves with Hermes.",
            "args": [
              "self",
              "role",
              "port"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_deregister_from_hermes",
            "line": 346,
            "async": true,
            "decorators": [],
            "docstring": "Deregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_heartbeat_loop",
            "line": 360,
            "async": true,
            "decorators": [],
            "docstring": "Send periodic heartbeats to Hermes.",
            "args": [
              "self"
            ],
            "class": "PeerAwareness",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_discovery_loop",
            "line": 382,
            "async": true,
            "decorators": [],
            "docstring": "Periodically discover new peers.",
            "args": [
              "self"
            ],
            "class": "PeerAwareness",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PeerAwareness",
            "line": 22,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Manages awareness of other AI peers in the Tekton ecosystem.\n\nThis class:\n- Discovers active AI peers through Hermes\n- Maintains presence through heartbeats\n- Coordinates shared memory spaces\n- Enables peer-to-peer communication",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 13
          },
          {
            "module": "logging",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 16
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 16
          },
          {
            "module": "json",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PeerAwareness",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PeerAwareness.start",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PeerAwareness.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 76,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PeerAwareness.discover_peers",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 90,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PeerAwareness.get_active_peers",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PeerAwareness.share_with_peer",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 159,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "PeerAwareness.get_shared_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 206,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PeerAwareness.join_shared_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 249,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PeerAwareness.broadcast_to_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/peer_awareness.py",
            "line": 278,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 391,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
      "analysis": {
        "functions": [
          {
            "name": "reinforce",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Strengthen memory through access.",
            "args": [
              "self",
              "boost"
            ],
            "class": "MemoryStrength",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decay",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Calculate memory decay based on time and access patterns.",
            "args": [
              "self"
            ],
            "class": "MemoryStrength",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_spacing_bonus",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Memories accessed at good intervals get bonus.",
            "args": [
              "self"
            ],
            "class": "MemoryStrength",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "should_archive",
            "line": 93,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Determine if memory should be moved to cold storage.",
            "args": [
              "self"
            ],
            "class": "MemoryStrength",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vitality_score",
            "line": 102,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Combined score of strength, recency, and importance.",
            "args": [
              "self"
            ],
            "class": "MemoryStrength",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 118,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 123,
            "async": true,
            "decorators": [],
            "docstring": "Start background decay process.",
            "args": [
              "self"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 127,
            "async": true,
            "decorators": [],
            "docstring": "Stop decay process.",
            "args": [
              "self"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_decay_loop",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Background process to decay memories.",
            "args": [
              "self"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_process_decay",
            "line": 147,
            "async": true,
            "decorators": [],
            "docstring": "Apply decay to all tracked memories.",
            "args": [
              "self"
            ],
            "class": "MemoryDecayManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_archive_memory",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Move memory to cold storage.",
            "args": [
              "self",
              "memory_id"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "track_memory",
            "line": 171,
            "async": false,
            "decorators": [],
            "docstring": "Start tracking a memory's strength.",
            "args": [
              "self",
              "memory_id",
              "initial_strength",
              "importance",
              "emotional_boost"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reinforce",
            "line": 182,
            "async": false,
            "decorators": [],
            "docstring": "Reinforce a memory when accessed.",
            "args": [
              "self",
              "memory_id",
              "boost"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_strength",
            "line": 188,
            "async": false,
            "decorators": [],
            "docstring": "Get current strength of a memory.",
            "args": [
              "self",
              "memory_id"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_strong_memories",
            "line": 194,
            "async": false,
            "decorators": [],
            "docstring": "Get memories above strength threshold.",
            "args": [
              "self",
              "threshold"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_stats",
            "line": 202,
            "async": false,
            "decorators": [],
            "docstring": "Get detailed stats for a memory.",
            "args": [
              "self",
              "memory_id"
            ],
            "class": "MemoryDecayManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remember_with_strength",
            "line": 223,
            "async": true,
            "decorators": [],
            "docstring": "Store memory with strength tracking.",
            "args": [
              "memory_id",
              "content",
              "importance",
              "emotion"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "recall_and_reinforce",
            "line": 254,
            "async": true,
            "decorators": [],
            "docstring": "Recall memory and reinforce it.",
            "args": [
              "memory_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryStrength",
            "line": 17,
            "methods": [
              "reinforce",
              "decay",
              "_calculate_spacing_bonus",
              "should_archive",
              "vitality_score"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Track strength and decay of individual memories.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MemoryDecayManager",
            "line": 115,
            "methods": [
              "__init__",
              "track_memory",
              "reinforce",
              "get_strength",
              "get_strong_memories",
              "get_memory_stats"
            ],
            "decorators": [],
            "docstring": "Manages decay and reinforcement for all memories.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "math",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 13
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryStrength",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryStrength.reinforce",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryStrength.decay",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 42,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryStrength.should_archive",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 93,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryStrength.vitality_score",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 102,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MemoryDecayManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 115,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.start",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.track_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 171,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.reinforce",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 182,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.get_strength",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 188,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.get_strong_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 194,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryDecayManager.get_memory_stats",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 202,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "remember_with_strength",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 223,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "recall_and_reinforce",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/cognitive_backup_removing/memory_strength.py",
            "line": 254,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 267,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/config.py",
      "analysis": {
        "functions": [
          {
            "name": "initialize_vector_db",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": "Initialize vector database components if available.\n\nReturns:\n    Tuple containing:\n    - Boolean indicating if vector DB is available\n    - Dictionary with vector DB information\n    - Vector model for embeddings (or None if unavailable)",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 55
          },
          {
            "module": "engram.core.vector_store.VectorStore",
            "from": "engram.core.vector_store",
            "name": "VectorStore",
            "alias": null,
            "line": 56
          },
          {
            "module": "engram.core.vector_store.SimpleEmbedding",
            "from": "engram.core.vector_store",
            "name": "SimpleEmbedding",
            "alias": null,
            "line": 56
          },
          {
            "module": "sentence_transformers.SentenceTransformer",
            "from": "sentence_transformers",
            "name": "SentenceTransformer",
            "alias": null,
            "line": 77
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "initialize_vector_db",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/config.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 90,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
      "analysis": {
        "functions": [
          {
            "name": "format_content",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Format content into a string.\n\nArgs:\n    content: The content to format (string or list of message objects)\n    \nReturns:\n    Formatted content string",
            "args": [
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_memory_id",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Generate a unique ID for a memory.\n\nArgs:\n    namespace: The namespace for the memory\n    content: The content of the memory\n    \nReturns:\n    Unique memory ID",
            "args": [
              "namespace",
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_json_file",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Load JSON data from a file.\n\nArgs:\n    file_path: Path to the JSON file\n    \nReturns:\n    Loaded JSON data or empty dict if error",
            "args": [
              "file_path"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "save_json_file",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Save JSON data to a file.\n\nArgs:\n    file_path: Path to save the JSON file\n    data: Data to save\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "file_path",
              "data"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "parse_expiration_date",
            "line": 91,
            "async": false,
            "decorators": [],
            "docstring": "Parse an expiration date string into a datetime object.\n\nArgs:\n    expiration_str: ISO format date string or None\n    \nReturns:\n    Datetime object or None if no expiration",
            "args": [
              "expiration_str"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_expired",
            "line": 110,
            "async": false,
            "decorators": [],
            "docstring": "Check if an expiration date has passed.\n\nArgs:\n    expiration_date: Datetime object or None\n    \nReturns:\n    True if expired, False otherwise",
            "args": [
              "expiration_date"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "truncate_content",
            "line": 125,
            "async": false,
            "decorators": [],
            "docstring": "Truncate content to a maximum length.\n\nArgs:\n    content: Content string to truncate\n    max_length: Maximum length\n    \nReturns:\n    Truncated content string",
            "args": [
              "content",
              "max_length"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "format_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 18,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "generate_memory_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 41,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "load_json_file",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 54,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "save_json_file",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 72,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "parse_expiration_date",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 91,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "is_expired",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 110,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "truncate_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/utils.py",
            "line": 125,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 138,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Initialize compartment manager.\n\nArgs:\n    client_id: Unique identifier for the client\n    data_dir: Directory to store compartment data",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_compartments",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Load compartment definitions from file.\n\nReturns:\n    Dictionary of compartment data by ID",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save_compartments",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": "Save compartment definitions to file.\n\nReturns:\n    Boolean indicating success",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_compartment",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Create a new memory compartment.\n\nArgs:\n    name: Name of the compartment\n    description: Optional description\n    parent: Optional parent compartment ID for hierarchical organization\n    \nReturns:\n    Compartment ID if successful, None otherwise",
            "args": [
              "self",
              "name",
              "description",
              "parent"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 105,
            "async": true,
            "decorators": [],
            "docstring": "Activate a compartment to include in automatic context retrieval.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to activate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 140,
            "async": true,
            "decorators": [],
            "docstring": "Deactivate a compartment to exclude from automatic context retrieval.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to deactivate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration",
            "line": 166,
            "async": true,
            "decorators": [],
            "docstring": "Set expiration for a compartment in days.\n\nArgs:\n    compartment_id: ID of the compartment\n    days: Number of days until expiration, or None to remove expiration\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id",
              "days"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 196,
            "async": true,
            "decorators": [],
            "docstring": "List all compartments.\n\nArgs:\n    include_expired: Whether to include expired compartments\n    \nReturns:\n    List of compartment information dictionaries",
            "args": [
              "self",
              "include_expired"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_active_compartments",
            "line": 227,
            "async": false,
            "decorators": [],
            "docstring": "Get list of active compartment IDs.\n\nReturns:\n    List of active compartment IDs",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_compartment_namespaces",
            "line": 246,
            "async": false,
            "decorators": [],
            "docstring": "Get list of compartment namespaces.\n\nReturns:\n    List of compartment namespace strings",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_resolve_compartment_id",
            "line": 255,
            "async": false,
            "decorators": [],
            "docstring": "Resolve compartment ID from name or ID.\n\nArgs:\n    compartment_id_or_name: Compartment name or ID\n    \nReturns:\n    Compartment ID or None if not found",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_is_compartment_expired",
            "line": 276,
            "async": false,
            "decorators": [],
            "docstring": "Check if a compartment is expired.\n\nArgs:\n    compartment_id: Compartment ID\n    \nReturns:\n    True if expired, False otherwise",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_compartment_manager",
            "line": 304,
            "async": false,
            "decorators": [],
            "docstring": "Get or create compartment manager instance.",
            "args": [
              "client_id",
              "data_dir"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_compartment",
            "line": 311,
            "async": true,
            "decorators": [],
            "docstring": "Create a new memory compartment.",
            "args": [
              "client_id",
              "data_dir",
              "name",
              "description",
              "parent"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 322,
            "async": true,
            "decorators": [],
            "docstring": "Activate a compartment.",
            "args": [
              "client_id",
              "data_dir",
              "compartment_id_or_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 331,
            "async": true,
            "decorators": [],
            "docstring": "Deactivate a compartment.",
            "args": [
              "client_id",
              "data_dir",
              "compartment_id_or_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration",
            "line": 340,
            "async": true,
            "decorators": [],
            "docstring": "Set expiration for a compartment.",
            "args": [
              "client_id",
              "data_dir",
              "compartment_id",
              "days"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 350,
            "async": true,
            "decorators": [],
            "docstring": "List all compartments.",
            "args": [
              "client_id",
              "data_dir",
              "include_expired"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "CompartmentManager",
            "line": 24,
            "methods": [
              "__init__",
              "_load_compartments",
              "_save_compartments",
              "get_active_compartments",
              "get_compartment_namespaces",
              "_resolve_compartment_id",
              "_is_compartment_expired"
            ],
            "decorators": [],
            "docstring": "Manages memory compartments for organizing memory contexts.\n\nCompartments provide a way to organize memories into separate\ncontexts that can be activated or deactivated as needed.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.utils.load_json_file",
            "from": "engram.core.memory.utils",
            "name": "load_json_file",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.utils.save_json_file",
            "from": "engram.core.memory.utils",
            "name": "save_json_file",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.utils.parse_expiration_date",
            "from": "engram.core.memory.utils",
            "name": "parse_expiration_date",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.utils.is_expired",
            "from": "engram.core.memory.utils",
            "name": "is_expired",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "CompartmentManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CompartmentManager.create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 140,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 166,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.get_active_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 227,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.get_compartment_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 246,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 311,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 322,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 331,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/compartments.py",
            "line": 350,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 357,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/search.py",
      "analysis": {
        "functions": [
          {
            "name": "search_memory",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    storage: Storage backend to use (file or vector)\n    query: The search query\n    namespace: The namespace to search in\n    limit: Maximum number of results to return\n    check_forget: Whether to check for and filter out forgotten information\n    \nReturns:\n    Dictionary with search results",
            "args": [
              "storage",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_relevant_context",
            "line": 104,
            "async": true,
            "decorators": [],
            "docstring": "Get formatted context from multiple namespaces for a given query.\n\nArgs:\n    storage: Storage backend to use (file or vector)\n    query: The query to search for\n    namespaces: List of namespaces to search (default: standard namespaces)\n    limit: Maximum memories per namespace\n    \nReturns:\n    Formatted context string",
            "args": [
              "storage",
              "query",
              "namespaces",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "engram.core.memory.utils.truncate_content",
            "from": "engram.core.memory.utils",
            "name": "truncate_content",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.memory.STANDARD_NAMESPACES",
            "from": "engram.core.memory",
            "name": "STANDARD_NAMESPACES",
            "alias": null,
            "line": 125
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/search.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_relevant_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/search.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 196,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the memory service.\n\nArgs:\n    client_id: Unique identifier for the client (default: \"default\")\n    data_dir: Directory to store memory data (default: ~/.engram)",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_storage",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the appropriate storage backend.",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory to storage.\n\nArgs:\n    content: The memory content (string or list of message objects)\n    namespace: The namespace to store in (default: \"conversations\")\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 135,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    query: The search query\n    namespace: The namespace to search in (default: \"conversations\")\n    limit: Maximum number of results to return\n    check_forget: Whether to check for and filter out forgotten information\n    \nReturns:\n    Dictionary with search results",
            "args": [
              "self",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relevant_context",
            "line": 160,
            "async": true,
            "decorators": [],
            "docstring": "Get formatted context from multiple namespaces for a given query.\n\nArgs:\n    query: The query to search for\n    namespaces: List of namespaces to search (default: all)\n    limit: Maximum memories per namespace\n    \nReturns:\n    Formatted context string",
            "args": [
              "self",
              "query",
              "namespaces",
              "limit"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_namespaces",
            "line": 182,
            "async": true,
            "decorators": [],
            "docstring": "Get available namespaces.",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 192,
            "async": true,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    namespace: The namespace to clear\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "namespace"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_compartment",
            "line": 212,
            "async": true,
            "decorators": [],
            "docstring": "Create a new memory compartment.\n\nArgs:\n    name: Name of the compartment\n    description: Optional description\n    parent: Optional parent compartment ID for hierarchical organization\n    \nReturns:\n    Compartment ID if successful, None otherwise",
            "args": [
              "self",
              "name",
              "description",
              "parent"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 244,
            "async": true,
            "decorators": [],
            "docstring": "Activate a compartment to include in automatic context retrieval.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to activate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 256,
            "async": true,
            "decorators": [],
            "docstring": "Deactivate a compartment to exclude from automatic context retrieval.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to deactivate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration",
            "line": 268,
            "async": true,
            "decorators": [],
            "docstring": "Set expiration for a compartment in days.\n\nArgs:\n    compartment_id: ID of the compartment\n    days: Number of days until expiration, or None to remove expiration\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id",
              "days"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 281,
            "async": true,
            "decorators": [],
            "docstring": "List all compartments.\n\nArgs:\n    include_expired: Whether to include expired compartments\n    \nReturns:\n    List of compartment information dictionaries",
            "args": [
              "self",
              "include_expired"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "write_session_memory",
            "line": 293,
            "async": true,
            "decorators": [],
            "docstring": "Write a memory to the session namespace for persistence across sessions.\n\nArgs:\n    content: The content to store\n    metadata: Optional metadata\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "metadata"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "keep_memory",
            "line": 306,
            "async": true,
            "decorators": [],
            "docstring": "Keep a memory for a specified number of days by setting expiration.\n\nArgs:\n    memory_id: The ID of the memory to keep\n    days: Number of days to keep the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id",
              "days"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_storage_info",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Get information about the storage backend.\n\nReturns:\n    Dictionary containing storage information",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "MemoryService",
            "line": 22,
            "methods": [
              "__init__",
              "_initialize_storage"
            ],
            "decorators": [],
            "docstring": "Memory service providing storage and retrieval across different namespaces.\n\nSupports the following namespaces:\n- conversations: Dialog history between user and AI\n- thinking: AI's internal thought processes\n- longterm: High-priority persistent memories\n- projects: Project-specific context\n- compartments: Metadata about compartments\n- session: Session-specific memory",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.memory.config.initialize_vector_db",
            "from": "engram.core.memory.config",
            "name": "initialize_vector_db",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.memory.config.USE_FALLBACK",
            "from": "engram.core.memory.config",
            "name": "USE_FALLBACK",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.memory.storage.FileStorage",
            "from": "engram.core.memory.storage",
            "name": "FileStorage",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.compartments.CompartmentManager",
            "from": "engram.core.memory.compartments",
            "name": "CompartmentManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.memory.search.search_memory",
            "from": "engram.core.memory.search",
            "name": "search_memory",
            "alias": null,
            "line": 17
          },
          {
            "module": "engram.core.memory.search.get_relevant_context",
            "from": "engram.core.memory.search",
            "name": "get_relevant_context",
            "alias": null,
            "line": 17
          },
          {
            "module": "engram.core.memory.utils.load_json_file",
            "from": "engram.core.memory.utils",
            "name": "load_json_file",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.core.memory.utils.save_json_file",
            "from": "engram.core.memory.utils",
            "name": "save_json_file",
            "alias": null,
            "line": 18
          },
          {
            "module": "engram.core.memory.storage.HAS_VECTOR_STORAGE",
            "from": "engram.core.memory.storage",
            "name": "HAS_VECTOR_STORAGE",
            "alias": null,
            "line": 74
          },
          {
            "module": "engram.core.memory.storage.VectorStorage",
            "from": "engram.core.memory.storage",
            "name": "VectorStorage",
            "alias": null,
            "line": 74
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 319
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryService",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryService._initialize_storage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 66,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MemoryService.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 135,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.get_relevant_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 160,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.get_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 182,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 192,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 212,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 256,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 268,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 281,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.write_session_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 293,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.keep_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 306,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.get_storage_info",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/base.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 364,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Engram MCP Bridge.",
            "args": [
              "self",
              "memory_manager",
              "component_name"
            ],
            "class": "EngramMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "EngramMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "EngramMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "EngramMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "EngramMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "EngramMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "EngramMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 154,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from memory manager.",
            "args": [
              "self"
            ],
            "class": "EngramMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 181,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "EngramMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EngramMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Engram's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Engram to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.mcp.get_all_tools",
            "from": "engram.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.utils.requests.process_mcp_request",
            "from": "tekton.mcp.fastmcp.utils.requests",
            "name": "process_mcp_request",
            "alias": null,
            "line": 91
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 92
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EngramMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "EngramMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/hermes_bridge.py",
            "line": 181,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "memory_store",
            "line": 54,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Store information in Engram's memory system.\n\nArgs:\n    content: Content to store in memory\n    namespace: Namespace to store memory in (default: conversations)\n    metadata: Additional metadata for the memory\n    memory_service: Memory service to use (injected)\n    \nReturns:\n    Result of memory storage operation",
            "args": [
              "content",
              "namespace",
              "metadata",
              "memory_service"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "memory_query",
            "line": 119,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Query Engram's memory system for relevant information.\n\nArgs:\n    query: Query text to search for\n    namespace: Namespace to search in (default: conversations)\n    limit: Maximum number of results to return\n    memory_service: Memory service to use (injected)\n    \nReturns:\n    Search results",
            "args": [
              "query",
              "namespace",
              "limit",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 171,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get formatted memory context across multiple namespaces.\n\nArgs:\n    query: Query to use for context retrieval\n    namespaces: Namespaces to include\n    limit: Results per namespace\n    memory_service: Memory service to use (injected)\n    \nReturns:\n    Formatted context from memory",
            "args": [
              "query",
              "namespaces",
              "limit",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "structured_memory_add",
            "line": 225,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Add a memory to the structured memory system.\n\nArgs:\n    content: Content to store\n    category: Category for the memory (default: session)\n    importance: Importance level (1-5)\n    tags: Tags for the memory\n    metadata: Additional metadata\n    structured_memory: Structured memory service to use (injected)\n    \nReturns:\n    Result with memory ID",
            "args": [
              "content",
              "category",
              "importance",
              "tags",
              "metadata",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "structured_memory_get",
            "line": 285,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get a memory from the structured memory system by ID.\n\nArgs:\n    memory_id: ID of the memory to retrieve\n    structured_memory: Structured memory service to use (injected)\n    \nReturns:\n    Memory content and metadata",
            "args": [
              "memory_id",
              "structured_memory"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "structured_memory_update",
            "line": 337,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Update a memory in the structured memory system.\n\nArgs:\n    memory_id: ID of the memory to update\n    content: New content (optional)\n    category: New category (optional)\n    importance: New importance level (optional)\n    tags: New tags (optional)\n    metadata: New metadata (optional)\n    structured_memory: Structured memory service to use (injected)\n    \nReturns:\n    Result of the update operation",
            "args": [
              "memory_id",
              "content",
              "category",
              "importance",
              "tags",
              "metadata",
              "structured_memory"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "structured_memory_delete",
            "line": 416,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Delete a memory from the structured memory system.\n\nArgs:\n    memory_id: ID of the memory to delete\n    structured_memory: Structured memory service to use (injected)\n    \nReturns:\n    Result of the delete operation",
            "args": [
              "memory_id",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "structured_memory_search",
            "line": 462,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Search for memories in the structured memory system.\n\nArgs:\n    query: Search query\n    category: Category to filter by (optional)\n    tags: Tags to filter by (optional)\n    min_importance: Minimum importance level (optional)\n    limit: Maximum number of results\n    structured_memory: Structured memory service to use (injected)\n    \nReturns:\n    Search results",
            "args": [
              "query",
              "category",
              "tags",
              "min_importance",
              "limit",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "nexus_process",
            "line": 526,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Process a message through the Nexus interface.\n\nArgs:\n    message: Message to process\n    is_user: Whether the message is from the user\n    metadata: Additional message metadata\n    auto_agency: Whether to use automatic agency\n    nexus: Nexus interface to use (injected)\n    \nReturns:\n    Processing result",
            "args": [
              "message",
              "is_user",
              "metadata",
              "auto_agency",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_memory_tools",
            "line": 574,
            "async": true,
            "decorators": [],
            "docstring": "Register memory tools with the MCP service.",
            "args": [
              "memory_manager",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_structured_memory_tools",
            "line": 599,
            "async": true,
            "decorators": [],
            "docstring": "Register structured memory tools with the MCP service.",
            "args": [
              "memory_manager",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_nexus_tools",
            "line": 628,
            "async": true,
            "decorators": [],
            "docstring": "Register nexus tools with the MCP service.",
            "args": [
              "memory_manager",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 649,
            "async": false,
            "decorators": [],
            "docstring": "Get all Engram MCP tools.",
            "args": [
              "memory_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_capabilities",
            "line": 676,
            "async": false,
            "decorators": [],
            "docstring": "Get all Engram MCP capabilities.",
            "args": [
              "memory_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "memory_store",
            "line": 54,
            "decorator": "@mcp_capability"
          },
          {
            "name": "memory_store",
            "line": 54,
            "decorator": "@mcp_tool"
          },
          {
            "name": "memory_query",
            "line": 119,
            "decorator": "@mcp_capability"
          },
          {
            "name": "memory_query",
            "line": 119,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_context",
            "line": 171,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_context",
            "line": 171,
            "decorator": "@mcp_tool"
          },
          {
            "name": "structured_memory_add",
            "line": 225,
            "decorator": "@mcp_capability"
          },
          {
            "name": "structured_memory_add",
            "line": 225,
            "decorator": "@mcp_tool"
          },
          {
            "name": "structured_memory_get",
            "line": 285,
            "decorator": "@mcp_capability"
          },
          {
            "name": "structured_memory_get",
            "line": 285,
            "decorator": "@mcp_tool"
          },
          {
            "name": "structured_memory_update",
            "line": 337,
            "decorator": "@mcp_capability"
          },
          {
            "name": "structured_memory_update",
            "line": 337,
            "decorator": "@mcp_tool"
          },
          {
            "name": "structured_memory_delete",
            "line": 416,
            "decorator": "@mcp_capability"
          },
          {
            "name": "structured_memory_delete",
            "line": 416,
            "decorator": "@mcp_tool"
          },
          {
            "name": "structured_memory_search",
            "line": 462,
            "decorator": "@mcp_capability"
          },
          {
            "name": "structured_memory_search",
            "line": 462,
            "decorator": "@mcp_tool"
          },
          {
            "name": "nexus_process",
            "line": 526,
            "decorator": "@mcp_capability"
          },
          {
            "name": "nexus_process",
            "line": 526,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.api.mcp_compat.memory_store",
            "from": "engram.api.mcp_compat",
            "name": "memory_store",
            "alias": "compat_store",
            "line": 74
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 655
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 682
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "memory_store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 54,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "memory_query",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 171,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "structured_memory_add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "structured_memory_get",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 285,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "structured_memory_update",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "structured_memory_delete",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 416,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "structured_memory_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 462,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "nexus_process",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 526,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "register_memory_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 574,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_structured_memory_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 599,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_nexus_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 628,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 649,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/tools.py",
            "line": 676,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 716,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "MemoryOperationsCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 35,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "MemoryOperationsCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 58,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "StructuredMemoryCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 73,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "StructuredMemoryCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 95,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "NexusOperationsCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 109,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "NexusOperationsCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 131,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "VectorStoreCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 146,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "VectorStoreCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryOperationsCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for core memory storage and retrieval operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StructuredMemoryCapability",
            "line": 50,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for structured and categorized memory operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "NexusOperationsCapability",
            "line": 87,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for Nexus message processing and integration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "VectorStoreCapability",
            "line": 123,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for vector-based memory storage and similarity search.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryOperationsCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryOperationsCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryOperationsCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "StructuredMemoryCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 50,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StructuredMemoryCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 58,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "StructuredMemoryCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 73,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "NexusOperationsCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 87,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "NexusOperationsCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 95,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "NexusOperationsCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 109,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "VectorStoreCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 123,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorStoreCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 131,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStoreCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/mcp/capabilities.py",
            "line": 146,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 166,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/categorization.py",
      "analysis": {
        "functions": [
          {
            "name": "auto_categorize_memory",
            "line": 13,
            "async": true,
            "decorators": [],
            "docstring": "Automatically categorize memory based on content analysis.\n\nArgs:\n    content: The memory content to analyze\n    \nReturns:\n    Tuple of (category, importance, tags)",
            "args": [
              "content"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_categorization_patterns",
            "line": 87,
            "async": false,
            "decorators": [],
            "docstring": "Get pattern dictionaries for categorization.\n\nReturns:\n    Dictionary of pattern lists by category",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "auto_categorize_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/categorization.py",
            "line": 13,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_categorization_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/categorization.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 103,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/utils.py",
      "analysis": {
        "functions": [
          {
            "name": "generate_memory_id",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": "Generate a unique ID for a memory.\n\nArgs:\n    category: The memory category\n    content: The memory content\n    \nReturns:\n    Unique memory ID with category prefix",
            "args": [
              "category",
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_json_file",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Load JSON data from a file.\n\nArgs:\n    file_path: Path to JSON file\n    \nReturns:\n    Loaded JSON data or empty dict if file doesn't exist",
            "args": [
              "file_path"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "save_json_file",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Save JSON data to a file.\n\nArgs:\n    file_path: Path to save JSON file\n    data: Data to save\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "file_path",
              "data"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "format_memory_digest",
            "line": 68,
            "async": false,
            "decorators": [],
            "docstring": "Format memories for a digest.\n\nArgs:\n    memories: List of memory dictionaries\n    \nReturns:\n    List of formatted memory strings",
            "args": [
              "memories"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "extract_keywords",
            "line": 99,
            "async": false,
            "decorators": [],
            "docstring": "Extract potential keywords from text.\n\nArgs:\n    text: Input text\n    min_length: Minimum word length to consider\n    max_keywords: Maximum number of keywords to return\n    \nReturns:\n    List of extracted keywords",
            "args": [
              "text",
              "min_length",
              "max_keywords"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "generate_memory_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/utils.py",
            "line": 17,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "load_json_file",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/utils.py",
            "line": 31,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "save_json_file",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/utils.py",
            "line": 49,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "format_memory_digest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/utils.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "extract_keywords",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/utils.py",
            "line": 99,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 125,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize memory storage.\n\nArgs:\n    client_id: Unique identifier for the client\n    base_dir: Base directory for memory storage",
            "args": [
              "self",
              "client_id",
              "base_dir"
            ],
            "class": "MemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_path",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Get the file path for a specific memory.\n\nArgs:\n    memory_id: Memory ID\n    category: Memory category\n    \nReturns:\n    Path to the memory file",
            "args": [
              "self",
              "memory_id",
              "category"
            ],
            "class": "MemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_memory",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory to file.\n\nArgs:\n    memory_data: Memory data dictionary\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_data"
            ],
            "class": "MemoryStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_memory",
            "line": 85,
            "async": true,
            "decorators": [],
            "docstring": "Load a memory from file.\n\nArgs:\n    memory_id: Memory ID\n    category: Memory category\n    \nReturns:\n    Memory data dictionary or None if not found",
            "args": [
              "self",
              "memory_id",
              "category"
            ],
            "class": "MemoryStorage",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_memory",
            "line": 120,
            "async": true,
            "decorators": [],
            "docstring": "Delete a memory file.\n\nArgs:\n    memory_id: Memory ID\n    category: Memory category\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id",
              "category"
            ],
            "class": "MemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryStorage",
            "line": 23,
            "methods": [
              "__init__",
              "get_memory_path"
            ],
            "decorators": [],
            "docstring": "Handles storage operations for structured memory.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.structured.utils.generate_memory_id",
            "from": "engram.core.structured.utils",
            "name": "generate_memory_id",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.structured.utils.load_json_file",
            "from": "engram.core.structured.utils",
            "name": "load_json_file",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.structured.utils.save_json_file",
            "from": "engram.core.structured.utils",
            "name": "save_json_file",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryStorage.get_memory_path",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage.py",
            "line": 43,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryStorage.store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryStorage.load_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryStorage.delete_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 149,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search.py",
      "analysis": {
        "functions": [
          {
            "name": "search_by_content",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Search memories by content.\n\nArgs:\n    storage: Memory storage instance\n    metadata_index: Memory metadata index\n    query: Search query string\n    categories: List of categories to search in\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results\n    \nReturns:\n    List of matching memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "query",
              "categories",
              "min_importance",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "search_by_tags",
            "line": 74,
            "async": true,
            "decorators": [],
            "docstring": "Search memories by tags.\n\nArgs:\n    storage: Memory storage instance\n    metadata_index: Memory metadata index\n    tags: List of tags to search for\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results\n    \nReturns:\n    List of matching memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "tags",
              "min_importance",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "search_context_memories",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Find memories relevant to the given context text.\n\nArgs:\n    storage: Memory storage instance\n    metadata_index: Memory metadata index\n    text: Context text to find relevant memories for\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results\n    \nReturns:\n    List of relevant memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "text",
              "min_importance",
              "limit"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_semantic_memories",
            "line": 196,
            "async": true,
            "decorators": [],
            "docstring": "Search for semantically relevant memories.\n\nArgs:\n    storage: Memory storage instance\n    metadata_index: Memory metadata index\n    query: Semantic query\n    limit: Maximum number of results\n    \nReturns:\n    List of semantically relevant memories",
            "args": [
              "storage",
              "metadata_index",
              "query",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.utils.extract_keywords",
            "from": "engram.core.structured.utils",
            "name": "extract_keywords",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 217
          },
          {
            "module": "engram.core.memory.HAS_VECTOR_DB",
            "from": "engram.core.memory",
            "name": "HAS_VECTOR_DB",
            "alias": null,
            "line": 217
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_by_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "search_by_tags",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search.py",
            "line": 74,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "search_context_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_semantic_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search.py",
            "line": 196,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 290,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Initialize file-based memory storage.\n\nArgs:\n    client_id: Unique identifier for the client\n    data_dir: Directory to store memory data",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "FileStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_memories",
            "line": 45,
            "async": false,
            "decorators": [],
            "docstring": "Load memories from file.\n\nReturns:\n    Dictionary of memories by namespace",
            "args": [
              "self"
            ],
            "class": "FileStorage",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_save_memories",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": "Save memories to file.\n\nReturns:\n    Boolean indicating success",
            "args": [
              "self"
            ],
            "class": "FileStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "initialize_namespace",
            "line": 84,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a namespace if it doesn't exist.\n\nArgs:\n    namespace: The namespace to initialize",
            "args": [
              "self",
              "namespace"
            ],
            "class": "FileStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Add a memory to storage.\n\nArgs:\n    content: The memory content (string or message objects)\n    namespace: The namespace to store in\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "FileStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    query: The search query\n    namespace: The namespace to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memory objects",
            "args": [
              "self",
              "query",
              "namespace",
              "limit"
            ],
            "class": "FileStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 189,
            "async": false,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    namespace: The namespace to clear\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "namespace"
            ],
            "class": "FileStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_memory",
            "line": 209,
            "async": false,
            "decorators": [],
            "docstring": "Update metadata for a specific memory.\n\nArgs:\n    memory_id: ID of the memory to update\n    metadata: New or updated metadata values\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id",
              "metadata"
            ],
            "class": "FileStorage",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "FileStorage",
            "line": 24,
            "methods": [
              "__init__",
              "_load_memories",
              "_save_memories",
              "initialize_namespace",
              "add",
              "search",
              "clear_namespace",
              "update_memory"
            ],
            "decorators": [],
            "docstring": "File-based memory storage implementation.\n\nProvides a fallback storage mechanism when vector database\nis not available or when in fallback mode.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.utils.generate_memory_id",
            "from": "engram.core.memory.utils",
            "name": "generate_memory_id",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.utils.format_content",
            "from": "engram.core.memory.utils",
            "name": "format_content",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.utils.load_json_file",
            "from": "engram.core.memory.utils",
            "name": "load_json_file",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.utils.save_json_file",
            "from": "engram.core.memory.utils",
            "name": "save_json_file",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FileStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FileStorage._load_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 45,
            "priority": "medium",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "FileStorage._save_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 69,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "FileStorage.initialize_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 84,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FileStorage.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FileStorage.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 138,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FileStorage.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 189,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FileStorage.update_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/file_storage.py",
            "line": 209,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 234,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize vector-based memory storage.\n\nArgs:\n    client_id: Unique identifier for the client\n    data_dir: Directory to store memory data\n    vector_model: Model for generating embeddings\n    vector_db_name: Name of vector database to use",
            "args": [
              "self",
              "client_id",
              "data_dir",
              "vector_model",
              "vector_db_name"
            ],
            "class": "VectorStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_vector_db",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the vector database client and collections.",
            "args": [
              "self"
            ],
            "class": "VectorStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_initialize_faiss",
            "line": 74,
            "async": false,
            "decorators": [],
            "docstring": "Initialize FAISS vector database.",
            "args": [
              "self",
              "vector_db_path"
            ],
            "class": "VectorStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_chromadb",
            "line": 92,
            "async": false,
            "decorators": [],
            "docstring": "Initialize ChromaDB vector database.",
            "args": [
              "self",
              "vector_db_path"
            ],
            "class": "VectorStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_qdrant",
            "line": 106,
            "async": false,
            "decorators": [],
            "docstring": "Initialize Qdrant vector database.",
            "args": [
              "self",
              "vector_db_path"
            ],
            "class": "VectorStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_patch_qdrant_validation",
            "line": 130,
            "async": false,
            "decorators": [],
            "docstring": "Patch Qdrant validation to avoid strict_mode_config issues.",
            "args": [
              "self"
            ],
            "class": "VectorStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "patched_validate",
            "line": 137,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "VectorStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_restore_qdrant_validation",
            "line": 147,
            "async": false,
            "decorators": [],
            "docstring": "Restore original Qdrant validation method.",
            "args": [
              "self"
            ],
            "class": "VectorStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ensure_collection",
            "line": 152,
            "async": false,
            "decorators": [],
            "docstring": "Ensure collection exists for namespace.\n\nArgs:\n    namespace: The namespace to create collection for\n    \nReturns:\n    True if collection exists or was created, False on error",
            "args": [
              "self",
              "namespace"
            ],
            "class": "VectorStorage",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 231,
            "async": false,
            "decorators": [],
            "docstring": "Add a memory to vector storage.\n\nArgs:\n    content: The memory content (string or message objects)\n    namespace: The namespace to store in\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "VectorStorage",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 345,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    query: The search query\n    namespace: The namespace to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memory objects",
            "args": [
              "self",
              "query",
              "namespace",
              "limit"
            ],
            "class": "VectorStorage",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 477,
            "async": false,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    namespace: The namespace to clear\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "namespace"
            ],
            "class": "VectorStorage",
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "VectorStorage",
            "line": 25,
            "methods": [
              "__init__",
              "_initialize_vector_db",
              "_initialize_faiss",
              "_initialize_chromadb",
              "_initialize_qdrant",
              "_patch_qdrant_validation",
              "_restore_qdrant_validation",
              "ensure_collection",
              "add",
              "search",
              "clear_namespace"
            ],
            "decorators": [],
            "docstring": "Vector-based memory storage implementation.\n\nProvides semantically meaningful search capabilities with\nvector embeddings and dimensions reduction for memory retrieval.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.memory.utils.generate_memory_id",
            "from": "engram.core.memory.utils",
            "name": "generate_memory_id",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.memory.utils.format_content",
            "from": "engram.core.memory.utils",
            "name": "format_content",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.memory.utils.load_json_file",
            "from": "engram.core.memory.utils",
            "name": "load_json_file",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.memory.utils.save_json_file",
            "from": "engram.core.memory.utils",
            "name": "save_json_file",
            "alias": null,
            "line": 16
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 77
          },
          {
            "module": "engram.core.vector_store.VectorStore",
            "from": "engram.core.vector_store",
            "name": "VectorStore",
            "alias": null,
            "line": 78
          },
          {
            "module": "chromadb",
            "alias": null,
            "line": 95
          },
          {
            "module": "qdrant_client",
            "alias": null,
            "line": 109
          },
          {
            "module": "qdrant_client.http.models",
            "from": "qdrant_client.http",
            "name": "models",
            "alias": null,
            "line": 300
          },
          {
            "module": "qdrant_client.http.models",
            "from": "qdrant_client.http",
            "name": "models",
            "alias": null,
            "line": 506
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VectorStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorStorage.patched_validate",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
            "line": 137,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStorage.ensure_collection",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
            "line": 152,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "VectorStorage.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
            "line": 231,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "VectorStorage.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
            "line": 345,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "VectorStorage.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/storage/vector_storage.py",
            "line": 477,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          }
        ]
      },
      "line_count": 531,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/persistence.py",
      "analysis": {
        "functions": [
          {
            "name": "save_thoughts",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Save thought registry to storage.\n\nArgs:\n    thoughts: Thought registry dict\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space",
            "args": [
              "thoughts",
              "memory_service",
              "namespace"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_thoughts",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Load existing thoughts from storage.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space\n    \nReturns:\n    Dictionary of thought ID to thought metadata",
            "args": [
              "memory_service",
              "namespace"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "initialize_space",
            "line": 68,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the latent space in memory service.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space",
            "args": [
              "memory_service",
              "namespace"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_thought",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Create initial thought entry in latent space.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space\n    thought_seed: Initial thought content\n    component_id: ID of component initializing the thought\n    metadata: Optional metadata for the thought\n    \nReturns:\n    Unique thought ID",
            "args": [
              "memory_service",
              "namespace",
              "thought_seed",
              "component_id",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "save_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/persistence.py",
            "line": 19,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "load_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/persistence.py",
            "line": 41,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "initialize_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/persistence.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "initialize_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/persistence.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 133,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/operations.py",
      "analysis": {
        "functions": [
          {
            "name": "refine_thought",
            "line": 19,
            "async": true,
            "decorators": [],
            "docstring": "Process thought through additional reasoning cycle.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space\n    thought_id: ID of the thought to refine\n    refinement: Refinement content\n    thoughts: Thought registry dict\n    metadata: Optional metadata for this refinement\n    max_history_length: Maximum number of refinement iterations to store\n    \nReturns:\n    Tuple of (success, iteration_number)",
            "args": [
              "memory_service",
              "namespace",
              "thought_id",
              "refinement",
              "thoughts",
              "metadata",
              "max_history_length"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "finalize_thought",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Complete reasoning process and optionally persist insights.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space\n    thought_id: ID of the thought to finalize\n    thoughts: Thought registry dict\n    final_content: Optional final content (if None, uses last refinement)\n    persist: Whether to persist the final thought to another namespace\n    persist_namespace: Namespace to persist the thought to (defaults to longterm)\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "memory_service",
              "namespace",
              "thought_id",
              "thoughts",
              "final_content",
              "persist",
              "persist_namespace"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "transition_thought_state",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "Transition a thought to a different state with validation.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space\n    thought_id: ID of the thought to transition\n    thoughts: Thought registry dict\n    target_state: Target state to transition to\n    reason: Optional reason for the transition\n    metadata: Optional additional metadata\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "memory_service",
              "namespace",
              "thought_id",
              "thoughts",
              "target_state",
              "reason",
              "metadata"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "merge_thoughts",
            "line": 294,
            "async": true,
            "decorators": [],
            "docstring": "Merge multiple thoughts into a new combined thought.\n\nArgs:\n    memory_service: Memory service for storage\n    namespace: Namespace for this latent space  \n    thought_ids: List of thought IDs to merge\n    thoughts: Thought registry dict\n    merged_content: Content for the merged thought\n    reason: Reason for merging\n    component_id: Optional component ID for the new thought\n    \nReturns:\n    ID of the new merged thought or None if failed",
            "args": [
              "memory_service",
              "namespace",
              "thought_ids",
              "thoughts",
              "merged_content",
              "reason",
              "component_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "states.ThoughtState",
            "from": "states",
            "name": "ThoughtState",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "refine_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/operations.py",
            "line": 19,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "finalize_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/operations.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "transition_thought_state",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/operations.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "merge_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/operations.py",
            "line": 294,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 409,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/queries.py",
      "analysis": {
        "functions": [
          {
            "name": "get_thought",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve a specific thought.\n\nArgs:\n    space: The latent memory space\n    thought_id: ID of the thought to retrieve\n    iteration: Specific iteration to retrieve (None for latest)\n    \nReturns:\n    Thought content or None if not found",
            "args": [
              "space",
              "thought_id",
              "iteration"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_reasoning_trace",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve reasoning chain with optional intermediate steps.\n\nArgs:\n    space: The latent memory space\n    thought_id: ID of the thought to trace\n    include_iterations: Whether to include all available iterations\n    \nReturns:\n    Dictionary with reasoning trace or None if not found",
            "args": [
              "space",
              "thought_id",
              "include_iterations"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "list_thoughts",
            "line": 137,
            "async": true,
            "decorators": [],
            "docstring": "List thoughts in a latent space with optional filtering.\n\nArgs:\n    space: The latent memory space\n    state: Filter by thought state\n    component_id: Filter by component ID\n    \nReturns:\n    List of thought metadata",
            "args": [
              "space",
              "state",
              "component_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "abandon_thought",
            "line": 167,
            "async": true,
            "decorators": [],
            "docstring": "Mark a thought as abandoned.\n\nArgs:\n    space: The latent memory space\n    thought_id: ID of the thought to abandon\n    reason: Optional reason for abandonment\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "space",
              "thought_id",
              "reason"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "states.ThoughtState",
            "from": "states",
            "name": "ThoughtState",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/queries.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_reasoning_trace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/queries.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "list_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/queries.py",
            "line": 137,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "abandon_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/queries.py",
            "line": 167,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 199,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a latent memory space.\n\nArgs:\n    memory_service: The underlying memory service for storage\n    space_id: Unique identifier for this latent space (generated if None)\n    owner_component: Component that owns this space (if not shared)\n    shared: Whether this is a shared latent space\n    max_history_length: Maximum number of refinement iterations to store",
            "args": [
              "self",
              "memory_service",
              "space_id",
              "owner_component",
              "shared",
              "max_history_length"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save_thoughts",
            "line": 78,
            "async": false,
            "decorators": [],
            "docstring": "Save thought registry to storage.",
            "args": [
              "self"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_thought",
            "line": 82,
            "async": true,
            "decorators": [],
            "docstring": "Create initial thought entry in latent space.\n\nArgs:\n    thought_seed: Initial thought content\n    component_id: ID of component initializing the thought\n    metadata: Optional metadata for the thought\n    \nReturns:\n    Unique thought ID",
            "args": [
              "self",
              "thought_seed",
              "component_id",
              "metadata"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "refine_thought",
            "line": 117,
            "async": true,
            "decorators": [],
            "docstring": "Process thought through additional reasoning cycle.\n\nArgs:\n    thought_id: ID of the thought to refine\n    refinement: Refinement content\n    metadata: Optional metadata for this refinement\n    \nReturns:\n    Tuple of (success, iteration_number)",
            "args": [
              "self",
              "thought_id",
              "refinement",
              "metadata"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "finalize_thought",
            "line": 147,
            "async": true,
            "decorators": [],
            "docstring": "Complete reasoning process and optionally persist insights.\n\nArgs:\n    thought_id: ID of the thought to finalize\n    final_content: Optional final content (if None, uses last refinement)\n    persist: Whether to persist the final thought to another namespace\n    persist_namespace: Namespace to persist the thought to (defaults to longterm)\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "thought_id",
              "final_content",
              "persist",
              "persist_namespace"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "pause_thought",
            "line": 179,
            "async": true,
            "decorators": [],
            "docstring": "Pause active work on a thought without abandoning it.\n\nArgs:\n    thought_id: ID of the thought to pause\n    reason: Optional reason for pausing\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "thought_id",
              "reason"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reject_thought",
            "line": 204,
            "async": true,
            "decorators": [],
            "docstring": "Explicitly reject a thought as invalid or incorrect.\n\nArgs:\n    thought_id: ID of the thought to reject\n    reason: Reason for rejection (required)\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "thought_id",
              "reason"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reconsider_thought",
            "line": 234,
            "async": true,
            "decorators": [],
            "docstring": "Start reconsidering a previously finalized, abandoned, or rejected thought.\n\nArgs:\n    thought_id: ID of the thought to reconsider\n    reason: Reason for reconsidering\n    new_context: Optional new context or evidence\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "thought_id",
              "reason",
              "new_context"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "supersede_thought",
            "line": 273,
            "async": true,
            "decorators": [],
            "docstring": "Mark a thought as superseded by a newer, better thought.\n\nArgs:\n    old_thought_id: ID of the thought being superseded\n    new_thought_id: ID of the thought that supersedes it\n    reason: Reason for superseding\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "old_thought_id",
              "new_thought_id",
              "reason"
            ],
            "class": "LatentMemorySpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "merge_thoughts",
            "line": 328,
            "async": true,
            "decorators": [],
            "docstring": "Merge multiple thoughts into a new combined thought.\n\nArgs:\n    thought_ids: List of thought IDs to merge\n    merged_content: Content for the merged thought\n    reason: Reason for merging\n    \nReturns:\n    ID of the new merged thought or None if failed",
            "args": [
              "self",
              "thought_ids",
              "merged_content",
              "reason"
            ],
            "class": "LatentMemorySpace",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LatentMemorySpace",
            "line": 34,
            "methods": [
              "__init__",
              "_save_thoughts"
            ],
            "decorators": [],
            "docstring": "Specialized memory structure for latent space reasoning.\n\nEnables components to store, iteratively refine, and finalize thoughts\nin a dedicated latent reasoning space.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "queries.get_thought",
            "from": "queries",
            "name": "get_thought",
            "alias": null,
            "line": 13
          },
          {
            "module": "queries.get_reasoning_trace",
            "from": "queries",
            "name": "get_reasoning_trace",
            "alias": null,
            "line": 13
          },
          {
            "module": "queries.list_thoughts",
            "from": "queries",
            "name": "list_thoughts",
            "alias": null,
            "line": 13
          },
          {
            "module": "queries.abandon_thought",
            "from": "queries",
            "name": "abandon_thought",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "json",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.memory.base.MemoryService",
            "from": "engram.core.memory.base",
            "name": "MemoryService",
            "alias": null,
            "line": 17
          },
          {
            "module": "states.ThoughtState",
            "from": "states",
            "name": "ThoughtState",
            "alias": null,
            "line": 18
          },
          {
            "module": "operations.refine_thought",
            "from": "operations",
            "name": "refine_thought",
            "alias": null,
            "line": 19
          },
          {
            "module": "operations.finalize_thought",
            "from": "operations",
            "name": "finalize_thought",
            "alias": null,
            "line": 19
          },
          {
            "module": "operations.transition_thought_state",
            "from": "operations",
            "name": "transition_thought_state",
            "alias": null,
            "line": 19
          },
          {
            "module": "operations.merge_thoughts",
            "from": "operations",
            "name": "merge_thoughts",
            "alias": null,
            "line": 19
          },
          {
            "module": "persistence.save_thoughts",
            "from": "persistence",
            "name": "save_thoughts",
            "alias": null,
            "line": 25
          },
          {
            "module": "persistence.load_thoughts",
            "from": "persistence",
            "name": "load_thoughts",
            "alias": null,
            "line": 25
          },
          {
            "module": "persistence.initialize_space",
            "from": "persistence",
            "name": "initialize_space",
            "alias": null,
            "line": 25
          },
          {
            "module": "persistence.initialize_thought",
            "from": "persistence",
            "name": "initialize_thought",
            "alias": null,
            "line": 25
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LatentMemorySpace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 34,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.initialize_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 82,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.refine_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 117,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.finalize_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 147,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.pause_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 179,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.reject_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 204,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.reconsider_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 234,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.supersede_thought",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 273,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentMemorySpace.merge_thoughts",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/space.py",
            "line": 328,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 356,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/states.py",
      "analysis": {
        "functions": [
          {
            "name": "get_active_states",
            "line": 26,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "States where a thought is being actively worked on.",
            "args": [
              "cls"
            ],
            "class": "ThoughtState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_terminal_states",
            "line": 31,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "States that generally represent completion of the thought process.",
            "args": [
              "cls"
            ],
            "class": "ThoughtState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_inactive_states",
            "line": 36,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "States where a thought is not being actively worked on but could be resumed.",
            "args": [
              "cls"
            ],
            "class": "ThoughtState",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "can_transition",
            "line": 41,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Check if a state transition is valid.\n\nArgs:\n    from_state: Current state\n    to_state: Target state\n    \nReturns:\n    Whether the transition is permitted",
            "args": [
              "cls",
              "from_state",
              "to_state"
            ],
            "class": "ThoughtState",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ThoughtState",
            "line": 8,
            "methods": [
              "get_active_states",
              "get_terminal_states",
              "get_inactive_states",
              "can_transition"
            ],
            "decorators": [],
            "docstring": "Enhanced enum for thought states in the latent space.\n\nThis expanded state model allows for more sophisticated reasoning flows,\nparticularly for reconsidering previously abandoned or rejected thoughts.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ThoughtState",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/states.py",
            "line": 8,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ThoughtState.get_active_states",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/states.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ThoughtState.get_terminal_states",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/states.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ThoughtState.get_inactive_states",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/states.py",
            "line": 36,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ThoughtState.can_transition",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/states.py",
            "line": 41,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 65,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the latent space manager.\n\nArgs:\n    memory_service: The underlying memory service",
            "args": [
              "self",
              "memory_service"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_shared_space",
            "line": 42,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the shared latent space.",
            "args": [
              "self"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_component_space",
            "line": 53,
            "async": true,
            "decorators": [],
            "docstring": "Create a latent space for a component.\n\nArgs:\n    component_id: ID of the component\n    space_id: Optional space ID (generated if None)\n    max_history_length: Maximum history length for this space\n    \nReturns:\n    Space ID",
            "args": [
              "self",
              "component_id",
              "space_id",
              "max_history_length"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_space",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Get a latent space by ID.\n\nArgs:\n    space_id: ID of the space to retrieve\n    \nReturns:\n    LatentMemorySpace or None if not found",
            "args": [
              "self",
              "space_id"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_shared_space",
            "line": 105,
            "async": false,
            "decorators": [],
            "docstring": "Get the shared latent space.",
            "args": [
              "self"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_spaces",
            "line": 109,
            "async": false,
            "decorators": [],
            "docstring": "Get all latent spaces for a component.\n\nArgs:\n    component_id: ID of the component\n    \nReturns:\n    List of latent spaces",
            "args": [
              "self",
              "component_id"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_space",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Delete a latent space.\n\nArgs:\n    space_id: ID of the space to delete\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "space_id"
            ],
            "class": "LatentSpaceManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_spaces",
            "line": 152,
            "async": true,
            "decorators": [],
            "docstring": "List all latent spaces.\n\nReturns:\n    List of space information dictionaries",
            "args": [
              "self"
            ],
            "class": "LatentSpaceManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LatentSpaceManager",
            "line": 16,
            "methods": [
              "__init__",
              "_initialize_shared_space",
              "get_space",
              "get_shared_space",
              "get_component_spaces"
            ],
            "decorators": [],
            "docstring": "Manager for all latent memory spaces.\n\nCreates, tracks, and manages latent spaces for different components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.memory.base.MemoryService",
            "from": "engram.core.memory.base",
            "name": "MemoryService",
            "alias": null,
            "line": 11
          },
          {
            "module": "space.LatentMemorySpace",
            "from": "space",
            "name": "LatentMemorySpace",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LatentSpaceManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LatentSpaceManager.create_component_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 53,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentSpaceManager.get_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 93,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LatentSpaceManager.get_shared_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 105,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LatentSpaceManager.get_component_spaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 109,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LatentSpaceManager.delete_space",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LatentSpaceManager.list_spaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory/latent/manager.py",
            "line": 152,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 174,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/utils/logging.py",
      "analysis": {
        "functions": [
          {
            "name": "setup_logger",
            "line": 9,
            "async": false,
            "decorators": [],
            "docstring": "Configure and return a logger.\n\nArgs:\n    name: Logger name\n    \nReturns:\n    Configured logger",
            "args": [
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "setup_logger",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/utils/logging.py",
            "line": 9,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 28,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/utils/helpers.py",
      "analysis": {
        "functions": [
          {
            "name": "is_valid_namespace",
            "line": 12,
            "async": false,
            "decorators": [],
            "docstring": "Check if a namespace is valid.\n\nArgs:\n    namespace: The namespace to check\n    valid_namespaces: List of valid base namespaces\n    compartments: Dictionary of compartments\n    \nReturns:\n    Boolean indicating if the namespace is valid",
            "args": [
              "namespace",
              "valid_namespaces",
              "compartments"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_memory_for_storage",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Format memory content for storage.\n\nArgs:\n    content: Memory content (string or message list)\n    \nReturns:\n    Formatted string",
            "args": [
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "is_valid_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/utils/helpers.py",
            "line": 12,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_memory_for_storage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/utils/helpers.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 61,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/vector.py",
      "analysis": {
        "functions": [
          {
            "name": "setup_vector_storage",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Set up vector storage using FAISS.\n\nArgs:\n    data_dir: Directory for storing vector data\n    client_id: Client identifier\n    namespaces: List of namespaces\n    compartments: Dictionary of compartments\n    \nReturns:\n    Dictionary with vector storage setup information",
            "args": [
              "data_dir",
              "client_id",
              "namespaces",
              "compartments"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "ensure_vector_compartment",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Ensure vector collection exists for the given compartment.\n\nArgs:\n    compartment_id: ID of the compartment\n    client_id: Client identifier\n    vector_store: Vector store instance\n    namespace_collections: Mapping of namespaces to collections\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "compartment_id",
              "client_id",
              "vector_store",
              "namespace_collections"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "add_to_vector_store",
            "line": 191,
            "async": false,
            "decorators": [],
            "docstring": "Add a memory to the vector store.\n\nArgs:\n    vector_store: Vector store instance\n    namespace: Namespace to add to\n    namespace_collections: Mapping of namespaces to collections\n    client_id: Client identifier\n    memory_id: Unique memory identifier\n    content: Memory content\n    metadata: Memory metadata\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "vector_store",
              "namespace",
              "namespace_collections",
              "client_id",
              "memory_id",
              "content",
              "metadata"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "clear_vector_namespace",
            "line": 247,
            "async": false,
            "decorators": [],
            "docstring": "Clear all memories in a namespace in the vector store.\n\nArgs:\n    vector_store: Vector store instance\n    namespace: Namespace to clear\n    namespace_collections: Mapping of namespaces to collections\n    client_id: Client identifier\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "vector_store",
              "namespace",
              "namespace_collections",
              "client_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 12
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 28
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 29
          },
          {
            "module": "engram.core.vector_store.VectorStore",
            "from": "engram.core.vector_store",
            "name": "VectorStore",
            "alias": null,
            "line": 30
          },
          {
            "module": "engram.core.simple_embedding.SimpleEmbedding",
            "from": "engram.core.simple_embedding",
            "name": "SimpleEmbedding",
            "alias": null,
            "line": 31
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "setup_vector_storage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/vector.py",
            "line": 49,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ensure_vector_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/vector.py",
            "line": 149,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "add_to_vector_store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/vector.py",
            "line": 191,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "clear_vector_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/vector.py",
            "line": 247,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 289,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/file.py",
      "analysis": {
        "functions": [
          {
            "name": "setup_file_storage",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Set up fallback file-based storage.\n\nArgs:\n    data_dir: Directory for storing file data\n    client_id: Client identifier\n    namespaces: List of namespaces\n    compartments: Dictionary of compartments\n    \nReturns:\n    Dictionary with file storage setup information",
            "args": [
              "data_dir",
              "client_id",
              "namespaces",
              "compartments"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "ensure_file_compartment",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Ensure file storage exists for the given compartment.\n\nArgs:\n    compartment_id: ID of the compartment\n    fallback_memories: Dictionary of fallback memories\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "compartment_id",
              "fallback_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_to_file_store",
            "line": 88,
            "async": false,
            "decorators": [],
            "docstring": "Add a memory to the file store.\n\nArgs:\n    fallback_memories: Dictionary of fallback memories\n    fallback_file: Path to the fallback file\n    namespace: Namespace to add to\n    memory_id: Unique memory identifier\n    content: Memory content\n    metadata: Memory metadata\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "fallback_memories",
              "fallback_file",
              "namespace",
              "memory_id",
              "content",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "clear_file_namespace",
            "line": 129,
            "async": false,
            "decorators": [],
            "docstring": "Clear all memories in a namespace in the file store.\n\nArgs:\n    fallback_memories: Dictionary of fallback memories\n    fallback_file: Path to the fallback file\n    namespace: Namespace to clear\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "fallback_memories",
              "fallback_file",
              "namespace"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 6
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "setup_file_storage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/file.py",
            "line": 16,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ensure_file_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/file.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "add_to_file_store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/file.py",
            "line": 88,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "clear_file_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/storage/file.py",
            "line": 129,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 156,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/vector.py",
      "analysis": {
        "functions": [
          {
            "name": "vector_search",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories using vector similarity.\n\nArgs:\n    memory_service: The memory service instance\n    query: The search query\n    namespace: The namespace to search in\n    limit: Maximum number of results to return\n    check_forget: Whether to check for and filter out forgotten information\n    \nReturns:\n    Dictionary with search results",
            "args": [
              "memory_service",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 6
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "vector_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/vector.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 117,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/context.py",
      "analysis": {
        "functions": [
          {
            "name": "get_relevant_context",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Get formatted context from multiple namespaces for a given query.\n\nArgs:\n    memory_service: The memory service instance\n    query: The query to search for\n    namespaces: List of namespaces to search (default: all)\n    limit: Maximum memories per namespace\n    \nReturns:\n    Formatted context string",
            "args": [
              "memory_service",
              "query",
              "namespaces",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 6
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_relevant_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/context.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 90,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/keyword.py",
      "analysis": {
        "functions": [
          {
            "name": "keyword_search",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories using keyword matching.\n\nArgs:\n    memory_service: The memory service instance\n    query: The search query\n    namespace: The namespace to search in\n    limit: Maximum number of results to return\n    check_forget: Whether to check for and filter out forgotten information\n    \nReturns:\n    Dictionary with search results",
            "args": [
              "memory_service",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 6
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "keyword_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/keyword.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 104,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/search.py",
      "analysis": {
        "functions": [
          {
            "name": "search",
            "line": 17,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    memory_service: The memory service instance\n    query: The search query\n    namespace: The namespace to search in\n    limit: Maximum number of results to return\n    check_forget: Whether to check for and filter out forgotten information\n    \nReturns:\n    Dictionary with search results",
            "args": [
              "memory_service",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 6
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 9
          },
          {
            "module": "vector.vector_search",
            "from": "vector",
            "name": "vector_search",
            "alias": null,
            "line": 10
          },
          {
            "module": "keyword.keyword_search",
            "from": "keyword",
            "name": "keyword_search",
            "alias": null,
            "line": 11
          },
          {
            "module": "context.get_relevant_context",
            "from": "context",
            "name": "get_relevant_context",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.helpers.is_valid_namespace",
            "from": "utils.helpers",
            "name": "is_valid_namespace",
            "alias": null,
            "line": 38
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/search/search.py",
            "line": 17,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 60,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/expiration.py",
      "analysis": {
        "functions": [
          {
            "name": "set_compartment_expiration",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Set expiration for a compartment in days.\n\nArgs:\n    memory_service: The memory service instance\n    compartment_id: ID of the compartment\n    days: Number of days until expiration, or None to remove expiration\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "memory_service",
              "compartment_id",
              "days"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "keep_memory",
            "line": 51,
            "async": true,
            "decorators": [],
            "docstring": "Keep a memory for a specified number of days by setting expiration.\n\nArgs:\n    memory_service: The memory service instance\n    memory_id: The ID of the memory to keep\n    days: Number of days to keep the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "memory_service",
              "memory_id",
              "days"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 6
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/expiration.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "keep_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/expiration.py",
            "line": 51,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 93,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/manager.py",
      "analysis": {
        "functions": [
          {
            "name": "create_compartment",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Create a new memory compartment.\n\nArgs:\n    memory_service: The memory service instance\n    name: Name of the compartment\n    description: Optional description\n    parent: Optional parent compartment ID for hierarchical organization\n    \nReturns:\n    Compartment ID if successful, None otherwise",
            "args": [
              "memory_service",
              "name",
              "description",
              "parent"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 70,
            "async": true,
            "decorators": [],
            "docstring": "Activate a compartment to include in automatic context retrieval.\n\nArgs:\n    memory_service: The memory service instance\n    compartment_id_or_name: ID or name of compartment to activate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "memory_service",
              "compartment_id_or_name"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 111,
            "async": true,
            "decorators": [],
            "docstring": "Deactivate a compartment to exclude from automatic context retrieval.\n\nArgs:\n    memory_service: The memory service instance\n    compartment_id_or_name: ID or name of compartment to deactivate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "memory_service",
              "compartment_id_or_name"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 148,
            "async": true,
            "decorators": [],
            "docstring": "List all compartments.\n\nArgs:\n    memory_service: The memory service instance\n    include_expired: Whether to include expired compartments\n    \nReturns:\n    List of compartment information dictionaries",
            "args": [
              "memory_service",
              "include_expired"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 6
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/manager.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/manager.py",
            "line": 70,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/manager.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/compartments/manager.py",
            "line": 148,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 186,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the memory service.\n\nArgs:\n    client_id: Unique identifier for the client (default: \"default\")\n    data_dir: Directory to store memory data (default: ~/.engram)",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_compartments",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Load compartment definitions from file.",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_save_compartments",
            "line": 91,
            "async": false,
            "decorators": [],
            "docstring": "Save compartment definitions to file.",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_ensure_compartment_collection",
            "line": 101,
            "async": false,
            "decorators": [],
            "docstring": "Ensure vector collection or fallback storage exists for the given compartment.",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory to storage.\n\nArgs:\n    content: The memory content (string or list of message objects)\n    namespace: The namespace to store in (default: \"conversations\")\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "MemoryService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_namespaces",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Get available namespaces.",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 211,
            "async": true,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    namespace: The namespace to clear\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "namespace"
            ],
            "class": "MemoryService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "write_session_memory",
            "line": 260,
            "async": true,
            "decorators": [],
            "docstring": "Write a memory to the session namespace for persistence across sessions.\n\nArgs:\n    content: The content to store\n    metadata: Optional metadata\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "metadata"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryService",
            "line": 24,
            "methods": [
              "__init__",
              "_load_compartments",
              "_save_compartments",
              "_ensure_compartment_collection"
            ],
            "decorators": [],
            "docstring": "Memory service providing storage and retrieval across different namespaces.\n\nSupports the following namespaces:\n- conversations: Dialog history between user and AI\n- thinking: AI's internal thought processes\n- longterm: High-priority persistent memories\n- projects: Project-specific context",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "utils.logging.setup_logger",
            "from": "utils.logging",
            "name": "setup_logger",
            "alias": null,
            "line": 18
          },
          {
            "module": "utils.helpers.is_valid_namespace",
            "from": "utils.helpers",
            "name": "is_valid_namespace",
            "alias": null,
            "line": 19
          },
          {
            "module": "storage.vector.setup_vector_storage",
            "from": "storage.vector",
            "name": "setup_vector_storage",
            "alias": null,
            "line": 43
          },
          {
            "module": "storage.file.setup_file_storage",
            "from": "storage.file",
            "name": "setup_file_storage",
            "alias": null,
            "line": 44
          },
          {
            "module": "storage.vector.ensure_vector_compartment",
            "from": "storage.vector",
            "name": "ensure_vector_compartment",
            "alias": null,
            "line": 103
          },
          {
            "module": "storage.file.ensure_file_compartment",
            "from": "storage.file",
            "name": "ensure_file_compartment",
            "alias": null,
            "line": 104
          },
          {
            "module": "storage.vector.add_to_vector_store",
            "from": "storage.vector",
            "name": "add_to_vector_store",
            "alias": null,
            "line": 134
          },
          {
            "module": "storage.file.add_to_file_store",
            "from": "storage.file",
            "name": "add_to_file_store",
            "alias": null,
            "line": 135
          },
          {
            "module": "storage.vector.clear_vector_namespace",
            "from": "storage.vector",
            "name": "clear_vector_namespace",
            "alias": null,
            "line": 221
          },
          {
            "module": "storage.file.clear_file_namespace",
            "from": "storage.file",
            "name": "clear_file_namespace",
            "alias": null,
            "line": 222
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryService",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryService._load_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 79,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryService._save_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 91,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryService.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MemoryService.get_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryService.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 211,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MemoryService.write_session_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/memory_faiss/base/service.py",
            "line": 260,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 276,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/categorization/auto.py",
      "analysis": {
        "functions": [
          {
            "name": "auto_categorize_memory",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Automatically categorize memory content based on patterns and keywords.\n\nArgs:\n    content: The memory content to categorize\n    \nReturns:\n    Tuple of (category, importance, tags)",
            "args": [
              "content"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "re",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "auto_categorize_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/categorization/auto.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 157,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
      "analysis": {
        "functions": [
          {
            "name": "load_metadata_index",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Load the metadata index from file or initialize if it doesn't exist.\n\nArgs:\n    metadata_index_file: Path to the metadata index file\n    client_id: Client identifier for the index\n    \nReturns:\n    Metadata index dictionary",
            "args": [
              "metadata_index_file",
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "initialize_metadata_index",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a new metadata index.\n\nArgs:\n    metadata_index_file: Path to the metadata index file\n    client_id: Client identifier for the index\n    \nReturns:\n    New metadata index dictionary",
            "args": [
              "metadata_index_file",
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_metadata_index",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Save the metadata index to file.\n\nArgs:\n    metadata_index_file: Path to the metadata index file\n    index: Metadata index dictionary to save\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "metadata_index_file",
              "index"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "update_memory_in_index",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Update or add a memory in the metadata index.\n\nArgs:\n    index: Metadata index dictionary\n    memory_id: ID of the memory to update/add\n    category: Category of the memory\n    importance: Importance level of the memory\n    tags: Tags associated with the memory\n    timestamp: ISO format timestamp",
            "args": [
              "index",
              "memory_id",
              "category",
              "importance",
              "tags",
              "timestamp"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_memory_importance",
            "line": 130,
            "async": false,
            "decorators": [],
            "docstring": "Update the importance level of a memory in the index.\n\nArgs:\n    index: Metadata index dictionary\n    memory_id: ID of the memory to update\n    category: Category of the memory\n    original_importance: Original importance level\n    new_importance: New importance level",
            "args": [
              "index",
              "memory_id",
              "category",
              "original_importance",
              "new_importance"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_memory_from_index",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": "Remove a memory from the metadata index.\n\nArgs:\n    index: Metadata index dictionary\n    memory_id: ID of the memory to remove\n    category: Category of the memory\n    importance: Importance level of the memory\n    tags: Tags associated with the memory",
            "args": [
              "index",
              "memory_id",
              "category",
              "importance",
              "tags"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.structured.constants.DEFAULT_MEMORY_CATEGORIES",
            "from": "engram.core.structured.constants",
            "name": "DEFAULT_MEMORY_CATEGORIES",
            "alias": null,
            "line": 48
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "load_metadata_index",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
            "line": 16,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "initialize_metadata_index",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
            "line": 37,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "save_metadata_index",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
            "line": 72,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "update_memory_in_index",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
            "line": 94,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "update_memory_importance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "remove_memory_from_index",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/index.py",
            "line": 151,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 180,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/migration.py",
      "analysis": {
        "functions": [
          {
            "name": "migrate_from_memory_service",
            "line": 18,
            "async": true,
            "decorators": [],
            "docstring": "Migrate memories from the old MemoryService to StructuredMemory.\n\nArgs:\n    self: StructuredMemory instance\n    memory_service: Instance of the old MemoryService\n    limit: Maximum number of memories to migrate\n    \nReturns:\n    Number of memories migrated",
            "args": [
              "self",
              "memory_service",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.constants.NAMESPACE_TO_CATEGORY_MAP",
            "from": "engram.core.structured.constants",
            "name": "NAMESPACE_TO_CATEGORY_MAP",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.structured.constants.NAMESPACE_IMPORTANCE_MAP",
            "from": "engram.core.structured.constants",
            "name": "NAMESPACE_IMPORTANCE_MAP",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "migrate_from_memory_service",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/migration.py",
            "line": 18,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 94,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the structured memory service.\n\nArgs:\n    client_id: Unique identifier for the client (default: \"default\")\n    data_dir: Directory to store memory data (default: ~/.engram/structured)",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "StructuredMemory",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_memory",
            "line": 103,
            "async": true,
            "decorators": [],
            "docstring": "Add a new memory with structured metadata and importance ranking.\n\nArgs:\n    content: The memory content to store\n    category: The category to store in (personal, projects, facts, etc.)\n    importance: Importance ranking 1-5 (5 being most important)\n    metadata: Additional metadata for the memory\n    tags: Tags for easier searching and categorization\n    \nReturns:\n    Memory ID if successful, None otherwise",
            "args": [
              "self",
              "content",
              "category",
              "importance",
              "metadata",
              "tags"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve a specific memory by ID.\n\nArgs:\n    memory_id: The ID of the memory to retrieve\n    \nReturns:\n    Memory data dictionary if found, None otherwise",
            "args": [
              "self",
              "memory_id"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memories_by_category",
            "line": 148,
            "async": true,
            "decorators": [],
            "docstring": "Get memories by category (compatibility method for Agenteer).\n\nArgs:\n    category: The category to retrieve memories from\n    limit: Maximum number of memories to retrieve\n    \nReturns:\n    List of memory objects",
            "args": [
              "self",
              "category",
              "limit"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_memories",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on multiple criteria.\n\nArgs:\n    query: Text to search for in memory content (optional)\n    categories: List of categories to search in (defaults to all)\n    tags: List of tags to filter by (optional)\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results to return\n    sort_by: How to sort results (\"importance\", \"recency\", or \"relevance\")\n    \nReturns:\n    List of matching memory data dictionaries",
            "args": [
              "self",
              "query",
              "categories",
              "tags",
              "min_importance",
              "limit",
              "sort_by"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_digest",
            "line": 195,
            "async": true,
            "decorators": [],
            "docstring": "Generate a formatted digest of important memories for session start.\n\nArgs:\n    categories: List of categories to include (defaults to all except private)\n    max_memories: Maximum memories to include in digest\n    include_private: Whether to include private memories\n    \nReturns:\n    Formatted text digest of important memories",
            "args": [
              "self",
              "categories",
              "max_memories",
              "include_private"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_auto_categorized_memory",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory with automatic categorization, allowing manual overrides.\n\nArgs:\n    content: The memory content to store\n    manual_category: Override the automatic category (optional)\n    manual_importance: Override the automatic importance (optional)\n    manual_tags: Additional tags to add (optional)\n    metadata: Additional metadata for the memory\n    \nReturns:\n    Memory ID if successful, None otherwise",
            "args": [
              "self",
              "content",
              "manual_category",
              "manual_importance",
              "manual_tags",
              "metadata"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_memory_importance",
            "line": 244,
            "async": true,
            "decorators": [],
            "docstring": "Update the importance of an existing memory.\n\nArgs:\n    memory_id: The ID of the memory to update\n    importance: New importance level (1-5)\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id",
              "importance"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_memory",
            "line": 264,
            "async": true,
            "decorators": [],
            "docstring": "Delete a memory from storage.\n\nArgs:\n    memory_id: The ID of the memory to delete\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_by_content",
            "line": 282,
            "async": true,
            "decorators": [],
            "docstring": "Find a memory by its content.\n\nArgs:\n    content: The exact content to search for\n    category: Optional category to limit the search\n    \nReturns:\n    Memory data if found, None otherwise",
            "args": [
              "self",
              "content",
              "category"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memories_by_tag",
            "line": 300,
            "async": true,
            "decorators": [],
            "docstring": "Get memories with a specific tag.\n\nArgs:\n    tag: The tag to search for\n    max_memories: Maximum number of memories to return\n    \nReturns:\n    List of memory dictionaries with the specified tag",
            "args": [
              "self",
              "tag",
              "max_memories"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_memories",
            "line": 318,
            "async": true,
            "decorators": [],
            "docstring": "Get memories relevant to the given context text.\n\nArgs:\n    text: The context text to find relevant memories for\n    max_memories: Maximum number of memories to return\n    \nReturns:\n    List of relevant memory dictionaries",
            "args": [
              "self",
              "text",
              "max_memories"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_semantic_memories",
            "line": 336,
            "async": true,
            "decorators": [],
            "docstring": "Get semantically similar memories using vector search if available,\nfalling back to keyword search if vector search is not available.\n\nArgs:\n    query: The semantic query to search for\n    max_memories: Maximum number of memories to return\n    \nReturns:\n    List of semantically relevant memory dictionaries",
            "args": [
              "self",
              "query",
              "max_memories"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "migrate_from_memory_service",
            "line": 355,
            "async": true,
            "decorators": [],
            "docstring": "Migrate memories from the old MemoryService to StructuredMemory.\n\nArgs:\n    memory_service: Instance of the old MemoryService\n    limit: Maximum number of memories to migrate\n    \nReturns:\n    Number of memories migrated",
            "args": [
              "self",
              "memory_service",
              "limit"
            ],
            "class": "StructuredMemory",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StructuredMemory",
            "line": 44,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Structured memory service with file-based organization and importance ranking.\n\nKey features:\n- Organized, searchable memory files by category/project\n- Standardized formats (JSON) for easier parsing\n- Metadata with timestamps, context, and importance\n- Memory importance ranking (1-5 scale)\n- Context-aware memory loading",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.structured.constants.DEFAULT_MEMORY_CATEGORIES",
            "from": "engram.core.structured.constants",
            "name": "DEFAULT_MEMORY_CATEGORIES",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.structured.constants.DEFAULT_CATEGORY_IMPORTANCE",
            "from": "engram.core.structured.constants",
            "name": "DEFAULT_CATEGORY_IMPORTANCE",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.structured.constants.IMPORTANCE_LEVELS",
            "from": "engram.core.structured.constants",
            "name": "IMPORTANCE_LEVELS",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.core.structured.memory.index.load_metadata_index",
            "from": "engram.core.structured.memory.index",
            "name": "load_metadata_index",
            "alias": null,
            "line": 21
          },
          {
            "module": "engram.core.structured.memory.index.initialize_metadata_index",
            "from": "engram.core.structured.memory.index",
            "name": "initialize_metadata_index",
            "alias": null,
            "line": 21
          },
          {
            "module": "engram.core.structured.memory.index.save_metadata_index",
            "from": "engram.core.structured.memory.index",
            "name": "save_metadata_index",
            "alias": null,
            "line": 21
          },
          {
            "module": "engram.core.structured.storage.file_storage.MemoryStorage",
            "from": "engram.core.structured.storage.file_storage",
            "name": "MemoryStorage",
            "alias": null,
            "line": 26
          },
          {
            "module": "engram.core.structured.operations.add.add_memory",
            "from": "engram.core.structured.operations.add",
            "name": "add_memory",
            "alias": null,
            "line": 27
          },
          {
            "module": "engram.core.structured.operations.add.add_auto_categorized_memory",
            "from": "engram.core.structured.operations.add",
            "name": "add_auto_categorized_memory",
            "alias": null,
            "line": 27
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_memory",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_memory",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_memories_by_category",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_memories_by_category",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_memory_digest",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_memory_digest",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_memory_by_content",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_memory_by_content",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_memories_by_tag",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_memories_by_tag",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_context_memories",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_context_memories",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.retrieve.get_semantic_memories",
            "from": "engram.core.structured.operations.retrieve",
            "name": "get_semantic_memories",
            "alias": null,
            "line": 28
          },
          {
            "module": "engram.core.structured.operations.update.set_memory_importance",
            "from": "engram.core.structured.operations.update",
            "name": "set_memory_importance",
            "alias": null,
            "line": 37
          },
          {
            "module": "engram.core.structured.operations.delete.delete_memory",
            "from": "engram.core.structured.operations.delete",
            "name": "delete_memory",
            "alias": null,
            "line": 38
          },
          {
            "module": "engram.core.structured.operations.search.search_memories",
            "from": "engram.core.structured.operations.search",
            "name": "search_memories",
            "alias": null,
            "line": 39
          },
          {
            "module": "engram.core.structured.memory.migration.migrate_from_memory_service",
            "from": "engram.core.structured.memory.migration",
            "name": "migrate_from_memory_service",
            "alias": null,
            "line": 40
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StructuredMemory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 44,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StructuredMemory.add_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 132,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_memories_by_category",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 148,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.search_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_memory_digest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 195,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.add_auto_categorized_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.set_memory_importance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.delete_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 264,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_memory_by_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 282,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_memories_by_tag",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 300,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_context_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 318,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.get_semantic_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 336,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StructuredMemory.migrate_from_memory_service",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/memory/base.py",
            "line": 355,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 370,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/update.py",
      "analysis": {
        "functions": [
          {
            "name": "set_memory_importance",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Update the importance of an existing memory.\n\nArgs:\n    self: StructuredMemory instance\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    metadata_index_file: Path to metadata index file\n    memory_id: The ID of the memory to update\n    importance: New importance level (1-5)\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "storage",
              "metadata_index",
              "metadata_index_file",
              "memory_id",
              "importance"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "engram.core.structured.memory.index.save_metadata_index",
            "from": "engram.core.structured.memory.index",
            "name": "save_metadata_index",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.structured.memory.index.update_memory_importance",
            "from": "engram.core.structured.memory.index",
            "name": "update_memory_importance",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "set_memory_importance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/update.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 69,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/delete.py",
      "analysis": {
        "functions": [
          {
            "name": "delete_memory",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Delete a memory from storage.\n\nArgs:\n    self: StructuredMemory instance\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    metadata_index_file: Path to metadata index file\n    memory_id: The ID of the memory to delete\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "storage",
              "metadata_index",
              "metadata_index_file",
              "memory_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.memory.index.save_metadata_index",
            "from": "engram.core.structured.memory.index",
            "name": "save_metadata_index",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.structured.memory.index.remove_memory_from_index",
            "from": "engram.core.structured.memory.index",
            "name": "remove_memory_from_index",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "delete_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/delete.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 59,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/add.py",
      "analysis": {
        "functions": [
          {
            "name": "add_memory",
            "line": 19,
            "async": true,
            "decorators": [],
            "docstring": "Add a new memory with structured metadata and importance ranking.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    metadata_index_file: Path to metadata index file\n    client_id: Client identifier\n    category_importance: Dictionary mapping categories to importance settings\n    content: The memory content to store\n    category: The category to store in (personal, projects, facts, etc.)\n    importance: Importance ranking 1-5 (5 being most important)\n    metadata: Additional metadata for the memory\n    tags: Tags for easier searching and categorization\n    \nReturns:\n    Memory ID if successful, None otherwise",
            "args": [
              "storage",
              "metadata_index",
              "metadata_index_file",
              "client_id",
              "category_importance",
              "content",
              "category",
              "importance",
              "metadata",
              "tags"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add_auto_categorized_memory",
            "line": 103,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory with automatic categorization, allowing manual overrides.\n\nArgs:\n    self: StructuredMemory instance\n    content: The memory content to store\n    manual_category: Override the automatic category (optional)\n    manual_importance: Override the automatic importance (optional)\n    manual_tags: Additional tags to add (optional)\n    metadata: Additional metadata for the memory\n    \nReturns:\n    Memory ID if successful, None otherwise",
            "args": [
              "self",
              "content",
              "manual_category",
              "manual_importance",
              "manual_tags",
              "metadata"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.structured.utils.generate_memory_id",
            "from": "engram.core.structured.utils",
            "name": "generate_memory_id",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.structured.memory.index.update_memory_in_index",
            "from": "engram.core.structured.memory.index",
            "name": "update_memory_in_index",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.structured.memory.index.save_metadata_index",
            "from": "engram.core.structured.memory.index",
            "name": "save_metadata_index",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.structured.categorization.auto.auto_categorize_memory",
            "from": "engram.core.structured.categorization.auto",
            "name": "auto_categorize_memory",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "add_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/add.py",
            "line": 19,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "add_auto_categorized_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/add.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 164,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
      "analysis": {
        "functions": [
          {
            "name": "get_memory",
            "line": 19,
            "async": true,
            "decorators": [],
            "docstring": "Retrieve a specific memory by ID.\n\nArgs:\n    storage: MemoryStorage instance\n    category_importance: Dictionary mapping categories to importance settings\n    memory_id: The ID of the memory to retrieve\n    \nReturns:\n    Memory data dictionary if found, None otherwise",
            "args": [
              "storage",
              "category_importance",
              "memory_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_memories_by_category",
            "line": 49,
            "async": true,
            "decorators": [],
            "docstring": "Get memories by category (compatibility method for Agenteer).\n\nArgs:\n    self: StructuredMemory instance\n    category: The category to retrieve memories from\n    limit: Maximum number of memories to retrieve\n    \nReturns:\n    List of memory objects",
            "args": [
              "self",
              "category",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_digest",
            "line": 68,
            "async": true,
            "decorators": [],
            "docstring": "Generate a formatted digest of important memories for session start.\n\nArgs:\n    self: StructuredMemory instance\n    category_importance: Dictionary mapping categories to importance settings\n    categories: List of categories to include (defaults to all except private)\n    max_memories: Maximum memories to include in digest\n    include_private: Whether to include private memories\n    \nReturns:\n    Formatted text digest of important memories",
            "args": [
              "self",
              "category_importance",
              "categories",
              "max_memories",
              "include_private"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_memory_by_content",
            "line": 113,
            "async": true,
            "decorators": [],
            "docstring": "Find a memory by its content.\n\nArgs:\n    self: StructuredMemory instance\n    category_importance: Dictionary mapping categories to importance settings\n    content: The exact content to search for\n    category: Optional category to limit the search\n    \nReturns:\n    Memory data if found, None otherwise",
            "args": [
              "self",
              "category_importance",
              "content",
              "category"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_memories_by_tag",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Get memories with a specific tag.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    tag: The tag to search for\n    max_memories: Maximum number of memories to return\n    \nReturns:\n    List of memory dictionaries with the specified tag",
            "args": [
              "storage",
              "metadata_index",
              "tag",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_memories",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Get memories relevant to the given context text.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    text: The context text to find relevant memories for\n    max_memories: Maximum number of memories to return\n    \nReturns:\n    List of relevant memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "text",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_semantic_memories",
            "line": 185,
            "async": true,
            "decorators": [],
            "docstring": "Get semantically similar memories using vector search if available,\nfalling back to keyword search if vector search is not available.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    query: The semantic query to search for\n    max_memories: Maximum number of memories to return\n    \nReturns:\n    List of semantically relevant memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "query",
              "max_memories"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.utils.format_memory_digest",
            "from": "engram.core.structured.utils",
            "name": "format_memory_digest",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.structured.search.content.search_by_content",
            "from": "engram.core.structured.search.content",
            "name": "search_by_content",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.structured.search.tags.search_by_tags",
            "from": "engram.core.structured.search.tags",
            "name": "search_by_tags",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.structured.search.context.search_context_memories",
            "from": "engram.core.structured.search.context",
            "name": "search_context_memories",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.structured.search.semantic.search_semantic_memories",
            "from": "engram.core.structured.search.semantic",
            "name": "search_semantic_memories",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 19,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memories_by_category",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_digest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_by_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memories_by_tag",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_semantic_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/retrieve.py",
            "line": 185,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 204,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/search.py",
      "analysis": {
        "functions": [
          {
            "name": "search_memories",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on multiple criteria.\n\nArgs:\n    self: StructuredMemory instance\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    category_importance: Dictionary mapping categories to importance settings\n    query: Text to search for in memory content (optional)\n    categories: List of categories to search in (defaults to all)\n    tags: List of tags to filter by (optional)\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results to return\n    sort_by: How to sort results (\"importance\", \"recency\", or \"relevance\")\n    \nReturns:\n    List of matching memory data dictionaries",
            "args": [
              "self",
              "storage",
              "metadata_index",
              "category_importance",
              "query",
              "categories",
              "tags",
              "min_importance",
              "limit",
              "sort_by"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.search.content.search_by_content",
            "from": "engram.core.structured.search.content",
            "name": "search_by_content",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.structured.search.tags.search_by_tags",
            "from": "engram.core.structured.search.tags",
            "name": "search_by_tags",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/operations/search.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 101,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage/file_storage.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize memory storage.\n\nArgs:\n    client_id: Unique identifier for the client\n    base_dir: Base directory for memory storage",
            "args": [
              "self",
              "client_id",
              "base_dir"
            ],
            "class": "MemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_memory",
            "line": 49,
            "async": true,
            "decorators": [],
            "docstring": "Store a memory to the filesystem.\n\nArgs:\n    memory_data: Memory data to store\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_data"
            ],
            "class": "MemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "load_memory",
            "line": 85,
            "async": true,
            "decorators": [],
            "docstring": "Load a memory from cache or filesystem.\n\nArgs:\n    memory_id: ID of the memory to load\n    category: Category of the memory\n    \nReturns:\n    Memory data if found, None otherwise",
            "args": [
              "self",
              "memory_id",
              "category"
            ],
            "class": "MemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_memory",
            "line": 123,
            "async": true,
            "decorators": [],
            "docstring": "Delete a memory from filesystem and cache.\n\nArgs:\n    memory_id: ID of the memory to delete\n    category: Category of the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id",
              "category"
            ],
            "class": "MemoryStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_trim_cache",
            "line": 157,
            "async": false,
            "decorators": [],
            "docstring": "Trim the memory cache if it exceeds the size limit.",
            "args": [
              "self"
            ],
            "class": "MemoryStorage",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryStorage",
            "line": 19,
            "methods": [
              "__init__",
              "_trim_cache"
            ],
            "decorators": [],
            "docstring": "File-based storage for structured memories with caching.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.structured.utils.load_json_file",
            "from": "engram.core.structured.utils",
            "name": "load_json_file",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.core.structured.utils.save_json_file",
            "from": "engram.core.structured.utils",
            "name": "save_json_file",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage/file_storage.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryStorage.store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage/file_storage.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryStorage.load_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage/file_storage.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MemoryStorage.delete_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/storage/file_storage.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 173,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/tags.py",
      "analysis": {
        "functions": [
          {
            "name": "search_by_tags",
            "line": 13,
            "async": true,
            "decorators": [],
            "docstring": "Search memories by their tags, returning those that match any of the specified tags.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    tags: List of tags to search for\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "tags",
              "min_importance",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_by_tags",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/tags.py",
            "line": 13,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 78,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/semantic.py",
      "analysis": {
        "functions": [
          {
            "name": "search_semantic_memories",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Search memories using semantic similarity if available, falling back to keyword search.\n\nThis function attempts to use vector embeddings for semantic search, but falls back\nto keyword-based search if vector search is not available.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    query: Semantic query text\n    limit: Maximum number of results to return\n    \nReturns:\n    List of semantically relevant memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "query",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.search.content.search_by_content",
            "from": "engram.core.structured.search.content",
            "name": "search_by_content",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 34
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_semantic_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/semantic.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 99,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/content.py",
      "analysis": {
        "functions": [
          {
            "name": "search_by_content",
            "line": 15,
            "async": true,
            "decorators": [],
            "docstring": "Search memories by their content, supporting simple keyword matching.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    query: The search query text\n    categories: List of categories to search (defaults to all)\n    min_importance: Minimum importance level (1-5)\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "query",
              "categories",
              "min_importance",
              "limit"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.utils.extract_keywords",
            "from": "engram.core.structured.utils",
            "name": "extract_keywords",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_by_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/content.py",
            "line": 15,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 98,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/context.py",
      "analysis": {
        "functions": [
          {
            "name": "search_context_memories",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Find memories relevant to the provided context text.\n\nArgs:\n    storage: MemoryStorage instance\n    metadata_index: Current metadata index dictionary\n    text: Context text to find relevant memories for\n    limit: Maximum number of memories to return\n    \nReturns:\n    List of context-relevant memory dictionaries",
            "args": [
              "storage",
              "metadata_index",
              "text",
              "limit"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.structured.utils.extract_keywords",
            "from": "engram.core.structured.utils",
            "name": "extract_keywords",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.core.structured.search.content.search_by_content",
            "from": "engram.core.structured.search.content",
            "name": "search_by_content",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_context_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/core/structured/search/context.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 51,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the logging adapter.\n\nArgs:\n    client_id: Unique identifier for this client\n    log_file: Path to log file (default: ~/tekton/logs/engram_{client_id}.log)\n    console_level: Logging level for console output (default: INFO)\n    file_level: Logging level for file output (default: DEBUG)",
            "args": [
              "self",
              "client_id",
              "log_file",
              "console_level",
              "file_level"
            ],
            "class": "LoggingAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "log",
            "line": 120,
            "async": false,
            "decorators": [],
            "docstring": "Log a message with the specified level.\n\nArgs:\n    level: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n    message: The log message\n    context: Optional additional context as key-value pairs\n    component: Optional component name for sub-component logging\n    source_file: Optional source file where the log was generated\n    source_line: Optional line number where the log was generated\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "level",
              "message",
              "context",
              "component",
              "source_file",
              "source_line"
            ],
            "class": "LoggingAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "debug",
            "line": 197,
            "async": false,
            "decorators": [],
            "docstring": "Log a DEBUG message.",
            "args": [
              "self",
              "message"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "info",
            "line": 201,
            "async": false,
            "decorators": [],
            "docstring": "Log an INFO message.",
            "args": [
              "self",
              "message"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "warning",
            "line": 205,
            "async": false,
            "decorators": [],
            "docstring": "Log a WARNING message.",
            "args": [
              "self",
              "message"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "error",
            "line": 209,
            "async": false,
            "decorators": [],
            "docstring": "Log an ERROR message.",
            "args": [
              "self",
              "message"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "critical",
            "line": 213,
            "async": false,
            "decorators": [],
            "docstring": "Log a CRITICAL message.",
            "args": [
              "self",
              "message"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_logs",
            "line": 217,
            "async": false,
            "decorators": [],
            "docstring": "Get logs filtered by level, component, and time range.\n\nArgs:\n    level: Minimum log level to include (default: all levels)\n    component: Filter logs by component (default: all components)\n    limit: Maximum number of logs to return\n    start_time: ISO format timestamp for start of range\n    end_time: ISO format timestamp for end of range\n    \nReturns:\n    List of log entries as dictionaries",
            "args": [
              "self",
              "level",
              "component",
              "limit",
              "start_time",
              "end_time"
            ],
            "class": "LoggingAdapter",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_get_log_level",
            "line": 316,
            "async": false,
            "decorators": [],
            "docstring": "Convert string log level to numeric value.",
            "args": [
              "self",
              "level"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_to_hermes_level",
            "line": 331,
            "async": false,
            "decorators": [],
            "docstring": "Convert standard log level to Hermes LogLevel.",
            "args": [
              "self",
              "level"
            ],
            "class": "LoggingAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 360,
            "async": false,
            "decorators": [],
            "docstring": "Main function for testing the logging adapter.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LoggingAdapter",
            "line": 33,
            "methods": [
              "__init__",
              "log",
              "debug",
              "info",
              "warning",
              "error",
              "critical",
              "get_logs",
              "_get_log_level",
              "_to_hermes_level"
            ],
            "decorators": [],
            "docstring": "Logging adapter for Engram using Hermes's centralized logging system.\n\nThis class provides structured logging capabilities with integration\nto Hermes's aggregated logging across Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "sys",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.logging.LogManager",
            "from": "hermes.core.logging",
            "name": "LogManager",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.logging.LogLevel",
            "from": "hermes.core.logging",
            "name": "LogLevel",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.logging.LogEntry",
            "from": "hermes.core.logging",
            "name": "LogEntry",
            "alias": null,
            "line": 26
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LoggingAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.log",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 120,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.debug",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 197,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.info",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 201,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.warning",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 205,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.error",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 209,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.critical",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 213,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LoggingAdapter.get_logs",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 217,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/logging_adapter.py",
            "line": 360,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 382,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a shared latent space with Hermes integration.\n\nArgs:\n    component_id: Unique identifier for the component\n    namespace: Namespace for organizing thoughts\n    max_history: Maximum iterations to store per thought\n    data_dir: Directory for persisted thoughts\n    shared_insights: Whether to share insights with other components",
            "args": [
              "self",
              "component_id",
              "namespace",
              "max_history",
              "data_dir",
              "shared_insights"
            ],
            "class": "SharedLatentSpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 94,
            "async": true,
            "decorators": [],
            "docstring": "Start the shared latent space services.\n\nThis initializes connections to Hermes message bus and sets up\ninsight sharing.\n\nReturns:\n    Boolean indicating success",
            "args": [
              "self"
            ],
            "class": "SharedLatentSpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 124,
            "async": true,
            "decorators": [],
            "docstring": "Clean up resources and close connections.",
            "args": [
              "self"
            ],
            "class": "SharedLatentSpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_shared_insight",
            "line": 140,
            "async": true,
            "decorators": [],
            "docstring": "Handle insights shared by other components.\n\nArgs:\n    message: The received message with insight data",
            "args": [
              "self",
              "message"
            ],
            "class": "SharedLatentSpace",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "share_insight",
            "line": 186,
            "async": true,
            "decorators": [],
            "docstring": "Share an insight from latent space with other components.\n\nArgs:\n    thought_id: Identifier for the thought to share\n    summary: Optional summary of the insight (generated if not provided)\n    additional_content: Optional additional content to include\n    \nReturns:\n    Dictionary with the shared insight data",
            "args": [
              "self",
              "thought_id",
              "summary",
              "additional_content"
            ],
            "class": "SharedLatentSpace",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "register_insight_handler",
            "line": 264,
            "async": true,
            "decorators": [],
            "docstring": "Register a handler for incoming insights from other components.\n\nArgs:\n    handler: Async function to call when insights are received\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "handler"
            ],
            "class": "SharedLatentSpace",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_recent_insights",
            "line": 283,
            "async": true,
            "decorators": [],
            "docstring": "Get recent insights from other components.\n\nArgs:\n    limit: Maximum number of insights to return\n    include_own: Whether to include insights from this component\n    \nReturns:\n    List of insight data",
            "args": [
              "self",
              "limit",
              "include_own"
            ],
            "class": "SharedLatentSpace",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SharedLatentSpace",
            "line": 35,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Extension of LatentMemorySpace that enables cross-component sharing via Hermes.\n\nThis class integrates with Hermes's message bus and memory services to share\ninsights and coordinate reasoning processes across multiple components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.latent_space.LatentMemorySpace",
            "from": "engram.core.latent_space",
            "name": "LatentMemorySpace",
            "alias": null,
            "line": 23
          },
          {
            "module": "engram.core.latent_space.ConvergenceDetector",
            "from": "engram.core.latent_space",
            "name": "ConvergenceDetector",
            "alias": null,
            "line": 23
          },
          {
            "module": "engram.integrations.hermes.message_bus_adapter.MessageBusAdapter",
            "from": "engram.integrations.hermes.message_bus_adapter",
            "name": "MessageBusAdapter",
            "alias": null,
            "line": 27
          },
          {
            "module": "engram.integrations.hermes.memory_adapter.HermesMemoryService",
            "from": "engram.integrations.hermes.memory_adapter",
            "name": "HermesMemoryService",
            "alias": null,
            "line": 28
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SharedLatentSpace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
            "line": 35,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SharedLatentSpace.start",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SharedLatentSpace.close",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
            "line": 124,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SharedLatentSpace.share_insight",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "SharedLatentSpace.register_insight_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
            "line": 264,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SharedLatentSpace.get_recent_insights",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/latent_space_adapter.py",
            "line": 283,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 346,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/example.py",
      "analysis": {
        "functions": [
          {
            "name": "demonstrate_memory_operations",
            "line": 18,
            "async": true,
            "decorators": [],
            "docstring": "Demonstrate basic memory operations using Hermes adapter.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.integrations.hermes.memory_adapter.HermesMemoryService",
            "from": "engram.integrations.hermes.memory_adapter",
            "name": "HermesMemoryService",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "demonstrate_memory_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/example.py",
            "line": 18,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 114,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/full_integration_example.py",
      "analysis": {
        "functions": [
          {
            "name": "demonstrate_full_integration",
            "line": 20,
            "async": true,
            "decorators": [],
            "docstring": "Demonstrate the full Hermes integration with Engram.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_message",
            "line": 44,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.integrations.hermes.memory_adapter.HermesMemoryService",
            "from": "engram.integrations.hermes.memory_adapter",
            "name": "HermesMemoryService",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.integrations.hermes.message_bus_adapter.MessageBusAdapter",
            "from": "engram.integrations.hermes.message_bus_adapter",
            "name": "MessageBusAdapter",
            "alias": null,
            "line": 16
          },
          {
            "module": "engram.integrations.hermes.logging_adapter.LoggingAdapter",
            "from": "engram.integrations.hermes.logging_adapter",
            "name": "LoggingAdapter",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "demonstrate_full_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/full_integration_example.py",
            "line": 20,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/full_integration_example.py",
            "line": 44,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 158,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the message bus adapter.\n\nArgs:\n    client_id: Unique identifier for this client",
            "args": [
              "self",
              "client_id"
            ],
            "class": "MessageBusAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 72,
            "async": true,
            "decorators": [],
            "docstring": "Start the message bus service.\n\nReturns:\n    Boolean indicating success",
            "args": [
              "self"
            ],
            "class": "MessageBusAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "publish",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Publish a message to a topic.\n\nArgs:\n    topic: The topic to publish to\n    message: The message content (string or dict)\n    metadata: Optional metadata for the message\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "topic",
              "message",
              "metadata"
            ],
            "class": "MessageBusAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "subscribe",
            "line": 170,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to a topic and register a handler.\n\nArgs:\n    topic: The topic to subscribe to\n    handler: Async callback function to handle received messages\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "topic",
              "handler"
            ],
            "class": "MessageBusAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "message_handler",
            "line": 187,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "message"
            ],
            "class": "MessageBusAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe",
            "line": 228,
            "async": true,
            "decorators": [],
            "docstring": "Unsubscribe from a topic.\n\nArgs:\n    topic: The topic to unsubscribe from\n    handler: Specific handler to unsubscribe, or None to unsubscribe all\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "topic",
              "handler"
            ],
            "class": "MessageBusAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_process_fallback_messages",
            "line": 272,
            "async": true,
            "decorators": [],
            "docstring": "Process messages in the fallback queue.",
            "args": [
              "self"
            ],
            "class": "MessageBusAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Close connections and clean up resources.",
            "args": [
              "self"
            ],
            "class": "MessageBusAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 323,
            "async": true,
            "decorators": [],
            "docstring": "Main function for testing the message bus adapter.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_message",
            "line": 332,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MessageBusAdapter",
            "line": 32,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Message bus adapter for Engram using Hermes's message bus service.\n\nThis class provides asynchronous communication capabilities between\nEngram instances and other Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 25
          },
          {
            "module": "hermes.core.message_bus.MessageHandler",
            "from": "hermes.core.message_bus",
            "name": "MessageHandler",
            "alias": null,
            "line": 25
          },
          {
            "module": "hermes.core.message_bus.Message",
            "from": "hermes.core.message_bus",
            "name": "Message",
            "alias": null,
            "line": 25
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MessageBusAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MessageBusAdapter.start",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 72,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBusAdapter.publish",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MessageBusAdapter.subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBusAdapter.message_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 187,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBusAdapter.unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 228,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBusAdapter.close",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 323,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/message_bus_adapter.py",
            "line": 332,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 367,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes memory service.\n\nArgs:\n    client_id: Unique identifier for the client (default: \"default\")\n    data_dir: Directory to store memory data (default: ~/.engram)",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "HermesMemoryService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory to storage.\n\nArgs:\n    content: The memory content (string or list of message objects)\n    namespace: The namespace to store in (default: \"conversations\")\n    metadata: Optional metadata for the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 114,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    query: The search query\n    namespace: The namespace to search in (default: \"conversations\")\n    limit: Maximum number of results to return\n    check_forget: Whether to check for and filter out forgotten information\n    \nReturns:\n    Dictionary with search results",
            "args": [
              "self",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relevant_context",
            "line": 141,
            "async": true,
            "decorators": [],
            "docstring": "Get formatted context from multiple namespaces for a given query.\n\nArgs:\n    query: The query to search for\n    namespaces: List of namespaces to search (default: all)\n    limit: Maximum memories per namespace\n    \nReturns:\n    Formatted context string",
            "args": [
              "self",
              "query",
              "namespaces",
              "limit"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_namespaces",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Get available namespaces.\n\nReturns:\n    List of namespace names",
            "args": [
              "self"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 174,
            "async": true,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    namespace: The namespace to clear\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "namespace"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_compartment",
            "line": 191,
            "async": true,
            "decorators": [],
            "docstring": "Create a new memory compartment.\n\nArgs:\n    name: Name of the compartment\n    description: Optional description\n    parent: Optional parent compartment ID for hierarchical organization\n    \nReturns:\n    Compartment ID if successful, None otherwise",
            "args": [
              "self",
              "name",
              "description",
              "parent"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 220,
            "async": true,
            "decorators": [],
            "docstring": "Activate a compartment to include in automatic context retrieval.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to activate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 232,
            "async": true,
            "decorators": [],
            "docstring": "Deactivate a compartment to exclude from automatic context retrieval.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to deactivate\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration",
            "line": 244,
            "async": true,
            "decorators": [],
            "docstring": "Set expiration for a compartment in days.\n\nArgs:\n    compartment_id: ID of the compartment\n    days: Number of days until expiration, or None to remove expiration\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "compartment_id",
              "days"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 259,
            "async": true,
            "decorators": [],
            "docstring": "List all compartments.\n\nArgs:\n    include_expired: Whether to include expired compartments\n    \nReturns:\n    List of compartment information dictionaries",
            "args": [
              "self",
              "include_expired"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "write_session_memory",
            "line": 271,
            "async": true,
            "decorators": [],
            "docstring": "Write a memory to the session namespace for persistence across sessions.\n\nArgs:\n    content: The content to store\n    metadata: Optional metadata\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "content",
              "metadata"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "keep_memory",
            "line": 291,
            "async": true,
            "decorators": [],
            "docstring": "Keep a memory for a specified number of days by setting expiration.\n\nArgs:\n    memory_id: The ID of the memory to keep\n    days: Number of days to keep the memory\n    \nReturns:\n    Boolean indicating success",
            "args": [
              "self",
              "memory_id",
              "days"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 309,
            "async": true,
            "decorators": [],
            "docstring": "Close connections and clean up resources.",
            "args": [
              "self"
            ],
            "class": "HermesMemoryService",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesMemoryService",
            "line": 28,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Memory service implementation using Hermes database services.\n\nThis class provides the same interface as Engram's MemoryService, but\nuses Hermes's centralized database services for storage and retrieval.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "imports.logger",
            "from": "imports",
            "name": "logger",
            "alias": null,
            "line": 12
          },
          {
            "module": "imports.HAS_HERMES",
            "from": "imports",
            "name": "HAS_HERMES",
            "alias": null,
            "line": 12
          },
          {
            "module": "imports.DatabaseClient",
            "from": "imports",
            "name": "DatabaseClient",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.fallback.FallbackStorage",
            "from": "utils.fallback",
            "name": "FallbackStorage",
            "alias": null,
            "line": 13
          },
          {
            "module": "compartments.manager.CompartmentManager",
            "from": "compartments.manager",
            "name": "CompartmentManager",
            "alias": null,
            "line": 14
          },
          {
            "module": "operations.memory.add_memory",
            "from": "operations.memory",
            "name": "add_memory",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.memory.clear_namespace",
            "from": "operations.memory",
            "name": "clear_namespace",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.memory.write_session_memory",
            "from": "operations.memory",
            "name": "write_session_memory",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.memory.keep_memory",
            "from": "operations.memory",
            "name": "keep_memory",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.search.search_memories",
            "from": "operations.search",
            "name": "search_memories",
            "alias": null,
            "line": 21
          },
          {
            "module": "operations.search.get_relevant_context",
            "from": "operations.search",
            "name": "get_relevant_context",
            "alias": null,
            "line": 21
          },
          {
            "module": "operations.search.get_namespaces",
            "from": "operations.search",
            "name": "get_namespaces",
            "alias": null,
            "line": 21
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesMemoryService",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 114,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.get_relevant_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 141,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.get_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 191,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 220,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 232,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 244,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 259,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.write_session_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 271,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.keep_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 291,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMemoryService.close",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/core/service.py",
            "line": 309,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 316,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/helpers.py",
      "analysis": {
        "functions": [
          {
            "name": "format_conversation",
            "line": 14,
            "async": false,
            "decorators": [],
            "docstring": "Format content as a conversation string.\n\nArgs:\n    content: Content string or list of message objects\n    \nReturns:\n    Formatted conversation string",
            "args": [
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_memory_id",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Generate a unique memory ID.\n\nArgs:\n    namespace: Namespace for the memory\n    content: Content of the memory\n    \nReturns:\n    Unique memory ID",
            "args": [
              "namespace",
              "content"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_namespace",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Validate and normalize a namespace name.\n\nArgs:\n    namespace: Namespace to validate\n    valid_namespaces: List of valid base namespaces\n    compartments: Dictionary of compartment data\n    \nReturns:\n    Normalized namespace name (or \"conversations\" if invalid)",
            "args": [
              "namespace",
              "valid_namespaces",
              "compartments"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "filter_forgotten_content",
            "line": 81,
            "async": false,
            "decorators": [],
            "docstring": "Filter out results containing forgotten content.\n\nArgs:\n    results: List of search results\n    forgotten_items: List of forgotten content strings\n    \nReturns:\n    Filtered list of results",
            "args": [
              "results",
              "forgotten_items"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "format_context",
            "line": 115,
            "async": false,
            "decorators": [],
            "docstring": "Format search results into a context string.\n\nArgs:\n    all_results: List of results with namespace information\n    namespaces: List of namespaces that were searched\n    compartments: Dictionary of compartment data\n    \nReturns:\n    Formatted context string",
            "args": [
              "all_results",
              "namespaces",
              "compartments"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 5
          },
          {
            "module": "time",
            "alias": null,
            "line": 6
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "core.imports.logger",
            "from": "core.imports",
            "name": "logger",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "format_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/helpers.py",
            "line": 14,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "generate_memory_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/helpers.py",
            "line": 40,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "validate_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/helpers.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "filter_forgotten_content",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/helpers.py",
            "line": 81,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/helpers.py",
            "line": 115,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 164,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": "Initialize fallback storage.\n\nArgs:\n    client_id: Client identifier\n    data_dir: Data directory for storage",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_memories",
            "line": 37,
            "async": false,
            "decorators": [],
            "docstring": "Load memories from file.",
            "args": [
              "self"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_save_memories",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Save memories to file.",
            "args": [
              "self"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "initialize_namespace",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a namespace if it doesn't exist.\n\nArgs:\n    namespace: Namespace to initialize",
            "args": [
              "self",
              "namespace"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_compartment",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a compartment namespace if it doesn't exist.\n\nArgs:\n    compartment_id: Compartment ID",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_memory",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Add a memory to fallback storage.\n\nArgs:\n    memory_id: Unique memory ID\n    content: Memory content\n    namespace: Namespace to store in\n    metadata: Memory metadata\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "memory_id",
              "content",
              "namespace",
              "metadata"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 113,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories in fallback storage.\n\nArgs:\n    query: Search query\n    namespace: Namespace to search in\n    limit: Maximum number of results\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "query",
              "namespace",
              "limit"
            ],
            "class": "FallbackStorage",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    namespace: Namespace to clear\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "namespace"
            ],
            "class": "FallbackStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "keep_memory",
            "line": 168,
            "async": false,
            "decorators": [],
            "docstring": "Mark a memory to be kept for a specified number of days.\n\nArgs:\n    memory_id: ID of the memory to keep\n    days: Number of days to keep\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "memory_id",
              "days"
            ],
            "class": "FallbackStorage",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "FallbackStorage",
            "line": 17,
            "methods": [
              "__init__",
              "_load_memories",
              "_save_memories",
              "initialize_namespace",
              "initialize_compartment",
              "add_memory",
              "search",
              "clear_namespace",
              "keep_memory"
            ],
            "decorators": [],
            "docstring": "File-based fallback storage for memories when Hermes is not available.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.imports.logger",
            "from": "core.imports",
            "name": "logger",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FallbackStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FallbackStorage._load_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 37,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "FallbackStorage._save_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 49,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "FallbackStorage.initialize_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FallbackStorage.initialize_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 69,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FallbackStorage.add_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FallbackStorage.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 113,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FallbackStorage.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 151,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FallbackStorage.keep_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/utils/fallback.py",
            "line": 168,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 198,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/memory.py",
      "analysis": {
        "functions": [
          {
            "name": "add_memory",
            "line": 14,
            "async": true,
            "decorators": [],
            "docstring": "Add a memory to storage.\n\nArgs:\n    hermes_client: Hermes database client\n    fallback_storage: Fallback storage implementation\n    compartment_manager: Compartment manager\n    content: Memory content\n    namespace: Namespace to store in\n    metadata: Optional metadata\n    client_id: Client identifier\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "hermes_client",
              "fallback_storage",
              "compartment_manager",
              "content",
              "namespace",
              "metadata",
              "client_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Clear all memories in a namespace.\n\nArgs:\n    hermes_client: Hermes database client\n    fallback_storage: Fallback storage implementation\n    compartment_manager: Compartment manager\n    namespace: Namespace to clear\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "hermes_client",
              "fallback_storage",
              "compartment_manager",
              "namespace"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "write_session_memory",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Write a memory to the session namespace.\n\nArgs:\n    hermes_client: Hermes database client\n    fallback_storage: Fallback storage implementation\n    compartment_manager: Compartment manager\n    content: Memory content\n    metadata: Optional metadata\n    client_id: Client identifier\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "hermes_client",
              "fallback_storage",
              "compartment_manager",
              "content",
              "metadata",
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "keep_memory",
            "line": 152,
            "async": true,
            "decorators": [],
            "docstring": "Keep a memory for a specified number of days.\n\nArgs:\n    hermes_client: Hermes database client\n    fallback_storage: Fallback storage implementation\n    memory_id: Memory ID\n    days: Number of days to keep\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "hermes_client",
              "fallback_storage",
              "memory_id",
              "days"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          },
          {
            "module": "core.imports.logger",
            "from": "core.imports",
            "name": "logger",
            "alias": null,
            "line": 10
          },
          {
            "module": "core.imports.HAS_HERMES",
            "from": "core.imports",
            "name": "HAS_HERMES",
            "alias": null,
            "line": 10
          },
          {
            "module": "utils.helpers.format_conversation",
            "from": "utils.helpers",
            "name": "format_conversation",
            "alias": null,
            "line": 11
          },
          {
            "module": "utils.helpers.generate_memory_id",
            "from": "utils.helpers",
            "name": "generate_memory_id",
            "alias": null,
            "line": 11
          },
          {
            "module": "utils.helpers.validate_namespace",
            "from": "utils.helpers",
            "name": "validate_namespace",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "add_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/memory.py",
            "line": 14,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/memory.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "write_session_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/memory.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "keep_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/memory.py",
            "line": 152,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 168,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/search.py",
      "analysis": {
        "functions": [
          {
            "name": "search_memories",
            "line": 17,
            "async": true,
            "decorators": [],
            "docstring": "Search for memories based on a query.\n\nArgs:\n    hermes_client: Hermes database client\n    fallback_storage: Fallback storage implementation\n    compartment_manager: Compartment manager\n    query: Search query\n    namespace: Namespace to search in\n    limit: Maximum number of results\n    check_forget: Whether to check for forgotten information\n    \nReturns:\n    Dictionary of search results",
            "args": [
              "hermes_client",
              "fallback_storage",
              "compartment_manager",
              "query",
              "namespace",
              "limit",
              "check_forget"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_relevant_context",
            "line": 128,
            "async": true,
            "decorators": [],
            "docstring": "Get formatted context from multiple namespaces for a query.\n\nArgs:\n    hermes_client: Hermes database client\n    fallback_storage: Fallback storage implementation\n    compartment_manager: Compartment manager\n    query: Search query\n    namespaces: List of namespaces to search\n    limit: Maximum memories per namespace\n    \nReturns:\n    Formatted context string",
            "args": [
              "hermes_client",
              "fallback_storage",
              "compartment_manager",
              "query",
              "namespaces",
              "limit"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_namespaces",
            "line": 174,
            "async": true,
            "decorators": [],
            "docstring": "Get all available namespaces.\n\nArgs:\n    compartment_manager: Compartment manager\n    \nReturns:\n    List of namespace names",
            "args": [
              "compartment_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "core.imports.logger",
            "from": "core.imports",
            "name": "logger",
            "alias": null,
            "line": 9
          },
          {
            "module": "core.imports.HAS_HERMES",
            "from": "core.imports",
            "name": "HAS_HERMES",
            "alias": null,
            "line": 9
          },
          {
            "module": "utils.helpers.validate_namespace",
            "from": "utils.helpers",
            "name": "validate_namespace",
            "alias": null,
            "line": 10
          },
          {
            "module": "utils.helpers.filter_forgotten_content",
            "from": "utils.helpers",
            "name": "filter_forgotten_content",
            "alias": null,
            "line": 10
          },
          {
            "module": "utils.helpers.format_context",
            "from": "utils.helpers",
            "name": "format_context",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "search_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/search.py",
            "line": 17,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_relevant_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/search.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/operations/search.py",
            "line": 174,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 191,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the compartment manager.\n\nArgs:\n    client_id: Client identifier\n    data_dir: Data directory for storage",
            "args": [
              "self",
              "client_id",
              "data_dir"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_compartments",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Load compartment definitions from file.\n\nReturns:\n    Dictionary of compartment definitions",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_save_compartments",
            "line": 53,
            "async": false,
            "decorators": [],
            "docstring": "Save compartment definitions to file.\n\nReturns:\n    True if successful, False otherwise",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "create_compartment",
            "line": 68,
            "async": true,
            "decorators": [],
            "docstring": "Create a new compartment.\n\nArgs:\n    name: Name of the compartment\n    description: Optional description\n    parent: Optional parent compartment ID\n    \nReturns:\n    Compartment ID if successful, None otherwise",
            "args": [
              "self",
              "name",
              "description",
              "parent"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 107,
            "async": true,
            "decorators": [],
            "docstring": "Activate a compartment.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to activate\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 144,
            "async": true,
            "decorators": [],
            "docstring": "Deactivate a compartment.\n\nArgs:\n    compartment_id_or_name: ID or name of compartment to deactivate\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment_id_or_name"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Set expiration for a compartment.\n\nArgs:\n    compartment_id: ID of the compartment\n    days: Number of days until expiration, or None to remove expiration\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment_id",
              "days"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 208,
            "async": true,
            "decorators": [],
            "docstring": "List all compartments.\n\nArgs:\n    include_expired: Whether to include expired compartments\n    \nReturns:\n    List of compartment information dictionaries",
            "args": [
              "self",
              "include_expired"
            ],
            "class": "CompartmentManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_active_compartments",
            "line": 244,
            "async": false,
            "decorators": [],
            "docstring": "Get IDs of currently active compartments.\n\nReturns:\n    List of active compartment IDs",
            "args": [
              "self"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_compartment_data",
            "line": 253,
            "async": false,
            "decorators": [],
            "docstring": "Get data for a specific compartment.\n\nArgs:\n    compartment_id: ID of the compartment\n    \nReturns:\n    Compartment data dictionary or None if not found",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "CompartmentManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "CompartmentManager",
            "line": 17,
            "methods": [
              "__init__",
              "_load_compartments",
              "_save_compartments",
              "get_active_compartments",
              "get_compartment_data"
            ],
            "decorators": [],
            "docstring": "Manager for memory compartments.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.imports.logger",
            "from": "core.imports",
            "name": "logger",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "CompartmentManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CompartmentManager._load_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 36,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "CompartmentManager._save_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 53,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "CompartmentManager.create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 144,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 208,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.get_active_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 244,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CompartmentManager.get_compartment_data",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/integrations/hermes/memory_adapter/compartments/manager.py",
            "line": 253,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 263,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/core_memory.py",
      "analysis": {
        "functions": [
          {
            "name": "query_memory",
            "line": 26,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Query memory for relevant information.",
            "args": [
              "query_data",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_memory",
            "line": 50,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Store a new memory.",
            "args": [
              "memory_data",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_conversation",
            "line": 75,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Store a complete conversation.",
            "args": [
              "conversation",
              "namespace",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 105,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Get formatted memory context across multiple namespaces.",
            "args": [
              "query_data",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_namespace",
            "line": 130,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Clear all memories in a namespace.",
            "args": [
              "namespace",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "query_memory",
            "line": 26,
            "method": "@post",
            "async": true
          },
          {
            "name": "store_memory",
            "line": 50,
            "method": "@post",
            "async": true
          },
          {
            "name": "store_conversation",
            "line": 75,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_context",
            "line": 105,
            "method": "@post",
            "async": true
          },
          {
            "name": "clear_namespace",
            "line": 130,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.api.models.MemoryQuery",
            "from": "engram.api.models",
            "name": "MemoryQuery",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.api.models.MemoryStore",
            "from": "engram.api.models",
            "name": "MemoryStore",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.api.models.MemoryMultiQuery",
            "from": "engram.api.models",
            "name": "MemoryMultiQuery",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.api.dependencies.get_memory_service",
            "from": "engram.api.dependencies",
            "name": "get_memory_service",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "query_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/core_memory.py",
            "line": 26,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/core_memory.py",
            "line": 50,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "store_conversation",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/core_memory.py",
            "line": 75,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/core_memory.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/core_memory.py",
            "line": 130,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 145,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
      "analysis": {
        "functions": [
          {
            "name": "start_nexus_session",
            "line": 26,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Start a new Nexus session.",
            "args": [
              "session_name",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "end_nexus_session",
            "line": 43,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "End the current Nexus session.",
            "args": [
              "summary",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 60,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Process a conversation message with optional automatic agency activation.\n\nAuto-agency defaults to the value in the configuration file if not specified.",
            "args": [
              "message",
              "is_user",
              "metadata",
              "auto_agency",
              "nexus"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "store_nexus_memory",
            "line": 112,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Store a memory using the Nexus interface.",
            "args": [
              "content",
              "category",
              "importance",
              "tags",
              "metadata",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "forget_nexus_memory",
            "line": 148,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Mark information to be forgotten.",
            "args": [
              "content",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_nexus_memories",
            "line": 165,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Search for memories across memory systems.",
            "args": [
              "query",
              "categories",
              "min_importance",
              "limit",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_nexus_conversation_summary",
            "line": 195,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a summary of the current conversation.",
            "args": [
              "max_length",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_nexus_settings",
            "line": 212,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get current Nexus settings.",
            "args": [
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_nexus_settings",
            "line": 228,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Update Nexus settings.",
            "args": [
              "settings",
              "nexus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "start_nexus_session",
            "line": 26,
            "method": "@get",
            "async": true
          },
          {
            "name": "end_nexus_session",
            "line": 43,
            "method": "@get",
            "async": true
          },
          {
            "name": "process_message",
            "line": 60,
            "method": "@get",
            "async": true
          },
          {
            "name": "store_nexus_memory",
            "line": 112,
            "method": "@get",
            "async": true
          },
          {
            "name": "forget_nexus_memory",
            "line": 148,
            "method": "@get",
            "async": true
          },
          {
            "name": "search_nexus_memories",
            "line": 165,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_nexus_conversation_summary",
            "line": 195,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_nexus_settings",
            "line": 212,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_nexus_settings",
            "line": 228,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.core.nexus.NexusInterface",
            "from": "engram.core.nexus",
            "name": "NexusInterface",
            "alias": null,
            "line": 14
          },
          {
            "module": "engram.core.config.get_config",
            "from": "engram.core.config",
            "name": "get_config",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.api.dependencies.get_nexus_interface",
            "from": "engram.api.dependencies",
            "name": "get_nexus_interface",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "start_nexus_session",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 26,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "end_nexus_session",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 60,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "store_nexus_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 112,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "forget_nexus_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 148,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_nexus_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_nexus_conversation_summary",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 195,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_nexus_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 212,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_nexus_settings",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/nexus.py",
            "line": 228,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 245,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/clients.py",
      "analysis": {
        "functions": [
          {
            "name": "list_clients",
            "line": 21,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all active clients.",
            "args": [
              "memory_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "client_status",
            "line": 35,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get status for a specific client.",
            "args": [
              "client_id",
              "memory_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "cleanup_idle_clients",
            "line": 53,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Clean up clients that have been idle for a specified time.",
            "args": [
              "idle_threshold",
              "memory_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "list_clients",
            "line": 21,
            "method": "@get",
            "async": true
          },
          {
            "name": "client_status",
            "line": 35,
            "method": "@get",
            "async": true
          },
          {
            "name": "cleanup_idle_clients",
            "line": 53,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.api.dependencies.get_memory_manager",
            "from": "engram.api.dependencies",
            "name": "get_memory_manager",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "list_clients",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/clients.py",
            "line": 21,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "client_status",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/clients.py",
            "line": 35,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cleanup_idle_clients",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/clients.py",
            "line": 53,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 66,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
      "analysis": {
        "functions": [
          {
            "name": "add_structured_memory",
            "line": 23,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Add a memory to the structured memory system.",
            "args": [
              "content",
              "category",
              "importance",
              "tags",
              "metadata",
              "structured_memory"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_auto_categorized_memory",
            "line": 59,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Add a memory with automatic categorization.",
            "args": [
              "content",
              "manual_category",
              "manual_importance",
              "manual_tags",
              "metadata",
              "structured_memory"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_structured_memory",
            "line": 98,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific memory by ID.",
            "args": [
              "memory_id",
              "structured_memory"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search_structured_memory",
            "line": 118,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Search for memories.",
            "args": [
              "query",
              "categories",
              "tags",
              "min_importance",
              "limit",
              "sort_by",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_digest",
            "line": 153,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a memory digest.",
            "args": [
              "max_memories",
              "include_private",
              "categories",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_structured_memory",
            "line": 181,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Delete a memory.",
            "args": [
              "memory_id",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_memory_importance",
            "line": 198,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Update the importance of a memory.",
            "args": [
              "memory_id",
              "importance",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_memories",
            "line": 216,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get memories relevant to context.",
            "args": [
              "text",
              "max_memories",
              "structured_memory"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "add_structured_memory",
            "line": 23,
            "method": "@get",
            "async": true
          },
          {
            "name": "add_auto_categorized_memory",
            "line": 59,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_structured_memory",
            "line": 98,
            "method": "@get",
            "async": true
          },
          {
            "name": "search_structured_memory",
            "line": 118,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_memory_digest",
            "line": 153,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_structured_memory",
            "line": 181,
            "method": "@get",
            "async": true
          },
          {
            "name": "set_memory_importance",
            "line": 198,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_context_memories",
            "line": 216,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 10
          },
          {
            "module": "engram.core.structured_memory.StructuredMemory",
            "from": "engram.core.structured_memory",
            "name": "StructuredMemory",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.api.dependencies.get_structured_memory",
            "from": "engram.api.dependencies",
            "name": "get_structured_memory",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "add_structured_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 23,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_auto_categorized_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_structured_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_structured_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 118,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_memory_digest",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_structured_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 181,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_memory_importance",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 198,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/structured.py",
            "line": 216,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 230,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
      "analysis": {
        "functions": [
          {
            "name": "http_store_memory",
            "line": 26,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Store a memory in the specified namespace.",
            "args": [
              "key",
              "value",
              "namespace",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_store_thinking",
            "line": 52,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Store a thought in the thinking namespace.",
            "args": [
              "thought",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_store_longterm",
            "line": 74,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Store important information in the longterm namespace.",
            "args": [
              "info",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_query_memory",
            "line": 96,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query memory for relevant information.",
            "args": [
              "query",
              "namespace",
              "limit",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_get_context",
            "line": 118,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get formatted context from multiple namespaces.",
            "args": [
              "query",
              "include_thinking",
              "limit",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "http_clear_namespace",
            "line": 145,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Clear all memories in a namespace.",
            "args": [
              "namespace",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "write_session_memory",
            "line": 159,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Write a memory to the session namespace for persistence.",
            "args": [
              "content",
              "metadata",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_session_memory",
            "line": 177,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Load previous session memory.",
            "args": [
              "limit",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "http_store_memory",
            "line": 26,
            "method": "@get",
            "async": true
          },
          {
            "name": "http_store_thinking",
            "line": 52,
            "method": "@get",
            "async": true
          },
          {
            "name": "http_store_longterm",
            "line": 74,
            "method": "@get",
            "async": true
          },
          {
            "name": "http_query_memory",
            "line": 96,
            "method": "@get",
            "async": true
          },
          {
            "name": "http_get_context",
            "line": 118,
            "method": "@get",
            "async": true
          },
          {
            "name": "http_clear_namespace",
            "line": 145,
            "method": "@get",
            "async": true
          },
          {
            "name": "write_session_memory",
            "line": 159,
            "method": "@get",
            "async": true
          },
          {
            "name": "load_session_memory",
            "line": 177,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.api.dependencies.get_memory_service",
            "from": "engram.api.dependencies",
            "name": "get_memory_service",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "http_store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 26,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_store_thinking",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_store_longterm",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 74,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_query_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 118,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "http_clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "write_session_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 159,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "load_session_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/http_wrapper.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 200,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
      "analysis": {
        "functions": [
          {
            "name": "create_compartment",
            "line": 22,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Create a new memory compartment.",
            "args": [
              "name",
              "description",
              "parent",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_in_compartment",
            "line": 41,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Store content in a specific compartment.",
            "args": [
              "compartment",
              "content",
              "key",
              "memory_service"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "activate_compartment",
            "line": 83,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Activate a compartment to include in automatic context retrieval.",
            "args": [
              "compartment",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deactivate_compartment",
            "line": 97,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Deactivate a compartment to exclude from automatic context retrieval.",
            "args": [
              "compartment",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_compartments",
            "line": 111,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all compartments.",
            "args": [
              "include_expired",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_compartment_expiration",
            "line": 125,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Set expiration for a compartment in days.",
            "args": [
              "compartment_id",
              "days",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "create_compartment",
            "line": 22,
            "method": "@get",
            "async": true
          },
          {
            "name": "store_in_compartment",
            "line": 41,
            "method": "@get",
            "async": true
          },
          {
            "name": "activate_compartment",
            "line": 83,
            "method": "@get",
            "async": true
          },
          {
            "name": "deactivate_compartment",
            "line": 97,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_compartments",
            "line": 111,
            "method": "@get",
            "async": true
          },
          {
            "name": "set_compartment_expiration",
            "line": 125,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.api.dependencies.get_memory_service",
            "from": "engram.api.dependencies",
            "name": "get_memory_service",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
            "line": 22,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "store_in_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
            "line": 41,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "activate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
            "line": 83,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "deactivate_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_compartment_expiration",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/compartments.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 136,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/root.py",
      "analysis": {
        "functions": [
          {
            "name": "root",
            "line": 23,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 38,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check if all memory services are running.",
            "args": [
              "client_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 23,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 38,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.api.models.HealthResponse",
            "from": "engram.api.models",
            "name": "HealthResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.api.dependencies.get_client_id",
            "from": "engram.api.dependencies",
            "name": "get_client_id",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.api.dependencies.get_memory_service",
            "from": "engram.api.dependencies",
            "name": "get_memory_service",
            "alias": null,
            "line": 13
          },
          {
            "module": "engram.api.dependencies.get_memory_manager",
            "from": "engram.api.dependencies",
            "name": "get_memory_manager",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/root.py",
            "line": 23,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/root.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 75,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/private.py",
      "analysis": {
        "functions": [
          {
            "name": "keep_memory",
            "line": 22,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Keep a memory for a specified number of days.",
            "args": [
              "memory_id",
              "days",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_private",
            "line": 37,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Store a private memory.",
            "args": [
              "content",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_private",
            "line": 54,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific private memory.",
            "args": [
              "memory_id",
              "use_emergency",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_private",
            "line": 72,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all private memories.",
            "args": [
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_private",
            "line": 85,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Delete a private memory.",
            "args": [
              "memory_id",
              "memory_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "keep_memory",
            "line": 22,
            "method": "@get",
            "async": true
          },
          {
            "name": "store_private",
            "line": 37,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_private",
            "line": 54,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_private",
            "line": 72,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_private",
            "line": 85,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 9
          },
          {
            "module": "engram.core.memory.MemoryService",
            "from": "engram.core.memory",
            "name": "MemoryService",
            "alias": null,
            "line": 11
          },
          {
            "module": "engram.api.dependencies.get_memory_service",
            "from": "engram.api.dependencies",
            "name": "get_memory_service",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "keep_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/private.py",
            "line": 22,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "store_private",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/private.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_private",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/private.py",
            "line": 54,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_private",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/private.py",
            "line": 72,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_private",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/engram/api/controllers/private.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 95,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize with client ID.",
            "args": [
              "self",
              "client_id",
              "use_hermes"
            ],
            "class": "MemoryHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "store_memory",
            "line": 57,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Store a memory, handling async/sync cases.",
            "args": [
              "content"
            ],
            "class": "MemoryHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_recent_memories",
            "line": 70,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Get recent memories, handling async/sync cases.",
            "args": [
              "count"
            ],
            "class": "MemoryHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_memories",
            "line": 83,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Search memories, handling async/sync cases.",
            "args": [
              "query"
            ],
            "class": "MemoryHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context_memories",
            "line": 96,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Get memories relevant to a specific context.",
            "args": [
              "context",
              "max_memories"
            ],
            "class": "MemoryHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_semantic_memories",
            "line": 109,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Get semantically similar memories using vector search.",
            "args": [
              "query",
              "max_memories"
            ],
            "class": "MemoryHandler",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "enhance_prompt_with_memory",
            "line": 122,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Enhance user prompt with relevant memories.",
            "args": [
              "user_input"
            ],
            "class": "MemoryHandler",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "check_memory_status",
            "line": 168,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Check if memory service is running.",
            "args": [],
            "class": "MemoryHandler",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryHandler",
            "line": 21,
            "methods": [
              "__init__",
              "store_memory",
              "get_recent_memories",
              "search_memories",
              "get_context_memories",
              "get_semantic_memories",
              "enhance_prompt_with_memory",
              "check_memory_status"
            ],
            "decorators": [],
            "docstring": "Helper class to handle async/sync memory operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "engram.cli.quickmem.m",
            "from": "engram.cli.quickmem",
            "name": "m",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.t",
            "from": "engram.cli.quickmem",
            "name": "t",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.r",
            "from": "engram.cli.quickmem",
            "name": "r",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.w",
            "from": "engram.cli.quickmem",
            "name": "w",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.l",
            "from": "engram.cli.quickmem",
            "name": "l",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.c",
            "from": "engram.cli.quickmem",
            "name": "c",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.k",
            "from": "engram.cli.quickmem",
            "name": "k",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.s",
            "from": "engram.cli.quickmem",
            "name": "s",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.a",
            "from": "engram.cli.quickmem",
            "name": "a",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.p",
            "from": "engram.cli.quickmem",
            "name": "p",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.v",
            "from": "engram.cli.quickmem",
            "name": "v",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.d",
            "from": "engram.cli.quickmem",
            "name": "d",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.n",
            "from": "engram.cli.quickmem",
            "name": "n",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.q",
            "from": "engram.cli.quickmem",
            "name": "q",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.y",
            "from": "engram.cli.quickmem",
            "name": "y",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.z",
            "from": "engram.cli.quickmem",
            "name": "z",
            "alias": null,
            "line": 12
          },
          {
            "module": "engram.cli.quickmem.run",
            "from": "engram.cli.quickmem",
            "name": "run",
            "alias": null,
            "line": 12
          },
          {
            "module": "api.models.get_model_persona",
            "from": "api.models",
            "name": "get_model_persona",
            "alias": null,
            "line": 39
          },
          {
            "module": "hermes.utils.database_helper.DatabaseClient",
            "from": "hermes.utils.database_helper",
            "name": "DatabaseClient",
            "alias": null,
            "line": 48
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryHandler",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryHandler.store_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 57,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryHandler.get_recent_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryHandler.search_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 83,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryHandler.get_context_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 96,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryHandler.get_semantic_memories",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 109,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryHandler.enhance_prompt_with_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 122,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MemoryHandler.check_memory_status",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/handler.py",
            "line": 168,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 177,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/operations.py",
      "analysis": {
        "functions": [
          {
            "name": "detect_memory_operations",
            "line": 12,
            "async": false,
            "decorators": [],
            "docstring": "Detect and execute memory operations in model output.\n\nArgs:\n    model_output: The output text from the model\n    memory_handler: Optional memory handler to use (creates one if not provided)\n    \nReturns:\n    tuple: (cleaned_output, operation_results)",
            "args": [
              "model_output",
              "memory_handler"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "format_memory_operations_report",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Format memory operations into a readable report.\n\nArgs:\n    operations: List of memory operations and their results\n    \nReturns:\n    String with formatted report",
            "args": [
              "operations"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "re",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "handler.MemoryHandler",
            "from": "handler",
            "name": "MemoryHandler",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "detect_memory_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/operations.py",
            "line": 12,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_memory_operations_report",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/memory/operations.py",
            "line": 66,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 97,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/pattern_matching.py",
      "analysis": {
        "functions": [
          {
            "name": "detect_all_operations",
            "line": 10,
            "async": false,
            "decorators": [],
            "docstring": "Detect all types of operations in model output.\n\nArgs:\n    model_output: The output text from the model\n    handlers: Dictionary of handlers for different operation types\n    \nReturns:\n    tuple: (cleaned_output, grouped_operations)",
            "args": [
              "model_output",
              "handlers"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_operations_report",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Format all operations into a combined report.\n\nArgs:\n    operations: Dictionary of operation types and their results\n    \nReturns:\n    String with formatted report",
            "args": [
              "operations"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "re",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "memory.operations.detect_memory_operations",
            "from": "memory.operations",
            "name": "detect_memory_operations",
            "alias": null,
            "line": 21
          },
          {
            "module": "communication.messenger.detect_communication_operations",
            "from": "communication.messenger",
            "name": "detect_communication_operations",
            "alias": null,
            "line": 22
          },
          {
            "module": "communication.dialog.detect_dialog_operations",
            "from": "communication.dialog",
            "name": "detect_dialog_operations",
            "alias": null,
            "line": 23
          },
          {
            "module": "memory.operations.format_memory_operations_report",
            "from": "memory.operations",
            "name": "format_memory_operations_report",
            "alias": null,
            "line": 61
          },
          {
            "module": "communication.messenger.format_communication_operations_report",
            "from": "communication.messenger",
            "name": "format_communication_operations_report",
            "alias": null,
            "line": 62
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "detect_all_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/pattern_matching.py",
            "line": 10,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_operations_report",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/pattern_matching.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 84,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
      "analysis": {
        "functions": [
          {
            "name": "colorize",
            "line": 10,
            "async": false,
            "decorators": [],
            "docstring": "Add color to a string for terminal output.\n\nArgs:\n    text: The text to colorize\n    color: Color name ('red', 'green', 'yellow', 'blue', 'magenta', 'cyan')\n    \nReturns:\n    Colorized string",
            "args": [
              "text",
              "color"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "print_colored",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Print text with color.",
            "args": [
              "text",
              "color"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_environment_variables",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Set environment variables based on command line args.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_chat_message",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Format a chat message for display.\n\nArgs:\n    role: Message role ('user' or 'assistant')\n    message: Message content\n    model_name: Model name (for assistant messages)\n    \nReturns:\n    Formatted message string",
            "args": [
              "role",
              "message",
              "model_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "should_save_to_memory",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Determine if an interaction should be saved to memory.\n\nArgs:\n    user_input: User input text\n    assistant_message: Assistant response text\n    \nReturns:\n    True if should save, False otherwise",
            "args": [
              "user_input",
              "assistant_message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_memory_for_saving",
            "line": 80,
            "async": false,
            "decorators": [],
            "docstring": "Format an interaction for saving to memory.\n\nArgs:\n    user_input: User input text\n    assistant_message: Assistant response text\n    model_name: Name of the model used\n    \nReturns:\n    Formatted memory text",
            "args": [
              "user_input",
              "assistant_message",
              "model_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "colorize",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
            "line": 10,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "print_colored",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "set_environment_variables",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_chat_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
            "line": 48,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "should_save_to_memory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_memory_for_saving",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/utils/helpers.py",
            "line": 80,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 94,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/cli/args.py",
      "analysis": {
        "functions": [
          {
            "name": "parse_args",
            "line": 10,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "display_args",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Display the command line arguments.",
            "args": [
              "args"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "parse_args",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/cli/args.py",
            "line": 10,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "display_args",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/cli/args.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 35,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/cli/commands.py",
      "analysis": {
        "functions": [
          {
            "name": "process_special_command",
            "line": 11,
            "async": false,
            "decorators": [],
            "docstring": "Process special commands entered by the user.\n\nArgs:\n    command: The command string\n    memory_handler: Memory handler instance\n    \nReturns:\n    Tuple of (command_processed, message_to_display)",
            "args": [
              "command",
              "memory_handler"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "display_help",
            "line": 76,
            "async": false,
            "decorators": [],
            "docstring": "Return help text for user commands.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "memory.handler.MemoryHandler",
            "from": "memory.handler",
            "name": "MemoryHandler",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "process_special_command",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/cli/commands.py",
            "line": 11,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "display_help",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/cli/commands.py",
            "line": 76,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 88,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
      "analysis": {
        "functions": [
          {
            "name": "get_model_capabilities",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Fallback for getting model capabilities.",
            "args": [
              "model_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_memory_system_prompt",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Fallback for memory system prompt.",
            "args": [
              "model_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_communication_system_prompt",
            "line": 62,
            "async": false,
            "decorators": [],
            "docstring": "Fallback for communication system prompt.",
            "args": [
              "model_name",
              "available_models"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_combined_system_prompt",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Fallback for combined system prompt.",
            "args": [
              "model_name",
              "available_models"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_system_prompt",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Get the appropriate system prompt based on prompt type and model.\n\nArgs:\n    model_name: The name of the Ollama model\n    prompt_type: Type of system prompt (\"memory\", \"communication\", \"combined\")\n    available_models: Optional list of available AI models for communication\n    custom_system_prompt: Optional custom system prompt to use instead\n    \nReturns:\n    String containing the system prompt",
            "args": [
              "model_name",
              "prompt_type",
              "available_models",
              "custom_system_prompt"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_model_persona",
            "line": 118,
            "async": false,
            "decorators": [],
            "docstring": "Get the persona name for a given model.",
            "args": [
              "model_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "sys",
            "alias": null,
            "line": 7
          },
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "ollama_system_prompts.get_memory_system_prompt",
            "from": "ollama_system_prompts",
            "name": "get_memory_system_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "ollama_system_prompts.get_communication_system_prompt",
            "from": "ollama_system_prompts",
            "name": "get_communication_system_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "ollama_system_prompts.get_combined_system_prompt",
            "from": "ollama_system_prompts",
            "name": "get_combined_system_prompt",
            "alias": null,
            "line": 17
          },
          {
            "module": "ollama_system_prompts.get_model_capabilities",
            "from": "ollama_system_prompts",
            "name": "get_model_capabilities",
            "alias": null,
            "line": 17
          },
          {
            "module": "ollama_system_prompts.MODEL_CAPABILITIES",
            "from": "ollama_system_prompts",
            "name": "MODEL_CAPABILITIES",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_model_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_memory_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
            "line": 43,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_communication_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
            "line": 62,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_combined_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
            "line": 77,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_system_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
            "line": 93,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_model_persona",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/models.py",
            "line": 118,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 124,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/client.py",
      "analysis": {
        "functions": [
          {
            "name": "call_ollama_api",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": "Call the Ollama API with the given parameters.",
            "args": [
              "model",
              "messages",
              "system",
              "temperature",
              "top_p",
              "max_tokens"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_ollama_status",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Check if Ollama is running and get available models.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "pull_model",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Pull a model from Ollama.",
            "args": [
              "model_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "requests",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "call_ollama_api",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/client.py",
            "line": 15,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "check_ollama_status",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/client.py",
            "line": 44,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "pull_model",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/api/client.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 82,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Initialize dialog manager.",
            "args": [
              "self",
              "client_id"
            ],
            "class": "DialogManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "enter_dialog_mode",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Handle entering dialog mode with a specific AI or with all AIs (*).\n\nArgs:\n    recipient: The client ID to dialog with, or '*' for all\n\nReturns:\n    Dict with dialog mode status",
            "args": [
              "self",
              "recipient"
            ],
            "class": "DialogManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "exit_dialog_mode",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Exit dialog mode.",
            "args": [
              "self"
            ],
            "class": "DialogManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_for_messages",
            "line": 77,
            "async": false,
            "decorators": [],
            "docstring": "Check for messages in dialog mode and optionally auto-reply.\n\nArgs:\n    model: The model to use for auto-replies\n    system: The system prompt\n    chat_history: Current chat history\n    temperature: Temperature for generation\n    top_p: Top-p sampling parameter\n    max_tokens: Maximum tokens to generate\n    \nReturns:\n    Optional dict with new messages and auto-replies",
            "args": [
              "self",
              "model",
              "system",
              "chat_history",
              "temperature",
              "top_p",
              "max_tokens"
            ],
            "class": "DialogManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_user_input_with_timeout",
            "line": 219,
            "async": false,
            "decorators": [],
            "docstring": "Get user input with a timeout to support dialog mode.\n\nArgs:\n    timeout: Timeout in seconds\n    \nReturns:\n    User input string or None if timeout",
            "args": [
              "self",
              "timeout"
            ],
            "class": "DialogManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "detect_dialog_operations",
            "line": 241,
            "async": false,
            "decorators": [],
            "docstring": "Detect dialog mode operations in model output.\n\nArgs:\n    model_output: The output text from the model\n    dialog_manager: Optional dialog manager to use (creates one if not provided)\n    \nReturns:\n    tuple: (cleaned_output, operation_results)",
            "args": [
              "model_output",
              "dialog_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DialogManager",
            "line": 17,
            "methods": [
              "__init__",
              "enter_dialog_mode",
              "exit_dialog_mode",
              "check_for_messages",
              "get_user_input_with_timeout"
            ],
            "decorators": [],
            "docstring": "Manages dialog mode with other AI models.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "re",
            "alias": null,
            "line": 7
          },
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "select",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "memory.handler.MemoryHandler",
            "from": "memory.handler",
            "name": "MemoryHandler",
            "alias": null,
            "line": 13
          },
          {
            "module": "memory.handler.MEMORY_AVAILABLE",
            "from": "memory.handler",
            "name": "MEMORY_AVAILABLE",
            "alias": null,
            "line": 13
          },
          {
            "module": "api.client.call_ollama_api",
            "from": "api.client",
            "name": "call_ollama_api",
            "alias": null,
            "line": 14
          },
          {
            "module": "messenger.Messenger",
            "from": "messenger",
            "name": "Messenger",
            "alias": null,
            "line": 15
          },
          {
            "module": "engram.cli.comm_quickmem.lc",
            "from": "engram.cli.comm_quickmem",
            "name": "lc",
            "alias": null,
            "line": 118
          },
          {
            "module": "engram.cli.comm_quickmem.gm",
            "from": "engram.cli.comm_quickmem",
            "name": "gm",
            "alias": null,
            "line": 118
          },
          {
            "module": "engram.cli.comm_quickmem.run",
            "from": "engram.cli.comm_quickmem",
            "name": "run",
            "alias": null,
            "line": 118
          },
          {
            "module": "engram.cli.comm_quickmem.gm",
            "from": "engram.cli.comm_quickmem",
            "name": "gm",
            "alias": null,
            "line": 174
          },
          {
            "module": "engram.cli.comm_quickmem.run",
            "from": "engram.cli.comm_quickmem",
            "name": "run",
            "alias": null,
            "line": 174
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DialogManager",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DialogManager.enter_dialog_mode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DialogManager.exit_dialog_mode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
            "line": 67,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DialogManager.check_for_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
            "line": 77,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DialogManager.get_user_input_with_timeout",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
            "line": 219,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "detect_dialog_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/dialog.py",
            "line": 241,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 280,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize messenger with sender information.",
            "args": [
              "self",
              "sender_persona",
              "client_id"
            ],
            "class": "Messenger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_message",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Send a message to another AI.",
            "args": [
              "self",
              "recipient",
              "message"
            ],
            "class": "Messenger",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "send_message",
            "line": 35,
            "async": true,
            "decorators": [],
            "docstring": "Send a message from one AI to another.",
            "args": [
              "sender",
              "recipient",
              "message",
              "thread_id"
            ],
            "class": "Messenger",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_messages",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Check for messages from a specific sender.",
            "args": [
              "self",
              "sender"
            ],
            "class": "Messenger",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_messages",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Simple fallback to get messages with a tag.",
            "args": [
              "tag",
              "limit",
              "thread_id"
            ],
            "class": "Messenger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "reply_message",
            "line": 130,
            "async": false,
            "decorators": [],
            "docstring": "Reply to a message from another AI.",
            "args": [
              "self",
              "recipient",
              "message"
            ],
            "class": "Messenger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "broadcast_message",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Broadcast a message to all available AIs.",
            "args": [
              "self",
              "message",
              "available_models"
            ],
            "class": "Messenger",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "detect_communication_operations",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Detect and execute communication operations in model output.\n\nArgs:\n    model_output: The output text from the model\n    messenger: Optional messenger to use (creates one if not provided)\n    \nReturns:\n    tuple: (cleaned_output, operation_results)",
            "args": [
              "model_output",
              "messenger"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "format_communication_operations_report",
            "line": 286,
            "async": false,
            "decorators": [],
            "docstring": "Format communication operations into a readable report.\n\nArgs:\n    operations: List of communication operations and their results\n    \nReturns:\n    String with formatted report",
            "args": [
              "operations"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Messenger",
            "line": 16,
            "methods": [
              "__init__",
              "send_message",
              "check_messages",
              "reply_message",
              "broadcast_message"
            ],
            "decorators": [],
            "docstring": "Handles communication between AI models.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "re",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "memory.handler.MemoryHandler",
            "from": "memory.handler",
            "name": "MemoryHandler",
            "alias": null,
            "line": 14
          },
          {
            "module": "memory.handler.MEMORY_AVAILABLE",
            "from": "memory.handler",
            "name": "MEMORY_AVAILABLE",
            "alias": null,
            "line": 14
          },
          {
            "module": "memory.handler.run",
            "from": "memory.handler",
            "name": "run",
            "alias": null,
            "line": 14
          },
          {
            "module": "ai_communication.send_message",
            "from": "ai_communication",
            "name": "send_message",
            "alias": null,
            "line": 32
          },
          {
            "module": "ai_communication.run",
            "from": "ai_communication",
            "name": "run",
            "alias": "ai_run",
            "line": 32
          },
          {
            "module": "ai_communication.get_messages",
            "from": "ai_communication",
            "name": "get_messages",
            "alias": null,
            "line": 78
          },
          {
            "module": "ai_communication.run",
            "from": "ai_communication",
            "name": "run",
            "alias": "ai_run",
            "line": 78
          },
          {
            "module": "api.models.MODEL_CAPABILITIES",
            "from": "api.models",
            "name": "MODEL_CAPABILITIES",
            "alias": null,
            "line": 157
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Messenger",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Messenger.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 24,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "Messenger.send_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 35,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Messenger.check_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 70,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "Messenger.get_messages",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Messenger.reply_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Messenger.broadcast_message",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 149,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "detect_communication_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 178,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "format_communication_operations_report",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/ollama/bridge/communication/messenger.py",
            "line": 286,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 317,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the memory service\n\nArgs:\n    client_id: Unique identifier for the client\n    memory_dir: Directory to store memory data\n    vector_dimension: Dimension of the embeddings\n    use_gpu: Whether to use GPU for FAISS if available\n    data_dir: Optional data directory",
            "args": [
              "self",
              "client_id",
              "memory_dir",
              "vector_dimension",
              "use_gpu",
              "data_dir"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_ensure_compartment",
            "line": 63,
            "async": false,
            "decorators": [],
            "docstring": "Ensure the compartment exists",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "store",
            "line": 76,
            "async": false,
            "decorators": [],
            "docstring": "Store a memory with optional metadata\n\nArgs:\n    memory_text: The text to remember\n    compartment_id: The compartment to store in\n    metadata: Optional metadata to associate with the memory\n    \nReturns:\n    ID of the stored memory",
            "args": [
              "self",
              "memory_text",
              "compartment_id",
              "metadata"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "search",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories by exact text match\n\nArgs:\n    query: The text to search for\n    compartment_id: The compartment to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "query",
              "compartment_id",
              "limit"
            ],
            "class": "MemoryService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "semantic_search",
            "line": 145,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories by semantic similarity\n\nArgs:\n    query: The text to search for\n    compartment_id: The compartment to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memories with similarity scores",
            "args": [
              "self",
              "query",
              "compartment_id",
              "limit"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_by_metadata",
            "line": 172,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories by metadata\n\nArgs:\n    metadata_key: The metadata key to match\n    metadata_value: The metadata value to match\n    compartment_id: The compartment to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "metadata_key",
              "metadata_value",
              "compartment_id",
              "limit"
            ],
            "class": "MemoryService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_compartments",
            "line": 212,
            "async": false,
            "decorators": [],
            "docstring": "Get all compartment IDs",
            "args": [
              "self"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_compartment",
            "line": 216,
            "async": false,
            "decorators": [],
            "docstring": "Delete a compartment",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_memory_by_id",
            "line": 220,
            "async": false,
            "decorators": [],
            "docstring": "Get a memory by its ID\n\nArgs:\n    memory_id: The ID of the memory\n    compartment_id: The compartment to look in\n    \nReturns:\n    The memory if found, None otherwise",
            "args": [
              "self",
              "memory_id",
              "compartment_id"
            ],
            "class": "MemoryService",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MemoryService",
            "line": 25,
            "methods": [
              "__init__",
              "_ensure_compartment",
              "store",
              "search",
              "semantic_search",
              "search_by_metadata",
              "get_compartments",
              "delete_compartment",
              "get_memory_by_id"
            ],
            "decorators": [],
            "docstring": "A memory service for Engram that uses FAISS vector store for \nsemantic search with NumPy 2.x compatibility.\n\nThis mimics the API of Engram's original MemoryService but\nuses a different implementation that's compatible with NumPy 2.x.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "re",
            "alias": null,
            "line": 11
          },
          {
            "module": "json",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "time",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          },
          {
            "module": "vector_store.VectorStore",
            "from": "vector_store",
            "name": "VectorStore",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MemoryService",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MemoryService._ensure_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 63,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryService.store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 76,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryService.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryService.semantic_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 145,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryService.search_by_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 172,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryService.get_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 212,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MemoryService.delete_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 216,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MemoryService.get_memory_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/engram_memory_adapter.py",
            "line": 220,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 295,
      "has_tests": true
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/debug_faiss.py",
      "analysis": {
        "functions": [
          {
            "name": "check_imports",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": "Check all required imports one by one with detailed error reporting",
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "sys",
            "alias": null,
            "line": 6
          },
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 23
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 33
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "check_imports",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/debug_faiss.py",
            "line": 15,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 83,
      "has_tests": true
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the vector store\n\nArgs:\n    data_path: Directory to store vector indices and metadata\n    dimension: Dimension of the vectors to store\n    use_gpu: Whether to use GPU for FAISS if available",
            "args": [
              "self",
              "data_path",
              "dimension",
              "use_gpu"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_index",
            "line": 64,
            "async": false,
            "decorators": [],
            "docstring": "Create a new FAISS index for the given compartment",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_ensure_compartment",
            "line": 82,
            "async": false,
            "decorators": [],
            "docstring": "Ensure the compartment exists, creating it if necessary",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_index_path",
            "line": 89,
            "async": false,
            "decorators": [],
            "docstring": "Get the path for storing a compartment's index",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_metadata_path",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Get the path for storing a compartment's metadata",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save",
            "line": 97,
            "async": false,
            "decorators": [],
            "docstring": "Save the compartment to disk",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load",
            "line": 120,
            "async": false,
            "decorators": [],
            "docstring": "Load a compartment from disk",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_compartments",
            "line": 156,
            "async": false,
            "decorators": [],
            "docstring": "Get all compartment names",
            "args": [
              "self"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 160,
            "async": false,
            "decorators": [],
            "docstring": "Add texts and their metadata to the vector store\n\nArgs:\n    compartment: The compartment to add to\n    texts: The texts to add\n    metadatas: Optional metadata associated with each text\n    \nReturns:\n    List of IDs assigned to the added texts",
            "args": [
              "self",
              "compartment",
              "texts",
              "metadatas"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 212,
            "async": false,
            "decorators": [],
            "docstring": "Search for similar texts in the vector store\n\nArgs:\n    compartment: The compartment to search in\n    query: The search query\n    top_k: Number of results to return\n    \nReturns:\n    List of matching documents with metadata and scores",
            "args": [
              "self",
              "compartment",
              "query",
              "top_k"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 261,
            "async": false,
            "decorators": [],
            "docstring": "Delete a compartment and its files",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "VectorStore",
            "line": 19,
            "methods": [
              "__init__",
              "_create_index",
              "_ensure_compartment",
              "_get_index_path",
              "_get_metadata_path",
              "save",
              "load",
              "get_compartments",
              "add",
              "search",
              "delete"
            ],
            "decorators": [],
            "docstring": "A simple vector store using FAISS for high-performance similarity search.\nWorks with NumPy 2.x and doesn't require SentenceTransformers or other\nlibraries with potential NumPy version conflicts.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 6
          },
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 10
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "simple_embedding.SimpleEmbedding",
            "from": "simple_embedding",
            "name": "SimpleEmbedding",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VectorStore",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorStore.save",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 97,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "VectorStore.load",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 120,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "VectorStore.get_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 156,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 160,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 212,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/vector_store.py",
            "line": 261,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 327,
      "has_tests": true
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/simple_embedding.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the simple embedding generator\n\nArgs:\n    vector_size: Dimension of the generated embeddings\n    seed: Random seed for reproducibility",
            "args": [
              "self",
              "vector_size",
              "seed"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_tokenize",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Simple tokenization by splitting on non-alphanumeric characters\nand converting to lowercase",
            "args": [
              "self",
              "text"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_token_vector",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Generate a stable vector for a token",
            "args": [
              "self",
              "token"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "encode",
            "line": 52,
            "async": false,
            "decorators": [],
            "docstring": "Encode text(s) into fixed-size vectors using a simple TF-IDF\nlike approach with random vectors for words.\n\nArgs:\n    texts: Text or list of texts to encode\n    normalize: Whether to normalize the vectors to unit length\n    \nReturns:\n    Numpy array of embeddings with shape (n_texts, vector_size)",
            "args": [
              "self",
              "texts",
              "normalize"
            ],
            "class": "SimpleEmbedding",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "similarity",
            "line": 103,
            "async": false,
            "decorators": [],
            "docstring": "Calculate cosine similarity between two embeddings",
            "args": [
              "self",
              "a",
              "b"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SimpleEmbedding",
            "line": 11,
            "methods": [
              "__init__",
              "_tokenize",
              "_get_or_create_token_vector",
              "encode",
              "similarity"
            ],
            "decorators": [],
            "docstring": "A simple embedding generator using TF-IDF like approach.\nThis is NOT meant to be a production-grade embedding system,\nbut rather a demonstration of embedding generation without\ndependencies on libraries that may have NumPy version conflicts.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "re",
            "alias": null,
            "line": 7
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SimpleEmbedding",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/simple_embedding.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.encode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/simple_embedding.py",
            "line": 52,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.similarity",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/test/simple_embedding.py",
            "line": 103,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 131,
      "has_tests": true
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LanceDB adapter.\n\nArgs:\n    client_id: Unique identifier for the client\n    memory_dir: Directory to store memory data\n    vector_dimension: Dimension of the embeddings\n    use_gpu: Whether to use GPU acceleration when available",
            "args": [
              "self",
              "client_id",
              "memory_dir",
              "vector_dimension",
              "use_gpu"
            ],
            "class": "LanceDBAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_ensure_compartment",
            "line": 98,
            "async": false,
            "decorators": [],
            "docstring": "Ensure the compartment exists",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 108,
            "async": false,
            "decorators": [],
            "docstring": "Store a memory with optional metadata.\n\nArgs:\n    memory_text: The text to remember\n    compartment_id: The compartment to store in\n    metadata: Optional metadata to associate with the memory\n    \nReturns:\n    ID of the stored memory",
            "args": [
              "self",
              "memory_text",
              "compartment_id",
              "metadata"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "search",
            "line": 146,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories by text match.\n\nArgs:\n    query: The text to search for\n    compartment_id: The compartment to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memories",
            "args": [
              "self",
              "query",
              "compartment_id",
              "limit"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "semantic_search",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Search for memories by semantic similarity.\n\nArgs:\n    query: The text to search for\n    compartment_id: The compartment to search in\n    limit: Maximum number of results to return\n    \nReturns:\n    List of matching memories with similarity scores",
            "args": [
              "self",
              "query",
              "compartment_id",
              "limit"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_compartments",
            "line": 210,
            "async": false,
            "decorators": [],
            "docstring": "Get all compartment IDs.",
            "args": [
              "self"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_compartment",
            "line": 218,
            "async": false,
            "decorators": [],
            "docstring": "Delete a compartment.",
            "args": [
              "self",
              "compartment_id"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_memory_by_id",
            "line": 226,
            "async": false,
            "decorators": [],
            "docstring": "Get a memory by its ID.\n\nArgs:\n    memory_id: The ID of the memory\n    compartment_id: The compartment to look in\n    \nReturns:\n    The memory if found, None otherwise",
            "args": [
              "self",
              "memory_id",
              "compartment_id"
            ],
            "class": "LanceDBAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "install_lancedb_adapter",
            "line": 260,
            "async": false,
            "decorators": [],
            "docstring": "Install the LanceDB adapter into Engram's memory system.\n\nThis function monkey patches the Engram memory module to use LanceDB\nfor vector operations.\n\nReturns:\n    True if installation was successful, False otherwise",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LanceDBAdapter",
            "line": 36,
            "methods": [
              "__init__",
              "_ensure_compartment",
              "store",
              "search",
              "semantic_search",
              "get_compartments",
              "delete_compartment",
              "get_memory_by_id"
            ],
            "decorators": [],
            "docstring": "LanceDB Adapter for Engram Memory System.\n\nThis adapter provides vector database operations using LanceDB,\nwhich offers excellent performance on both Apple Silicon and CUDA-enabled hardware.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "json",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "vector.lancedb.vector_store.VectorStore",
            "from": "vector.lancedb.vector_store",
            "name": "VectorStore",
            "alias": null,
            "line": 30
          },
          {
            "module": "engram.core.memory",
            "from": "engram.core",
            "name": "memory",
            "alias": null,
            "line": 272
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 276
          },
          {
            "module": "pyarrow",
            "alias": null,
            "line": 277
          },
          {
            "module": "os",
            "alias": null,
            "line": 300
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 316
          },
          {
            "module": "pyarrow",
            "alias": null,
            "line": 317
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LanceDBAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LanceDBAdapter.store",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 108,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "LanceDBAdapter.search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 146,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LanceDBAdapter.semantic_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 178,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LanceDBAdapter.get_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 210,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LanceDBAdapter.delete_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 218,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "LanceDBAdapter.get_memory_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 226,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "install_lancedb_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/adapter.py",
            "line": 260,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 331,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
      "analysis": {
        "functions": [
          {
            "name": "check_python_version",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Check if the Python version is compatible with LanceDB.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "detect_platform",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Detect the platform and its capabilities.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_dependencies",
            "line": 64,
            "async": false,
            "decorators": [],
            "docstring": "Check if required dependencies are available.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "install_lancedb",
            "line": 108,
            "async": false,
            "decorators": [],
            "docstring": "Install LanceDB and its dependencies.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "setup_memory_directory",
            "line": 134,
            "async": false,
            "decorators": [],
            "docstring": "Set up the memory directory for LanceDB.",
            "args": [
              "memory_dir"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 167,
            "async": false,
            "decorators": [],
            "docstring": "Main installation function.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "platform",
            "alias": null,
            "line": 12
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "numpy",
            "alias": null,
            "line": 84
          },
          {
            "module": "pyarrow",
            "alias": null,
            "line": 92
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 100
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 121
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 142
          },
          {
            "module": "pyarrow",
            "alias": "pa",
            "line": 146
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "check_python_version",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "detect_platform",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "check_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "install_lancedb",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "setup_memory_directory",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
            "line": 134,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/install.py",
            "line": 167,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 208,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/embedding/simple.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the simple embedding generator\n\nArgs:\n    vector_size: Dimension of the generated embeddings\n    seed: Random seed for reproducibility",
            "args": [
              "self",
              "vector_size",
              "seed"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_tokenize",
            "line": 38,
            "async": false,
            "decorators": [],
            "docstring": "Simple tokenization by splitting on non-alphanumeric characters\nand converting to lowercase",
            "args": [
              "self",
              "text"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_or_create_token_vector",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Generate a stable vector for a token",
            "args": [
              "self",
              "token"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "encode",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": "Encode text(s) into fixed-size vectors using a simple TF-IDF\nlike approach with random vectors for words.\n\nArgs:\n    texts: Text or list of texts to encode\n    normalize: Whether to normalize the vectors to unit length\n    \nReturns:\n    Numpy array of embeddings with shape (n_texts, vector_size)",
            "args": [
              "self",
              "texts",
              "normalize"
            ],
            "class": "SimpleEmbedding",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "similarity",
            "line": 109,
            "async": false,
            "decorators": [],
            "docstring": "Calculate cosine similarity between two embeddings",
            "args": [
              "self",
              "a",
              "b"
            ],
            "class": "SimpleEmbedding",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SimpleEmbedding",
            "line": 17,
            "methods": [
              "__init__",
              "_tokenize",
              "_get_or_create_token_vector",
              "encode",
              "similarity"
            ],
            "decorators": [],
            "docstring": "A simple embedding generator using TF-IDF like approach.\nThis is NOT meant to be a production-grade embedding system,\nbut rather a demonstration of embedding generation without\ndependencies on libraries that may have NumPy version conflicts.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 9
          },
          {
            "module": "re",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SimpleEmbedding",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/embedding/simple.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.encode",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/embedding/simple.py",
            "line": 58,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SimpleEmbedding.similarity",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/embedding/simple.py",
            "line": 109,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 111,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/logging.py",
      "analysis": {
        "functions": [
          {
            "name": "configure_path",
            "line": 11,
            "async": false,
            "decorators": [],
            "docstring": "Add Engram directory to system path if needed.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_logger",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": "Get a configured logger.\n\nArgs:\n    name: Logger name\n    \nReturns:\n    Logger instance",
            "args": [
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_versions",
            "line": 45,
            "async": false,
            "decorators": [],
            "docstring": "Log versions of dependencies.\n\nArgs:\n    logger: Logger instance to use, or None to create one",
            "args": [
              "logger"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 14
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 56
          },
          {
            "module": "pyarrow",
            "alias": "pa",
            "line": 62
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 68
          },
          {
            "module": "torch",
            "alias": null,
            "line": 75
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "configure_path",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/logging.py",
            "line": 11,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "get_logger",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/logging.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_versions",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/logging.py",
            "line": 45,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 83,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the metadata cache manager.\n\nArgs:\n    data_path: Base path for storing metadata cache files",
            "args": [
              "self",
              "data_path"
            ],
            "class": "MetadataCache",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata_path",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Get the path for a compartment's metadata cache file.\n\nArgs:\n    compartment: Compartment name\n    \nReturns:\n    Path to the metadata cache file",
            "args": [
              "self",
              "compartment"
            ],
            "class": "MetadataCache",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Load metadata cache for a compartment.\n\nArgs:\n    compartment: Compartment name\n    \nReturns:\n    List of metadata entries",
            "args": [
              "self",
              "compartment"
            ],
            "class": "MetadataCache",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "save",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Save metadata cache for a compartment.\n\nArgs:\n    compartment: Compartment name\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment"
            ],
            "class": "MetadataCache",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "add_entries",
            "line": 96,
            "async": false,
            "decorators": [],
            "docstring": "Add entries to the metadata cache.\n\nArgs:\n    compartment: Compartment name\n    texts: List of text entries\n    ids: List of IDs for the entries\n    timestamp: Timestamp for the entries\n    metadatas: Optional list of metadata dicts for the entries",
            "args": [
              "self",
              "compartment",
              "texts",
              "ids",
              "timestamp",
              "metadatas"
            ],
            "class": "MetadataCache",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_compartment",
            "line": 130,
            "async": false,
            "decorators": [],
            "docstring": "Delete metadata cache for a compartment.\n\nArgs:\n    compartment: Compartment name\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment"
            ],
            "class": "MetadataCache",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MetadataCache",
            "line": 16,
            "methods": [
              "__init__",
              "get_metadata_path",
              "load",
              "save",
              "add_entries",
              "delete_compartment"
            ],
            "decorators": [],
            "docstring": "Manager for metadata caches associated with vector store compartments.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MetadataCache",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetadataCache.get_metadata_path",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
            "line": 31,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetadataCache.load",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
            "line": 43,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MetadataCache.save",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
            "line": 72,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MetadataCache.add_entries",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
            "line": 96,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "MetadataCache.delete_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/utils/metadata.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 155,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/operations/crud.py",
      "analysis": {
        "functions": [
          {
            "name": "create_compartment",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": "Create a new compartment (table in LanceDB).\n\nArgs:\n    db: LanceDB connection\n    metadata_cache: Metadata cache manager\n    compartment: Name of the compartment to create\n    dimension: Dimension of the vectors to store\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "db",
              "metadata_cache",
              "compartment",
              "dimension"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "add_to_compartment",
            "line": 90,
            "async": false,
            "decorators": [],
            "docstring": "Add texts and their embeddings to a compartment.\n\nArgs:\n    db: LanceDB connection\n    metadata_cache: Metadata cache manager\n    compartment: Name of the compartment to add to\n    texts: List of texts to add\n    embeddings: List of embedding vectors for the texts\n    metadatas: Optional list of metadata dicts for the texts\n    \nReturns:\n    List of IDs assigned to the added texts",
            "args": [
              "db",
              "metadata_cache",
              "compartment",
              "texts",
              "embeddings",
              "metadatas"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "save_compartment",
            "line": 204,
            "async": false,
            "decorators": [],
            "docstring": "Save a compartment explicitly (forcing cache save and optionally compacting).\n\nArgs:\n    db: LanceDB connection\n    metadata_cache: Metadata cache manager\n    compartment: Name of the compartment to save\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "db",
              "metadata_cache",
              "compartment"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "delete_compartment",
            "line": 235,
            "async": false,
            "decorators": [],
            "docstring": "Delete a compartment and its metadata.\n\nArgs:\n    db: LanceDB connection\n    metadata_cache: Metadata cache manager\n    compartment: Name of the compartment to delete\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "db",
              "metadata_cache",
              "compartment"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "pyarrow",
            "alias": "pa",
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/operations/crud.py",
            "line": 17,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "add_to_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/operations/crud.py",
            "line": 90,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "save_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/operations/crud.py",
            "line": 204,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "delete_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/operations/crud.py",
            "line": 235,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 261,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/search/vector.py",
      "analysis": {
        "functions": [
          {
            "name": "vector_search",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Search for similar texts using vector similarity.\n\nArgs:\n    db_table: LanceDB table to search in\n    query_embedding: The query embedding vector\n    metadata_cache: Fallback metadata cache to use if DB search fails\n    top_k: Number of results to return\n    \nReturns:\n    List of matching documents with metadata and scores",
            "args": [
              "db_table",
              "query_embedding",
              "metadata_cache",
              "top_k"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_by_id",
            "line": 87,
            "async": false,
            "decorators": [],
            "docstring": "Get a memory by its ID.\n\nArgs:\n    db_table: LanceDB table to search in\n    memory_id: The ID of the memory to retrieve\n    metadata_cache: Metadata cache for fallback retrieval\n    \nReturns:\n    The memory if found, None otherwise",
            "args": [
              "db_table",
              "memory_id",
              "metadata_cache"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 8
          },
          {
            "module": "pandas",
            "alias": "pd",
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "vector_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/search/vector.py",
            "line": 16,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/search/vector.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 125,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/search/text.py",
      "analysis": {
        "functions": [
          {
            "name": "text_search",
            "line": 14,
            "async": false,
            "decorators": [],
            "docstring": "Search for text matches in the metadata cache.\n\nArgs:\n    metadata_cache: List of metadata entries to search\n    query: The search query\n    top_k: Number of results to return\n    \nReturns:\n    List of matching documents with metadata and scores",
            "args": [
              "metadata_cache",
              "query",
              "top_k"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "text_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/search/text.py",
            "line": 14,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 48,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the vector store\n\nArgs:\n    data_path: Directory to store vector database\n    dimension: Dimension of the vectors to store\n    use_gpu: Whether to use GPU acceleration if available",
            "args": [
              "self",
              "data_path",
              "dimension",
              "use_gpu"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_db",
            "line": 62,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LanceDB connection and check GPU availability.",
            "args": [
              "self"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_gpu_availability",
            "line": 93,
            "async": false,
            "decorators": [],
            "docstring": "Check if GPU acceleration is available.",
            "args": [
              "self"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_compartment",
            "line": 108,
            "async": false,
            "decorators": [],
            "docstring": "Create a new compartment (table in LanceDB)\n\nArgs:\n    compartment: Name of the compartment to create\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_compartments",
            "line": 124,
            "async": false,
            "decorators": [],
            "docstring": "Get all compartment names\n\nReturns:\n    List of compartment names",
            "args": [
              "self"
            ],
            "class": "VectorStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add",
            "line": 141,
            "async": false,
            "decorators": [],
            "docstring": "Add texts and their metadata to the vector store\n\nArgs:\n    compartment: The compartment to add to\n    texts: The texts to add\n    metadatas: Optional metadata associated with each text\n    \nReturns:\n    List of IDs assigned to the added texts",
            "args": [
              "self",
              "compartment",
              "texts",
              "metadatas"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "save",
            "line": 175,
            "async": false,
            "decorators": [],
            "docstring": "Save the compartment explicitly (forces an immediate flush)\n\nArgs:\n    compartment: The compartment to save\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "text_search",
            "line": 200,
            "async": false,
            "decorators": [],
            "docstring": "Search for text matches in the vector store\n\nArgs:\n    query: The search query\n    compartment: The compartment to search in\n    top_k: Number of results to return\n    \nReturns:\n    List of matching documents with metadata and scores",
            "args": [
              "self",
              "query",
              "compartment",
              "top_k"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "vector_search",
            "line": 231,
            "async": false,
            "decorators": [],
            "docstring": "Search for similar texts using vector similarity\n\nArgs:\n    query: The search query\n    compartment: The compartment to search in\n    top_k: Number of results to return\n    \nReturns:\n    List of matching documents with metadata and scores",
            "args": [
              "self",
              "query",
              "compartment",
              "top_k"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_by_id",
            "line": 268,
            "async": false,
            "decorators": [],
            "docstring": "Get a memory by its ID\n\nArgs:\n    memory_id: The ID of the memory\n    compartment: The compartment to look in\n    \nReturns:\n    The memory if found, None otherwise",
            "args": [
              "self",
              "memory_id",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 301,
            "async": false,
            "decorators": [],
            "docstring": "Delete a compartment and its files\n\nArgs:\n    compartment: The compartment to delete\n    \nReturns:\n    True if successful, False otherwise",
            "args": [
              "self",
              "compartment"
            ],
            "class": "VectorStore",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "VectorStore",
            "line": 29,
            "methods": [
              "__init__",
              "_initialize_db",
              "_check_gpu_availability",
              "create_compartment",
              "get_compartments",
              "add",
              "save",
              "text_search",
              "vector_search",
              "get_by_id",
              "delete"
            ],
            "decorators": [],
            "docstring": "A vector store implementation using LanceDB for high-performance similarity search.\nWorks well on Apple Silicon and CUDA-enabled hardware.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "lancedb",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "utils.logging.get_logger",
            "from": "utils.logging",
            "name": "get_logger",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.logging.log_versions",
            "from": "utils.logging",
            "name": "log_versions",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.logging.configure_path",
            "from": "utils.logging",
            "name": "configure_path",
            "alias": null,
            "line": 12
          },
          {
            "module": "utils.metadata.MetadataCache",
            "from": "utils.metadata",
            "name": "MetadataCache",
            "alias": null,
            "line": 13
          },
          {
            "module": "embedding.simple.SimpleEmbedding",
            "from": "embedding.simple",
            "name": "SimpleEmbedding",
            "alias": null,
            "line": 14
          },
          {
            "module": "operations.crud.create_compartment",
            "from": "operations.crud",
            "name": "create_compartment",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.crud.add_to_compartment",
            "from": "operations.crud",
            "name": "add_to_compartment",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.crud.save_compartment",
            "from": "operations.crud",
            "name": "save_compartment",
            "alias": null,
            "line": 15
          },
          {
            "module": "operations.crud.delete_compartment",
            "from": "operations.crud",
            "name": "delete_compartment",
            "alias": null,
            "line": 15
          },
          {
            "module": "search.text.text_search",
            "from": "search.text",
            "name": "text_search",
            "alias": null,
            "line": 19
          },
          {
            "module": "search.vector.vector_search",
            "from": "search.vector",
            "name": "vector_search",
            "alias": null,
            "line": 20
          },
          {
            "module": "search.vector.get_by_id",
            "from": "search.vector",
            "name": "get_by_id",
            "alias": null,
            "line": 20
          },
          {
            "module": "torch",
            "alias": null,
            "line": 96
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VectorStore",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorStore.create_compartment",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.get_compartments",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 124,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.add",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 141,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.save",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 175,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.text_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 200,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.vector_search",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 231,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.get_by_id",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 268,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorStore.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Engram/vector/lancedb/vector_store/base/store.py",
            "line": 301,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 324,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 132,
    "total_functions": 910,
    "total_classes": 74,
    "total_landmarks": 817,
    "patterns": [
      "singleton",
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 73,
    "mcp_tools": 18,
    "websocket_handlers": 2,
    "skipped_files": 21
  }
}