{
  "component": "Harmonia",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 44,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Harmonia client.\n\nArgs:\n    component_id: ID of the Harmonia component to connect to (default: \"harmonia.workflow\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations",
            "args": [
              "self",
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": "HarmoniaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_workflow",
            "line": 67,
            "async": true,
            "decorators": [],
            "docstring": "Create a new workflow definition.\n\nArgs:\n    name: Name of the workflow\n    tasks: List of tasks in the workflow\n    description: Optional description of the workflow\n    input_schema: Optional schema for workflow inputs\n    output_schema: Optional schema for workflow outputs\n    \nReturns:\n    Dictionary with workflow information (including workflow_id)\n    \nRaises:\n    CapabilityInvocationError: If the workflow creation fails\n    ComponentUnavailableError: If the Harmonia component is unavailable",
            "args": [
              "self",
              "name",
              "tasks",
              "description",
              "input_schema",
              "output_schema"
            ],
            "class": "HarmoniaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execute_workflow",
            "line": 116,
            "async": true,
            "decorators": [],
            "docstring": "Execute a workflow.\n\nArgs:\n    workflow_id: ID of the workflow to execute\n    input_data: Optional input data for the workflow\n    \nReturns:\n    Dictionary with execution information (including execution_id)\n    \nRaises:\n    CapabilityInvocationError: If the workflow execution fails\n    ComponentUnavailableError: If the Harmonia component is unavailable",
            "args": [
              "self",
              "workflow_id",
              "input_data"
            ],
            "class": "HarmoniaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_workflow_status",
            "line": 150,
            "async": true,
            "decorators": [],
            "docstring": "Get the status of a workflow execution.\n\nArgs:\n    execution_id: ID of the workflow execution to get status for\n    \nReturns:\n    Dictionary with execution status information\n    \nRaises:\n    CapabilityInvocationError: If the status retrieval fails\n    ComponentUnavailableError: If the Harmonia component is unavailable",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "HarmoniaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cancel_workflow",
            "line": 176,
            "async": true,
            "decorators": [],
            "docstring": "Cancel a workflow execution.\n\nArgs:\n    execution_id: ID of the workflow execution to cancel\n    \nReturns:\n    True if the cancellation was successful\n    \nRaises:\n    CapabilityInvocationError: If the cancellation fails\n    ComponentUnavailableError: If the Harmonia component is unavailable",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "HarmoniaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Harmonia state client.\n\nArgs:\n    component_id: ID of the Harmonia state component to connect to (default: \"harmonia.state\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations",
            "args": [
              "self",
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": "HarmoniaStateClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_state",
            "line": 229,
            "async": true,
            "decorators": [],
            "docstring": "Save workflow state.\n\nArgs:\n    execution_id: ID of the workflow execution\n    state: State data to save\n    \nReturns:\n    True if the state was saved successfully\n    \nRaises:\n    CapabilityInvocationError: If the state saving fails\n    ComponentUnavailableError: If the Harmonia state component is unavailable",
            "args": [
              "self",
              "execution_id",
              "state"
            ],
            "class": "HarmoniaStateClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_state",
            "line": 263,
            "async": true,
            "decorators": [],
            "docstring": "Load workflow state.\n\nArgs:\n    execution_id: ID of the workflow execution\n    \nReturns:\n    Dictionary with state data\n    \nRaises:\n    CapabilityInvocationError: If the state loading fails\n    ComponentUnavailableError: If the Harmonia state component is unavailable",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "HarmoniaStateClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_checkpoint",
            "line": 289,
            "async": true,
            "decorators": [],
            "docstring": "Create a checkpoint of workflow state.\n\nArgs:\n    execution_id: ID of the workflow execution\n    \nReturns:\n    Dictionary with checkpoint information\n    \nRaises:\n    CapabilityInvocationError: If the checkpoint creation fails\n    ComponentUnavailableError: If the Harmonia state component is unavailable",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "HarmoniaStateClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_harmonia_client",
            "line": 316,
            "async": true,
            "decorators": [],
            "docstring": "Create a client for the Harmonia workflow component.\n\nArgs:\n    component_id: ID of the Harmonia component to connect to (default: \"harmonia.workflow\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations\n    \nReturns:\n    HarmoniaClient instance\n    \nRaises:\n    ComponentNotFoundError: If the Harmonia component is not found\n    ComponentUnavailableError: If the Hermes API is unavailable",
            "args": [
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_harmonia_state_client",
            "line": 357,
            "async": true,
            "decorators": [],
            "docstring": "Create a client for the Harmonia state management component.\n\nArgs:\n    component_id: ID of the Harmonia state component to connect to (default: \"harmonia.state\")\n    hermes_url: URL of the Hermes API\n    security_context: Security context for authentication/authorization\n    retry_policy: Policy for retrying capability invocations\n    \nReturns:\n    HarmoniaStateClient instance\n    \nRaises:\n    ComponentNotFoundError: If the Harmonia state component is not found\n    ComponentUnavailableError: If the Hermes API is unavailable",
            "args": [
              "component_id",
              "hermes_url",
              "security_context",
              "retry_policy"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HarmoniaClient",
            "line": 41,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for the Harmonia workflow component.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HarmoniaStateClient",
            "line": 203,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for the Harmonia state management component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.utils.component_client.ComponentClient",
            "from": "tekton.utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.ComponentError",
            "from": "tekton.utils.component_client",
            "name": "ComponentError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.ComponentNotFoundError",
            "from": "tekton.utils.component_client",
            "name": "ComponentNotFoundError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.CapabilityNotFoundError",
            "from": "tekton.utils.component_client",
            "name": "CapabilityNotFoundError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.CapabilityInvocationError",
            "from": "tekton.utils.component_client",
            "name": "CapabilityInvocationError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.ComponentUnavailableError",
            "from": "tekton.utils.component_client",
            "name": "ComponentUnavailableError",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.SecurityContext",
            "from": "tekton.utils.component_client",
            "name": "SecurityContext",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.utils.component_client.RetryPolicy",
            "from": "tekton.utils.component_client",
            "name": "RetryPolicy",
            "alias": null,
            "line": 14
          },
          {
            "module": "utils.component_client.ComponentClient",
            "from": "utils.component_client",
            "name": "ComponentClient",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.ComponentError",
            "from": "utils.component_client",
            "name": "ComponentError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.ComponentNotFoundError",
            "from": "utils.component_client",
            "name": "ComponentNotFoundError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.CapabilityNotFoundError",
            "from": "utils.component_client",
            "name": "CapabilityNotFoundError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.CapabilityInvocationError",
            "from": "utils.component_client",
            "name": "CapabilityInvocationError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.ComponentUnavailableError",
            "from": "utils.component_client",
            "name": "ComponentUnavailableError",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.SecurityContext",
            "from": "utils.component_client",
            "name": "SecurityContext",
            "alias": null,
            "line": 26
          },
          {
            "module": "utils.component_client.RetryPolicy",
            "from": "utils.component_client",
            "name": "RetryPolicy",
            "alias": null,
            "line": 26
          },
          {
            "module": "tekton.utils.component_client.discover_component",
            "from": "tekton.utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 340
          },
          {
            "module": "utils.component_client.discover_component",
            "from": "utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 343
          },
          {
            "module": "tekton.utils.component_client.discover_component",
            "from": "tekton.utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 381
          },
          {
            "module": "utils.component_client.discover_component",
            "from": "utils.component_client",
            "name": "discover_component",
            "alias": null,
            "line": 384
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HarmoniaClient",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HarmoniaClient.create_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaClient.execute_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaClient.get_workflow_status",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 150,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaClient.cancel_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 176,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "HarmoniaStateClient",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 203,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HarmoniaStateClient.save_state",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 229,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaStateClient.load_state",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 263,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaStateClient.create_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 289,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_harmonia_client",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 316,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_harmonia_state_client",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/client.py",
            "line": 357,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 395,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "HarmoniaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Harmonia-specific services in critical dependency order.",
            "args": [
              "self"
            ],
            "class": "HarmoniaComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Harmonia-specific resources with proper workflow shutdown.",
            "args": [
              "self"
            ],
            "class": "HarmoniaComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 174,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "HarmoniaComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 194,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "HarmoniaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 218,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the connection manager.",
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup",
            "line": 225,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup all connections.",
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 232,
            "async": false,
            "decorators": [],
            "docstring": "Disconnect a client.",
            "args": [
              "self",
              "client_id"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 240,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the event manager.",
            "args": [
              "self"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup",
            "line": 246,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup all event queues.",
            "args": [
              "self"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HarmoniaComponent",
            "line": 16,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Harmonia workflow orchestration component with state management and event streaming.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ConnectionManager",
            "line": 216,
            "methods": [
              "__init__",
              "disconnect"
            ],
            "decorators": [],
            "docstring": "Manages active WebSocket connections for Harmonia.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EventManager",
            "line": 238,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Manages event streams for Server-Sent Events.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 4
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 4
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 5
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 7
          },
          {
            "module": "harmonia.core.state.StateManager",
            "from": "harmonia.core.state",
            "name": "StateManager",
            "alias": null,
            "line": 8
          },
          {
            "module": "harmonia.core.component.ComponentRegistry",
            "from": "harmonia.core.component",
            "name": "ComponentRegistry",
            "alias": null,
            "line": 9
          },
          {
            "module": "harmonia.core.engine.WorkflowEngine",
            "from": "harmonia.core.engine",
            "name": "WorkflowEngine",
            "alias": null,
            "line": 10
          },
          {
            "module": "harmonia.core.startup_instructions.StartUpInstructions",
            "from": "harmonia.core.startup_instructions",
            "name": "StartUpInstructions",
            "alias": null,
            "line": 11
          },
          {
            "module": "harmonia.core.workflow_startup.WorkflowEngineStartup",
            "from": "harmonia.core.workflow_startup",
            "name": "WorkflowEngineStartup",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 220
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 221
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 242
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 243
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HarmoniaComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HarmoniaComponent._component_specific_init",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 31,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HarmoniaComponent._component_specific_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 121,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HarmoniaComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 174,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HarmoniaComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 194,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ConnectionManager",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 216,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ConnectionManager.cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 232,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "EventManager",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 238,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EventManager.cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/harmonia_component.py",
            "line": 246,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 250,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/expressions.py",
      "analysis": {
        "functions": [
          {
            "name": "evaluate_expression",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Evaluate an expression within a given context.\n\nArgs:\n    expression: Expression to evaluate\n    context: Context containing variables\n    safe_mode: Whether to restrict evaluation to simple expressions\n    \nReturns:\n    Result of the expression evaluation",
            "args": [
              "expression",
              "context",
              "safe_mode"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_nested_value",
            "line": 102,
            "async": false,
            "decorators": [],
            "docstring": "Get a value from a nested dictionary using a dot-separated path.\n\nArgs:\n    data: Dictionary to extract value from\n    path: Dot-separated path to the value\n    default: Default value if path not found\n    \nReturns:\n    Value at the path or default",
            "args": [
              "data",
              "path",
              "default"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "substitute_parameters",
            "line": 144,
            "async": false,
            "decorators": [],
            "docstring": "Recursively substitute parameters in a data structure.\n\nArgs:\n    data: Data structure to process\n    params: Parameter values\n    env: Environment variables\n    tasks: Task results\n    context: Additional context\n    \nReturns:\n    Processed data structure with substitutions",
            "args": [
              "data",
              "params",
              "env",
              "tasks",
              "context"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_substitute_recursive",
            "line": 177,
            "async": false,
            "decorators": [],
            "docstring": "Recursively process data structure for parameter substitution.",
            "args": [
              "data",
              "context"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "evaluate_condition",
            "line": 192,
            "async": false,
            "decorators": [],
            "docstring": "Evaluate a condition expression or object.\n\nArgs:\n    condition: Condition to evaluate (string expression or condition object)\n    context: Context for evaluation\n    \nReturns:\n    Boolean result of condition evaluation",
            "args": [
              "condition",
              "context"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "re",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "copy.deepcopy",
            "from": "copy",
            "name": "deepcopy",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "evaluate_expression",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/expressions.py",
            "line": 26,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "get_nested_value",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/expressions.py",
            "line": 102,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "substitute_parameters",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/expressions.py",
            "line": 144,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "evaluate_condition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/expressions.py",
            "line": 192,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 284,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the startup helper.\n\nArgs:\n    instructions: Optional StartUpInstructions for configuring the startup",
            "args": [
              "self",
              "instructions"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 45,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the workflow engine.\n\nReturns:\n    Initialized WorkflowEngine instance",
            "args": [
              "self"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_state_manager",
            "line": 83,
            "async": true,
            "decorators": [],
            "docstring": "Create the appropriate state manager based on configuration.\n\nArgs:\n    db_url: Database URL to use\n    \nReturns:\n    Configured StateManager instance",
            "args": [
              "self",
              "db_url"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_register_with_hermes",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": "Register workflow engine services with Hermes.",
            "args": [
              "self"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_component_adapters",
            "line": 125,
            "async": true,
            "decorators": [],
            "docstring": "Load component adapters for external services.",
            "args": [
              "self"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_mock_adapter",
            "line": 140,
            "async": false,
            "decorators": [],
            "docstring": "Create a mock component adapter for testing.",
            "args": [
              "self",
              "component_name"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_previous_state",
            "line": 144,
            "async": true,
            "decorators": [],
            "docstring": "Load previous workflow state if available.",
            "args": [
              "self"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 157,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the workflow engine.",
            "args": [
              "self"
            ],
            "class": "WorkflowEngineStartup",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the mock adapter.\n\nArgs:\n    component_name: Name of the component",
            "args": [
              "self",
              "component_name"
            ],
            "class": "MockComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_action",
            "line": 188,
            "async": true,
            "decorators": [],
            "docstring": "Execute an action on the component.\n\nArgs:\n    action: Action to execute\n    params: Parameters for the action\n    \nReturns:\n    Mock action result",
            "args": [
              "self",
              "action",
              "params"
            ],
            "class": "MockComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "setup_logging",
            "line": 210,
            "async": false,
            "decorators": [],
            "docstring": "Set up logging configuration.\n\nArgs:\n    level_name: Logging level name",
            "args": [
              "level_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 224,
            "async": true,
            "decorators": [],
            "docstring": "Example usage of workflow engine startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "WorkflowEngineStartup",
            "line": 24,
            "methods": [
              "__init__",
              "_create_mock_adapter"
            ],
            "decorators": [],
            "docstring": "Helper class for initializing the workflow engine from StartUpInstructions.\n\nThis class handles the process of setting up the workflow engine based on\nthe provided startup instructions, including database connections,\ncomponent registration, and initial state.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MockComponentAdapter",
            "line": 170,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Mock component adapter for testing.\n\nIn a real implementation, this would be replaced with actual adapters\nthat communicate with other components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "json",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.core.engine.WorkflowEngine",
            "from": "harmonia.core.engine",
            "name": "WorkflowEngine",
            "alias": null,
            "line": 15
          },
          {
            "module": "harmonia.core.state.StateManager",
            "from": "harmonia.core.state",
            "name": "StateManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "harmonia.core.workflow.Workflow",
            "from": "harmonia.core.workflow",
            "name": "Workflow",
            "alias": null,
            "line": 17
          },
          {
            "module": "harmonia.core.workflow.Task",
            "from": "harmonia.core.workflow",
            "name": "Task",
            "alias": null,
            "line": 17
          },
          {
            "module": "harmonia.core.startup_instructions.StartUpInstructions",
            "from": "harmonia.core.startup_instructions",
            "name": "StartUpInstructions",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "WorkflowEngineStartup",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WorkflowEngineStartup.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 45,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WorkflowEngineStartup.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 157,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "MockComponentAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 170,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MockComponentAdapter.execute_action",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 188,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "setup_logging",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 210,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow_startup.py",
            "line": 224,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 273,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the workflow engine.\n\nArgs:\n    state_manager: State manager for persisting workflow state\n    component_registry: Registry of component adapters\n    max_concurrent_tasks: Maximum number of concurrent tasks to execute\n    default_retry_policy: Default retry policy for tasks\n    event_handlers: Event handlers for workflow events",
            "args": [
              "self",
              "state_manager",
              "component_registry",
              "max_concurrent_tasks",
              "default_retry_policy",
              "event_handlers"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_workflow",
            "line": 94,
            "async": true,
            "decorators": [],
            "docstring": "Execute a workflow with the given input.\n\nArgs:\n    workflow_def: Workflow definition to execute\n    input_data: Input data for the workflow\n    execution_id: Optional execution ID (generated if not provided)\n    metadata: Optional metadata for the execution\n    context: Optional context for the execution\n    \nReturns:\n    Workflow execution object",
            "args": [
              "self",
              "workflow_def",
              "input_data",
              "execution_id",
              "metadata",
              "context"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_execute_workflow",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Execute a workflow.\n\nArgs:\n    workflow_def: Workflow definition to execute\n    execution: Workflow execution object\n    context: Context for the execution",
            "args": [
              "self",
              "workflow_def",
              "execution",
              "context"
            ],
            "class": "WorkflowEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_execute_task",
            "line": 382,
            "async": true,
            "decorators": [],
            "docstring": "Execute a single task within a workflow.\n\nArgs:\n    workflow_def: Workflow definition\n    execution: Workflow execution\n    task_id: ID of the task to execute\n    execution_context: Execution context\n    on_task_done: Callback for when task is done",
            "args": [
              "self",
              "workflow_def",
              "execution",
              "task_id",
              "execution_context",
              "on_task_done"
            ],
            "class": "WorkflowEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_on_task_done",
            "line": 545,
            "async": false,
            "decorators": [],
            "docstring": "Handle task completion.\n\nArgs:\n    task_id: ID of the completed task\n    status: Final status of the task\n    workflow_def: Workflow definition\n    execution: Workflow execution\n    execution_context: Execution context\n    pending_tasks: Set of pending tasks\n    ready_tasks: Set of ready tasks\n    active_tasks: Set of active tasks\n    completed_tasks: Set of completed tasks\n    failed_tasks: Set of failed tasks\n    reverse_graph: Reverse dependency graph\n    all_tasks_done: Event to signal when all tasks are done",
            "args": [
              "self",
              "task_id",
              "status",
              "workflow_def",
              "execution",
              "execution_context",
              "pending_tasks",
              "ready_tasks",
              "active_tasks",
              "completed_tasks",
              "failed_tasks",
              "reverse_graph",
              "all_tasks_done"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_update_dependents",
            "line": 595,
            "async": false,
            "decorators": [],
            "docstring": "Update the status of tasks that depend on the completed task.\n\nArgs:\n    task_id: ID of the completed task\n    status: Status of the completed task\n    reverse_graph: Reverse dependency graph\n    ready_tasks: Set of ready tasks\n    pending_tasks: Set of pending tasks\n    active_tasks: Set of active tasks\n    completed_tasks: Set of completed tasks\n    failed_tasks: Set of failed tasks",
            "args": [
              "self",
              "task_id",
              "status",
              "reverse_graph",
              "ready_tasks",
              "pending_tasks",
              "active_tasks",
              "completed_tasks",
              "failed_tasks"
            ],
            "class": "WorkflowEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_skip_task",
            "line": 631,
            "async": true,
            "decorators": [],
            "docstring": "Skip a task that can't be executed.\n\nArgs:\n    workflow_def: Workflow definition\n    execution: Workflow execution\n    task_id: ID of the task to skip\n    reason: Reason for skipping the task",
            "args": [
              "self",
              "workflow_def",
              "execution",
              "task_id",
              "reason"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_resolve_task_input",
            "line": 664,
            "async": false,
            "decorators": [],
            "docstring": "Resolve input expressions to actual values.\n\nArgs:\n    task_def: Task definition\n    execution_context: Execution context\n    \nReturns:\n    Resolved input values",
            "args": [
              "self",
              "task_def",
              "execution_context"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_root_tasks",
            "line": 690,
            "async": false,
            "decorators": [],
            "docstring": "Get tasks with no dependencies (roots of the workflow).\n\nArgs:\n    workflow_def: Workflow definition\n    \nReturns:\n    List of root tasks",
            "args": [
              "self",
              "workflow_def"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_build_dependency_graph",
            "line": 705,
            "async": false,
            "decorators": [],
            "docstring": "Build a dependency graph for the workflow.\n\nArgs:\n    workflow_def: Workflow definition\n    \nReturns:\n    Dictionary mapping task IDs to sets of dependent task IDs",
            "args": [
              "self",
              "workflow_def"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_build_reverse_dependency_graph",
            "line": 722,
            "async": false,
            "decorators": [],
            "docstring": "Build a reverse dependency graph (who depends on me).\n\nArgs:\n    dependency_graph: Forward dependency graph\n    \nReturns:\n    Dictionary mapping task IDs to sets of tasks that depend on them",
            "args": [
              "self",
              "dependency_graph"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_periodic_checkpoint",
            "line": 740,
            "async": true,
            "decorators": [],
            "docstring": "Periodically create checkpoints of the workflow execution.\n\nArgs:\n    execution_id: Execution ID\n    workflow_def: Workflow definition\n    execution: Workflow execution\n    interval: Checkpoint interval in seconds",
            "args": [
              "self",
              "execution_id",
              "workflow_def",
              "execution",
              "interval"
            ],
            "class": "WorkflowEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_checkpoint",
            "line": 772,
            "async": true,
            "decorators": [],
            "docstring": "Create a checkpoint of the current workflow state.\n\nArgs:\n    execution_id: Execution ID\n    \nReturns:\n    Created checkpoint if successful",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "restore_from_checkpoint",
            "line": 829,
            "async": true,
            "decorators": [],
            "docstring": "Restore a workflow execution from a checkpoint.\n\nArgs:\n    checkpoint_id: ID of the checkpoint to restore from\n    new_execution_id: Optional ID for the new execution\n    \nReturns:\n    ID of the new execution if successful",
            "args": [
              "self",
              "checkpoint_id",
              "new_execution_id"
            ],
            "class": "WorkflowEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "pause_workflow",
            "line": 915,
            "async": true,
            "decorators": [],
            "docstring": "Pause a running workflow.\n\nArgs:\n    execution_id: ID of the workflow execution to pause\n    \nReturns:\n    True if successfully paused",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "resume_workflow",
            "line": 946,
            "async": true,
            "decorators": [],
            "docstring": "Resume a paused workflow.\n\nArgs:\n    execution_id: ID of the workflow execution to resume\n    \nReturns:\n    True if successfully resumed",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cancel_workflow",
            "line": 974,
            "async": true,
            "decorators": [],
            "docstring": "Cancel a running workflow.\n\nArgs:\n    execution_id: ID of the workflow execution to cancel\n    \nReturns:\n    True if successfully canceled",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "WorkflowEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_workflow_status",
            "line": 1015,
            "async": true,
            "decorators": [],
            "docstring": "Get the status of a workflow execution.\n\nArgs:\n    execution_id: ID of the workflow execution\n    \nReturns:\n    Execution summary if found",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "WorkflowEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_execution_metrics",
            "line": 1076,
            "async": false,
            "decorators": [],
            "docstring": "Generate metrics for a workflow execution.\n\nArgs:\n    execution: Workflow execution\n    \nReturns:\n    Execution metrics",
            "args": [
              "self",
              "execution"
            ],
            "class": "WorkflowEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_fire_event",
            "line": 1144,
            "async": true,
            "decorators": [],
            "docstring": "Fire a workflow execution event.\n\nArgs:\n    event_type: Type of event\n    execution_id: Execution ID\n    task_id: Optional task ID\n    details: Optional event details\n    message: Optional human-readable message",
            "args": [
              "self",
              "event_type",
              "execution_id",
              "task_id",
              "details",
              "message"
            ],
            "class": "WorkflowEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_event_handler",
            "line": 1187,
            "async": false,
            "decorators": [],
            "docstring": "Register a handler for workflow events.\n\nArgs:\n    event_type: Type of event to handle\n    handler: Event handler function",
            "args": [
              "self",
              "event_type",
              "handler"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_event_handler",
            "line": 1201,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a handler for workflow events.\n\nArgs:\n    event_type: Type of event\n    handler: Event handler function",
            "args": [
              "self",
              "event_type",
              "handler"
            ],
            "class": "WorkflowEngine",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "WorkflowEngine",
            "line": 43,
            "methods": [
              "__init__",
              "_on_task_done",
              "_update_dependents",
              "_resolve_task_input",
              "_get_root_tasks",
              "_build_dependency_graph",
              "_build_reverse_dependency_graph",
              "_generate_execution_metrics",
              "register_event_handler",
              "unregister_event_handler"
            ],
            "decorators": [],
            "docstring": "Core workflow execution engine.\n\nThis class is responsible for executing workflows, managing their state,\nresolving dependencies, and coordinating task execution across components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "copy",
            "alias": null,
            "line": 11
          },
          {
            "module": "json",
            "alias": null,
            "line": 12
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 15
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 16
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 16
          },
          {
            "module": "harmonia.models.workflow.WorkflowDefinition",
            "from": "harmonia.models.workflow",
            "name": "WorkflowDefinition",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.workflow.TaskDefinition",
            "from": "harmonia.models.workflow",
            "name": "TaskDefinition",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.workflow.WorkflowExecution",
            "from": "harmonia.models.workflow",
            "name": "WorkflowExecution",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.workflow.TaskExecution",
            "from": "harmonia.models.workflow",
            "name": "TaskExecution",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.workflow.TaskStatus",
            "from": "harmonia.models.workflow",
            "name": "TaskStatus",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.workflow.WorkflowStatus",
            "from": "harmonia.models.workflow",
            "name": "WorkflowStatus",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.workflow.RetryPolicy",
            "from": "harmonia.models.workflow",
            "name": "RetryPolicy",
            "alias": null,
            "line": 18
          },
          {
            "module": "harmonia.models.execution.EventType",
            "from": "harmonia.models.execution",
            "name": "EventType",
            "alias": null,
            "line": 27
          },
          {
            "module": "harmonia.models.execution.ExecutionEvent",
            "from": "harmonia.models.execution",
            "name": "ExecutionEvent",
            "alias": null,
            "line": 27
          },
          {
            "module": "harmonia.models.execution.Checkpoint",
            "from": "harmonia.models.execution",
            "name": "Checkpoint",
            "alias": null,
            "line": 27
          },
          {
            "module": "harmonia.models.execution.ExecutionMetrics",
            "from": "harmonia.models.execution",
            "name": "ExecutionMetrics",
            "alias": null,
            "line": 27
          },
          {
            "module": "harmonia.models.execution.ExecutionHistory",
            "from": "harmonia.models.execution",
            "name": "ExecutionHistory",
            "alias": null,
            "line": 27
          },
          {
            "module": "harmonia.models.execution.ExecutionSummary",
            "from": "harmonia.models.execution",
            "name": "ExecutionSummary",
            "alias": null,
            "line": 27
          },
          {
            "module": "harmonia.core.state.StateManager",
            "from": "harmonia.core.state",
            "name": "StateManager",
            "alias": null,
            "line": 35
          },
          {
            "module": "harmonia.core.expressions.evaluate_expression",
            "from": "harmonia.core.expressions",
            "name": "evaluate_expression",
            "alias": null,
            "line": 36
          },
          {
            "module": "harmonia.core.expressions.substitute_parameters",
            "from": "harmonia.core.expressions",
            "name": "substitute_parameters",
            "alias": null,
            "line": 36
          },
          {
            "module": "harmonia.core.expressions.evaluate_condition",
            "from": "harmonia.core.expressions",
            "name": "evaluate_condition",
            "alias": null,
            "line": 36
          },
          {
            "module": "harmonia.core.component.ComponentRegistry",
            "from": "harmonia.core.component",
            "name": "ComponentRegistry",
            "alias": null,
            "line": 37
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "WorkflowEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 43,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.execute_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WorkflowEngine._execute_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 165,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "WorkflowEngine._execute_task",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 382,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.create_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 772,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.restore_from_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 829,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.pause_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 915,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.resume_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 946,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.cancel_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 974,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.get_workflow_status",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 1015,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.register_event_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 1187,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WorkflowEngine.unregister_event_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/engine.py",
            "line": 1201,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1216,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
      "analysis": {
        "functions": [
          {
            "name": "_get_hermes_url",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Get Hermes URL from environment configuration.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Convert the instructions to a dictionary.\n\nReturns:\n    Dictionary representation of the instructions",
            "args": [
              "self"
            ],
            "class": "StartUpInstructions",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_json",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Convert the instructions to a JSON string.\n\nReturns:\n    JSON string representation of the instructions",
            "args": [
              "self"
            ],
            "class": "StartUpInstructions",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 89,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create StartUpInstructions from a dictionary.\n\nArgs:\n    data: Dictionary representation of the instructions\n    \nReturns:\n    StartUpInstructions instance",
            "args": [
              "cls",
              "data"
            ],
            "class": "StartUpInstructions",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_json",
            "line": 106,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create StartUpInstructions from a JSON string.\n\nArgs:\n    json_str: JSON string representation of the instructions\n    \nReturns:\n    StartUpInstructions instance",
            "args": [
              "cls",
              "json_str"
            ],
            "class": "StartUpInstructions",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_file",
            "line": 120,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create StartUpInstructions from a JSON file.\n\nArgs:\n    file_path: Path to the JSON file\n    \nReturns:\n    StartUpInstructions instance",
            "args": [
              "cls",
              "file_path"
            ],
            "class": "StartUpInstructions",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "to_file",
            "line": 133,
            "async": false,
            "decorators": [],
            "docstring": "Write the instructions to a JSON file.\n\nArgs:\n    file_path: Path to the JSON file",
            "args": [
              "self",
              "file_path"
            ],
            "class": "StartUpInstructions",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_database_url",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": "Get the database URL, based on the configuration.\n\nReturns:\n    Database URL as a string",
            "args": [
              "self"
            ],
            "class": "StartUpInstructions",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "fields",
            "line": 163,
            "async": false,
            "decorators": [],
            "docstring": "Helper function to get fields of a dataclass even when imported from other modules.",
            "args": [
              "cls"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StartUpInstructions",
            "line": 29,
            "methods": [
              "to_dict",
              "to_json",
              "from_dict",
              "from_json",
              "from_file",
              "to_file",
              "get_database_url"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Container for instructions passed to Harmonia during startup.\n\nThis class provides a standardized format for passing initialization\nparameters, component references, and startup options.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.asdict",
            "from": "dataclasses",
            "name": "asdict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 14
          },
          {
            "module": "dataclasses",
            "alias": null,
            "line": 165
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StartUpInstructions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.to_json",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 89,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.from_json",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 106,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.from_file",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 120,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.to_file",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 133,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "StartUpInstructions.get_database_url",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 143,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "fields",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/startup_instructions.py",
            "line": 163,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 166,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the template manager.\n\nArgs:\n    storage_manager: Manager for storing templates",
            "args": [
              "self",
              "storage_manager"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Load templates from storage.",
            "args": [
              "self"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "save_template",
            "line": 82,
            "async": false,
            "decorators": [],
            "docstring": "Save a template to storage.\n\nArgs:\n    template: Template to save\n    \nReturns:\n    True if saved successfully",
            "args": [
              "self",
              "template"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 103,
            "async": false,
            "decorators": [],
            "docstring": "Get a template by ID.\n\nArgs:\n    template_id: ID of the template to get\n    \nReturns:\n    Template if found, None otherwise",
            "args": [
              "self",
              "template_id"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_templates",
            "line": 115,
            "async": false,
            "decorators": [],
            "docstring": "Get templates, optionally filtered by category or tags.\n\nArgs:\n    category_id: Category ID to filter by\n    tags: Tags to filter by\n    \nReturns:\n    List of matching templates",
            "args": [
              "self",
              "category_id",
              "tags"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Create a new template.\n\nArgs:\n    name: Name of the template\n    workflow_definition: Base workflow definition\n    description: Description of the template\n    parameters: Parameters for the template\n    category_ids: Categories for the template\n    tags: Tags for the template\n    is_public: Whether the template is public\n    created_by: User who created the template\n    metadata: Additional metadata\n    \nReturns:\n    Created template",
            "args": [
              "self",
              "name",
              "workflow_definition",
              "description",
              "parameters",
              "category_ids",
              "tags",
              "is_public",
              "created_by",
              "metadata"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template_version",
            "line": 194,
            "async": false,
            "decorators": [],
            "docstring": "Create a new version of a template.\n\nArgs:\n    template_id: ID of the template\n    workflow_definition: Updated workflow definition\n    version: Version string (e.g., \"1.1.0\")\n    changes: Description of changes\n    \nReturns:\n    Updated template if successful, None otherwise",
            "args": [
              "self",
              "template_id",
              "workflow_definition",
              "version",
              "changes"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "instantiate_template",
            "line": 246,
            "async": false,
            "decorators": [],
            "docstring": "Instantiate a template with parameter values.\n\nArgs:\n    template_id: ID of the template\n    parameter_values: Values for template parameters\n    created_by: User who created the instantiation\n    \nReturns:\n    Template instantiation if successful, None otherwise",
            "args": [
              "self",
              "template_id",
              "parameter_values",
              "created_by"
            ],
            "class": "TemplateManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_template",
            "line": 315,
            "async": false,
            "decorators": [],
            "docstring": "Delete a template.\n\nArgs:\n    template_id: ID of the template to delete\n    \nReturns:\n    True if deleted successfully",
            "args": [
              "self",
              "template_id"
            ],
            "class": "TemplateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_category",
            "line": 343,
            "async": false,
            "decorators": [],
            "docstring": "Create a new template category.\n\nArgs:\n    name: Name of the category\n    description: Description of the category\n    parent_id: ID of the parent category\n    \nReturns:\n    Created category",
            "args": [
              "self",
              "name",
              "description",
              "parent_id"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_category",
            "line": 377,
            "async": false,
            "decorators": [],
            "docstring": "Get a category by ID.\n\nArgs:\n    category_id: ID of the category to get\n    \nReturns:\n    Category if found, None otherwise",
            "args": [
              "self",
              "category_id"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_categories",
            "line": 389,
            "async": false,
            "decorators": [],
            "docstring": "Get categories, optionally filtered by parent.\n\nArgs:\n    parent_id: Parent ID to filter by\n    \nReturns:\n    List of matching categories",
            "args": [
              "self",
              "parent_id"
            ],
            "class": "TemplateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_category",
            "line": 407,
            "async": false,
            "decorators": [],
            "docstring": "Delete a category.\n\nArgs:\n    category_id: ID of the category to delete\n    \nReturns:\n    True if deleted successfully",
            "args": [
              "self",
              "category_id"
            ],
            "class": "TemplateManager",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TemplateManager",
            "line": 27,
            "methods": [
              "__init__",
              "_load_templates",
              "save_template",
              "get_template",
              "get_templates",
              "create_template",
              "create_template_version",
              "instantiate_template",
              "delete_template",
              "create_category",
              "get_category",
              "get_categories",
              "delete_category"
            ],
            "decorators": [],
            "docstring": "Manager for workflow templates.\n\nThis class provides methods for creating, updating, versioning,\nand instantiating workflow templates.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 11
          },
          {
            "module": "harmonia.models.template.Template",
            "from": "harmonia.models.template",
            "name": "Template",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.models.template.TemplateVersion",
            "from": "harmonia.models.template",
            "name": "TemplateVersion",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.models.template.TemplateCategory",
            "from": "harmonia.models.template",
            "name": "TemplateCategory",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.models.template.TemplateInstantiation",
            "from": "harmonia.models.template",
            "name": "TemplateInstantiation",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.models.template.ParameterDefinition",
            "from": "harmonia.models.template",
            "name": "ParameterDefinition",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.models.workflow.WorkflowDefinition",
            "from": "harmonia.models.workflow",
            "name": "WorkflowDefinition",
            "alias": null,
            "line": 20
          },
          {
            "module": "harmonia.core.expressions.evaluate_expression",
            "from": "harmonia.core.expressions",
            "name": "evaluate_expression",
            "alias": null,
            "line": 21
          },
          {
            "module": "harmonia.core.expressions.substitute_parameters",
            "from": "harmonia.core.expressions",
            "name": "substitute_parameters",
            "alias": null,
            "line": 21
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TemplateManager",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TemplateManager.save_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 82,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 103,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 115,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 138,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.create_template_version",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 194,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.instantiate_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 246,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TemplateManager.delete_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 315,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.create_category",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 343,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_category",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 377,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.get_categories",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 389,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManager.delete_category",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/template.py",
            "line": 407,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 445,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
      "analysis": {
        "functions": [
          {
            "name": "to_dict",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Convert task to dictionary representation.\n\nReturns:\n    Dictionary representation of the task",
            "args": [
              "self"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 86,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a task from dictionary representation.\n\nArgs:\n    data: Dictionary representation of the task\n    \nReturns:\n    Task instance",
            "args": [
              "cls",
              "data"
            ],
            "class": "Task",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_task",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Add a task to the workflow.\n\nArgs:\n    task: Task to add",
            "args": [
              "self",
              "task"
            ],
            "class": "Workflow",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Get a task by name.\n\nArgs:\n    task_name: Name of the task to get\n    \nReturns:\n    Task instance or None if not found",
            "args": [
              "self",
              "task_name"
            ],
            "class": "Workflow",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_task",
            "line": 160,
            "async": false,
            "decorators": [],
            "docstring": "Remove a task by name.\n\nArgs:\n    task_name: Name of the task to remove\n    \nReturns:\n    True if the task was removed",
            "args": [
              "self",
              "task_name"
            ],
            "class": "Workflow",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_dependency_graph",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Generate a dependency graph for the workflow.\n\nReturns:\n    Dictionary mapping task names to sets of dependent task names",
            "args": [
              "self"
            ],
            "class": "Workflow",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_root_tasks",
            "line": 196,
            "async": false,
            "decorators": [],
            "docstring": "Get tasks with no dependencies (roots of the workflow).\n\nReturns:\n    List of root tasks",
            "args": [
              "self"
            ],
            "class": "Workflow",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 205,
            "async": false,
            "decorators": [],
            "docstring": "Convert workflow to dictionary representation.\n\nReturns:\n    Dictionary representation of the workflow",
            "args": [
              "self"
            ],
            "class": "Workflow",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 224,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create a workflow from dictionary representation.\n\nArgs:\n    data: Dictionary representation of the workflow\n    \nReturns:\n    Workflow instance",
            "args": [
              "cls",
              "data"
            ],
            "class": "Workflow",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskStatus",
            "line": 17,
            "methods": [],
            "decorators": [],
            "docstring": "Status of a task execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowStatus",
            "line": 26,
            "methods": [],
            "decorators": [],
            "docstring": "Status of a workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Task",
            "line": 37,
            "methods": [
              "to_dict",
              "from_dict"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Represents a single task within a workflow.\n\nAttributes:\n    name: Task name (unique within a workflow)\n    component: Component responsible for executing the task\n    action: Action to be performed by the component\n    input: Input data for the task (can include expressions)\n    output: Output data schema expected from the task\n    depends_on: List of tasks that must complete before this task\n    timeout: Timeout in seconds (optional)\n    retry: Number of retries on failure (optional)\n    id: Unique identifier for the task\n    metadata: Additional task metadata",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Workflow",
            "line": 111,
            "methods": [
              "add_task",
              "get_task",
              "remove_task",
              "get_dependency_graph",
              "get_root_tasks",
              "to_dict",
              "from_dict"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Represents a complete workflow definition.\n\nAttributes:\n    name: Workflow name\n    description: Workflow description\n    tasks: Dictionary of tasks by name\n    input: Input schema for the workflow\n    output: Output schema for the workflow\n    id: Unique identifier for the workflow\n    version: Workflow version\n    metadata: Additional workflow metadata",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "uuid",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 10
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 10
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WorkflowStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Task",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Task.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Task.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 86,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 111,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Workflow.add_task",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 135,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Workflow.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Workflow.remove_task",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 160,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Workflow.get_dependency_graph",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 178,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Workflow.get_root_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Workflow.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 205,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Workflow.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/workflow.py",
            "line": 224,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 250,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
      "analysis": {
        "functions": [
          {
            "name": "component_name",
            "line": 32,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the component name.",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_action",
            "line": 36,
            "async": true,
            "decorators": [],
            "docstring": "Execute an action on the component.\n\nArgs:\n    action: Action to execute\n    params: Parameters for the action\n    \nReturns:\n    Action result",
            "args": [
              "self",
              "action",
              "params"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_actions",
            "line": 49,
            "async": true,
            "decorators": [],
            "docstring": "Get available actions for this component.\n\nReturns:\n    List of available action names",
            "args": [
              "self"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_action_schema",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": "Get the schema for an action.\n\nArgs:\n    action: Action name\n    \nReturns:\n    Action schema if available",
            "args": [
              "self",
              "action"
            ],
            "class": "ComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__post_init__",
            "line": 90,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the HTTP client if not provided.",
            "args": [
              "self"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 101,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the adapter by fetching capabilities.\n\nThis method should be called before using the adapter.",
            "args": [
              "self"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_fetch_capabilities",
            "line": 124,
            "async": true,
            "decorators": [],
            "docstring": "Fetch component capabilities from the component.\n\nReturns:\n    Component capabilities",
            "args": [
              "self"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_fetch_action_schema",
            "line": 138,
            "async": true,
            "decorators": [],
            "docstring": "Fetch schema for an action.\n\nArgs:\n    action: Action name\n    \nReturns:\n    Action schema if available",
            "args": [
              "self",
              "action"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_action",
            "line": 155,
            "async": true,
            "decorators": [],
            "docstring": "Execute an action on the component.\n\nArgs:\n    action: Action to execute\n    params: Parameters for the action\n    \nReturns:\n    Action result\n\nRaises:\n    ActionNotFoundError: If the action is not available\n    ValueError: If the parameters are invalid\n    Exception: For other execution errors",
            "args": [
              "self",
              "action",
              "params"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_actions",
            "line": 220,
            "async": true,
            "decorators": [],
            "docstring": "Get available actions for this component.\n\nReturns:\n    List of available action names",
            "args": [
              "self"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_action_schema",
            "line": 232,
            "async": true,
            "decorators": [],
            "docstring": "Get the schema for an action.\n\nArgs:\n    action: Action name\n    \nReturns:\n    Action schema if available",
            "args": [
              "self",
              "action"
            ],
            "class": "StandardComponentAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 258,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the component registry.",
            "args": [
              "self"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component",
            "line": 264,
            "async": false,
            "decorators": [],
            "docstring": "Register a component adapter.\n\nArgs:\n    adapter: Component adapter to register",
            "args": [
              "self",
              "adapter"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_component",
            "line": 275,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a component adapter.\n\nArgs:\n    component_name: Name of the component to unregister\n    \nReturns:\n    True if the component was unregistered",
            "args": [
              "self",
              "component_name"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component",
            "line": 293,
            "async": false,
            "decorators": [],
            "docstring": "Get a component adapter by name.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Component adapter\n    \nRaises:\n    ComponentNotFoundError: If the component is not registered",
            "args": [
              "self",
              "component_name"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_components",
            "line": 311,
            "async": false,
            "decorators": [],
            "docstring": "Get a list of registered component names.\n\nReturns:\n    List of component names",
            "args": [
              "self"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "has_component",
            "line": 320,
            "async": false,
            "decorators": [],
            "docstring": "Check if a component is registered.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    True if the component is registered",
            "args": [
              "self",
              "component_name"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discover_components",
            "line": 332,
            "async": true,
            "decorators": [],
            "docstring": "Discover available components through Hermes.\n\nArgs:\n    hermes_url: URL of the Hermes service\n    \nReturns:\n    List of discovered component names",
            "args": [
              "self",
              "hermes_url"
            ],
            "class": "ComponentRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 380,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the component registry.\n\nArgs:\n    hermes_url: URL of the Hermes service for component discovery",
            "args": [
              "self",
              "hermes_url"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_action",
            "line": 395,
            "async": true,
            "decorators": [],
            "docstring": "Execute an action on a component.\n\nArgs:\n    component_name: Name of the component\n    action: Action to execute\n    params: Parameters for the action\n    \nReturns:\n    Action result\n    \nRaises:\n    ComponentNotFoundError: If the component is not registered\n    ActionNotFoundError: If the action is not available",
            "args": [
              "self",
              "component_name",
              "action",
              "params"
            ],
            "class": "ComponentRegistry",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ActionNotFoundError",
            "line": 20,
            "methods": [],
            "decorators": [],
            "docstring": "Raised when an action is not found for a component.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentAdapter",
            "line": 28,
            "methods": [
              "component_name"
            ],
            "decorators": [],
            "docstring": "Protocol defining the interface for component adapters.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StandardComponentAdapter",
            "line": 72,
            "methods": [
              "__post_init__"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Standard adapter for communicating with external components.\n\nThis adapter implements the ComponentAdapter protocol and provides\na standard way to communicate with external components via HTTP.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentRegistry",
            "line": 250,
            "methods": [
              "__init__",
              "register_component",
              "unregister_component",
              "get_component",
              "get_components",
              "has_component"
            ],
            "decorators": [],
            "docstring": "Registry for component adapters.\n\nThis class manages adapters for external components, providing\na central point for discovering and accessing component functionality.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Protocol",
            "from": "typing",
            "name": "Protocol",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 13
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.utils.tekton_http.HTTPClient",
            "from": "tekton.utils.tekton_http",
            "name": "HTTPClient",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.utils.tekton_context.ContextManager",
            "from": "tekton.utils.tekton_context",
            "name": "ContextManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.utils.tekton_errors.ComponentNotFoundError",
            "from": "tekton.utils.tekton_errors",
            "name": "ComponentNotFoundError",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.utils.tekton_errors.TektonNotFoundError",
            "from": "tekton.utils.tekton_errors",
            "name": "TektonNotFoundError",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ActionNotFoundError",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComponentAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.component_name",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.execute_action",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 36,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.get_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentAdapter.get_action_schema",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "StandardComponentAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 72,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StandardComponentAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 101,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StandardComponentAdapter.execute_action",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 155,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StandardComponentAdapter.get_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 220,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StandardComponentAdapter.get_action_schema",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 232,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "ComponentRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 250,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 264,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.unregister_component",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 275,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.get_component",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 293,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.get_components",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 311,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.has_component",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 320,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.discover_components",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 332,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 380,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentRegistry.execute_action",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/component.py",
            "line": 395,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 417,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the state manager.\n\nArgs:\n    storage_dir: Directory for storing state files\n    use_database: Whether to use a database for state storage\n    max_history: Maximum number of historical states to keep",
            "args": [
              "self",
              "storage_dir",
              "use_database",
              "max_history"
            ],
            "class": "StateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_workflow_state",
            "line": 51,
            "async": true,
            "decorators": [],
            "docstring": "Save workflow state.\n\nArgs:\n    execution_id: Workflow execution ID\n    state: Workflow state to save\n    \nReturns:\n    True if save was successful",
            "args": [
              "self",
              "execution_id",
              "state"
            ],
            "class": "StateManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "load_workflow_state",
            "line": 90,
            "async": true,
            "decorators": [],
            "docstring": "Load workflow state.\n\nArgs:\n    execution_id: Workflow execution ID\n    \nReturns:\n    Workflow state or None if not found",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "StateManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "delete_workflow_state",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Delete workflow state.\n\nArgs:\n    execution_id: Workflow execution ID\n    \nReturns:\n    True if deletion was successful",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "StateManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_workflow_states",
            "line": 171,
            "async": true,
            "decorators": [],
            "docstring": "List all workflow execution IDs.\n\nReturns:\n    List of workflow execution IDs",
            "args": [
              "self"
            ],
            "class": "StateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_checkpoint",
            "line": 192,
            "async": true,
            "decorators": [],
            "docstring": "Create a checkpoint of the current workflow state.\n\nArgs:\n    execution_id: Workflow execution ID\n    \nReturns:\n    Checkpoint ID",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "StateManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "restore_checkpoint",
            "line": 217,
            "async": true,
            "decorators": [],
            "docstring": "Restore a workflow from a checkpoint.\n\nArgs:\n    checkpoint_id: Checkpoint ID\n    \nReturns:\n    New execution ID for the restored workflow",
            "args": [
              "self",
              "checkpoint_id"
            ],
            "class": "StateManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StateManager",
            "line": 19,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Manages workflow state persistence and retrieval.\n\nThis class provides methods for saving and loading workflow state,\nenabling workflow persistence, recovery, and inspection.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "pickle",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.core.workflow.Workflow",
            "from": "harmonia.core.workflow",
            "name": "Workflow",
            "alias": null,
            "line": 118
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StateManager",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StateManager.save_workflow_state",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 51,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "StateManager.load_workflow_state",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 90,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "StateManager.delete_workflow_state",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StateManager.list_workflow_states",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 171,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StateManager.create_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 192,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StateManager.restore_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/state.py",
            "line": 217,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 244,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
      "analysis": {
        "functions": [
          {
            "name": "total_duration_seconds",
            "line": 68,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the total duration in seconds.",
            "args": [
              "self"
            ],
            "class": "ExecutionMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "critical_path",
            "line": 73,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the critical path (tasks that determined the total duration).",
            "args": [
              "self"
            ],
            "class": "ExecutionMetrics",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_event",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Add an event to the history.",
            "args": [
              "self",
              "event"
            ],
            "class": "ExecutionHistory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_checkpoint",
            "line": 111,
            "async": false,
            "decorators": [],
            "docstring": "Add a checkpoint to the history.",
            "args": [
              "self",
              "checkpoint"
            ],
            "class": "ExecutionHistory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_latest_checkpoint",
            "line": 115,
            "async": false,
            "decorators": [],
            "docstring": "Get the most recent checkpoint.",
            "args": [
              "self"
            ],
            "class": "ExecutionHistory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_events_by_type",
            "line": 121,
            "async": false,
            "decorators": [],
            "docstring": "Get all events of a specific type.",
            "args": [
              "self",
              "event_type"
            ],
            "class": "ExecutionHistory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_events_for_task",
            "line": 125,
            "async": false,
            "decorators": [],
            "docstring": "Get all events related to a specific task.",
            "args": [
              "self",
              "task_id"
            ],
            "class": "ExecutionHistory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "completion_percentage",
            "line": 147,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Calculate the percentage of completed tasks.",
            "args": [
              "self"
            ],
            "class": "ExecutionSummary",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_complete",
            "line": 154,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if the execution is complete.",
            "args": [
              "self"
            ],
            "class": "ExecutionSummary",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "EventType",
            "line": 19,
            "methods": [],
            "decorators": [],
            "docstring": "Types of events in workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionEvent",
            "line": 41,
            "methods": [],
            "decorators": [],
            "docstring": "Event that occurred during workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionMetrics",
            "line": 53,
            "methods": [
              "total_duration_seconds",
              "critical_path"
            ],
            "decorators": [],
            "docstring": "Metrics collected during workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Checkpoint",
            "line": 85,
            "methods": [],
            "decorators": [],
            "docstring": "Checkpoint of workflow execution state.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionHistory",
            "line": 99,
            "methods": [
              "add_event",
              "add_checkpoint",
              "get_latest_checkpoint",
              "get_events_by_type",
              "get_events_for_task"
            ],
            "decorators": [],
            "docstring": "History of a workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExecutionSummary",
            "line": 130,
            "methods": [
              "completion_percentage",
              "is_complete"
            ],
            "decorators": [],
            "docstring": "Summary of a workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 11
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.validator",
            "from": "pydantic",
            "name": "validator",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 14
          },
          {
            "module": "harmonia.models.workflow.WorkflowStatus",
            "from": "harmonia.models.workflow",
            "name": "WorkflowStatus",
            "alias": null,
            "line": 16
          },
          {
            "module": "harmonia.models.workflow.TaskStatus",
            "from": "harmonia.models.workflow",
            "name": "TaskStatus",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "EventType",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionEvent",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 41,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionMetrics",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 53,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionMetrics.total_duration_seconds",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionMetrics.critical_path",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 73,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "Checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 85,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ExecutionHistory",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 99,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionHistory.add_event",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionHistory.add_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 111,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionHistory.get_latest_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 115,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionHistory.get_events_by_type",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 121,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionHistory.get_events_for_task",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 125,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ExecutionSummary",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 130,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExecutionSummary.completion_percentage",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 147,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ExecutionSummary.is_complete",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/execution.py",
            "line": 154,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 156,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
      "analysis": {
        "functions": [
          {
            "name": "validate_endpoint",
            "line": 57,
            "async": false,
            "decorators": [
              "@validator"
            ],
            "docstring": "Validate webhook endpoint.",
            "args": [
              "cls",
              "v"
            ],
            "class": "WebhookDefinition",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "WebhookTriggerType",
            "line": 17,
            "methods": [],
            "decorators": [],
            "docstring": "Types of webhook triggers.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebhookAuthType",
            "line": 28,
            "methods": [],
            "decorators": [],
            "docstring": "Types of webhook authentication.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebhookDefinition",
            "line": 39,
            "methods": [
              "validate_endpoint"
            ],
            "decorators": [],
            "docstring": "Definition of a webhook.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebhookEvent",
            "line": 64,
            "methods": [],
            "decorators": [],
            "docstring": "Event representing a webhook invocation.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebhookSubscription",
            "line": 79,
            "methods": [],
            "decorators": [],
            "docstring": "Subscription for receiving webhooks from external systems.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebhookDelivery",
            "line": 97,
            "methods": [],
            "decorators": [],
            "docstring": "Record of a webhook delivery attempt.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 11
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.validator",
            "from": "pydantic",
            "name": "validator",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.HttpUrl",
            "from": "pydantic",
            "name": "HttpUrl",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "WebhookTriggerType",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebhookAuthType",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebhookDefinition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 39,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WebhookDefinition.validate_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 57,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WebhookEvent",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 64,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebhookSubscription",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebhookDelivery",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/webhook.py",
            "line": 97,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 110,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
      "analysis": {
        "functions": [
          {
            "name": "validate_type",
            "line": 34,
            "async": false,
            "decorators": [
              "@validator"
            ],
            "docstring": "Validate parameter type.",
            "args": [
              "cls",
              "v"
            ],
            "class": "ParameterDefinition",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_current_version",
            "line": 78,
            "async": false,
            "decorators": [],
            "docstring": "Get the current version of the template.",
            "args": [
              "self"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_workflow_definition",
            "line": 82,
            "async": false,
            "decorators": [],
            "docstring": "Get the workflow definition for the current version.",
            "args": [
              "self"
            ],
            "class": "Template",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ParameterDefinition",
            "line": 18,
            "methods": [
              "validate_type"
            ],
            "decorators": [],
            "docstring": "Definition of a template parameter.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateVersion",
            "line": 42,
            "methods": [],
            "decorators": [],
            "docstring": "Version information for a template.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateCategory",
            "line": 52,
            "methods": [],
            "decorators": [],
            "docstring": "Category for organizing templates.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Template",
            "line": 61,
            "methods": [
              "get_current_version",
              "get_workflow_definition"
            ],
            "decorators": [],
            "docstring": "Template for creating workflows.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateInstantiation",
            "line": 90,
            "methods": [],
            "decorators": [],
            "docstring": "Information about a template instantiation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.validator",
            "from": "pydantic",
            "name": "validator",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "harmonia.models.workflow.WorkflowDefinition",
            "from": "harmonia.models.workflow",
            "name": "WorkflowDefinition",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ParameterDefinition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ParameterDefinition.validate_type",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 34,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TemplateVersion",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 42,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateCategory",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 52,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 61,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Template.get_current_version",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 78,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Template.get_workflow_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 82,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TemplateInstantiation",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/template.py",
            "line": 90,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 99,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
      "analysis": {
        "functions": [
          {
            "name": "validate_max_retries",
            "line": 65,
            "async": false,
            "decorators": [
              "@field_validator"
            ],
            "docstring": "Validate max_retries is non-negative.",
            "args": [
              "cls",
              "v"
            ],
            "class": "RetryPolicy",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_positive",
            "line": 72,
            "async": false,
            "decorators": [
              "@field_validator"
            ],
            "docstring": "Validate numeric fields are positive.",
            "args": [
              "cls",
              "v",
              "info"
            ],
            "class": "RetryPolicy",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate_id",
            "line": 95,
            "async": false,
            "decorators": [
              "@field_validator"
            ],
            "docstring": "Validate task ID format.",
            "args": [
              "cls",
              "v"
            ],
            "class": "TaskDefinition",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TaskType",
            "line": 17,
            "methods": [],
            "decorators": [],
            "docstring": "Types of tasks that can be executed in a workflow.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskStatus",
            "line": 32,
            "methods": [],
            "decorators": [],
            "docstring": "Status of a task execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowStatus",
            "line": 44,
            "methods": [],
            "decorators": [],
            "docstring": "Status of a workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RetryPolicy",
            "line": 55,
            "methods": [
              "validate_max_retries",
              "validate_positive"
            ],
            "decorators": [],
            "docstring": "Configuration for automatic retries.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskDefinition",
            "line": 79,
            "methods": [
              "validate_id"
            ],
            "decorators": [],
            "docstring": "Definition of a task in a workflow.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowDefinition",
            "line": 104,
            "methods": [],
            "decorators": [],
            "docstring": "Definition of a workflow.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TaskExecution",
            "line": 120,
            "methods": [],
            "decorators": [],
            "docstring": "Execution state of a task.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowExecution",
            "line": 135,
            "methods": [],
            "decorators": [],
            "docstring": "Execution state of a workflow.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowTemplate",
            "line": 152,
            "methods": [],
            "decorators": [],
            "docstring": "Template for creating workflow definitions.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Webhook",
            "line": 166,
            "methods": [],
            "decorators": [],
            "docstring": "Webhook configuration for triggering workflows.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 9
          },
          {
            "module": "enum.auto",
            "from": "enum",
            "name": "auto",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 11
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TaskType",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WorkflowStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 44,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RetryPolicy",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 55,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RetryPolicy.validate_max_retries",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RetryPolicy.validate_positive",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TaskDefinition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TaskDefinition.validate_id",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 95,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WorkflowDefinition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 104,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TaskExecution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 120,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WorkflowExecution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 135,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WorkflowTemplate",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 152,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Webhook",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/models/workflow.py",
            "line": 166,
            "priority": "high",
            "reason": "Class definition"
          }
        ]
      },
      "line_count": 179,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_workflow_engine",
            "line": 34,
            "async": true,
            "decorators": [],
            "docstring": "Get the workflow engine, ensuring it's initialized.\n\nReturns:\n    Workflow engine instance\n    \nRaises:\n    HTTPException: If the engine is not initialized",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_workflow_engine",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Set the workflow engine for FastMCP.\n\nArgs:\n    engine: Workflow engine instance",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fastmcp_startup",
            "line": 62,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the FastMCP services on startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fastmcp_shutdown",
            "line": 73,
            "async": true,
            "decorators": [],
            "docstring": "Shut down the FastMCP services.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 84,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check FastMCP health for Harmonia.\n\nReturns:\n    Health status",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_harmonia_status",
            "line": 120,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get detailed Harmonia workflow engine status.\n\nArgs:\n    engine: Workflow engine instance\n    \nReturns:\n    Detailed status information",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "health_check",
            "line": 84,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_harmonia_status",
            "line": 120,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "core.engine.WorkflowEngine",
            "from": "core.engine",
            "name": "WorkflowEngine",
            "alias": null,
            "line": 14
          },
          {
            "module": "core.mcp.create_mcp_router",
            "from": "core.mcp",
            "name": "create_mcp_router",
            "alias": null,
            "line": 15
          },
          {
            "module": "core.mcp.add_standard_mcp_endpoints",
            "from": "core.mcp",
            "name": "add_standard_mcp_endpoints",
            "alias": null,
            "line": 15
          },
          {
            "module": "core.mcp.tools.register_tools",
            "from": "core.mcp.tools",
            "name": "register_tools",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_workflow_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
            "line": 34,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "set_workflow_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "fastmcp_startup",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
            "line": 62,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "fastmcp_shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
            "line": 73,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_harmonia_status",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/fastmcp_endpoints.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 158,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 93,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Harmonia component (includes Hermes registration).",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 207,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the connection manager.",
            "args": [
              "self"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 212,
            "async": true,
            "decorators": [],
            "docstring": "Accept a WebSocket connection.\n\nArgs:\n    websocket: WebSocket connection\n    \nReturns:\n    Client ID",
            "args": [
              "self",
              "websocket"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 229,
            "async": false,
            "decorators": [],
            "docstring": "Remove a WebSocket connection.\n\nArgs:\n    client_id: Client ID",
            "args": [
              "self",
              "client_id"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe",
            "line": 240,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe a client to workflow execution events.\n\nArgs:\n    client_id: Client ID\n    execution_id: Workflow execution ID",
            "args": [
              "self",
              "client_id",
              "execution_id"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe",
            "line": 252,
            "async": false,
            "decorators": [],
            "docstring": "Unsubscribe a client from workflow execution events.\n\nArgs:\n    client_id: Client ID\n    execution_id: Workflow execution ID",
            "args": [
              "self",
              "client_id",
              "execution_id"
            ],
            "class": "ConnectionManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "broadcast_event",
            "line": 264,
            "async": true,
            "decorators": [],
            "docstring": "Broadcast an event to all subscribed clients.\n\nArgs:\n    execution_id: Workflow execution ID\n    event: Execution event",
            "args": [
              "self",
              "execution_id",
              "event"
            ],
            "class": "ConnectionManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 305,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the event manager.",
            "args": [
              "self"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_queue",
            "line": 309,
            "async": false,
            "decorators": [],
            "docstring": "Create an event queue for a workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID\n    \nReturns:\n    Event queue",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_queue",
            "line": 323,
            "async": false,
            "decorators": [],
            "docstring": "Get the event queue for a workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID\n    \nReturns:\n    Event queue if it exists",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_queue",
            "line": 335,
            "async": false,
            "decorators": [],
            "docstring": "Remove the event queue for a workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID",
            "args": [
              "self",
              "execution_id"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_event",
            "line": 344,
            "async": true,
            "decorators": [],
            "docstring": "Add an event to the queue.\n\nArgs:\n    execution_id: Workflow execution ID\n    event: Execution event",
            "args": [
              "self",
              "execution_id",
              "event"
            ],
            "class": "EventManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_workflow_engine",
            "line": 372,
            "async": true,
            "decorators": [],
            "docstring": "Get the workflow engine.\n\nRaises:\n    HTTPException: If the engine is not initialized",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 445,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 457,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_workflow",
            "line": 495,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new workflow definition.\n\nArgs:\n    definition: Workflow definition to create\n    engine: Workflow engine\n    \nReturns:\n    Created workflow definition",
            "args": [
              "definition",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_workflows",
            "line": 539,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List workflow definitions.\n\nArgs:\n    engine: Workflow engine\n    limit: Maximum number of results\n    offset: Result offset\n    \nReturns:\n    List of workflow definitions",
            "args": [
              "engine",
              "limit",
              "offset"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_workflow",
            "line": 571,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a workflow definition by ID.\n\nArgs:\n    workflow_id: Workflow definition ID\n    engine: Workflow engine\n    \nReturns:\n    Workflow definition",
            "args": [
              "workflow_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_workflow",
            "line": 607,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a workflow definition.\n\nArgs:\n    workflow_id: Workflow definition ID\n    definition: Updated workflow definition\n    engine: Workflow engine\n    \nReturns:\n    Updated workflow definition",
            "args": [
              "workflow_id",
              "definition",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_workflow",
            "line": 663,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a workflow definition.\n\nArgs:\n    workflow_id: Workflow definition ID\n    engine: Workflow engine\n    \nReturns:\n    Deletion confirmation",
            "args": [
              "workflow_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "create_execution",
            "line": 704,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new workflow execution.\n\nArgs:\n    execution: Workflow execution to create\n    engine: Workflow engine\n    \nReturns:\n    Created workflow execution",
            "args": [
              "execution",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_executions",
            "line": 750,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List workflow executions.\n\nArgs:\n    engine: Workflow engine\n    limit: Maximum number of results\n    offset: Result offset\n    status: Filter by execution status\n    \nReturns:\n    List of workflow executions",
            "args": [
              "engine",
              "limit",
              "offset",
              "status"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_execution",
            "line": 795,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a workflow execution by ID.\n\nArgs:\n    execution_id: Workflow execution ID\n    engine: Workflow engine\n    \nReturns:\n    Workflow execution",
            "args": [
              "execution_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cancel_execution",
            "line": 841,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Cancel a workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID\n    engine: Workflow engine\n    \nReturns:\n    Cancellation confirmation",
            "args": [
              "execution_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "pause_execution",
            "line": 877,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Pause a workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID\n    engine: Workflow engine\n    \nReturns:\n    Pause confirmation",
            "args": [
              "execution_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "resume_execution",
            "line": 913,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Resume a paused workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID\n    engine: Workflow engine\n    \nReturns:\n    Resume confirmation",
            "args": [
              "execution_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_execution_checkpoint",
            "line": 949,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a checkpoint for a workflow execution.\n\nArgs:\n    execution_id: Workflow execution ID\n    engine: Workflow engine\n    \nReturns:\n    Created checkpoint",
            "args": [
              "execution_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "restore_from_checkpoint",
            "line": 985,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Restore a workflow execution from a checkpoint.\n\nArgs:\n    checkpoint_id: Checkpoint ID\n    engine: Workflow engine\n    \nReturns:\n    New execution ID",
            "args": [
              "checkpoint_id",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 1023,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new template.\n\nArgs:\n    template: Template to create\n    engine: Workflow engine\n    \nReturns:\n    Created template",
            "args": [
              "template",
              "engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 1078,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List templates.\n\nArgs:\n    engine: Workflow engine\n    category_id: Filter by category ID\n    tags: Filter by tags\n    \nReturns:\n    List of templates",
            "args": [
              "engine",
              "category_id",
              "tags"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_template",
            "line": 1114,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a template by ID.\n\nArgs:\n    template_id: Template ID\n    engine: Workflow engine\n    \nReturns:\n    Template",
            "args": [
              "template_id",
              "engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "instantiate_template",
            "line": 1154,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Instantiate a template.\n\nArgs:\n    template_id: Template ID\n    instantiation: Template instantiation request\n    engine: Workflow engine\n    \nReturns:\n    Template instantiation and created workflow definition",
            "args": [
              "template_id",
              "instantiation",
              "engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_webhook",
            "line": 1210,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new webhook definition.\n\nArgs:\n    webhook: Webhook definition to create\n    engine: Workflow engine\n    \nReturns:\n    Created webhook definition",
            "args": [
              "webhook",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_webhooks",
            "line": 1256,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List webhook definitions.\n\nArgs:\n    engine: Workflow engine\n    \nReturns:\n    List of webhook definitions",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "trigger_webhook",
            "line": 1284,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Manually trigger a webhook.\n\nArgs:\n    webhook_id: Webhook definition ID\n    payload: Webhook payload\n    engine: Workflow engine\n    \nReturns:\n    Webhook delivery result",
            "args": [
              "webhook_id",
              "payload",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_components",
            "line": 1333,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List registered components.\n\nArgs:\n    engine: Workflow engine\n    \nReturns:\n    List of component names",
            "args": [
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_component_actions",
            "line": 1361,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List available actions for a component.\n\nArgs:\n    component_name: Component name\n    engine: Workflow engine\n    \nReturns:\n    List of action names",
            "args": [
              "component_name",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_action_schema",
            "line": 1400,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get schema for a component action.\n\nArgs:\n    component_name: Component name\n    action: Action name\n    engine: Workflow engine\n    \nReturns:\n    Action schema",
            "args": [
              "component_name",
              "action",
              "engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execute_component_action",
            "line": 1444,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute an action on a component.\n\nArgs:\n    component_name: Component name\n    action: Action name\n    params: Action parameters\n    engine: Workflow engine\n    \nReturns:\n    Action result",
            "args": [
              "component_name",
              "action",
              "params",
              "engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execution_websocket",
            "line": 1490,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time workflow execution events.\n\nArgs:\n    websocket: WebSocket connection\n    execution_id: Workflow execution ID",
            "args": [
              "websocket",
              "execution_id"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execution_events",
            "line": 1555,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Server-Sent Events endpoint for workflow execution events.\n\nArgs:\n    execution_id: Workflow execution ID\n    request: HTTP request\n    engine: Workflow engine\n    \nReturns:\n    Event stream response",
            "args": [
              "execution_id",
              "request",
              "engine"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "event_generator",
            "line": 1598,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_status",
            "line": 1633,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the status of the Harmonia service.\n\nReturns:\n    Service status information",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 1659,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint for the Harmonia service.\nFollowing the Tekton Single Port Architecture standard.\n\nReturns:\n    Health status information",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 1688,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint - provides basic information about Harmonia.\n\nReturns:\n    Basic service information",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ConnectionManager",
            "line": 204,
            "methods": [
              "__init__",
              "disconnect",
              "subscribe",
              "unsubscribe"
            ],
            "decorators": [],
            "docstring": "Manages active WebSocket connections.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EventManager",
            "line": 302,
            "methods": [
              "__init__",
              "create_queue",
              "get_queue",
              "remove_queue"
            ],
            "decorators": [],
            "docstring": "Manages event streams for Server-Sent Events.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowDefinitionCreate",
            "line": 386,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for creating a workflow definition.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowExecutionCreate",
            "line": 397,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for creating a workflow execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateCreate",
            "line": 404,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for creating a template.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateInstantiateRequest",
            "line": 416,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for instantiating a template.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WebhookDefinitionCreate",
            "line": 423,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for creating a webhook definition.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "APIResponse",
            "line": 436,
            "methods": [],
            "decorators": [],
            "docstring": "Standard API response model.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "ready",
            "line": 445,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 457,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_workflow",
            "line": 495,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_workflows",
            "line": 539,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_workflow",
            "line": 571,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_workflow",
            "line": 607,
            "method": "@put",
            "async": true
          },
          {
            "name": "delete_workflow",
            "line": 663,
            "method": "@delete",
            "async": true
          },
          {
            "name": "create_execution",
            "line": 704,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_executions",
            "line": 750,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_execution",
            "line": 795,
            "method": "@get",
            "async": true
          },
          {
            "name": "cancel_execution",
            "line": 841,
            "method": "@post",
            "async": true
          },
          {
            "name": "pause_execution",
            "line": 877,
            "method": "@post",
            "async": true
          },
          {
            "name": "resume_execution",
            "line": 913,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_execution_checkpoint",
            "line": 949,
            "method": "@post",
            "async": true
          },
          {
            "name": "restore_from_checkpoint",
            "line": 985,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_template",
            "line": 1023,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_templates",
            "line": 1078,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_template",
            "line": 1114,
            "method": "@get",
            "async": true
          },
          {
            "name": "instantiate_template",
            "line": 1154,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_webhook",
            "line": 1210,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_webhooks",
            "line": 1256,
            "method": "@get",
            "async": true
          },
          {
            "name": "trigger_webhook",
            "line": 1284,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_components",
            "line": 1333,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_component_actions",
            "line": 1361,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_action_schema",
            "line": 1400,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_component_action",
            "line": 1444,
            "method": "@post",
            "async": true
          },
          {
            "name": "execution_events",
            "line": 1555,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_status",
            "line": 1633,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 1659,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 1688,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "list_workflows",
            "line": 539,
            "async": true
          },
          {
            "name": "execution_websocket",
            "line": 1490,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "json",
            "alias": null,
            "line": 13
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 14
          },
          {
            "module": "time",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 17
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 17
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 18
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 18
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 19
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 21
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.BackgroundTasks",
            "from": "fastapi",
            "name": "BackgroundTasks",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 22
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 23
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 24
          },
          {
            "module": "fastapi.responses.StreamingResponse",
            "from": "fastapi.responses",
            "name": "StreamingResponse",
            "alias": null,
            "line": 24
          },
          {
            "module": "fastapi.staticfiles.StaticFiles",
            "from": "fastapi.staticfiles",
            "name": "StaticFiles",
            "alias": null,
            "line": 25
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 26
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 35
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 35
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 36
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 37
          },
          {
            "module": "shared.utils.errors.StartupError",
            "from": "shared.utils.errors",
            "name": "StartupError",
            "alias": null,
            "line": 38
          },
          {
            "module": "shared.utils.startup.component_startup",
            "from": "shared.utils.startup",
            "name": "component_startup",
            "alias": null,
            "line": 39
          },
          {
            "module": "shared.utils.startup.StartupMetrics",
            "from": "shared.utils.startup",
            "name": "StartupMetrics",
            "alias": null,
            "line": 39
          },
          {
            "module": "shared.utils.shutdown.GracefulShutdown",
            "from": "shared.utils.shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 40
          },
          {
            "module": "shared.api.documentation.get_openapi_configuration",
            "from": "shared.api.documentation",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 43
          },
          {
            "module": "shared.api.endpoints.create_ready_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 44
          },
          {
            "module": "shared.api.endpoints.create_discovery_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 44
          },
          {
            "module": "shared.api.endpoints.EndpointInfo",
            "from": "shared.api.endpoints",
            "name": "EndpointInfo",
            "alias": null,
            "line": 44
          },
          {
            "module": "shared.api.routers.create_standard_routers",
            "from": "shared.api.routers",
            "name": "create_standard_routers",
            "alias": null,
            "line": 45
          },
          {
            "module": "shared.api.routers.mount_standard_routers",
            "from": "shared.api.routers",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 45
          },
          {
            "module": "harmonia.core.engine.WorkflowEngine",
            "from": "harmonia.core.engine",
            "name": "WorkflowEngine",
            "alias": null,
            "line": 47
          },
          {
            "module": "harmonia.core.state.StateManager",
            "from": "harmonia.core.state",
            "name": "StateManager",
            "alias": null,
            "line": 48
          },
          {
            "module": "harmonia.core.component.ComponentRegistry",
            "from": "harmonia.core.component",
            "name": "ComponentRegistry",
            "alias": null,
            "line": 49
          },
          {
            "module": "harmonia.core.workflow_startup.WorkflowEngineStartup",
            "from": "harmonia.core.workflow_startup",
            "name": "WorkflowEngineStartup",
            "alias": null,
            "line": 50
          },
          {
            "module": "harmonia.core.startup_instructions.StartUpInstructions",
            "from": "harmonia.core.startup_instructions",
            "name": "StartUpInstructions",
            "alias": null,
            "line": 51
          },
          {
            "module": "harmonia.models.workflow.TaskStatus",
            "from": "harmonia.models.workflow",
            "name": "TaskStatus",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.workflow.WorkflowStatus",
            "from": "harmonia.models.workflow",
            "name": "WorkflowStatus",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.workflow.RetryPolicy",
            "from": "harmonia.models.workflow",
            "name": "RetryPolicy",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.workflow.TaskDefinition",
            "from": "harmonia.models.workflow",
            "name": "TaskDefinition",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.workflow.WorkflowDefinition",
            "from": "harmonia.models.workflow",
            "name": "WorkflowDefinition",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.workflow.TaskExecution",
            "from": "harmonia.models.workflow",
            "name": "TaskExecution",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.workflow.WorkflowExecution",
            "from": "harmonia.models.workflow",
            "name": "WorkflowExecution",
            "alias": null,
            "line": 52
          },
          {
            "module": "harmonia.models.execution.EventType",
            "from": "harmonia.models.execution",
            "name": "EventType",
            "alias": null,
            "line": 61
          },
          {
            "module": "harmonia.models.execution.ExecutionEvent",
            "from": "harmonia.models.execution",
            "name": "ExecutionEvent",
            "alias": null,
            "line": 61
          },
          {
            "module": "harmonia.models.execution.ExecutionMetrics",
            "from": "harmonia.models.execution",
            "name": "ExecutionMetrics",
            "alias": null,
            "line": 61
          },
          {
            "module": "harmonia.models.execution.Checkpoint",
            "from": "harmonia.models.execution",
            "name": "Checkpoint",
            "alias": null,
            "line": 61
          },
          {
            "module": "harmonia.models.execution.ExecutionHistory",
            "from": "harmonia.models.execution",
            "name": "ExecutionHistory",
            "alias": null,
            "line": 61
          },
          {
            "module": "harmonia.models.execution.ExecutionSummary",
            "from": "harmonia.models.execution",
            "name": "ExecutionSummary",
            "alias": null,
            "line": 61
          },
          {
            "module": "harmonia.models.template.Template",
            "from": "harmonia.models.template",
            "name": "Template",
            "alias": null,
            "line": 69
          },
          {
            "module": "harmonia.models.template.TemplateVersion",
            "from": "harmonia.models.template",
            "name": "TemplateVersion",
            "alias": null,
            "line": 69
          },
          {
            "module": "harmonia.models.template.TemplateInstantiation",
            "from": "harmonia.models.template",
            "name": "TemplateInstantiation",
            "alias": null,
            "line": 69
          },
          {
            "module": "harmonia.models.template.ParameterDefinition",
            "from": "harmonia.models.template",
            "name": "ParameterDefinition",
            "alias": null,
            "line": 69
          },
          {
            "module": "harmonia.models.webhook.WebhookDefinition",
            "from": "harmonia.models.webhook",
            "name": "WebhookDefinition",
            "alias": null,
            "line": 75
          },
          {
            "module": "harmonia.models.webhook.WebhookEvent",
            "from": "harmonia.models.webhook",
            "name": "WebhookEvent",
            "alias": null,
            "line": 75
          },
          {
            "module": "tekton.utils.tekton_errors.TektonNotFoundError",
            "from": "tekton.utils.tekton_errors",
            "name": "TektonNotFoundError",
            "alias": "NotFoundError",
            "line": 79
          },
          {
            "module": "tekton.utils.tekton_errors.DataValidationError",
            "from": "tekton.utils.tekton_errors",
            "name": "DataValidationError",
            "alias": "ValidationError",
            "line": 79
          },
          {
            "module": "tekton.utils.tekton_errors.AuthorizationError",
            "from": "tekton.utils.tekton_errors",
            "name": "AuthorizationError",
            "alias": null,
            "line": 79
          },
          {
            "module": "fastmcp_endpoints.fastmcp_router",
            "from": "fastmcp_endpoints",
            "name": "fastmcp_router",
            "alias": null,
            "line": 82
          },
          {
            "module": "fastmcp_endpoints.fastmcp_startup",
            "from": "fastmcp_endpoints",
            "name": "fastmcp_startup",
            "alias": null,
            "line": 82
          },
          {
            "module": "fastmcp_endpoints.fastmcp_shutdown",
            "from": "fastmcp_endpoints",
            "name": "fastmcp_shutdown",
            "alias": null,
            "line": 82
          },
          {
            "module": "fastmcp_endpoints.set_workflow_engine",
            "from": "fastmcp_endpoints",
            "name": "set_workflow_engine",
            "alias": null,
            "line": 82
          },
          {
            "module": "harmonia.core.harmonia_component.HarmoniaComponent",
            "from": "harmonia.core.harmonia_component",
            "name": "HarmoniaComponent",
            "alias": null,
            "line": 85
          },
          {
            "module": "harmonia.core.mcp.hermes_bridge.HarmoniaMCPBridge",
            "from": "harmonia.core.mcp.hermes_bridge",
            "name": "HarmoniaMCPBridge",
            "alias": null,
            "line": 166
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 1729
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 93,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "ConnectionManager",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 204,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ConnectionManager.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 212,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 229,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 240,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 252,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ConnectionManager.broadcast_event",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 264,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "EventManager",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 302,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EventManager.create_queue",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 309,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EventManager.get_queue",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 323,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EventManager.remove_queue",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 335,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "EventManager.add_event",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 344,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_workflow_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 372,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "WorkflowDefinitionCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 386,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WorkflowExecutionCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 397,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 404,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "TemplateInstantiateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 416,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "WebhookDefinitionCreate",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 423,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "APIResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 436,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 445,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 457,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 495,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_workflows",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 539,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 571,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 607,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 663,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "create_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 704,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_executions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 750,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 795,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cancel_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 841,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "pause_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 877,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "resume_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 913,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_execution_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 949,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "restore_from_checkpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 985,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1023,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1078,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1114,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "instantiate_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1154,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_webhook",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1210,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_webhooks",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1256,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "trigger_webhook",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1284,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_components",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1333,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_component_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1361,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_action_schema",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1400,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_component_action",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1444,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execution_websocket",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1490,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execution_events",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1555,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "event_generator",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1598,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_status",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1633,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1659,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/api/app.py",
            "line": 1688,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1739,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Harmonia LLM Adapter.\n\nArgs:\n    adapter_url: URL for the LLM adapter service\n    model: Default model to use\n    provider: LLM provider to use\n    temperature: Temperature for generation (0-1)\n    max_tokens: Maximum tokens to generate\n    templates_directory: Path to prompt templates directory",
            "args": [
              "self",
              "adapter_url",
              "model",
              "provider",
              "temperature",
              "max_tokens",
              "templates_directory"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 96,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates from files and register default templates.",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_register_default_templates",
            "line": 139,
            "async": false,
            "decorators": [],
            "docstring": "Register default prompt templates for Harmonia.",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_client",
            "line": 325,
            "async": true,
            "decorators": [],
            "docstring": "Get or initialize the LLM client.\n\nReturns:\n    Initialized TektonLLMClient",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate",
            "line": 340,
            "async": true,
            "decorators": [],
            "docstring": "Generate text from a prompt.\n\nArgs:\n    prompt: The prompt to generate from\n    system_prompt: Optional system prompt\n    temperature: Optional temperature override\n    max_tokens: Optional max tokens override\n    model: Optional model override\n    stream: Whether to stream the response\n    \nReturns:\n    Generated text or async generator for streaming",
            "args": [
              "self",
              "prompt",
              "system_prompt",
              "temperature",
              "max_tokens",
              "model",
              "stream"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "error_stream",
            "line": 400,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_with_template",
            "line": 406,
            "async": true,
            "decorators": [],
            "docstring": "Generate text using a prompt template.\n\nArgs:\n    template_name: Name of the template to use\n    variables: Dictionary of variables for the template\n    system_template_name: Optional name of system prompt template\n    temperature: Optional temperature override\n    max_tokens: Optional max tokens override\n    model: Optional model override\n    stream: Whether to stream the response\n    \nReturns:\n    Generated text or async generator for streaming",
            "args": [
              "self",
              "template_name",
              "variables",
              "system_template_name",
              "temperature",
              "max_tokens",
              "model",
              "stream"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "error_stream",
            "line": 462,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_structured_output",
            "line": 468,
            "async": true,
            "decorators": [],
            "docstring": "Generate structured output from a prompt.\n\nArgs:\n    prompt: The prompt to generate from\n    output_format: JSON schema or format name for output structure\n    system_prompt: Optional system prompt\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Structured output as a dictionary",
            "args": [
              "self",
              "prompt",
              "output_format",
              "system_prompt",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_workflow",
            "line": 524,
            "async": true,
            "decorators": [],
            "docstring": "Create a workflow definition to accomplish a goal.\n\nArgs:\n    goal: The goal the workflow should accomplish\n    components: Optional description of available components\n    constraints: Optional constraints on the workflow\n    context: Optional additional context\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Generated workflow definition",
            "args": [
              "self",
              "goal",
              "components",
              "constraints",
              "context",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "evaluate_expression",
            "line": 563,
            "async": true,
            "decorators": [],
            "docstring": "Evaluate an expression based on the current state.\n\nArgs:\n    expression: The expression to evaluate\n    state: Current state as a string\n    context: Optional additional context\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Evaluation result",
            "args": [
              "self",
              "expression",
              "state",
              "context",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "determine_state_transition",
            "line": 599,
            "async": true,
            "decorators": [],
            "docstring": "Determine how to update state after a step completes.\n\nArgs:\n    current_state: Current workflow state\n    completed_step: Step that just completed\n    step_output: Output from the completed step\n    next_steps: Optional potential next steps\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Recommendations for state updates and next steps",
            "args": [
              "self",
              "current_state",
              "completed_step",
              "step_output",
              "next_steps",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "expand_template",
            "line": 638,
            "async": true,
            "decorators": [],
            "docstring": "Expand a template by filling in variables from state.\n\nArgs:\n    template: Template to expand\n    state: Current state as a string\n    functions: Optional available functions\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Expanded template",
            "args": [
              "self",
              "template",
              "state",
              "functions",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "troubleshoot_workflow",
            "line": 673,
            "async": true,
            "decorators": [],
            "docstring": "Troubleshoot a workflow execution issue.\n\nArgs:\n    workflow: Workflow definition\n    state: Current state\n    error: Error details\n    execution_history: Optional execution history\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Troubleshooting analysis and recommendations",
            "args": [
              "self",
              "workflow",
              "state",
              "error",
              "execution_history",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_json_workflow",
            "line": 711,
            "async": true,
            "decorators": [],
            "docstring": "Generate a workflow definition in JSON format.\n\nArgs:\n    goal: The goal the workflow should accomplish\n    components: Optional description of available components\n    constraints: Optional constraints on the workflow\n    context: Optional additional context\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Workflow definition as a JSON object",
            "args": [
              "self",
              "goal",
              "components",
              "constraints",
              "context",
              "temperature",
              "model"
            ],
            "class": "LLMAdapter",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMAdapter",
            "line": 27,
            "methods": [
              "__init__",
              "_load_templates",
              "_register_default_templates"
            ],
            "decorators": [],
            "docstring": "LLM Adapter for Harmonia using the standardized tekton-llm-client library.\n\nThis adapter provides a unified interface for LLM operations related to\nworkflow engine functionality, including template processing, expression\nevaluation, and workflow generation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMAdapter._load_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 96,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "LLMAdapter.generate",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.error_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 400,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.generate_with_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 406,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.error_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 462,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.parse_structured_output",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 468,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.create_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 524,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.evaluate_expression",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 563,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.determine_state_transition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 599,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.expand_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 638,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.troubleshoot_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 673,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.generate_json_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/llm/adapter.py",
            "line": 711,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 796,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Harmonia MCP Bridge.",
            "args": [
              "self",
              "workflow_engine",
              "component_name"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 89,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 154,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from workflow engine.",
            "args": [
              "self"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 181,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "HarmoniaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HarmoniaMCPBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Harmonia's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Harmonia to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "harmonia.core.mcp.get_all_tools",
            "from": "harmonia.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 45
          },
          {
            "module": "tekton.mcp.fastmcp.utils.requests.process_mcp_request",
            "from": "tekton.mcp.fastmcp.utils.requests",
            "name": "process_mcp_request",
            "alias": null,
            "line": 91
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPRequest",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPRequest",
            "alias": null,
            "line": 92
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HarmoniaMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 89,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HarmoniaMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/hermes_bridge.py",
            "line": 181,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "create_workflow_definition",
            "line": 40,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Create a new workflow definition.\n\nArgs:\n    name: Name of the workflow\n    description: Description of the workflow\n    tasks: Dictionary of task definitions\n    input_schema: Optional input schema\n    output_schema: Optional output schema\n    version: Version of the workflow\n    metadata: Optional metadata\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Created workflow definition information",
            "args": [
              "name",
              "description",
              "tasks",
              "input_schema",
              "output_schema",
              "version",
              "metadata",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_workflow_definition",
            "line": 117,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Update an existing workflow definition.\n\nArgs:\n    workflow_id: ID of the workflow to update\n    name: Updated name of the workflow\n    description: Updated description of the workflow\n    tasks: Updated dictionary of task definitions\n    input_schema: Updated input schema\n    output_schema: Updated output schema\n    version: Updated version of the workflow\n    metadata: Updated metadata\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Updated workflow definition information",
            "args": [
              "workflow_id",
              "name",
              "description",
              "tasks",
              "input_schema",
              "output_schema",
              "version",
              "metadata",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_workflow_definition",
            "line": 204,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Delete a workflow definition.\n\nArgs:\n    workflow_id: ID of the workflow to delete\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Deletion status",
            "args": [
              "workflow_id",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_workflow_definition",
            "line": 253,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get a workflow definition by ID.\n\nArgs:\n    workflow_id: ID of the workflow to retrieve\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Workflow definition information",
            "args": [
              "workflow_id",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_workflow_definitions",
            "line": 307,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "List all workflow definitions.\n\nArgs:\n    limit: Maximum number of results to return\n    offset: Number of results to skip\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    List of workflow definitions",
            "args": [
              "limit",
              "offset",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_workflow",
            "line": 368,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Execute a workflow with input data.\n\nArgs:\n    workflow_id: ID of the workflow to execute\n    input_data: Input data for the workflow\n    metadata: Optional execution metadata\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Workflow execution information",
            "args": [
              "workflow_id",
              "input_data",
              "metadata",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "cancel_workflow_execution",
            "line": 427,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Cancel a running workflow execution.\n\nArgs:\n    execution_id: ID of the execution to cancel\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Cancellation status",
            "args": [
              "execution_id",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "pause_workflow_execution",
            "line": 473,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Pause a running workflow execution.\n\nArgs:\n    execution_id: ID of the execution to pause\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Pause status",
            "args": [
              "execution_id",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "resume_workflow_execution",
            "line": 519,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Resume a paused workflow execution.\n\nArgs:\n    execution_id: ID of the execution to resume\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Resume status",
            "args": [
              "execution_id",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_workflow_execution_status",
            "line": 565,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get the status of a workflow execution.\n\nArgs:\n    execution_id: ID of the execution\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Execution status information",
            "args": [
              "execution_id",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_workflow_executions",
            "line": 619,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "List workflow executions with optional filtering.\n\nArgs:\n    workflow_id: Optional workflow ID filter\n    status: Optional status filter\n    limit: Maximum number of results to return\n    offset: Number of results to skip\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    List of workflow executions",
            "args": [
              "workflow_id",
              "status",
              "limit",
              "offset",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_template",
            "line": 699,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Create a workflow template.\n\nArgs:\n    name: Name of the template\n    description: Description of the template\n    workflow_definition_id: ID of the workflow definition to template\n    parameters: Template parameters\n    category_ids: Optional category IDs\n    tags: Optional tags\n    is_public: Whether the template is public\n    metadata: Optional metadata\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Created template information",
            "args": [
              "name",
              "description",
              "workflow_definition_id",
              "parameters",
              "category_ids",
              "tags",
              "is_public",
              "metadata",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "instantiate_template",
            "line": 779,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Instantiate a workflow template with parameters.\n\nArgs:\n    template_id: ID of the template to instantiate\n    parameter_values: Values for template parameters\n    metadata: Optional metadata\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Instantiation result with workflow definition",
            "args": [
              "template_id",
              "parameter_values",
              "metadata",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_templates",
            "line": 841,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "List available workflow templates.\n\nArgs:\n    category_id: Optional category ID filter\n    tags: Optional tags filter\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    List of templates",
            "args": [
              "category_id",
              "tags",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_components",
            "line": 908,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "List available Tekton components.\n\nArgs:\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    List of available components",
            "args": [
              "workflow_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_actions",
            "line": 949,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get available actions for a component.\n\nArgs:\n    component_name: Name of the component\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    List of available actions",
            "args": [
              "component_name",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execute_component_action",
            "line": 999,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Execute an action on a component.\n\nArgs:\n    component_name: Name of the component\n    action: Name of the action to execute\n    parameters: Parameters for the action\n    workflow_engine: Workflow engine instance (injected)\n    \nReturns:\n    Action execution result",
            "args": [
              "component_name",
              "action",
              "parameters",
              "workflow_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tools",
            "line": 1045,
            "async": true,
            "decorators": [],
            "docstring": "Register all tools with the MCP service.\n\nArgs:\n    workflow_engine: Workflow engine to use for registration\n    skip_tools: List of tool names to skip\n    \nReturns:\n    Registration results",
            "args": [
              "workflow_engine",
              "skip_tools"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 1091,
            "async": false,
            "decorators": [],
            "docstring": "Get all Harmonia MCP tools.",
            "args": [
              "workflow_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "create_workflow_definition",
            "line": 40,
            "decorator": "@mcp_capability"
          },
          {
            "name": "create_workflow_definition",
            "line": 40,
            "decorator": "@mcp_tool"
          },
          {
            "name": "update_workflow_definition",
            "line": 117,
            "decorator": "@mcp_capability"
          },
          {
            "name": "update_workflow_definition",
            "line": 117,
            "decorator": "@mcp_tool"
          },
          {
            "name": "delete_workflow_definition",
            "line": 204,
            "decorator": "@mcp_capability"
          },
          {
            "name": "delete_workflow_definition",
            "line": 204,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_workflow_definition",
            "line": 253,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_workflow_definition",
            "line": 253,
            "decorator": "@mcp_tool"
          },
          {
            "name": "list_workflow_definitions",
            "line": 307,
            "decorator": "@mcp_capability"
          },
          {
            "name": "list_workflow_definitions",
            "line": 307,
            "decorator": "@mcp_tool"
          },
          {
            "name": "execute_workflow",
            "line": 368,
            "decorator": "@mcp_capability"
          },
          {
            "name": "execute_workflow",
            "line": 368,
            "decorator": "@mcp_tool"
          },
          {
            "name": "cancel_workflow_execution",
            "line": 427,
            "decorator": "@mcp_capability"
          },
          {
            "name": "cancel_workflow_execution",
            "line": 427,
            "decorator": "@mcp_tool"
          },
          {
            "name": "pause_workflow_execution",
            "line": 473,
            "decorator": "@mcp_capability"
          },
          {
            "name": "pause_workflow_execution",
            "line": 473,
            "decorator": "@mcp_tool"
          },
          {
            "name": "resume_workflow_execution",
            "line": 519,
            "decorator": "@mcp_capability"
          },
          {
            "name": "resume_workflow_execution",
            "line": 519,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_workflow_execution_status",
            "line": 565,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_workflow_execution_status",
            "line": 565,
            "decorator": "@mcp_tool"
          },
          {
            "name": "list_workflow_executions",
            "line": 619,
            "decorator": "@mcp_capability"
          },
          {
            "name": "list_workflow_executions",
            "line": 619,
            "decorator": "@mcp_tool"
          },
          {
            "name": "create_template",
            "line": 699,
            "decorator": "@mcp_capability"
          },
          {
            "name": "create_template",
            "line": 699,
            "decorator": "@mcp_tool"
          },
          {
            "name": "instantiate_template",
            "line": 779,
            "decorator": "@mcp_capability"
          },
          {
            "name": "instantiate_template",
            "line": 779,
            "decorator": "@mcp_tool"
          },
          {
            "name": "list_templates",
            "line": 841,
            "decorator": "@mcp_capability"
          },
          {
            "name": "list_templates",
            "line": 841,
            "decorator": "@mcp_tool"
          },
          {
            "name": "list_components",
            "line": 908,
            "decorator": "@mcp_capability"
          },
          {
            "name": "list_components",
            "line": 908,
            "decorator": "@mcp_tool"
          },
          {
            "name": "get_component_actions",
            "line": 949,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_component_actions",
            "line": 949,
            "decorator": "@mcp_tool"
          },
          {
            "name": "execute_component_action",
            "line": 999,
            "decorator": "@mcp_capability"
          },
          {
            "name": "execute_component_action",
            "line": 999,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "uuid.UUID",
            "from": "uuid",
            "name": "UUID",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.utils.register_tools",
            "from": "tekton.mcp.fastmcp.utils",
            "name": "register_tools",
            "alias": "register_tools_util",
            "line": 18
          },
          {
            "module": "engine.WorkflowEngine",
            "from": "engine",
            "name": "WorkflowEngine",
            "alias": null,
            "line": 21
          },
          {
            "module": "state.StateManager",
            "from": "state",
            "name": "StateManager",
            "alias": null,
            "line": 71
          },
          {
            "module": "models.workflow.WorkflowDefinition",
            "from": "models.workflow",
            "name": "WorkflowDefinition",
            "alias": null,
            "line": 72
          },
          {
            "module": "models.workflow.TaskDefinition",
            "from": "models.workflow",
            "name": "TaskDefinition",
            "alias": null,
            "line": 72
          },
          {
            "module": "models.workflow.TaskDefinition",
            "from": "models.workflow",
            "name": "TaskDefinition",
            "alias": null,
            "line": 150
          },
          {
            "module": "models.workflow.WorkflowStatus",
            "from": "models.workflow",
            "name": "WorkflowStatus",
            "alias": null,
            "line": 644
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 1093
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_workflow_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 40,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "update_workflow_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 117,
            "priority": "high",
            "reason": "Async function, High complexity, MCP tool"
          },
          {
            "type": "function",
            "name": "delete_workflow_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 204,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_workflow_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 253,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "list_workflow_definitions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 307,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "execute_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 368,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "cancel_workflow_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 427,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "pause_workflow_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 473,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "resume_workflow_execution",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 519,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_workflow_execution_status",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 565,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "list_workflow_executions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 619,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "create_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 699,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "instantiate_template",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 779,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "list_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 841,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "list_components",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 908,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "get_component_actions",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 949,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "execute_component_action",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 999,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "register_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 1045,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/tools.py",
            "line": 1091,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 1113,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "WorkflowDefinitionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 35,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "WorkflowDefinitionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 58,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "WorkflowExecutionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 73,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "WorkflowExecutionCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 95,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "TemplateManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 110,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "TemplateManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 132,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ComponentIntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 146,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ComponentIntegrationCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "WorkflowDefinitionCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for workflow design, definition, and management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "WorkflowExecutionCapability",
            "line": 50,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for workflow execution, monitoring, and control.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TemplateManagementCapability",
            "line": 87,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for workflow template creation and management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentIntegrationCapability",
            "line": 124,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for integrating with Tekton components and external systems.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "WorkflowDefinitionCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WorkflowDefinitionCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WorkflowDefinitionCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "WorkflowExecutionCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 50,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "WorkflowExecutionCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 58,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "WorkflowExecutionCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 73,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TemplateManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 87,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TemplateManagementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 95,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TemplateManagementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 110,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ComponentIntegrationCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 124,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentIntegrationCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 132,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentIntegrationCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Harmonia/harmonia/core/mcp/capabilities.py",
            "line": 146,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 166,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 20,
    "total_functions": 236,
    "total_classes": 60,
    "total_landmarks": 257,
    "patterns": [
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 32,
    "mcp_tools": 34,
    "websocket_handlers": 2,
    "skipped_files": 3
  }
}