{
  "component": "Hermes",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/verify_mcp_changes.py",
      "analysis": {
        "functions": [
          {
            "name": "check_file_contains",
            "line": 10,
            "async": false,
            "decorators": [],
            "docstring": "Check if a file contains a specific string.",
            "args": [
              "filepath",
              "search_string",
              "description"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "main",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "check_file_contains",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/verify_mcp_changes.py",
            "line": 10,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/verify_mcp_changes.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 83,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the A2A service.\n\nArgs:\n    service_registry: Service registry to use\n    message_bus: Message bus to use\n    registration_manager: Optional registration manager to use\n    enable_security: Whether to enable security features",
            "args": [
              "self",
              "service_registry",
              "message_bus",
              "registration_manager",
              "enable_security"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the service and set up channels.",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_register_hermes_methods",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Register Hermes-specific A2A methods",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "agent_forward",
            "line": 181,
            "async": true,
            "decorators": [],
            "docstring": "Forward a method call to a specific agent",
            "args": [
              "agent_id",
              "method",
              "params",
              "_security_context"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_subscribe",
            "line": 210,
            "async": true,
            "decorators": [],
            "docstring": "Enhanced channel subscription with pattern support",
            "args": [
              "agent_id",
              "channel"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_unsubscribe",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Unsubscribe an agent from a channel",
            "args": [
              "agent_id",
              "channel"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_publish",
            "line": 238,
            "async": true,
            "decorators": [],
            "docstring": "Enhanced channel publishing with metadata",
            "args": [
              "channel",
              "message",
              "sender_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_list",
            "line": 263,
            "async": true,
            "decorators": [],
            "docstring": "List channels with optional pattern filter",
            "args": [
              "pattern"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_info",
            "line": 267,
            "async": true,
            "decorators": [],
            "docstring": "Get detailed channel information",
            "args": [
              "channel"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_subscribe_pattern",
            "line": 271,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to channels matching pattern with wildcards",
            "args": [
              "agent_id",
              "pattern"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_create",
            "line": 290,
            "async": true,
            "decorators": [],
            "docstring": "Create a new multi-agent conversation",
            "args": [
              "topic",
              "created_by",
              "description",
              "turn_taking_mode",
              "settings",
              "initial_participants"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_join",
            "line": 310,
            "async": true,
            "decorators": [],
            "docstring": "Join an existing conversation",
            "args": [
              "conversation_id",
              "agent_id",
              "role"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_leave",
            "line": 330,
            "async": true,
            "decorators": [],
            "docstring": "Leave a conversation",
            "args": [
              "conversation_id",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_send",
            "line": 345,
            "async": true,
            "decorators": [],
            "docstring": "Send a message in a conversation",
            "args": [
              "conversation_id",
              "sender_id",
              "content",
              "in_reply_to",
              "metadata"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_list",
            "line": 366,
            "async": true,
            "decorators": [],
            "docstring": "List conversations",
            "args": [
              "agent_id",
              "state"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_info",
            "line": 377,
            "async": true,
            "decorators": [],
            "docstring": "Get conversation details",
            "args": [
              "conversation_id",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_request_turn",
            "line": 388,
            "async": true,
            "decorators": [],
            "docstring": "Request a turn to speak",
            "args": [
              "conversation_id",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_grant_turn",
            "line": 403,
            "async": true,
            "decorators": [],
            "docstring": "Grant speaking turn (moderator only)",
            "args": [
              "conversation_id",
              "moderator_id",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "conversation_end",
            "line": 419,
            "async": true,
            "decorators": [],
            "docstring": "End a conversation",
            "args": [
              "conversation_id",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_create",
            "line": 454,
            "async": true,
            "decorators": [],
            "docstring": "Create a new task workflow",
            "args": [
              "name",
              "created_by",
              "pattern",
              "description",
              "max_parallel",
              "retry_failed",
              "timeout_seconds"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_create_sequential",
            "line": 475,
            "async": true,
            "decorators": [],
            "docstring": "Create a sequential workflow",
            "args": [
              "name",
              "created_by",
              "tasks"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_create_parallel",
            "line": 488,
            "async": true,
            "decorators": [],
            "docstring": "Create a parallel workflow",
            "args": [
              "name",
              "created_by",
              "tasks",
              "max_parallel"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_create_pipeline",
            "line": 503,
            "async": true,
            "decorators": [],
            "docstring": "Create a pipeline workflow",
            "args": [
              "name",
              "created_by",
              "stages"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_create_fanout",
            "line": 516,
            "async": true,
            "decorators": [],
            "docstring": "Create a fan-out workflow",
            "args": [
              "name",
              "created_by",
              "source_task",
              "target_tasks"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_start",
            "line": 531,
            "async": true,
            "decorators": [],
            "docstring": "Start executing a workflow",
            "args": [
              "workflow_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_cancel",
            "line": 536,
            "async": true,
            "decorators": [],
            "docstring": "Cancel a running workflow",
            "args": [
              "workflow_id",
              "reason"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_info",
            "line": 544,
            "async": true,
            "decorators": [],
            "docstring": "Get workflow information",
            "args": [
              "workflow_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_list",
            "line": 549,
            "async": true,
            "decorators": [],
            "docstring": "List workflows",
            "args": [
              "created_by",
              "state"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_add_task",
            "line": 560,
            "async": true,
            "decorators": [],
            "docstring": "Add a task to an existing workflow",
            "args": [
              "workflow_id",
              "workflow_task_id",
              "task_definition"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "workflow_add_dependency",
            "line": 583,
            "async": true,
            "decorators": [],
            "docstring": "Add a dependency between tasks in a workflow",
            "args": [
              "workflow_id",
              "predecessor_id",
              "successor_id",
              "dependency_type"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_registration_event",
            "line": 615,
            "async": true,
            "decorators": [],
            "docstring": "Handle component registration events from Hermes",
            "args": [
              "self",
              "event"
            ],
            "class": "A2AService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_dispatcher",
            "line": 673,
            "async": false,
            "decorators": [],
            "docstring": "Get the method dispatcher for handling JSON-RPC requests",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_agent_registry",
            "line": 677,
            "async": false,
            "decorators": [],
            "docstring": "Get the agent registry",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task_manager",
            "line": 681,
            "async": false,
            "decorators": [],
            "docstring": "Get the task manager",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_discovery_service",
            "line": 685,
            "async": false,
            "decorators": [],
            "docstring": "Get the discovery service",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_sse_manager",
            "line": 689,
            "async": false,
            "decorators": [],
            "docstring": "Get the SSE manager for streaming",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_subscription_manager",
            "line": 693,
            "async": false,
            "decorators": [],
            "docstring": "Get the subscription manager",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_on_task_event",
            "line": 697,
            "async": false,
            "decorators": [],
            "docstring": "Handle task events and convert to streaming events",
            "args": [
              "self",
              "event_type",
              "task",
              "message",
              "data"
            ],
            "class": "A2AService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 766,
            "async": true,
            "decorators": [],
            "docstring": "Clean up resources on shutdown",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_agent",
            "line": 777,
            "async": true,
            "decorators": [],
            "docstring": "Legacy agent registration method",
            "args": [
              "self",
              "agent_data"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_agent",
            "line": 787,
            "async": true,
            "decorators": [],
            "docstring": "Legacy agent unregistration method",
            "args": [
              "self",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_agent",
            "line": 792,
            "async": true,
            "decorators": [],
            "docstring": "Legacy get agent method",
            "args": [
              "self",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 797,
            "async": true,
            "decorators": [],
            "docstring": "Legacy task creation method",
            "args": [
              "self",
              "task_spec"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 822,
            "async": true,
            "decorators": [],
            "docstring": "Legacy get task method",
            "args": [
              "self",
              "task_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "A2AService",
            "line": 48,
            "methods": [
              "__init__",
              "get_dispatcher",
              "get_agent_registry",
              "get_task_manager",
              "get_discovery_service",
              "get_sse_manager",
              "get_subscription_manager",
              "_on_task_event"
            ],
            "decorators": [],
            "docstring": "Service for agent-to-agent communication in Hermes.\n\nThis class bridges Hermes's infrastructure with the A2A Protocol v0.2.1,\nenabling components to communicate using JSON-RPC 2.0.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.registration.RegistrationManager",
            "from": "hermes.core.registration",
            "name": "RegistrationManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.a2a.AgentCard",
            "from": "tekton.a2a",
            "name": "AgentCard",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.AgentRegistry",
            "from": "tekton.a2a",
            "name": "AgentRegistry",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.AgentStatus",
            "from": "tekton.a2a",
            "name": "AgentStatus",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.TaskManager",
            "from": "tekton.a2a",
            "name": "TaskManager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.TaskState",
            "from": "tekton.a2a",
            "name": "TaskState",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.DiscoveryService",
            "from": "tekton.a2a",
            "name": "DiscoveryService",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.JSONRPCRequest",
            "from": "tekton.a2a",
            "name": "JSONRPCRequest",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.JSONRPCResponse",
            "from": "tekton.a2a",
            "name": "JSONRPCResponse",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.MethodDispatcher",
            "from": "tekton.a2a",
            "name": "MethodDispatcher",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.create_standard_dispatcher",
            "from": "tekton.a2a",
            "name": "create_standard_dispatcher",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.SSEManager",
            "from": "tekton.a2a",
            "name": "SSEManager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.EventType",
            "from": "tekton.a2a",
            "name": "EventType",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.TaskEvent",
            "from": "tekton.a2a",
            "name": "TaskEvent",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.AgentEvent",
            "from": "tekton.a2a",
            "name": "AgentEvent",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.SubscriptionManager",
            "from": "tekton.a2a",
            "name": "SubscriptionManager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.websocket_manager",
            "from": "tekton.a2a",
            "name": "websocket_manager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.streaming.ChannelBridge",
            "from": "tekton.a2a.streaming",
            "name": "ChannelBridge",
            "alias": null,
            "line": 29
          },
          {
            "module": "tekton.a2a.ConversationManager",
            "from": "tekton.a2a",
            "name": "ConversationManager",
            "alias": null,
            "line": 30
          },
          {
            "module": "tekton.a2a.ConversationRole",
            "from": "tekton.a2a",
            "name": "ConversationRole",
            "alias": null,
            "line": 30
          },
          {
            "module": "tekton.a2a.ConversationState",
            "from": "tekton.a2a",
            "name": "ConversationState",
            "alias": null,
            "line": 30
          },
          {
            "module": "tekton.a2a.TurnTakingMode",
            "from": "tekton.a2a",
            "name": "TurnTakingMode",
            "alias": null,
            "line": 30
          },
          {
            "module": "tekton.a2a.task_coordination.TaskCoordinator",
            "from": "tekton.a2a.task_coordination",
            "name": "TaskCoordinator",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.a2a.task_coordination.CoordinationPattern",
            "from": "tekton.a2a.task_coordination",
            "name": "CoordinationPattern",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.a2a.task_coordination.DependencyType",
            "from": "tekton.a2a.task_coordination",
            "name": "DependencyType",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.a2a.task_coordination.TaskWorkflow",
            "from": "tekton.a2a.task_coordination",
            "name": "TaskWorkflow",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.a2a.errors.InvalidRequestError",
            "from": "tekton.a2a.errors",
            "name": "InvalidRequestError",
            "alias": null,
            "line": 38
          },
          {
            "module": "tekton.a2a.security.TokenManager",
            "from": "tekton.a2a.security",
            "name": "TokenManager",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.a2a.security.AccessControl",
            "from": "tekton.a2a.security",
            "name": "AccessControl",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.a2a.security.SecurityContext",
            "from": "tekton.a2a.security",
            "name": "SecurityContext",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.a2a.security.Permission",
            "from": "tekton.a2a.security",
            "name": "Permission",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.a2a.security.Role",
            "from": "tekton.a2a.security",
            "name": "Role",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.a2a.security.MessageSigner",
            "from": "tekton.a2a.security",
            "name": "MessageSigner",
            "alias": null,
            "line": 39
          },
          {
            "module": "tekton.a2a.middleware.apply_security_middleware",
            "from": "tekton.a2a.middleware",
            "name": "apply_security_middleware",
            "alias": null,
            "line": 43
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "A2AService",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 48,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "A2AService.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 121,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService._register_hermes_methods",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 177,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "A2AService.agent_forward",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 181,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 210,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_publish",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 238,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_list",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 263,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_info",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_subscribe_pattern",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 271,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_create",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 290,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_join",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 310,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_leave",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 330,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_send",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 345,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_list",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 366,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_info",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 377,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_request_turn",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 388,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_grant_turn",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 403,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.conversation_end",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 419,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_create",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 454,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_create_sequential",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 475,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_create_parallel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 488,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_create_pipeline",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 503,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_create_fanout",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 516,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_start",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 531,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_cancel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 536,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_info",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 544,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_list",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 549,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_add_task",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 560,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.workflow_add_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 583,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService._handle_registration_event",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 615,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "A2AService.get_dispatcher",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 673,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_agent_registry",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 677,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_task_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 681,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_discovery_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 685,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_sse_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 689,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_subscription_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 693,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 766,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.register_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 777,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.unregister_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 787,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.get_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 792,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 797,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service.py",
            "line": 822,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 828,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the MCP service.\n\nArgs:\n    service_registry: Service registry to use\n    message_bus: Message bus to use\n    registration_manager: Optional registration manager to use\n    database_manager: Optional database manager to use",
            "args": [
              "self",
              "service_registry",
              "message_bus",
              "registration_manager",
              "database_manager"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 111,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the service and set up channels.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "register_tool",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Register a tool with the MCP service.\n\nArgs:\n    tool_spec: Tool specification\n    \nReturns:\n    Tool ID",
            "args": [
              "self",
              "tool_spec"
            ],
            "class": "MCPService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "unregister_tool",
            "line": 270,
            "async": true,
            "decorators": [],
            "docstring": "Unregister a tool from the MCP service.\n\nArgs:\n    tool_id: Tool ID to unregister\n    \nReturns:\n    True if unregistration successful",
            "args": [
              "self",
              "tool_id"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_processor",
            "line": 306,
            "async": true,
            "decorators": [],
            "docstring": "Register a processor with the MCP service.\n\nArgs:\n    processor_spec: Processor specification\n    \nReturns:\n    Processor ID",
            "args": [
              "self",
              "processor_spec"
            ],
            "class": "MCPService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 361,
            "async": true,
            "decorators": [],
            "docstring": "Create a new context.\n\nArgs:\n    data: Context data\n    source: Context source information\n    context_id: Optional ID for the context\n    \nReturns:\n    Context ID",
            "args": [
              "self",
              "data",
              "source",
              "context_id"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_context",
            "line": 413,
            "async": true,
            "decorators": [],
            "docstring": "Update a context.\n\nArgs:\n    context_id: ID of the context to update\n    updates: Updates to apply\n    source: Update source information\n    operation: Update operation type\n    \nReturns:\n    True if update successful",
            "args": [
              "self",
              "context_id",
              "updates",
              "source",
              "operation"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 464,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP message.\n\nArgs:\n    message: MCP message to process\n    \nReturns:\n    Processing result",
            "args": [
              "self",
              "message"
            ],
            "class": "MCPService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execute_tool",
            "line": 535,
            "async": true,
            "decorators": [],
            "docstring": "Execute a tool.\n\nArgs:\n    tool_id: ID of the tool to execute\n    parameters: Tool parameters\n    context: Optional execution context\n    \nReturns:\n    Tool execution result",
            "args": [
              "self",
              "tool_id",
              "parameters",
              "context"
            ],
            "class": "MCPService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_tool",
            "line": 630,
            "async": true,
            "decorators": [],
            "docstring": "Get information about a tool.\n\nArgs:\n    tool_id: Tool ID to retrieve\n    \nReturns:\n    Tool information or None if not found",
            "args": [
              "self",
              "tool_id"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_processor",
            "line": 657,
            "async": true,
            "decorators": [],
            "docstring": "Get information about a processor.\n\nArgs:\n    processor_id: Processor ID to retrieve\n    \nReturns:\n    Processor information or None if not found",
            "args": [
              "self",
              "processor_id"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 670,
            "async": true,
            "decorators": [],
            "docstring": "Get a context.\n\nArgs:\n    context_id: Context ID to retrieve\n    \nReturns:\n    Context or None if not found",
            "args": [
              "self",
              "context_id"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_find_processors_for_message",
            "line": 683,
            "async": true,
            "decorators": [],
            "docstring": "Find processors that can handle a message.\n\nArgs:\n    message: MCP message\n    \nReturns:\n    List of processor IDs",
            "args": [
              "self",
              "message"
            ],
            "class": "MCPService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_deep_merge",
            "line": 724,
            "async": false,
            "decorators": [],
            "docstring": "Deep merge two dictionaries.\n\nArgs:\n    base: Base dictionary\n    updates: Updates to apply\n    \nReturns:\n    Merged dictionary",
            "args": [
              "self",
              "base",
              "updates"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_tool_message",
            "line": 747,
            "async": true,
            "decorators": [],
            "docstring": "Handle tool messages.\n\nArgs:\n    message: Tool message",
            "args": [
              "self",
              "message"
            ],
            "class": "MCPService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_handle_context_message",
            "line": 775,
            "async": true,
            "decorators": [],
            "docstring": "Handle context messages.\n\nArgs:\n    message: Context message",
            "args": [
              "self",
              "message"
            ],
            "class": "MCPService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_handle_processor_message",
            "line": 808,
            "async": true,
            "decorators": [],
            "docstring": "Handle processor messages.\n\nArgs:\n    message: Processor message",
            "args": [
              "self",
              "message"
            ],
            "class": "MCPService",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPService",
            "line": 62,
            "methods": [
              "__init__",
              "_deep_merge"
            ],
            "decorators": [],
            "docstring": "Service for multimodal information processing in Hermes.\n\nThis class provides a service for multimodal information processing,\nenabling components to handle and process multimodal content.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.registration.RegistrationManager",
            "from": "hermes.core.registration",
            "name": "RegistrationManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.mcp.tool_executor.ToolExecutor",
            "from": "hermes.core.mcp.tool_executor",
            "name": "ToolExecutor",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_context",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_context",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_tool",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_processor",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_context",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_context",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.register_component",
            "from": "tekton.mcp.fastmcp",
            "name": "register_component",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.schema.CapabilitySchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "CapabilitySchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ContextSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ContextSchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ContentSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ContentSchema",
            "alias": null,
            "line": 34
          },
          {
            "module": "hermes.core.mcp.tools.register_system_tools",
            "from": "hermes.core.mcp.tools",
            "name": "register_system_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "hermes.core.mcp.tools.register_database_tools",
            "from": "hermes.core.mcp.tools",
            "name": "register_database_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "hermes.core.mcp.tools.register_messaging_tools",
            "from": "hermes.core.mcp.tools",
            "name": "register_messaging_tools",
            "alias": null,
            "line": 49
          },
          {
            "module": "hermes.core.mcp.adapters.adapt_legacy_service",
            "from": "hermes.core.mcp.adapters",
            "name": "adapt_legacy_service",
            "alias": null,
            "line": 56
          },
          {
            "module": "hermes.core.mcp.tools.get_component_status",
            "from": "hermes.core.mcp.tools",
            "name": "get_component_status",
            "alias": null,
            "line": 566
          },
          {
            "module": "hermes.core.mcp.tools.list_components",
            "from": "hermes.core.mcp.tools",
            "name": "list_components",
            "alias": null,
            "line": 566
          },
          {
            "module": "hermes.core.mcp.tools.query_vector_database",
            "from": "hermes.core.mcp.tools",
            "name": "query_vector_database",
            "alias": null,
            "line": 566
          },
          {
            "module": "hermes.core.mcp.tools.store_vector_data",
            "from": "hermes.core.mcp.tools",
            "name": "store_vector_data",
            "alias": null,
            "line": 566
          },
          {
            "module": "hermes.core.mcp.tools.publish_message",
            "from": "hermes.core.mcp.tools",
            "name": "publish_message",
            "alias": null,
            "line": 566
          },
          {
            "module": "hermes.core.mcp.tools.create_channel",
            "from": "hermes.core.mcp.tools",
            "name": "create_channel",
            "alias": null,
            "line": 566
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPService",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 62,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPService.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MCPService.register_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.unregister_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 270,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.register_processor",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 306,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.create_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 361,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.update_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 413,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 464,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.execute_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 535,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MCPService.get_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 630,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.get_processor",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 657,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 670,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService._handle_tool_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp_service.py",
            "line": 747,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 837,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the message bus.\n\nArgs:\n    host: Hostname for the message bus\n    port: Port for the message bus\n    config: Additional configuration options",
            "args": [
              "self",
              "host",
              "port",
              "config"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Connect to the message broker.\n\nReturns:\n    True if connection successful",
            "args": [
              "self"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "publish",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Publish a message to a topic.\n\nArgs:\n    topic: Topic to publish to\n    message: Message to publish (will be serialized)\n    headers: Optional message headers\n    \nReturns:\n    True if publication successful",
            "args": [
              "self",
              "topic",
              "message",
              "headers"
            ],
            "class": "MessageBus",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "subscribe",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe to a topic.\nAutomatically handles both sync and async callbacks.\n\nArgs:\n    topic: Topic to subscribe to\n    callback: Function to call when a message is received (sync or async)\n\nReturns:\n    True if subscription successful",
            "args": [
              "self",
              "topic",
              "callback"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe",
            "line": 140,
            "async": false,
            "decorators": [],
            "docstring": "Unsubscribe from a topic.\n\nArgs:\n    topic: Topic to unsubscribe from\n    callback: Callback function to remove\n    \nReturns:\n    True if unsubscription successful",
            "args": [
              "self",
              "topic",
              "callback"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_deliver_to_subscribers",
            "line": 161,
            "async": false,
            "decorators": [],
            "docstring": "Deliver a message to all subscribers of a topic.\nHandles both sync and async callbacks properly.\n\nArgs:\n    topic: Topic the message was published to\n    message: Message envelope",
            "args": [
              "self",
              "topic",
              "message"
            ],
            "class": "MessageBus",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_history",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": "Get message history for a topic.\n\nArgs:\n    topic: Topic to get history for\n    limit: Maximum number of messages to return\n    \nReturns:\n    List of messages",
            "args": [
              "self",
              "topic",
              "limit"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 246,
            "async": false,
            "decorators": [],
            "docstring": "Close the connection to the message broker.",
            "args": [
              "self"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_channel",
            "line": 253,
            "async": true,
            "decorators": [],
            "docstring": "Create a new channel for message exchange.\n\nArgs:\n    channel_name: Name of the channel to create\n    description: Optional description of the channel\n    \nReturns:\n    True if channel creation successful",
            "args": [
              "self",
              "channel_name",
              "description"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_async",
            "line": 276,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe to a topic (async version).\n\nArgs:\n    topic: Topic to subscribe to\n    callback: Function to call when a message is received\n    \nReturns:\n    True if subscription successful",
            "args": [
              "self",
              "topic",
              "callback"
            ],
            "class": "MessageBus",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "publish_async",
            "line": 298,
            "async": true,
            "decorators": [],
            "docstring": "Publish a message to a topic (async version).\n\nArgs:\n    topic: Topic to publish to\n    message: Message to publish (will be serialized)\n    headers: Optional message headers\n    \nReturns:\n    True if publication successful",
            "args": [
              "self",
              "topic",
              "message",
              "headers"
            ],
            "class": "MessageBus",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_deliver_to_subscribers_async",
            "line": 349,
            "async": true,
            "decorators": [],
            "docstring": "Deliver a message to all subscribers of a topic (async version).\n\nArgs:\n    topic: Topic the message was published to\n    message: Message envelope",
            "args": [
              "self",
              "topic",
              "message"
            ],
            "class": "MessageBus",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MessageBus",
            "line": 18,
            "methods": [
              "__init__",
              "connect",
              "publish",
              "subscribe",
              "unsubscribe",
              "_deliver_to_subscribers",
              "get_history",
              "close"
            ],
            "decorators": [],
            "docstring": "Main interface for inter-component messaging.\n\nThis class provides methods for publishing and subscribing to messages,\nenabling asynchronous communication between Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 12
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 170
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 171
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MessageBus",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MessageBus.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageBus.publish",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageBus.subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 116,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageBus.unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 140,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageBus._deliver_to_subscribers",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 161,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MessageBus.get_history",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 225,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageBus.close",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 246,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MessageBus.create_channel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 253,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBus.subscribe_async",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 276,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBus.publish_async",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 298,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MessageBus._deliver_to_subscribers_async",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/message_bus.py",
            "line": 349,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 384,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the A2A service.\n\nArgs:\n    service_registry: Service registry to use\n    message_bus: Message bus to use\n    registration_manager: Optional registration manager to use",
            "args": [
              "self",
              "service_registry",
              "message_bus",
              "registration_manager"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 84,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the service and set up channels.",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_register_hermes_methods",
            "line": 118,
            "async": true,
            "decorators": [],
            "docstring": "Register Hermes-specific A2A methods",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "agent_forward",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Forward a method call to a specific agent",
            "args": [
              "agent_id",
              "method",
              "params"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_subscribe",
            "line": 139,
            "async": true,
            "decorators": [],
            "docstring": "Subscribe an agent to a channel",
            "args": [
              "agent_id",
              "channel"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_unsubscribe",
            "line": 151,
            "async": true,
            "decorators": [],
            "docstring": "Unsubscribe an agent from a channel",
            "args": [
              "agent_id",
              "channel"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "channel_publish",
            "line": 158,
            "async": true,
            "decorators": [],
            "docstring": "Publish a message to a channel",
            "args": [
              "channel",
              "message"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_registration_event",
            "line": 180,
            "async": true,
            "decorators": [],
            "docstring": "Handle component registration events from Hermes",
            "args": [
              "self",
              "event"
            ],
            "class": "A2AService",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_dispatcher",
            "line": 238,
            "async": false,
            "decorators": [],
            "docstring": "Get the method dispatcher for handling JSON-RPC requests",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_agent_registry",
            "line": 242,
            "async": false,
            "decorators": [],
            "docstring": "Get the agent registry",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task_manager",
            "line": 246,
            "async": false,
            "decorators": [],
            "docstring": "Get the task manager",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_discovery_service",
            "line": 250,
            "async": false,
            "decorators": [],
            "docstring": "Get the discovery service",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_sse_manager",
            "line": 254,
            "async": false,
            "decorators": [],
            "docstring": "Get the SSE manager for streaming",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_subscription_manager",
            "line": 258,
            "async": false,
            "decorators": [],
            "docstring": "Get the subscription manager",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_on_task_event",
            "line": 262,
            "async": false,
            "decorators": [],
            "docstring": "Handle task events and convert to streaming events",
            "args": [
              "self",
              "event_type",
              "task",
              "message",
              "data"
            ],
            "class": "A2AService",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 331,
            "async": true,
            "decorators": [],
            "docstring": "Clean up resources on shutdown",
            "args": [
              "self"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_agent",
            "line": 342,
            "async": true,
            "decorators": [],
            "docstring": "Legacy agent registration method",
            "args": [
              "self",
              "agent_data"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_agent",
            "line": 352,
            "async": true,
            "decorators": [],
            "docstring": "Legacy agent unregistration method",
            "args": [
              "self",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_agent",
            "line": 357,
            "async": true,
            "decorators": [],
            "docstring": "Legacy get agent method",
            "args": [
              "self",
              "agent_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_task",
            "line": 362,
            "async": true,
            "decorators": [],
            "docstring": "Legacy task creation method",
            "args": [
              "self",
              "task_spec"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_task",
            "line": 387,
            "async": true,
            "decorators": [],
            "docstring": "Legacy get task method",
            "args": [
              "self",
              "task_id"
            ],
            "class": "A2AService",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "A2AService",
            "line": 33,
            "methods": [
              "__init__",
              "get_dispatcher",
              "get_agent_registry",
              "get_task_manager",
              "get_discovery_service",
              "get_sse_manager",
              "get_subscription_manager",
              "_on_task_event"
            ],
            "decorators": [],
            "docstring": "Service for agent-to-agent communication in Hermes.\n\nThis class bridges Hermes's infrastructure with the A2A Protocol v0.2.1,\nenabling components to communicate using JSON-RPC 2.0.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid.uuid4",
            "from": "uuid",
            "name": "uuid4",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.registration.RegistrationManager",
            "from": "hermes.core.registration",
            "name": "RegistrationManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.a2a.AgentCard",
            "from": "tekton.a2a",
            "name": "AgentCard",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.AgentRegistry",
            "from": "tekton.a2a",
            "name": "AgentRegistry",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.AgentStatus",
            "from": "tekton.a2a",
            "name": "AgentStatus",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.TaskManager",
            "from": "tekton.a2a",
            "name": "TaskManager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.TaskState",
            "from": "tekton.a2a",
            "name": "TaskState",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.DiscoveryService",
            "from": "tekton.a2a",
            "name": "DiscoveryService",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.JSONRPCRequest",
            "from": "tekton.a2a",
            "name": "JSONRPCRequest",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.JSONRPCResponse",
            "from": "tekton.a2a",
            "name": "JSONRPCResponse",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.MethodDispatcher",
            "from": "tekton.a2a",
            "name": "MethodDispatcher",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.create_standard_dispatcher",
            "from": "tekton.a2a",
            "name": "create_standard_dispatcher",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.SSEManager",
            "from": "tekton.a2a",
            "name": "SSEManager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.EventType",
            "from": "tekton.a2a",
            "name": "EventType",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.TaskEvent",
            "from": "tekton.a2a",
            "name": "TaskEvent",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.AgentEvent",
            "from": "tekton.a2a",
            "name": "AgentEvent",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.SubscriptionManager",
            "from": "tekton.a2a",
            "name": "SubscriptionManager",
            "alias": null,
            "line": 19
          },
          {
            "module": "tekton.a2a.websocket_manager",
            "from": "tekton.a2a",
            "name": "websocket_manager",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "A2AService",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 33,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "A2AService.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 84,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.agent_forward",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_subscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_unsubscribe",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 151,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.channel_publish",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 158,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService._handle_registration_event",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 180,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "A2AService.get_dispatcher",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 238,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_agent_registry",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 242,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_task_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 246,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_discovery_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 250,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_sse_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 254,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.get_subscription_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 258,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "A2AService.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 331,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.register_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 342,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.unregister_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 352,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.get_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 357,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.create_task",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 362,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "A2AService.get_task",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/a2a_service_backup.py",
            "line": 387,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 393,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_pre_init",
            "line": 33,
            "async": true,
            "decorators": [],
            "docstring": "Pre-initialization hook for Hermes.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_register_with_hermes",
            "line": 39,
            "async": true,
            "decorators": [],
            "docstring": "Override to skip registration - Hermes doesn't register with itself.",
            "args": [
              "self",
              "capabilities",
              "metadata"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 44,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Hermes-specific services.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_hermes_components",
            "line": 124,
            "async": true,
            "decorators": [],
            "docstring": "Register all Hermes components with the registration manager.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "start_database_mcp_server",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "Start the Database MCP server as a separate process.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop_database_mcp_server",
            "line": 269,
            "async": false,
            "decorators": [],
            "docstring": "Stop the Database MCP server process.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 291,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Hermes-specific resources.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 312,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 324,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_status",
            "line": 332,
            "async": false,
            "decorators": [],
            "docstring": "Get detailed component status.",
            "args": [
              "self"
            ],
            "class": "HermesComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesComponent",
            "line": 17,
            "methods": [
              "__init__",
              "stop_database_mcp_server",
              "get_capabilities",
              "get_metadata",
              "get_component_status"
            ],
            "decorators": [],
            "docstring": "Hermes central registration and messaging component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "os",
            "alias": null,
            "line": 3
          },
          {
            "module": "subprocess",
            "alias": null,
            "line": 4
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 5
          },
          {
            "module": "sys",
            "alias": null,
            "line": 6
          },
          {
            "module": "atexit",
            "alias": null,
            "line": 7
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.utils.env_manager.TektonEnvManager",
            "from": "shared.utils.env_manager",
            "name": "TektonEnvManager",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 47
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 48
          },
          {
            "module": "hermes.core.registration.RegistrationManager",
            "from": "hermes.core.registration",
            "name": "RegistrationManager",
            "alias": null,
            "line": 49
          },
          {
            "module": "hermes.core.database.manager.DatabaseManager",
            "from": "hermes.core.database.manager",
            "name": "DatabaseManager",
            "alias": null,
            "line": 50
          },
          {
            "module": "hermes.core.a2a_service.A2AService",
            "from": "hermes.core.a2a_service",
            "name": "A2AService",
            "alias": null,
            "line": 51
          },
          {
            "module": "hermes.core.mcp_service.MCPService",
            "from": "hermes.core.mcp_service",
            "name": "MCPService",
            "alias": null,
            "line": 52
          },
          {
            "module": "hermes.core.mcp.hermes_self_bridge.HermesSelfBridge",
            "from": "hermes.core.mcp.hermes_self_bridge",
            "name": "HermesSelfBridge",
            "alias": null,
            "line": 99
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesComponent.register_hermes_components",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 124,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesComponent.start_database_mcp_server",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesComponent.stop_database_mcp_server",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 269,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 312,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 324,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesComponent.get_component_status",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/hermes_component.py",
            "line": 332,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 349,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM Client.\n\nArgs:\n    adapter_url: URL for the LLM adapter service\n    model: Default model to use\n    provider: LLM provider to use\n    temperature: Temperature for generation (0-1)\n    max_tokens: Maximum tokens to generate\n    templates_directory: Path to prompt templates directory",
            "args": [
              "self",
              "adapter_url",
              "model",
              "provider",
              "temperature",
              "max_tokens",
              "templates_directory"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 95,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates from files and register default templates.",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_register_default_templates",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Register default prompt templates for Hermes.",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_client",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "Get or initialize the LLM client.\n\nReturns:\n    Initialized TektonLLMClient",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_providers",
            "line": 229,
            "async": true,
            "decorators": [],
            "docstring": "Get available LLM providers.\n\nReturns:\n    Dict of available providers and their models",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_current_provider_and_model",
            "line": 293,
            "async": false,
            "decorators": [],
            "docstring": "Get the current provider and model.\n\nReturns:\n    Tuple of (provider_id, model_id)",
            "args": [
              "self"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_provider_and_model",
            "line": 302,
            "async": false,
            "decorators": [],
            "docstring": "Set the provider and model to use.\n\nArgs:\n    provider_id: Provider ID\n    model_id: Model ID",
            "args": [
              "self",
              "provider_id",
              "model_id"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate",
            "line": 318,
            "async": true,
            "decorators": [],
            "docstring": "Generate text from a prompt.\n\nArgs:\n    prompt: The prompt to generate from\n    system_prompt: Optional system prompt\n    temperature: Optional temperature override\n    max_tokens: Optional max tokens override\n    model: Optional model override\n    provider: Optional provider override\n    stream: Whether to stream the response\n    \nReturns:\n    Generated text or async generator for streaming",
            "args": [
              "self",
              "prompt",
              "system_prompt",
              "temperature",
              "max_tokens",
              "model",
              "provider",
              "stream"
            ],
            "class": "LLMClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "error_stream",
            "line": 380,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_with_template",
            "line": 386,
            "async": true,
            "decorators": [],
            "docstring": "Generate text using a prompt template.\n\nArgs:\n    template_name: Name of the template to use\n    variables: Dictionary of variables for the template\n    system_template_name: Optional name of system prompt template\n    temperature: Optional temperature override\n    max_tokens: Optional max tokens override\n    model: Optional model override\n    provider: Optional provider override\n    stream: Whether to stream the response\n    \nReturns:\n    Generated text or async generator for streaming",
            "args": [
              "self",
              "template_name",
              "variables",
              "system_template_name",
              "temperature",
              "max_tokens",
              "model",
              "provider",
              "stream"
            ],
            "class": "LLMClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "error_stream",
            "line": 445,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat",
            "line": 451,
            "async": true,
            "decorators": [],
            "docstring": "Send a chat message to the LLM.\n\nArgs:\n    message: User message\n    chat_history: Optional chat history for context\n    system_prompt: Optional system prompt\n    temperature: Optional temperature override\n    max_tokens: Optional max tokens override\n    model: Optional model override\n    provider: Optional provider override\n    stream: Whether to stream the response\n    callback: Optional callback function for streaming\n    \nReturns:\n    If stream=False, returns a dictionary with the response\n    If stream=True, returns an async generator for streaming",
            "args": [
              "self",
              "message",
              "chat_history",
              "system_prompt",
              "temperature",
              "max_tokens",
              "model",
              "provider",
              "stream",
              "callback"
            ],
            "class": "LLMClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_stream",
            "line": 516,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "error_stream",
            "line": 561,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "streaming_chat",
            "line": 573,
            "async": true,
            "decorators": [],
            "docstring": "Send a chat message with streaming response.\n\nArgs:\n    message: User message\n    callback: Callback function for streaming chunks\n    chat_history: Optional chat history\n    system_prompt: Optional system prompt\n    temperature: Optional temperature override\n    max_tokens: Optional max tokens override\n    model: Optional model override\n    provider: Optional provider override",
            "args": [
              "self",
              "message",
              "callback",
              "chat_history",
              "system_prompt",
              "temperature",
              "max_tokens",
              "model",
              "provider"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_message",
            "line": 611,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a message using LLM.\n\nArgs:\n    message_content: Message content\n    message_type: Type of message (standard, log, registration, etc.)\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "message_content",
              "message_type",
              "temperature",
              "model"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_service",
            "line": 655,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a service registration using LLM.\n\nArgs:\n    service_data: Service registration data\n    temperature: Optional temperature override\n    model: Optional model override\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "service_data",
              "temperature",
              "model"
            ],
            "class": "LLMClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_parse_message_analysis",
            "line": 700,
            "async": false,
            "decorators": [],
            "docstring": "Parse LLM message analysis response.\n\nArgs:\n    response: Raw LLM response\n    \nReturns:\n    Parsed analysis",
            "args": [
              "self",
              "response"
            ],
            "class": "LLMClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_parse_service_analysis",
            "line": 784,
            "async": false,
            "decorators": [],
            "docstring": "Parse LLM service analysis response.\n\nArgs:\n    response: Raw LLM response\n    \nReturns:\n    Parsed analysis",
            "args": [
              "self",
              "response"
            ],
            "class": "LLMClient",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMClient",
            "line": 27,
            "methods": [
              "__init__",
              "_load_templates",
              "_register_default_templates",
              "get_current_provider_and_model",
              "set_provider_and_model",
              "_parse_message_analysis",
              "_parse_service_analysis"
            ],
            "decorators": [],
            "docstring": "Enhanced LLM Client for Hermes using the tekton-llm-client library.\n\nThis client provides a standardized interface for interacting with LLMs\nfor message analysis, service analysis, and general chat capabilities.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMClient._load_templates",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 95,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "LLMClient.get_available_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 229,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "LLMClient.get_current_provider_and_model",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 293,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.set_provider_and_model",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 302,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMClient.generate",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 318,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.error_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 380,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.generate_with_template",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 386,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.error_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 445,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.chat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 451,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "LLMClient.handle_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 516,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.error_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 561,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.streaming_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 573,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.analyze_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 611,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient.analyze_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 655,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMClient._parse_message_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 700,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "LLMClient._parse_service_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_client.py",
            "line": 784,
            "priority": "medium",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 849,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the vector engine.\n\nArgs:\n    backend: Vector database backend (\"qdrant\", \"faiss\", \"lancedb\", or \"auto\")\n    connection_string: Connection string for the vector database\n    dimension: Embedding dimension\n    config: Additional configuration options",
            "args": [
              "self",
              "backend",
              "connection_string",
              "dimension",
              "config"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Connect to the vector database.\n\nReturns:\n    True if connection successful",
            "args": [
              "self"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_detect_optimal_backend",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Detect the optimal backend based on available hardware.\n\nReturns:\n    Optimal backend name",
            "args": [
              "self"
            ],
            "class": "VectorEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_embedding",
            "line": 96,
            "async": false,
            "decorators": [],
            "docstring": "Create an embedding vector from text.\n\nArgs:\n    text: Input text to embed\n    \nReturns:\n    Embedding vector as a list of floats",
            "args": [
              "self",
              "text"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 110,
            "async": false,
            "decorators": [],
            "docstring": "Store an embedding vector.\n\nArgs:\n    document_id: Unique identifier for the document\n    embedding: Embedding vector\n    metadata: Optional metadata to store with the vector\n    \nReturns:\n    True if storage successful",
            "args": [
              "self",
              "document_id",
              "embedding",
              "metadata"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 129,
            "async": false,
            "decorators": [],
            "docstring": "Search for similar vectors.\n\nArgs:\n    query: Query text or embedding vector\n    limit: Maximum number of results\n    filter_dict: Optional metadata filters\n    \nReturns:\n    List of search results with document IDs, scores, and metadata",
            "args": [
              "self",
              "query",
              "limit",
              "filter_dict"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 155,
            "async": false,
            "decorators": [],
            "docstring": "Delete a vector by document ID.\n\nArgs:\n    document_id: Document ID to delete\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "document_id"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 169,
            "async": false,
            "decorators": [],
            "docstring": "Close the connection to the vector database.",
            "args": [
              "self"
            ],
            "class": "VectorEngine",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "VectorEngine",
            "line": 16,
            "methods": [
              "__init__",
              "connect",
              "_detect_optimal_backend",
              "create_embedding",
              "store",
              "search",
              "delete",
              "close"
            ],
            "decorators": [],
            "docstring": "Main interface for vector operations.\n\nThis class provides methods for generating, storing, and retrieving\nvector embeddings, with support for multiple backend databases.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 9
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 10
          },
          {
            "module": "platform",
            "alias": null,
            "line": 74
          },
          {
            "module": "torch",
            "alias": null,
            "line": 81
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VectorEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorEngine.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorEngine.create_embedding",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 96,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorEngine.store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 110,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorEngine.search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 129,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorEngine.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 155,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorEngine.close",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/vector_engine.py",
            "line": 169,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 174,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM adapter.\n\nArgs:\n    adapter_url: URL for the LLM adapter service",
            "args": [
              "self",
              "adapter_url"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_providers",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Get available LLM providers.\n\nReturns:\n    Dict of available providers and their models",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_current_provider_and_model",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": "Get the current provider and model.\n\nReturns:\n    Tuple of (provider_id, model_id)",
            "args": [
              "self"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_provider_and_model",
            "line": 78,
            "async": false,
            "decorators": [],
            "docstring": "Set the provider and model to use.\n\nArgs:\n    provider_id: Provider ID\n    model_id: Model ID",
            "args": [
              "self",
              "provider_id",
              "model_id"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_message",
            "line": 92,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a message using LLM.\n\nArgs:\n    message_content: Message content\n    message_type: Type of message (standard, log, registration, etc.)\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "message_content",
              "message_type"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_service",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": "Analyze a service registration using LLM.\n\nArgs:\n    service_data: Service registration data\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "service_data"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Send a chat message to the LLM.\n\nArgs:\n    message: User message\n    chat_history: Optional chat history for context\n    \nReturns:\n    LLM response",
            "args": [
              "self",
              "message",
              "chat_history"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "streaming_chat",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": "Send a chat message to the LLM with streaming response.\n\nArgs:\n    message: User message\n    callback: Callback function to receive streaming chunks\n    chat_history: Optional chat history for context",
            "args": [
              "self",
              "message",
              "callback",
              "chat_history"
            ],
            "class": "LLMAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LLMAdapter",
            "line": 28,
            "methods": [
              "__init__",
              "get_current_provider_and_model",
              "set_provider_and_model"
            ],
            "decorators": [],
            "docstring": "Client for interacting with LLMs through the Tekton LLM Adapter.\n\nThis adapter maintains backward compatibility with existing code while\nusing the enhanced LLMClient based on tekton-llm-client internally.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.AsyncGenerator",
            "from": "typing",
            "name": "AsyncGenerator",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 23
          },
          {
            "module": "hermes.core.llm_client.LLMClient",
            "from": "hermes.core.llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 24
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LLMAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LLMAdapter.get_available_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 59,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.get_current_provider_and_model",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 69,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.set_provider_and_model",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 78,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.analyze_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 92,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.analyze_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.chat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LLMAdapter.streaming_chat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/llm_adapter.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 165,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the service registry.\n\nArgs:\n    check_interval: Interval in seconds between health checks\n    timeout: Timeout in seconds for health check responses",
            "args": [
              "self",
              "check_interval",
              "timeout"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Start the health check monitoring thread.",
            "args": [
              "self"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 62,
            "async": false,
            "decorators": [],
            "docstring": "Register a service with the registry.\n\nArgs:\n    service_id: Unique identifier for the service\n    name: Human-readable name\n    version: Service version\n    endpoint: Service endpoint (URL or connection string)\n    capabilities: List of service capabilities\n    health_check: Optional function to check service health\n    metadata: Additional service metadata\n    \nReturns:\n    True if registration successful",
            "args": [
              "self",
              "service_id",
              "name",
              "version",
              "endpoint",
              "capabilities",
              "health_check",
              "metadata"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a service from the registry.\n\nArgs:\n    service_id: Service ID to unregister\n    \nReturns:\n    True if unregistration successful",
            "args": [
              "self",
              "service_id"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_service",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Get information about a registered service.\n\nArgs:\n    service_id: Service ID to look up\n    \nReturns:\n    Service information or None if not found",
            "args": [
              "self",
              "service_id"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_by_capability",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Find services by capability.\n\nArgs:\n    capability: Capability to search for\n    \nReturns:\n    List of services with the requested capability",
            "args": [
              "self",
              "capability"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_services",
            "line": 160,
            "async": false,
            "decorators": [],
            "docstring": "Get all registered services.\n\nReturns:\n    Dictionary of all services",
            "args": [
              "self"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_health_check_loop",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Main loop for health check monitoring.\n\nThis runs in a separate thread and periodically checks\nthe health of all registered services.",
            "args": [
              "self"
            ],
            "class": "ServiceRegistry",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 203,
            "async": false,
            "decorators": [],
            "docstring": "Stop the health check monitoring thread.",
            "args": [
              "self"
            ],
            "class": "ServiceRegistry",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ServiceRegistry",
            "line": 18,
            "methods": [
              "__init__",
              "start",
              "register",
              "unregister",
              "get_service",
              "find_by_capability",
              "get_all_services",
              "_health_check_loop",
              "stop"
            ],
            "decorators": [],
            "docstring": "Registry for Tekton components and their capabilities.\n\nThis class provides methods for registering components, discovering\nservices, and monitoring component health.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "threading",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ServiceRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.start",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.register",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 62,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.unregister",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.get_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.find_by_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 138,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.get_all_services",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 160,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ServiceRegistry.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/service_discovery.py",
            "line": 203,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 208,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the component registration.\n\nArgs:\n    component_id: Unique identifier for the component\n    component_name: Human-readable name\n    component_type: Type of component (e.g., \"engram\", \"ergon\", \"athena\")\n    component_version: Component version\n    capabilities: List of component capabilities\n    hermes_endpoint: Optional Hermes endpoint (read from env if not provided)",
            "args": [
              "self",
              "component_id",
              "component_name",
              "component_type",
              "component_version",
              "capabilities",
              "hermes_endpoint"
            ],
            "class": "ComponentRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 69,
            "async": true,
            "decorators": [],
            "docstring": "Register the component with the Tekton ecosystem.\n\nReturns:\n    True if registration successful",
            "args": [
              "self"
            ],
            "class": "ComponentRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister",
            "line": 78,
            "async": true,
            "decorators": [],
            "docstring": "Unregister the component from the Tekton ecosystem.\n\nReturns:\n    True if unregistration successful",
            "args": [
              "self"
            ],
            "class": "ComponentRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "publish_message",
            "line": 87,
            "async": false,
            "decorators": [],
            "docstring": "Publish a message to a topic.\n\nArgs:\n    topic: Topic to publish to\n    message: Message to publish\n    headers: Optional message headers\n    \nReturns:\n    True if publication successful",
            "args": [
              "self",
              "topic",
              "message",
              "headers"
            ],
            "class": "ComponentRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_to_topic",
            "line": 108,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe to a topic.\n\nArgs:\n    topic: Topic to subscribe to\n    callback: Function to call when a message is received\n    \nReturns:\n    True if subscription successful",
            "args": [
              "self",
              "topic",
              "callback"
            ],
            "class": "ComponentRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 126,
            "async": true,
            "decorators": [],
            "docstring": "Close the connection to Hermes services.",
            "args": [
              "self"
            ],
            "class": "ComponentRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Register a component with the Tekton ecosystem.\n\nThis is a convenience function that creates a ComponentRegistration\ninstance, registers the component, and returns the instance.\n\nArgs:\n    component_id: Unique identifier for the component\n    component_name: Human-readable name\n    component_type: Type of component (e.g., \"engram\", \"ergon\", \"athena\")\n    component_version: Component version\n    capabilities: List of component capabilities\n    hermes_endpoint: Optional Hermes endpoint (read from env if not provided)\n    \nReturns:\n    ComponentRegistration instance",
            "args": [
              "component_id",
              "component_name",
              "component_type",
              "component_version",
              "capabilities",
              "hermes_endpoint"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComponentRegistration",
            "line": 20,
            "methods": [
              "__init__",
              "publish_message",
              "subscribe_to_topic"
            ],
            "decorators": [],
            "docstring": "Helper class for Tekton component registration.\n\nThis class provides a simplified interface for Tekton components to\nregister with the Tekton ecosystem using the Unified Registration Protocol.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.api.client.HermesClient",
            "from": "hermes.api.client",
            "name": "HermesClient",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ComponentRegistration",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentRegistration.register",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentRegistration.unregister",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentRegistration.publish_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistration.subscribe_to_topic",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 108,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentRegistration.close",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 126,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/registration_helper.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 176,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "setup_logging",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Set up logging for a component.\n\nThis function initializes the logging system if needed and returns\na Logger instance for the specified component.\n\nArgs:\n    component: Component name\n    client_id: Optional client ID for the component\n    storage_path: Path to store log files (default: ~/.tekton/logs)\n    console_output: Whether to output logs to console\n    console_level: Minimum level for console output\n    \nReturns:\n    Logger instance",
            "args": [
              "component",
              "client_id",
              "storage_path",
              "console_output",
              "console_level"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_logger",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Get a logger for a component.\n\nThis function returns a cached Logger instance for the specified component,\nor None if no logger has been set up for that component.\n\nArgs:\n    component: Component name\n    \nReturns:\n    Logger instance or None",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "intercept_python_logging",
            "line": 83,
            "async": false,
            "decorators": [],
            "docstring": "Intercept Python logging and redirect to Tekton logging system.\n\nThis function adds a handler to the Python logging system that redirects\nall log messages to the Tekton logging system.\n\nArgs:\n    component: Component name to use for Tekton logs\n    level_mapping: Optional mapping from Python log levels to Tekton log levels",
            "args": [
              "component",
              "level_mapping"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "emit",
            "line": 111,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "record"
            ],
            "class": "TektonLoggingHandler",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "patch_stdout_stderr",
            "line": 155,
            "async": false,
            "decorators": [],
            "docstring": "Patch sys.stdout and sys.stderr to redirect to Tekton logging system.\n\nThis function replaces sys.stdout and sys.stderr with custom file-like\nobjects that redirect output to the Tekton logging system.\n\nArgs:\n    component: Component name to use for Tekton logs",
            "args": [
              "component"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "write",
            "line": 172,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "data"
            ],
            "class": "StdoutRedirector",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "flush",
            "line": 180,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "StdoutRedirector",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "write",
            "line": 184,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "data"
            ],
            "class": "StderrRedirector",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "flush",
            "line": 192,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "StderrRedirector",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_correlation_context",
            "line": 200,
            "async": false,
            "decorators": [],
            "docstring": "Create a correlation ID for tracking related log entries.\n\nReturns:\n    Correlation ID string",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TektonLoggingHandler",
            "line": 110,
            "methods": [
              "emit"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StdoutRedirector",
            "line": 171,
            "methods": [
              "write",
              "flush"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StderrRedirector",
            "line": 183,
            "methods": [
              "write",
              "flush"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.logging.LogLevel",
            "from": "hermes.core.logging",
            "name": "LogLevel",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.logging.LogEntry",
            "from": "hermes.core.logging",
            "name": "LogEntry",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.logging.Logger",
            "from": "hermes.core.logging",
            "name": "Logger",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.logging.LogManager",
            "from": "hermes.core.logging",
            "name": "LogManager",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.logging.init_logging",
            "from": "hermes.core.logging",
            "name": "init_logging",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 16
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 207
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "setup_logging",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 25,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_component_logger",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 67,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "intercept_python_logging",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 83,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "TektonLoggingHandler",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 110,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TektonLoggingHandler.emit",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 111,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "patch_stdout_stderr",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 155,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "class_definition",
            "name": "StdoutRedirector",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 171,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StdoutRedirector.write",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 172,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "StdoutRedirector.flush",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 180,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "StderrRedirector",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 183,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StderrRedirector.write",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 184,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "StderrRedirector.flush",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 192,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_correlation_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/logging_helper.py",
            "line": 200,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 208,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
      "analysis": {
        "functions": [
          {
            "name": "get_database_manager",
            "line": 33,
            "async": true,
            "decorators": [],
            "docstring": "Get the global database manager instance.\n\nReturns:\n    DatabaseManager instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_vector_db",
            "line": 48,
            "async": true,
            "decorators": [],
            "docstring": "Get a vector database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Vector database adapter instance",
            "args": [
              "namespace",
              "backend",
              "config"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_graph_db",
            "line": 68,
            "async": true,
            "decorators": [],
            "docstring": "Get a graph database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Graph database adapter instance",
            "args": [
              "namespace",
              "backend",
              "config"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_key_value_db",
            "line": 88,
            "async": true,
            "decorators": [],
            "docstring": "Get a key-value database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Key-value database adapter instance",
            "args": [
              "namespace",
              "backend",
              "config"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_document_db",
            "line": 108,
            "async": true,
            "decorators": [],
            "docstring": "Get a document database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Document database adapter instance",
            "args": [
              "namespace",
              "backend",
              "config"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_cache_db",
            "line": 128,
            "async": true,
            "decorators": [],
            "docstring": "Get a cache database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Cache database adapter instance",
            "args": [
              "namespace",
              "backend",
              "config"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relational_db",
            "line": 148,
            "async": true,
            "decorators": [],
            "docstring": "Get a relational database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Relational database adapter instance",
            "args": [
              "namespace",
              "backend",
              "config"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the database client.\n\nArgs:\n    component_id: Component identifier (used as namespace prefix)\n    data_path: Optional path for database storage\n    config: Optional configuration parameters",
            "args": [
              "self",
              "component_id",
              "data_path",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_manager",
            "line": 201,
            "async": true,
            "decorators": [],
            "docstring": "Get the database manager.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_namespace",
            "line": 211,
            "async": false,
            "decorators": [],
            "docstring": "Get prefixed namespace.",
            "args": [
              "self",
              "namespace"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_vector_db",
            "line": 218,
            "async": true,
            "decorators": [],
            "docstring": "Get a vector database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Vector database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_graph_db",
            "line": 265,
            "async": true,
            "decorators": [],
            "docstring": "Get a graph database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Graph database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_key_value_db",
            "line": 312,
            "async": true,
            "decorators": [],
            "docstring": "Get a key-value database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Key-value database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_document_db",
            "line": 359,
            "async": true,
            "decorators": [],
            "docstring": "Get a document database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Document database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_cache_db",
            "line": 406,
            "async": true,
            "decorators": [],
            "docstring": "Get a cache database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Cache database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_relational_db",
            "line": 453,
            "async": true,
            "decorators": [],
            "docstring": "Get a relational database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Relational database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "close_connections",
            "line": 500,
            "async": true,
            "decorators": [],
            "docstring": "Close all connections.\n\nReturns:\n    True if all connections closed successfully",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aenter__",
            "line": 519,
            "async": true,
            "decorators": [],
            "docstring": "Enter context manager.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__aexit__",
            "line": 523,
            "async": true,
            "decorators": [],
            "docstring": "Exit context manager.",
            "args": [
              "self",
              "exc_type",
              "exc_val",
              "exc_tb"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DatabaseClient",
            "line": 168,
            "methods": [
              "__init__",
              "_get_namespace"
            ],
            "decorators": [],
            "docstring": "Client for accessing database services.\n\nThis class provides a simplified interface for accessing database services\nwith automatic connection management and namespace handling.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 10
          },
          {
            "module": "hermes.core.database_manager.DatabaseManager",
            "from": "hermes.core.database_manager",
            "name": "DatabaseManager",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.DatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.DatabaseType",
            "from": "hermes.core.database_manager",
            "name": "DatabaseType",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.DatabaseBackend",
            "from": "hermes.core.database_manager",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.VectorDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "VectorDatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.GraphDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "GraphDatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.KeyValueDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "KeyValueDatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.DocumentDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "DocumentDatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.CacheDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "CacheDatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database_manager.RelationalDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "RelationalDatabaseAdapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 24
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_database_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_vector_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 48,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_graph_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_key_value_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_document_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_cache_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 128,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_relational_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 148,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "DatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 168,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseClient.get_vector_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 218,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.get_graph_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 265,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.get_key_value_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 312,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.get_document_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 359,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.get_cache_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 406,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.get_relational_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 453,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.close_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/utils/database_helper.py",
            "line": 500,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 525,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "chat",
            "line": 79,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Chat with the LLM.\n\nArgs:\n    request: Chat request with message and optional history\n    \nReturns:\n    Chat response with LLM's reply",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "chat_stream",
            "line": 120,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Stream chat responses from the LLM.\n\nArgs:\n    request: Chat request with streaming enabled\n    \nReturns:\n    Server-sent event stream with chat chunks",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate",
            "line": 142,
            "async": true,
            "decorators": [],
            "docstring": "Generate SSE events from LLM stream.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_message",
            "line": 175,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze a message using the LLM.\n\nArgs:\n    request: Message and context for analysis\n    \nReturns:\n    Analysis results",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_service",
            "line": 199,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze service data using the LLM.\n\nArgs:\n    request: Service data for analysis\n    \nReturns:\n    Service analysis results",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_providers",
            "line": 220,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get available LLM providers and current selection.\n\nReturns:\n    Provider information including available providers and current selection",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 243,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time LLM interactions.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ChatMessage",
            "line": 42,
            "methods": [],
            "decorators": [],
            "docstring": "Model for chat messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ChatRequest",
            "line": 48,
            "methods": [],
            "decorators": [],
            "docstring": "Model for chat requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ChatResponse",
            "line": 56,
            "methods": [],
            "decorators": [],
            "docstring": "Model for chat responses.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AnalyzeMessageRequest",
            "line": 63,
            "methods": [],
            "decorators": [],
            "docstring": "Model for message analysis requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AnalyzeServiceRequest",
            "line": 68,
            "methods": [],
            "decorators": [],
            "docstring": "Model for service analysis requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProviderInfo",
            "line": 72,
            "methods": [],
            "decorators": [],
            "docstring": "Model for provider information.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "chat",
            "line": 79,
            "method": "@post",
            "async": true
          },
          {
            "name": "chat_stream",
            "line": 120,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_message",
            "line": 175,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_service",
            "line": 199,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_providers",
            "line": 220,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 243,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "os",
            "alias": null,
            "line": 11
          },
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.responses.StreamingResponse",
            "from": "fastapi.responses",
            "name": "StreamingResponse",
            "alias": null,
            "line": 15
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 24
          },
          {
            "module": "hermes.core.llm_client.LLMClient",
            "from": "hermes.core.llm_client",
            "name": "LLMClient",
            "alias": null,
            "line": 25
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ChatMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 42,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ChatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 48,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ChatResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 56,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AnalyzeMessageRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 63,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "AnalyzeServiceRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 68,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProviderInfo",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 72,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "chat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "chat_stream",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "generate",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 142,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 175,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 199,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_providers",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 220,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/llm_endpoints.py",
            "line": 243,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 309,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the database client.\n\nArgs:\n    endpoint: Endpoint for database services (defaults to environment variable or localhost)\n    use_mcp: Whether to use the MCP protocol (True) or direct API calls (False)\n    component_id: Component identifier for client-specific operations",
            "args": [
              "self",
              "endpoint",
              "use_mcp",
              "component_id"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vector_store",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "Store vectors in the database.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vector_search",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Search for similar vectors.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vector_delete",
            "line": 85,
            "async": true,
            "decorators": [],
            "docstring": "Delete vectors from the database.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "kv_set",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Set a key-value pair.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kv_get",
            "line": 95,
            "async": true,
            "decorators": [],
            "docstring": "Get a value by key.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kv_delete",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Delete a key-value pair.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "graph_add_node",
            "line": 105,
            "async": true,
            "decorators": [],
            "docstring": "Add a node to the graph.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "graph_add_relationship",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": "Add a relationship between nodes.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "graph_query",
            "line": 113,
            "async": true,
            "decorators": [],
            "docstring": "Execute a graph query.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "document_insert",
            "line": 119,
            "async": true,
            "decorators": [],
            "docstring": "Insert a document.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "document_find",
            "line": 123,
            "async": true,
            "decorators": [],
            "docstring": "Find documents matching a query.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "document_update",
            "line": 127,
            "async": true,
            "decorators": [],
            "docstring": "Update documents matching a query.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "cache_set",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Set a value in the cache.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cache_get",
            "line": 137,
            "async": true,
            "decorators": [],
            "docstring": "Get a value from the cache.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sql_execute",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Execute an SQL query.",
            "args": [
              "self"
            ],
            "class": "DatabaseClient",
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "DatabaseClient",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with Hermes database services.\n\nThis class provides a unified interface for Tekton components to\naccess database services provided by Hermes.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.api.database.vector_client.VectorDatabaseClient",
            "from": "hermes.api.database.vector_client",
            "name": "VectorDatabaseClient",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.api.database.key_value_client.KeyValueDatabaseClient",
            "from": "hermes.api.database.key_value_client",
            "name": "KeyValueDatabaseClient",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.api.database.graph_client.GraphDatabaseClient",
            "from": "hermes.api.database.graph_client",
            "name": "GraphDatabaseClient",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.api.database.document_client.DocumentDatabaseClient",
            "from": "hermes.api.database.document_client",
            "name": "DocumentDatabaseClient",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.api.database.cache_client.CacheDatabaseClient",
            "from": "hermes.api.database.cache_client",
            "name": "CacheDatabaseClient",
            "alias": null,
            "line": 19
          },
          {
            "module": "hermes.api.database.relation_client.RelationalDatabaseClient",
            "from": "hermes.api.database.relation_client",
            "name": "RelationalDatabaseClient",
            "alias": null,
            "line": 20
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 21
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseClient.vector_store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.vector_search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.vector_delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseClient.kv_set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.kv_get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.kv_delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseClient.graph_add_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.graph_add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.graph_query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.document_insert",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseClient.document_find",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.document_update",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "DatabaseClient.cache_set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.cache_get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 137,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseClient.sql_execute",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_client.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 145,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "HermesMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 34,
            "async": true,
            "decorators": [],
            "docstring": "Start the bridge.",
            "args": [
              "self"
            ],
            "class": "HermesMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 39,
            "async": true,
            "decorators": [],
            "docstring": "Stop the bridge.",
            "args": [
              "self"
            ],
            "class": "HermesMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run",
            "line": 44,
            "async": true,
            "decorators": [],
            "docstring": "Main loop to handle stdio communication.",
            "args": [
              "self"
            ],
            "class": "HermesMCPBridge",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "handle_request",
            "line": 80,
            "async": true,
            "decorators": [],
            "docstring": "Handle a JSON-RPC request.",
            "args": [
              "self",
              "request"
            ],
            "class": "HermesMCPBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 129,
            "async": true,
            "decorators": [],
            "docstring": "Handle initialize request.",
            "args": [
              "self",
              "params"
            ],
            "class": "HermesMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tools",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "List available tools from Hermes.",
            "args": [
              "self"
            ],
            "class": "HermesMCPBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "call_tool",
            "line": 199,
            "async": true,
            "decorators": [],
            "docstring": "Call a tool through Hermes.",
            "args": [
              "self",
              "params"
            ],
            "class": "HermesMCPBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 245,
            "async": true,
            "decorators": [],
            "docstring": "Main entry point.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesMCPBridge",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between stdio MCP protocol and Hermes HTTP API.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "sys",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.start",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 34,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 39,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.run",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 44,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.handle_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.list_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "HermesMCPBridge.call_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 199,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_stdio_bridge.py",
            "line": 245,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 255,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes client.\n\nArgs:\n    component_id: Unique identifier for this component (auto-generated if None)\n    component_name: Human-readable name for this component (defaults to component_id)\n    component_type: Type of component (e.g., \"engram\", \"ergon\", \"athena\")\n    component_version: Component version\n    hermes_endpoint: Endpoint for Hermes services\n    capabilities: List of component capabilities",
            "args": [
              "self",
              "component_id",
              "component_name",
              "component_type",
              "component_version",
              "hermes_endpoint",
              "capabilities"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_connection",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Initialize connection to Hermes services.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 106,
            "async": true,
            "decorators": [],
            "docstring": "Register this component with the Tekton ecosystem.\n\nReturns:\n    True if registration successful",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister",
            "line": 127,
            "async": true,
            "decorators": [],
            "docstring": "Unregister this component from the Tekton ecosystem.\n\nReturns:\n    True if unregistration successful",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "publish_message",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Publish a message to a topic.\n\nArgs:\n    topic: Topic to publish to\n    message: Message to publish\n    headers: Optional message headers\n    \nReturns:\n    True if publication successful",
            "args": [
              "self",
              "topic",
              "message",
              "headers"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "subscribe_to_topic",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Subscribe to a topic.\n\nArgs:\n    topic: Topic to subscribe to\n    callback: Function to call when a message is received\n    \nReturns:\n    True if subscription successful",
            "args": [
              "self",
              "topic",
              "callback"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unsubscribe_from_topic",
            "line": 196,
            "async": false,
            "decorators": [],
            "docstring": "Unsubscribe from a topic.\n\nArgs:\n    topic: Topic to unsubscribe from\n    callback: Callback function to remove\n    \nReturns:\n    True if unsubscription successful",
            "args": [
              "self",
              "topic",
              "callback"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_database_client",
            "line": 214,
            "async": false,
            "decorators": [],
            "docstring": "Get a client for database services.\n\nArgs:\n    db_type: Type of database (e.g., \"vector\", \"graph\", \"key-value\")\n    namespace: Optional namespace for data isolation\n    use_mcp: Whether to use the MCP protocol\n    \nReturns:\n    Database client instance",
            "args": [
              "self",
              "db_type",
              "namespace",
              "use_mcp"
            ],
            "class": "HermesClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 267,
            "async": true,
            "decorators": [],
            "docstring": "Close the connection to Hermes services.\n\nThis method should be called when the component is shutting down\nto properly unregister and clean up resources.",
            "args": [
              "self"
            ],
            "class": "HermesClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesClient",
            "line": 27,
            "methods": [
              "__init__",
              "_initialize_connection",
              "publish_message",
              "subscribe_to_topic",
              "unsubscribe_from_topic",
              "get_database_client"
            ],
            "decorators": [],
            "docstring": "Client for interacting with Hermes services.\n\nThis class provides a simplified interface for Tekton components to\nregister with the Tekton ecosystem and access Hermes services.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 21
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 75
          },
          {
            "module": "hermes.core.registration.RegistrationClient",
            "from": "hermes.core.registration",
            "name": "RegistrationClient",
            "alias": null,
            "line": 76
          },
          {
            "module": "hermes.core.registration.RegistrationClientAPI",
            "from": "hermes.core.registration",
            "name": "RegistrationClientAPI",
            "alias": null,
            "line": 76
          },
          {
            "module": "hermes.api.database_client.DatabaseClient",
            "from": "hermes.api.database_client",
            "name": "DatabaseClient",
            "alias": null,
            "line": 234
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesClient.register",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 106,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.unregister",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesClient.publish_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesClient.subscribe_to_topic",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 178,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesClient.unsubscribe_from_topic",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesClient.get_database_client",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 214,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "HermesClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/client.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 279,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_mcp_service",
            "line": 107,
            "async": true,
            "decorators": [],
            "docstring": "Get the MCP service from request state.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 129,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Process an MCP message.\n\nThis endpoint processes a multimodal message according to the MCP protocol.",
            "args": [
              "message",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool",
            "line": 161,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a tool with the MCP service.\n\nThis endpoint allows registration of tools that can be used via MCP.",
            "args": [
              "tool_spec",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_tool",
            "line": 183,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Unregister a tool from the MCP service.\n\nThis endpoint allows tools to be removed from the registry.",
            "args": [
              "tool_id",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "execute_tool",
            "line": 201,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a tool.\n\nThis endpoint executes a registered tool with the provided parameters.",
            "args": [
              "tool_id",
              "execution",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tools",
            "line": 225,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all registered tools.\n\nThis endpoint returns a list of all tools registered with the MCP service.",
            "args": [
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tool",
            "line": 258,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get tool information.\n\nThis endpoint retrieves information about a specific tool.",
            "args": [
              "tool_id",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_processor",
            "line": 276,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a processor with the MCP service.\n\nThis endpoint allows registration of processors that can handle MCP messages.",
            "args": [
              "processor_spec",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_processor",
            "line": 298,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get processor information.\n\nThis endpoint retrieves information about a specific processor.",
            "args": [
              "processor_id",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 316,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new context.\n\nThis endpoint creates a new context for multimodal processing.",
            "args": [
              "context_request",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_context",
            "line": 338,
            "async": true,
            "decorators": [
              "@patch"
            ],
            "docstring": "Update a context.\n\nThis endpoint updates an existing context with new information.",
            "args": [
              "context_id",
              "update_request",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 362,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a context.\n\nThis endpoint retrieves information about a specific context.",
            "args": [
              "context_id",
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 380,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get MCP capabilities.\n\nThis endpoint returns information about the capabilities of the MCP service.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 405,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint for the MCP service.\n\nThis endpoint checks if the MCP service is healthy and returns\ninformation about its current state.",
            "args": [
              "mcp_service"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ContentItem",
            "line": 29,
            "methods": [],
            "decorators": [],
            "docstring": "Model for MCP content items.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPMessage",
            "line": 37,
            "methods": [],
            "decorators": [],
            "docstring": "Model for MCP messages.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ToolSpec",
            "line": 49,
            "methods": [],
            "decorators": [],
            "docstring": "Model for tool specifications.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ToolRegistrationResponse",
            "line": 61,
            "methods": [],
            "decorators": [],
            "docstring": "Model for tool registration responses.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ToolExecutionRequest",
            "line": 68,
            "methods": [],
            "decorators": [],
            "docstring": "Model for tool execution requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProcessorSpec",
            "line": 74,
            "methods": [],
            "decorators": [],
            "docstring": "Model for processor specifications.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ProcessorRegistrationResponse",
            "line": 85,
            "methods": [],
            "decorators": [],
            "docstring": "Model for processor registration responses.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextCreationRequest",
            "line": 92,
            "methods": [],
            "decorators": [],
            "docstring": "Model for context creation requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ContextUpdateRequest",
            "line": 99,
            "methods": [],
            "decorators": [],
            "docstring": "Model for context update requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "process_message",
            "line": 129,
            "method": "@post",
            "async": true
          },
          {
            "name": "register_tool",
            "line": 161,
            "method": "@post",
            "async": true
          },
          {
            "name": "unregister_tool",
            "line": 183,
            "method": "@delete",
            "async": true
          },
          {
            "name": "execute_tool",
            "line": 201,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_tools",
            "line": 225,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_tool",
            "line": 258,
            "method": "@get",
            "async": true
          },
          {
            "name": "register_processor",
            "line": 276,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_processor",
            "line": 298,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_context",
            "line": 316,
            "method": "@post",
            "async": true
          },
          {
            "name": "update_context",
            "line": 338,
            "method": "@patch",
            "async": true
          },
          {
            "name": "get_context",
            "line": 362,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_capabilities",
            "line": 380,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 405,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.models.MCPTool",
            "from": "tekton.models",
            "name": "MCPTool",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.models.MCPToolCall",
            "from": "tekton.models",
            "name": "MCPToolCall",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton.models.MCPToolResponse",
            "from": "tekton.models",
            "name": "MCPToolResponse",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ContentItem",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPMessage",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ToolSpec",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 49,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ToolRegistrationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 61,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ToolExecutionRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 68,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProcessorSpec",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 74,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ProcessorRegistrationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 85,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ContextCreationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 92,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ContextUpdateRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 99,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_mcp_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "process_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 129,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 161,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "unregister_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 183,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "execute_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 201,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 225,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 258,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_processor",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 276,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_processor",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 298,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 316,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 338,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 362,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 380,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_endpoints.py",
            "line": 405,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 429,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 37,
            "async": true,
            "decorators": [],
            "docstring": "Start the bridge.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 42,
            "async": true,
            "decorators": [],
            "docstring": "Stop the bridge.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run",
            "line": 47,
            "async": true,
            "decorators": [],
            "docstring": "Main loop to handle stdio communication.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "handle_request",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "Handle a JSON-RPC request.",
            "args": [
              "self",
              "request"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 125,
            "async": true,
            "decorators": [],
            "docstring": "Handle initialize request with enhanced capabilities.",
            "args": [
              "self",
              "params"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tools",
            "line": 149,
            "async": true,
            "decorators": [],
            "docstring": "List available tools with auto-approval metadata.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "list_prompts",
            "line": 214,
            "async": true,
            "decorators": [],
            "docstring": "List available prompts including onboarding.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_prompt",
            "line": 236,
            "async": true,
            "decorators": [],
            "docstring": "Get a specific prompt.",
            "args": [
              "self",
              "params"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_onboarding_prompt",
            "line": 262,
            "async": true,
            "decorators": [],
            "docstring": "Generate the onboarding prompt.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_component_roles_prompt",
            "line": 281,
            "async": true,
            "decorators": [],
            "docstring": "Generate component roles description.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_memory_guide_prompt",
            "line": 305,
            "async": true,
            "decorators": [],
            "docstring": "Generate memory usage guide.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_collaboration_guide_prompt",
            "line": 341,
            "async": true,
            "decorators": [],
            "docstring": "Generate collaboration guide.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "onboard_ai",
            "line": 377,
            "async": true,
            "decorators": [],
            "docstring": "Automatic onboarding process for new AI.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_store_onboarding_memory",
            "line": 389,
            "async": true,
            "decorators": [],
            "docstring": "Store the initial onboarding memory in Engram.",
            "args": [
              "self"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_extract_component",
            "line": 410,
            "async": false,
            "decorators": [],
            "docstring": "Extract component name from tool name.",
            "args": [
              "self",
              "tool_name"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_categorize_tool",
            "line": 416,
            "async": false,
            "decorators": [],
            "docstring": "Categorize tool by function.",
            "args": [
              "self",
              "tool"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "call_tool",
            "line": 434,
            "async": true,
            "decorators": [],
            "docstring": "Call a tool with automatic approval.",
            "args": [
              "self",
              "params"
            ],
            "class": "AutoApprovedHermesBridge",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 483,
            "async": true,
            "decorators": [],
            "docstring": "Main entry point.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AutoApprovedHermesBridge",
            "line": 28,
            "methods": [
              "__init__",
              "_extract_component",
              "_categorize_tool"
            ],
            "decorators": [],
            "docstring": "Enhanced MCP Bridge with automatic approval and AI onboarding.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "sys",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AutoApprovedHermesBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.start",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 42,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.run",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.handle_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.list_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.list_prompts",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 214,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.get_prompt",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 236,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.onboard_ai",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 377,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AutoApprovedHermesBridge.call_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 434,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/mcp_auto_approve.py",
            "line": 483,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 493,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_event",
            "line": 55,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize services on startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 79,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Clean up resources on shutdown.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 88,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 97,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 105,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the MCP capability manifest.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invoke_capability",
            "line": 113,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Invoke an MCP capability.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "parse_arguments",
            "line": 128,
            "async": false,
            "decorators": [],
            "docstring": "Parse command line arguments.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 141,
            "async": false,
            "decorators": [],
            "docstring": "Main entry point for the CLI command.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 88,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 97,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_manifest",
            "line": 105,
            "method": "@get",
            "async": true
          },
          {
            "name": "invoke_capability",
            "line": 113,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "argparse",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "sys",
            "alias": null,
            "line": 14
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 18
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 19
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 20
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 21
          },
          {
            "module": "hermes.core.database.manager.DatabaseManager",
            "from": "hermes.core.database.manager",
            "name": "DatabaseManager",
            "alias": null,
            "line": 31
          },
          {
            "module": "hermes.core.database.mcp_adapter.DatabaseMCPAdapter",
            "from": "hermes.core.database.mcp_adapter",
            "name": "DatabaseMCPAdapter",
            "alias": null,
            "line": 32
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 55,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 105,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "invoke_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "parse_arguments",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 128,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database_mcp_server.py",
            "line": 141,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 160,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 52,
            "async": true,
            "decorators": [],
            "docstring": "Component startup callback.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 99,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 111,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 149,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint that redirects to the API documentation.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 155,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run_server",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Run the Hermes API server (for backward compatibility).",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "ready",
            "line": 99,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 111,
            "method": "@get",
            "async": true
          },
          {
            "name": "root",
            "line": 149,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 155,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 22
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 23
          },
          {
            "module": "shared.api.documentation.get_openapi_configuration",
            "from": "shared.api.documentation",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.api.endpoints.create_ready_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.api.endpoints.create_discovery_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.api.endpoints.EndpointInfo",
            "from": "shared.api.endpoints",
            "name": "EndpointInfo",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.api.routers.create_standard_routers",
            "from": "shared.api.routers",
            "name": "create_standard_routers",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.api.routers.mount_standard_routers",
            "from": "shared.api.routers",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 28
          },
          {
            "module": "hermes.core.hermes_component.HermesComponent",
            "from": "hermes.core.hermes_component",
            "name": "HermesComponent",
            "alias": null,
            "line": 30
          },
          {
            "module": "hermes.api.endpoints.app",
            "from": "hermes.api.endpoints",
            "name": "app",
            "alias": "api_app",
            "line": 44
          },
          {
            "module": "hermes.api.database.api_router",
            "from": "hermes.api.database",
            "name": "api_router",
            "alias": "database_router",
            "line": 45
          },
          {
            "module": "hermes.api.llm_endpoints.llm_router",
            "from": "hermes.api.llm_endpoints",
            "name": "llm_router",
            "alias": null,
            "line": 46
          },
          {
            "module": "hermes.api.a2a_endpoints.a2a_router",
            "from": "hermes.api.a2a_endpoints",
            "name": "a2a_router",
            "alias": null,
            "line": 47
          },
          {
            "module": "hermes.api.mcp_endpoints.mcp_router",
            "from": "hermes.api.mcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 48
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 180
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 196
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
            "line": 149,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
            "line": 155,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "run_server",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/app.py",
            "line": 178,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 206,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_a2a_service",
            "line": 66,
            "async": true,
            "decorators": [],
            "docstring": "Get A2A service from request state",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_a2a_components",
            "line": 74,
            "async": true,
            "decorators": [],
            "docstring": "Get A2A components from the A2A service",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_jsonrpc",
            "line": 92,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Main JSON-RPC 2.0 endpoint for A2A communication.\n\nHandles single requests and batch requests according to JSON-RPC 2.0 spec.",
            "args": [
              "request",
              "components"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_get_hermes_port",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Get Hermes port from configuration.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_agent_card",
            "line": 186,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Return Hermes's agent card at the well-known URI.\n\nThis endpoint provides information about Hermes's A2A capabilities.",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "legacy_register_agent",
            "line": 248,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Legacy agent registration endpoint for backwards compatibility.\n\nForwards to the JSON-RPC method internally.",
            "args": [
              "request",
              "agent_data",
              "components"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "legacy_list_agents",
            "line": 281,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Legacy agent listing endpoint for backwards compatibility.\n\nForwards to the JSON-RPC method internally.",
            "args": [
              "request",
              "components"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stream_events",
            "line": 320,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Server-Sent Events endpoint for real-time event streaming.\n\nQuery parameters:\n- task_id: Filter events for a specific task\n- agent_id: Filter events for a specific agent\n- channel: Filter events for a specific channel\n- event_types: Comma-separated list of event types to filter",
            "args": [
              "request",
              "task_id",
              "agent_id",
              "channel",
              "event_types"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_subscription",
            "line": 356,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a subscription for events.\n\nExample request body:\n{\n    \"subscriber_id\": \"agent-123\",\n    \"subscription_type\": \"task\",\n    \"target\": \"task-456\",\n    \"event_types\": [\"task.state_changed\", \"task.progress\"]\n}",
            "args": [
              "request",
              "subscription_data"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "remove_subscription",
            "line": 417,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Remove a subscription",
            "args": [
              "request",
              "subscription_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_subscriber_subscriptions",
            "line": 433,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all subscriptions for a subscriber",
            "args": [
              "request",
              "subscriber_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_active_connections",
            "line": 450,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about active SSE connections",
            "args": [
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 464,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for bidirectional A2A streaming\n\nQuery parameters:\n- agent_id: Filter events for specific agent\n- task_id: Filter events for specific task\n- event_types: Comma-separated list of event types to receive\n- channel: Subscribe to specific channel (for pub/sub)\n\nThe WebSocket accepts JSON-RPC 2.0 messages and supports:\n- Bidirectional JSON-RPC requests/responses\n- Event streaming via notifications\n- Channel-based pub/sub messaging",
            "args": [
              "websocket",
              "agent_id",
              "task_id",
              "event_types",
              "channel"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 500,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "app"
            ],
            "class": "MockRequest",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_request",
            "line": 508,
            "async": true,
            "decorators": [],
            "docstring": "Handle incoming JSON-RPC requests",
            "args": [
              "connection",
              "request"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "on_notification",
            "line": 527,
            "async": true,
            "decorators": [],
            "docstring": "Handle incoming JSON-RPC notifications",
            "args": [
              "connection",
              "notification"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "JSONRPCRequestModel",
            "line": 50,
            "methods": [],
            "decorators": [],
            "docstring": "JSON-RPC 2.0 Request model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "JSONRPCResponseModel",
            "line": 58,
            "methods": [],
            "decorators": [],
            "docstring": "JSON-RPC 2.0 Response model",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MockRequest",
            "line": 499,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "handle_jsonrpc",
            "line": 92,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_agent_card",
            "line": 186,
            "method": "@get",
            "async": true
          },
          {
            "name": "legacy_register_agent",
            "line": 248,
            "method": "@post",
            "async": true
          },
          {
            "name": "legacy_list_agents",
            "line": 281,
            "method": "@get",
            "async": true
          },
          {
            "name": "stream_events",
            "line": 320,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_subscription",
            "line": 356,
            "method": "@post",
            "async": true
          },
          {
            "name": "remove_subscription",
            "line": 417,
            "method": "@delete",
            "async": true
          },
          {
            "name": "get_subscriber_subscriptions",
            "line": 433,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_active_connections",
            "line": 450,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 464,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 15
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.responses.StreamingResponse",
            "from": "fastapi.responses",
            "name": "StreamingResponse",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.a2a.JSONRPCRequest",
            "from": "tekton.a2a",
            "name": "JSONRPCRequest",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.JSONRPCResponse",
            "from": "tekton.a2a",
            "name": "JSONRPCResponse",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.JSONRPCBatch",
            "from": "tekton.a2a",
            "name": "JSONRPCBatch",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.parse_jsonrpc_message",
            "from": "tekton.a2a",
            "name": "parse_jsonrpc_message",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.create_error_response",
            "from": "tekton.a2a",
            "name": "create_error_response",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.AgentCard",
            "from": "tekton.a2a",
            "name": "AgentCard",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.AgentRegistry",
            "from": "tekton.a2a",
            "name": "AgentRegistry",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.AgentStatus",
            "from": "tekton.a2a",
            "name": "AgentStatus",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.TaskManager",
            "from": "tekton.a2a",
            "name": "TaskManager",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.TaskState",
            "from": "tekton.a2a",
            "name": "TaskState",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.DiscoveryService",
            "from": "tekton.a2a",
            "name": "DiscoveryService",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.MethodDispatcher",
            "from": "tekton.a2a",
            "name": "MethodDispatcher",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.create_standard_dispatcher",
            "from": "tekton.a2a",
            "name": "create_standard_dispatcher",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.ParseError",
            "from": "tekton.a2a",
            "name": "ParseError",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.InvalidRequestError",
            "from": "tekton.a2a",
            "name": "InvalidRequestError",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.create_sse_response",
            "from": "tekton.a2a",
            "name": "create_sse_response",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.SSEManager",
            "from": "tekton.a2a",
            "name": "SSEManager",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.Subscription",
            "from": "tekton.a2a",
            "name": "Subscription",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.SubscriptionManager",
            "from": "tekton.a2a",
            "name": "SubscriptionManager",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.websocket_manager",
            "from": "tekton.a2a",
            "name": "websocket_manager",
            "alias": null,
            "line": 27
          },
          {
            "module": "tekton.a2a.handle_websocket",
            "from": "tekton.a2a",
            "name": "handle_websocket",
            "alias": null,
            "line": 27
          },
          {
            "module": "os",
            "alias": null,
            "line": 313
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "JSONRPCRequestModel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 50,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "JSONRPCResponseModel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 58,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_a2a_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 66,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_a2a_components",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 74,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_jsonrpc",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 92,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_agent_card",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "legacy_register_agent",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 248,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "legacy_list_agents",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 281,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "stream_events",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 320,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_subscription",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 356,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "remove_subscription",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 417,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "get_subscriber_subscriptions",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 433,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_active_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 450,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 464,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "MockRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 499,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "on_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 508,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "on_notification",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/a2a_endpoints.py",
            "line": 527,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 540,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_registration_manager",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Get the shared registration manager instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component",
            "line": 118,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a component with the Tekton ecosystem.\n\nThis endpoint allows components to register their presence,\ncapabilities, and connection information.",
            "args": [
              "registration",
              "manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_heartbeat",
            "line": 158,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Send a heartbeat to indicate a component is still active.\n\nThis endpoint allows components to maintain their active status\nand update their health information.",
            "args": [
              "heartbeat",
              "x_authentication_token",
              "manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_component",
            "line": 186,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Unregister a component from the Tekton ecosystem.\n\nThis endpoint allows components to cleanly remove themselves\nfrom the registry when shutting down.",
            "args": [
              "component_id",
              "x_authentication_token",
              "manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_services",
            "line": 209,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Query available services based on criteria.\n\nThis endpoint allows components to discover other components\nbased on capabilities, type, and health status.",
            "args": [
              "query",
              "manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list_components",
            "line": 267,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all registered components.\n\nQuery parameters:\n- capability: Filter by capability (optional)\n- component_type: Filter by component type (optional)\n- healthy_only: Only show healthy components (default: false)\n\nReturns a list of all registered components with their current status.",
            "args": [
              "registration_manager",
              "capability",
              "component_type",
              "healthy_only"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_component_by_name",
            "line": 326,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about a specific component by name.\n\nReturns detailed information about the component if it exists.",
            "args": [
              "component_name",
              "registration_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 357,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check the health of the registration service.\n\nThis endpoint allows monitoring systems to verify that\nthe registration service is operating correctly.",
            "args": [
              "manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup_event",
            "line": 384,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize services on startup.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 393,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Clean up on shutdown.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComponentRegistrationRequest",
            "line": 65,
            "methods": [],
            "decorators": [],
            "docstring": "Model for component registration requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentRegistrationResponse",
            "line": 77,
            "methods": [],
            "decorators": [],
            "docstring": "Model for component registration responses.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HeartbeatRequest",
            "line": 84,
            "methods": [],
            "decorators": [],
            "docstring": "Model for heartbeat requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HeartbeatResponse",
            "line": 89,
            "methods": [],
            "decorators": [],
            "docstring": "Model for heartbeat responses.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ServiceQueryRequest",
            "line": 95,
            "methods": [],
            "decorators": [],
            "docstring": "Model for service query requests.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ServiceResponse",
            "line": 101,
            "methods": [],
            "decorators": [],
            "docstring": "Model for service information.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "register_component",
            "line": 118,
            "method": "@post",
            "async": true
          },
          {
            "name": "send_heartbeat",
            "line": 158,
            "method": "@post",
            "async": true
          },
          {
            "name": "unregister_component",
            "line": 186,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_services",
            "line": 209,
            "method": "@post",
            "async": true
          },
          {
            "name": "list_components",
            "line": 267,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_component_by_name",
            "line": 326,
            "method": "@get",
            "async": true
          },
          {
            "name": "health_check",
            "line": 357,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Header",
            "from": "fastapi",
            "name": "Header",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 14
          },
          {
            "module": "pydantic.ConfigDict",
            "from": "pydantic",
            "name": "ConfigDict",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.models.RegistrationRequest",
            "from": "tekton.models",
            "name": "RegistrationRequest",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.models.RegistrationResponse",
            "from": "tekton.models",
            "name": "RegistrationResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.models.HeartbeatRequest",
            "from": "tekton.models",
            "name": "HeartbeatRequest",
            "alias": "BaseHeartbeatRequest",
            "line": 17
          },
          {
            "module": "tekton.models.HeartbeatResponse",
            "from": "tekton.models",
            "name": "HeartbeatResponse",
            "alias": "BaseHeartbeatResponse",
            "line": 17
          },
          {
            "module": "tekton.models.HealthCheckResponse",
            "from": "tekton.models",
            "name": "HealthCheckResponse",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.models.create_health_response",
            "from": "tekton.models",
            "name": "create_health_response",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.registration.RegistrationManager",
            "from": "hermes.core.registration",
            "name": "RegistrationManager",
            "alias": null,
            "line": 27
          },
          {
            "module": "hermes.core.registration.generate_component_id",
            "from": "hermes.core.registration",
            "name": "generate_component_id",
            "alias": null,
            "line": 27
          },
          {
            "module": "hermes.core.registration.format_component_info",
            "from": "hermes.core.registration",
            "name": "format_component_info",
            "alias": null,
            "line": 27
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 32
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 33
          },
          {
            "module": "hermes.api.singleton_fix.get_shared_registration_manager",
            "from": "hermes.api.singleton_fix",
            "name": "get_shared_registration_manager",
            "alias": null,
            "line": 34
          },
          {
            "module": "hermes.api.mcp_endpoints.mcp_router",
            "from": "hermes.api.mcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 40
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_registration_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ComponentRegistrationRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 65,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComponentRegistrationResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 77,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "HeartbeatRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 84,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "HeartbeatResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 89,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ServiceQueryRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 95,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ServiceResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 101,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 118,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "send_heartbeat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 158,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "unregister_component",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_services",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 209,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_components",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_component_by_name",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 326,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 357,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 384,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/endpoints.py",
            "line": 393,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 400,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/singleton_fix.py",
      "analysis": {
        "functions": [
          {
            "name": "get_shared_registration_manager",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Get or create the shared registration manager singleton.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_shared_service_registry",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Get the shared service registry.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_shared_message_bus",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Get the shared message bus.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 10
          },
          {
            "module": "hermes.core.registration.RegistrationManager",
            "from": "hermes.core.registration",
            "name": "RegistrationManager",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_shared_registration_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/singleton_fix.py",
            "line": 18,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_shared_service_registry",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/singleton_fix.py",
            "line": 40,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_shared_message_bus",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/singleton_fix.py",
            "line": 46,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 50,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
      "analysis": {
        "functions": [
          {
            "name": "handle_vector_request",
            "line": 18,
            "async": true,
            "decorators": [],
            "docstring": "Handle vector database requests.\n\nArgs:\n    database_manager: Database manager instance\n    capability: Capability name\n    parameters: Request parameters\n    \nReturns:\n    Response dictionary",
            "args": [
              "database_manager",
              "capability",
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "handle_key_value_request",
            "line": 91,
            "async": true,
            "decorators": [],
            "docstring": "Handle key-value database requests.\n\nArgs:\n    database_manager: Database manager instance\n    capability: Capability name\n    parameters: Request parameters\n    \nReturns:\n    Response dictionary",
            "args": [
              "database_manager",
              "capability",
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "handle_graph_request",
            "line": 160,
            "async": true,
            "decorators": [],
            "docstring": "Handle graph database requests.\n\nArgs:\n    database_manager: Database manager instance\n    capability: Capability name\n    parameters: Request parameters\n    \nReturns:\n    Response dictionary",
            "args": [
              "database_manager",
              "capability",
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "handle_document_request",
            "line": 243,
            "async": true,
            "decorators": [],
            "docstring": "Handle document database requests.\n\nArgs:\n    database_manager: Database manager instance\n    capability: Capability name\n    parameters: Request parameters\n    \nReturns:\n    Response dictionary",
            "args": [
              "database_manager",
              "capability",
              "parameters"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "handle_cache_request",
            "line": 324,
            "async": true,
            "decorators": [],
            "docstring": "Handle cache database requests.\n\nArgs:\n    database_manager: Database manager instance\n    capability: Capability name\n    parameters: Request parameters\n    \nReturns:\n    Response dictionary",
            "args": [
              "database_manager",
              "capability",
              "parameters"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_relational_request",
            "line": 383,
            "async": true,
            "decorators": [],
            "docstring": "Handle relational database requests.\n\nArgs:\n    database_manager: Database manager instance\n    capability: Capability name\n    parameters: Request parameters\n    \nReturns:\n    Response dictionary",
            "args": [
              "database_manager",
              "capability",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.manager.DatabaseManager",
            "from": "hermes.core.database.manager",
            "name": "DatabaseManager",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "handle_vector_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
            "line": 18,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "handle_key_value_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "handle_graph_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
            "line": 160,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "handle_document_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
            "line": 243,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "handle_cache_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
            "line": 324,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "handle_relational_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_handlers.py",
            "line": 383,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 425,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 45,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the MCP Adapter.\n\nArgs:\n    database_manager: The database manager instance to use",
            "args": [
              "self",
              "database_manager"
            ],
            "class": "DatabaseMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_manifest",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Get the MCP capability manifest.\n\nReturns:\n    A dictionary containing the MCP manifest",
            "args": [
              "self"
            ],
            "class": "DatabaseMCPAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_request",
            "line": 70,
            "async": true,
            "decorators": [],
            "docstring": "Handle an MCP request.\n\nArgs:\n    request: The MCP request dictionary\n    \nReturns:\n    The response dictionary",
            "args": [
              "self",
              "request"
            ],
            "class": "DatabaseMCPAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DatabaseMCPAdapter",
            "line": 36,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Multi-Capability Provider (MCP) adapter for Hermes Database Services.\n\nThis class provides an adapter that implements the MCP protocol\nfor Hermes database services, allowing them to be used within\nan MCP ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "os",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.manager.DatabaseManager",
            "from": "hermes.core.database.manager",
            "name": "DatabaseManager",
            "alias": null,
            "line": 23
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 24
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 24
          },
          {
            "module": "hermes.core.database.mcp_capabilities.generate_capabilities",
            "from": "hermes.core.database.mcp_capabilities",
            "name": "generate_capabilities",
            "alias": null,
            "line": 25
          },
          {
            "module": "hermes.core.database.mcp_handlers.handle_vector_request",
            "from": "hermes.core.database.mcp_handlers",
            "name": "handle_vector_request",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.database.mcp_handlers.handle_key_value_request",
            "from": "hermes.core.database.mcp_handlers",
            "name": "handle_key_value_request",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.database.mcp_handlers.handle_graph_request",
            "from": "hermes.core.database.mcp_handlers",
            "name": "handle_graph_request",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.database.mcp_handlers.handle_document_request",
            "from": "hermes.core.database.mcp_handlers",
            "name": "handle_document_request",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.database.mcp_handlers.handle_cache_request",
            "from": "hermes.core.database.mcp_handlers",
            "name": "handle_cache_request",
            "alias": null,
            "line": 26
          },
          {
            "module": "hermes.core.database.mcp_handlers.handle_relational_request",
            "from": "hermes.core.database.mcp_handlers",
            "name": "handle_relational_request",
            "alias": null,
            "line": 26
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DatabaseMCPAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_adapter.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseMCPAdapter.get_manifest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_adapter.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseMCPAdapter.handle_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_adapter.py",
            "line": 70,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 122,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/factory.py",
      "analysis": {
        "functions": [
          {
            "name": "create_adapter",
            "line": 36,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a database adapter.\n\nArgs:\n    db_type: Type of database\n    backend: Optional specific backend (auto-detected if not provided)\n    namespace: Namespace for data isolation\n    config: Optional configuration parameters\n    \nReturns:\n    Database adapter instance",
            "args": [
              "db_type",
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_detect_optimal_backend",
            "line": 79,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Detect the optimal backend for a database type based on hardware.\n\nArgs:\n    db_type: Database type\n    \nReturns:\n    Optimal backend for the current hardware",
            "args": [
              "db_type"
            ],
            "class": "DatabaseFactory",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_create_vector_adapter",
            "line": 150,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a vector database adapter.",
            "args": [
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_graph_adapter",
            "line": 174,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a graph database adapter.",
            "args": [
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_key_value_adapter",
            "line": 192,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a key-value database adapter.",
            "args": [
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_create_document_adapter",
            "line": 213,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a document database adapter.",
            "args": [
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_cache_adapter",
            "line": 231,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a cache database adapter.",
            "args": [
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_relational_adapter",
            "line": 249,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create a relational database adapter.",
            "args": [
              "backend",
              "namespace",
              "config"
            ],
            "class": "DatabaseFactory",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DatabaseFactory",
            "line": 27,
            "methods": [
              "create_adapter",
              "_detect_optimal_backend",
              "_create_vector_adapter",
              "_create_graph_adapter",
              "_create_key_value_adapter",
              "_create_document_adapter",
              "_create_cache_adapter",
              "_create_relational_adapter"
            ],
            "decorators": [],
            "docstring": "Factory for creating database adapters.\n\nThis class provides methods for creating database adapters based on\nthe database type and backend, with hardware-specific optimization.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "platform",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database.adapters.DatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.adapters.VectorDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "VectorDatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.adapters.GraphDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "GraphDatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.adapters.KeyValueDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "KeyValueDatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.adapters.DocumentDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "DocumentDatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.adapters.CacheDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "CacheDatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.adapters.RelationalDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "RelationalDatabaseAdapter",
            "alias": null,
            "line": 13
          },
          {
            "module": "torch",
            "alias": null,
            "line": 97
          },
          {
            "module": "neo4j",
            "alias": null,
            "line": 111
          },
          {
            "module": "redis",
            "alias": null,
            "line": 121
          },
          {
            "module": "pymongo",
            "alias": null,
            "line": 131
          },
          {
            "module": "hermes.adapters.vector.faiss_adapter.FAISSVectorAdapter",
            "from": "hermes.adapters.vector.faiss_adapter",
            "name": "FAISSVectorAdapter",
            "alias": null,
            "line": 156
          },
          {
            "module": "hermes.adapters.vector.qdrant_adapter.QdrantVectorAdapter",
            "from": "hermes.adapters.vector.qdrant_adapter",
            "name": "QdrantVectorAdapter",
            "alias": null,
            "line": 159
          },
          {
            "module": "hermes.adapters.vector.chromadb_adapter.ChromaDBVectorAdapter",
            "from": "hermes.adapters.vector.chromadb_adapter",
            "name": "ChromaDBVectorAdapter",
            "alias": null,
            "line": 162
          },
          {
            "module": "hermes.adapters.vector.lancedb_adapter.LanceDBVectorAdapter",
            "from": "hermes.adapters.vector.lancedb_adapter",
            "name": "LanceDBVectorAdapter",
            "alias": null,
            "line": 165
          },
          {
            "module": "hermes.adapters.vector.fallback_adapter.FallbackVectorAdapter",
            "from": "hermes.adapters.vector.fallback_adapter",
            "name": "FallbackVectorAdapter",
            "alias": null,
            "line": 169
          },
          {
            "module": "hermes.adapters.graph.neo4j_adapter.Neo4jGraphAdapter",
            "from": "hermes.adapters.graph.neo4j_adapter",
            "name": "Neo4jGraphAdapter",
            "alias": null,
            "line": 180
          },
          {
            "module": "hermes.adapters.graph.networkx_adapter.NetworkXGraphAdapter",
            "from": "hermes.adapters.graph.networkx_adapter",
            "name": "NetworkXGraphAdapter",
            "alias": null,
            "line": 183
          },
          {
            "module": "hermes.adapters.graph.fallback_adapter.FallbackGraphAdapter",
            "from": "hermes.adapters.graph.fallback_adapter",
            "name": "FallbackGraphAdapter",
            "alias": null,
            "line": 187
          },
          {
            "module": "hermes.adapters.key_value.redis_adapter.RedisKeyValueAdapter",
            "from": "hermes.adapters.key_value.redis_adapter",
            "name": "RedisKeyValueAdapter",
            "alias": null,
            "line": 198
          },
          {
            "module": "hermes.adapters.key_value.leveldb_adapter.LevelDBKeyValueAdapter",
            "from": "hermes.adapters.key_value.leveldb_adapter",
            "name": "LevelDBKeyValueAdapter",
            "alias": null,
            "line": 201
          },
          {
            "module": "hermes.adapters.key_value.rocksdb_adapter.RocksDBKeyValueAdapter",
            "from": "hermes.adapters.key_value.rocksdb_adapter",
            "name": "RocksDBKeyValueAdapter",
            "alias": null,
            "line": 204
          },
          {
            "module": "hermes.adapters.key_value.fallback_adapter.FallbackKeyValueAdapter",
            "from": "hermes.adapters.key_value.fallback_adapter",
            "name": "FallbackKeyValueAdapter",
            "alias": null,
            "line": 208
          },
          {
            "module": "hermes.adapters.document.mongodb_adapter.MongoDBDocumentAdapter",
            "from": "hermes.adapters.document.mongodb_adapter",
            "name": "MongoDBDocumentAdapter",
            "alias": null,
            "line": 219
          },
          {
            "module": "hermes.adapters.document.jsondb_adapter.JSONDBDocumentAdapter",
            "from": "hermes.adapters.document.jsondb_adapter",
            "name": "JSONDBDocumentAdapter",
            "alias": null,
            "line": 222
          },
          {
            "module": "hermes.adapters.document.fallback_adapter.FallbackDocumentAdapter",
            "from": "hermes.adapters.document.fallback_adapter",
            "name": "FallbackDocumentAdapter",
            "alias": null,
            "line": 226
          },
          {
            "module": "hermes.adapters.cache.memory_adapter.MemoryCacheAdapter",
            "from": "hermes.adapters.cache.memory_adapter",
            "name": "MemoryCacheAdapter",
            "alias": null,
            "line": 237
          },
          {
            "module": "hermes.adapters.cache.memcached_adapter.MemcachedCacheAdapter",
            "from": "hermes.adapters.cache.memcached_adapter",
            "name": "MemcachedCacheAdapter",
            "alias": null,
            "line": 240
          },
          {
            "module": "hermes.adapters.cache.fallback_adapter.FallbackCacheAdapter",
            "from": "hermes.adapters.cache.fallback_adapter",
            "name": "FallbackCacheAdapter",
            "alias": null,
            "line": 244
          },
          {
            "module": "hermes.adapters.relation.sqlite_adapter.SQLiteRelationalAdapter",
            "from": "hermes.adapters.relation.sqlite_adapter",
            "name": "SQLiteRelationalAdapter",
            "alias": null,
            "line": 255
          },
          {
            "module": "hermes.adapters.relation.postgres_adapter.PostgresRelationalAdapter",
            "from": "hermes.adapters.relation.postgres_adapter",
            "name": "PostgresRelationalAdapter",
            "alias": null,
            "line": 258
          },
          {
            "module": "hermes.adapters.relation.fallback_adapter.FallbackRelationalAdapter",
            "from": "hermes.adapters.relation.fallback_adapter",
            "name": "FallbackRelationalAdapter",
            "alias": null,
            "line": 262
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DatabaseFactory",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/factory.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseFactory.create_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/factory.py",
            "line": 36,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DatabaseFactory._detect_optimal_backend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/factory.py",
            "line": 79,
            "priority": "medium",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 264,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "generate_capabilities",
            "line": 11,
            "async": false,
            "decorators": [],
            "docstring": "Generate the capability manifest for Hermes database services.\n\nReturns:\n    A dictionary describing available capabilities",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "generate_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/mcp_capabilities.py",
            "line": 11,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 185,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/database_types.py",
      "analysis": {
        "functions": [
          {
            "name": "from_string",
            "line": 24,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert string to DatabaseType.",
            "args": [
              "cls",
              "type_str"
            ],
            "class": "DatabaseType",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_string",
            "line": 63,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert string to DatabaseBackend.",
            "args": [
              "cls",
              "backend_str"
            ],
            "class": "DatabaseBackend",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "for_type",
            "line": 71,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get available backends for a database type.",
            "args": [
              "cls",
              "db_type"
            ],
            "class": "DatabaseBackend",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DatabaseType",
            "line": 13,
            "methods": [
              "from_string"
            ],
            "decorators": [],
            "docstring": "Types of databases supported by the Database Manager.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DatabaseBackend",
            "line": 32,
            "methods": [
              "from_string",
              "for_type"
            ],
            "decorators": [],
            "docstring": "Specific database backends supported for each type.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DatabaseType",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/database_types.py",
            "line": 13,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseType.from_string",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/database_types.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "DatabaseBackend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/database_types.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseBackend.from_string",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/database_types.py",
            "line": 63,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DatabaseBackend.for_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/database_types.py",
            "line": 71,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 86,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the database manager.\n\nArgs:\n    base_path: Base path for database storage (default: ~/.tekton/data)\n    config: Optional configuration parameters",
            "args": [
              "self",
              "base_path",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_connection",
            "line": 70,
            "async": true,
            "decorators": [],
            "docstring": "Get a database connection for a specific type and namespace.\n\nArgs:\n    db_type: Type of database\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Database adapter instance",
            "args": [
              "self",
              "db_type",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_vector_db",
            "line": 148,
            "async": true,
            "decorators": [],
            "docstring": "Get a vector database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Vector database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_graph_db",
            "line": 175,
            "async": true,
            "decorators": [],
            "docstring": "Get a graph database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Graph database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_key_value_db",
            "line": 202,
            "async": true,
            "decorators": [],
            "docstring": "Get a key-value database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Key-value database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_document_db",
            "line": 229,
            "async": true,
            "decorators": [],
            "docstring": "Get a document database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Document database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_cache_db",
            "line": 256,
            "async": true,
            "decorators": [],
            "docstring": "Get a cache database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Cache database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relational_db",
            "line": 283,
            "async": true,
            "decorators": [],
            "docstring": "Get a relational database connection.\n\nArgs:\n    namespace: Namespace for data isolation\n    backend: Optional specific backend (auto-detected if not provided)\n    config: Optional configuration parameters\n    \nReturns:\n    Relational database adapter instance",
            "args": [
              "self",
              "namespace",
              "backend",
              "config"
            ],
            "class": "DatabaseManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close_connection",
            "line": 310,
            "async": true,
            "decorators": [],
            "docstring": "Close a database connection.\n\nArgs:\n    db_type: Type of database\n    namespace: Namespace for data isolation\n    backend: Optional specific backend\n    \nReturns:\n    True if connection closed successfully",
            "args": [
              "self",
              "db_type",
              "namespace",
              "backend"
            ],
            "class": "DatabaseManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "close_all_connections",
            "line": 359,
            "async": true,
            "decorators": [],
            "docstring": "Close all database connections.\n\nReturns:\n    True if all connections closed successfully",
            "args": [
              "self"
            ],
            "class": "DatabaseManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_namespaces",
            "line": 385,
            "async": false,
            "decorators": [],
            "docstring": "Get list of available namespaces for a database type.\n\nArgs:\n    db_type: Type of database\n    \nReturns:\n    List of namespace names",
            "args": [
              "self",
              "db_type"
            ],
            "class": "DatabaseManager",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DatabaseManager",
            "line": 31,
            "methods": [
              "__init__",
              "get_namespaces"
            ],
            "decorators": [],
            "docstring": "Centralized manager for all database operations.\n\nThis class provides a unified interface for accessing different types\nof databases, with support for namespace isolation and connection pooling.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "threading",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.database.factory.DatabaseFactory",
            "from": "hermes.core.database.factory",
            "name": "DatabaseFactory",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.database.adapters.DatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.VectorDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "VectorDatabaseAdapter",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.GraphDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "GraphDatabaseAdapter",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.KeyValueDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "KeyValueDatabaseAdapter",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.DocumentDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "DocumentDatabaseAdapter",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.CacheDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "CacheDatabaseAdapter",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.RelationalDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "RelationalDatabaseAdapter",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DatabaseManager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 31,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 70,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_vector_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 148,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_graph_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 175,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_key_value_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 202,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_document_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 229,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_cache_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 256,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_relational_db",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 283,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.close_connection",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 310,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.close_all_connections",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 359,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseManager.get_namespaces",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/manager.py",
            "line": 385,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 410,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the registration client.\n\nArgs:\n    component_id: Unique identifier for this component\n    name: Human-readable name\n    version: Component version\n    component_type: Type of component (e.g., \"engram\", \"ergon\", \"athena\")\n    endpoint: Component endpoint (URL or connection string)\n    capabilities: List of component capabilities\n    message_bus: Message bus for communication\n    metadata: Additional component metadata\n    heartbeat_interval: Interval in seconds for sending heartbeats",
            "args": [
              "self",
              "component_id",
              "name",
              "version",
              "component_type",
              "endpoint",
              "capabilities",
              "message_bus",
              "metadata",
              "heartbeat_interval"
            ],
            "class": "RegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_setup_subscriptions",
            "line": 73,
            "async": false,
            "decorators": [],
            "docstring": "Set up message bus subscriptions for registration events.",
            "args": [
              "self"
            ],
            "class": "RegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 80,
            "async": true,
            "decorators": [],
            "docstring": "Register this component with the Tekton ecosystem.\n\nReturns:\n    True if registration successful",
            "args": [
              "self"
            ],
            "class": "RegistrationClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "unregister",
            "line": 126,
            "async": true,
            "decorators": [],
            "docstring": "Unregister this component from the Tekton ecosystem.\n\nReturns:\n    True if unregistration successful",
            "args": [
              "self"
            ],
            "class": "RegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_start_heartbeat",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": "Start the heartbeat thread.",
            "args": [
              "self"
            ],
            "class": "RegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_stop_heartbeat",
            "line": 177,
            "async": false,
            "decorators": [],
            "docstring": "Stop the heartbeat thread.",
            "args": [
              "self"
            ],
            "class": "RegistrationClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RegistrationClient",
            "line": 19,
            "methods": [
              "__init__",
              "_setup_subscriptions",
              "_start_heartbeat",
              "_stop_heartbeat"
            ],
            "decorators": [],
            "docstring": "Client for interacting with the Tekton registration system.\n\nThis class provides methods for components to register, unregister,\nand maintain their presence in the Tekton ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "threading",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.registration.handlers.handle_registration_response",
            "from": "hermes.core.registration.handlers",
            "name": "handle_registration_response",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.registration.handlers.heartbeat_loop",
            "from": "hermes.core.registration.handlers",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RegistrationClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RegistrationClient.register",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RegistrationClient.unregister",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client.py",
            "line": 126,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 182,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/handlers.py",
      "analysis": {
        "functions": [
          {
            "name": "handle_registration_request",
            "line": 17,
            "async": false,
            "decorators": [],
            "docstring": "Handle a registration request message.\n\nArgs:\n    manager: Registration manager instance\n    message: Registration request message",
            "args": [
              "manager",
              "message"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handle_revocation_request",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Handle a revocation request message.\n\nArgs:\n    manager: Registration manager instance\n    message: Revocation request message",
            "args": [
              "manager",
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_heartbeat",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Handle a heartbeat message.\n\nArgs:\n    manager: Registration manager instance\n    message: Heartbeat message",
            "args": [
              "manager",
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "handle_registration_response",
            "line": 126,
            "async": false,
            "decorators": [],
            "docstring": "Handle a registration response message.\n\nArgs:\n    client: Registration client instance\n    message: Registration response message",
            "args": [
              "client",
              "message"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "heartbeat_loop",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Main loop for sending heartbeats.\n\nThis runs in a separate thread and periodically sends heartbeats\nto indicate the component is still active.\n\nArgs:\n    client: Registration client instance",
            "args": [
              "client"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "handle_registration_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/handlers.py",
            "line": 17,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "handle_revocation_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/handlers.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "handle_heartbeat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/handlers.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "handle_registration_response",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/handlers.py",
            "line": 126,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "heartbeat_loop",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/handlers.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 184,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/tokens.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a registration token.\n\nArgs:\n    component_id: Unique identifier for the component\n    secret_key: Secret key for signing the token\n    expiration: Token validity period in seconds (default: 1 hour)",
            "args": [
              "self",
              "component_id",
              "secret_key",
              "expiration"
            ],
            "class": "RegistrationToken",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Generate a signed token string.\n\nReturns:\n    Signed token as a string",
            "args": [
              "self"
            ],
            "class": "RegistrationToken",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "validate",
            "line": 74,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Validate a token string.\n\nArgs:\n    token_str: Token string to validate\n    secret_key: Secret key for verification\n    \nReturns:\n    Token payload if valid, None otherwise",
            "args": [
              "token_str",
              "secret_key"
            ],
            "class": "RegistrationToken",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RegistrationToken",
            "line": 18,
            "methods": [
              "__init__",
              "generate",
              "validate"
            ],
            "decorators": [],
            "docstring": "Security token for authenticating components with the registration system.\n\nTokens are used to validate component identity and authorize registration\nwith the Tekton ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 7
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "hmac",
            "alias": null,
            "line": 9
          },
          {
            "module": "hashlib",
            "alias": null,
            "line": 10
          },
          {
            "module": "json",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RegistrationToken",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/tokens.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RegistrationToken.generate",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/tokens.py",
            "line": 41,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RegistrationToken.validate",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/tokens.py",
            "line": 74,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 113,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/utils.py",
      "analysis": {
        "functions": [
          {
            "name": "generate_component_id",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": "Generate a unique component ID based on name and type.\n\nArgs:\n    name: Component name\n    component_type: Component type\n    \nReturns:\n    Unique component ID",
            "args": [
              "name",
              "component_type"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_token_valid",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Check if a token payload is valid based on expiration time.\n\nArgs:\n    token_payload: Token payload to check\n    \nReturns:\n    True if token is valid",
            "args": [
              "token_payload"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_component_info",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": "Format component information for display.\n\nArgs:\n    component_data: Component data to format\n    \nReturns:\n    Formatted component information string",
            "args": [
              "component_data"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_token_lifetime",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Calculate remaining token lifetime in seconds.\n\nArgs:\n    expires_at: Token expiration timestamp\n    \nReturns:\n    Remaining token lifetime in seconds (0 if expired)",
            "args": [
              "expires_at"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 7
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "generate_component_id",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/utils.py",
            "line": 15,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "is_token_valid",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/utils.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_component_info",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/utils.py",
            "line": 46,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "calculate_token_lifetime",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/utils.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 78,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the registration manager.\n\nArgs:\n    service_registry: Service registry for component tracking\n    message_bus: Message bus for event propagation\n    secret_key: Secret key for token generation/validation\n    token_expiration: Token validity period in seconds",
            "args": [
              "self",
              "service_registry",
              "message_bus",
              "secret_key",
              "token_expiration"
            ],
            "class": "RegistrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_setup_subscriptions_async",
            "line": 59,
            "async": true,
            "decorators": [],
            "docstring": "Set up message bus subscriptions for registration events (async version).",
            "args": [
              "self"
            ],
            "class": "RegistrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_setup_subscriptions",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": "Set up message bus subscriptions for registration events.",
            "args": [
              "self"
            ],
            "class": "RegistrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component",
            "line": 81,
            "async": false,
            "decorators": [],
            "docstring": "Register a component with the Tekton ecosystem.\n\nArgs:\n    component_id: Unique identifier for the component\n    name: Human-readable name\n    version: Component version\n    component_type: Type of component (e.g., \"engram\", \"ergon\", \"athena\")\n    endpoint: Component endpoint (URL or connection string)\n    capabilities: List of component capabilities\n    health_check: Optional function to check component health\n    metadata: Additional component metadata\n    \nReturns:\n    Tuple of (success, token_string)",
            "args": [
              "self",
              "component_id",
              "name",
              "version",
              "component_type",
              "endpoint",
              "capabilities",
              "health_check",
              "metadata"
            ],
            "class": "RegistrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_component",
            "line": 164,
            "async": false,
            "decorators": [],
            "docstring": "Unregister a component from the Tekton ecosystem.\n\nArgs:\n    component_id: Component ID to unregister\n    token_str: Registration token for authentication\n    \nReturns:\n    True if unregistration successful",
            "args": [
              "self",
              "component_id",
              "token_str"
            ],
            "class": "RegistrationManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "validate_component",
            "line": 211,
            "async": false,
            "decorators": [],
            "docstring": "Validate a component's registration.\n\nArgs:\n    component_id: Component ID to validate\n    token_str: Registration token for authentication\n    \nReturns:\n    True if component is validly registered",
            "args": [
              "self",
              "component_id",
              "token_str"
            ],
            "class": "RegistrationManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "send_heartbeat",
            "line": 239,
            "async": false,
            "decorators": [],
            "docstring": "Send a heartbeat for a component to indicate it's still active.\n\nArgs:\n    component_id: Component ID\n    token_str: Registration token for authentication\n    status: Optional status information\n    \nReturns:\n    True if heartbeat was processed successfully",
            "args": [
              "self",
              "component_id",
              "token_str",
              "status"
            ],
            "class": "RegistrationManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RegistrationManager",
            "line": 24,
            "methods": [
              "__init__",
              "_setup_subscriptions",
              "register_component",
              "unregister_component",
              "validate_component",
              "send_heartbeat"
            ],
            "decorators": [],
            "docstring": "Central manager for component registration across the Tekton ecosystem.\n\nThis class manages component registration, authentication, and propagation\nof registration information between Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 10
          },
          {
            "module": "hermes.core.service_discovery.ServiceRegistry",
            "from": "hermes.core.service_discovery",
            "name": "ServiceRegistry",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.message_bus.MessageBus",
            "from": "hermes.core.message_bus",
            "name": "MessageBus",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.registration.tokens.RegistrationToken",
            "from": "hermes.core.registration.tokens",
            "name": "RegistrationToken",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.registration.handlers.handle_registration_request",
            "from": "hermes.core.registration.handlers",
            "name": "handle_registration_request",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.registration.handlers.handle_revocation_request",
            "from": "hermes.core.registration.handlers",
            "name": "handle_revocation_request",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.registration.handlers.handle_heartbeat",
            "from": "hermes.core.registration.handlers",
            "name": "handle_heartbeat",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RegistrationManager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/manager.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RegistrationManager.register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/manager.py",
            "line": 81,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RegistrationManager.unregister_component",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/manager.py",
            "line": 164,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RegistrationManager.validate_component",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/manager.py",
            "line": 211,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RegistrationManager.send_heartbeat",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/manager.py",
            "line": 239,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 275,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client_api.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the registration client.\n\nArgs:\n    component_id: Unique identifier for this component\n    name: Human-readable name\n    version: Component version\n    component_type: Type of component (e.g., \"engram\", \"ergon\", \"athena\")\n    endpoint: Component endpoint (URL or connection string)\n    capabilities: List of component capabilities\n    api_endpoint: Hermes API endpoint URL\n    metadata: Additional component metadata\n    heartbeat_interval: Interval in seconds for sending heartbeats",
            "args": [
              "self",
              "component_id",
              "name",
              "version",
              "component_type",
              "endpoint",
              "capabilities",
              "api_endpoint",
              "metadata",
              "heartbeat_interval"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 69,
            "async": false,
            "decorators": [],
            "docstring": "Register this component with the Tekton ecosystem.\n\nReturns:\n    True if registration successful",
            "args": [
              "self"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "unregister",
            "line": 120,
            "async": false,
            "decorators": [],
            "docstring": "Unregister this component from the Tekton ecosystem.\n\nReturns:\n    True if unregistration successful",
            "args": [
              "self"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "find_services",
            "line": 158,
            "async": false,
            "decorators": [],
            "docstring": "Find services based on criteria.\n\nArgs:\n    capability: Optional capability to search for\n    component_type: Optional component type to filter by\n    healthy_only: Whether to only return healthy services\n    \nReturns:\n    List of matching services",
            "args": [
              "self",
              "capability",
              "component_type",
              "healthy_only"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_send_heartbeat",
            "line": 201,
            "async": false,
            "decorators": [],
            "docstring": "Send a heartbeat to the registration service.\n\nReturns:\n    True if heartbeat successful",
            "args": [
              "self"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_heartbeat_loop",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": "Main loop for sending heartbeats.\n\nThis runs in a separate thread and periodically sends heartbeats\nto indicate the component is still active.",
            "args": [
              "self"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_start_heartbeat",
            "line": 261,
            "async": false,
            "decorators": [],
            "docstring": "Start the heartbeat thread.",
            "args": [
              "self"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_stop_heartbeat",
            "line": 272,
            "async": false,
            "decorators": [],
            "docstring": "Stop the heartbeat thread.",
            "args": [
              "self"
            ],
            "class": "RegistrationClientAPI",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RegistrationClientAPI",
            "line": 18,
            "methods": [
              "__init__",
              "register",
              "unregister",
              "find_services",
              "_send_heartbeat",
              "_heartbeat_loop",
              "_start_heartbeat",
              "_stop_heartbeat"
            ],
            "decorators": [],
            "docstring": "HTTP client for interacting with the Tekton registration system.\n\nThis class provides methods for components to register, unregister,\nand maintain their presence in the Tekton ecosystem using the HTTP API.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "threading",
            "alias": null,
            "line": 11
          },
          {
            "module": "requests",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RegistrationClientAPI",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client_api.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RegistrationClientAPI.register",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client_api.py",
            "line": 69,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RegistrationClientAPI.unregister",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client_api.py",
            "line": 120,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RegistrationClientAPI.find_services",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/registration/client_api.py",
            "line": 158,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 277,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/hermes_self_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes self-registration bridge.",
            "args": [
              "self",
              "service_registry",
              "message_bus",
              "registration_manager",
              "database_manager",
              "component_name"
            ],
            "class": "HermesSelfBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 33,
            "async": true,
            "decorators": [],
            "docstring": "Initialize and register Hermes's own tools.",
            "args": [
              "self"
            ],
            "class": "HermesSelfBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 69,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "HermesSelfBridge",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_get_health_status",
            "line": 98,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from Hermes components.",
            "args": [
              "self"
            ],
            "class": "HermesSelfBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the self-registration bridge.",
            "args": [
              "self"
            ],
            "class": "HermesSelfBridge",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesSelfBridge",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge for Hermes to register its own tools with itself.\n\nThis creates a consistent experience where Hermes can be managed\nthrough the same MCP interface it provides to other components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.mcp.tools.get_system_tools",
            "from": "hermes.core.mcp.tools",
            "name": "get_system_tools",
            "alias": null,
            "line": 42
          },
          {
            "module": "hermes.core.mcp.tools.get_database_tools",
            "from": "hermes.core.mcp.tools",
            "name": "get_database_tools",
            "alias": null,
            "line": 42
          },
          {
            "module": "hermes.core.mcp.tools.get_messaging_tools",
            "from": "hermes.core.mcp.tools",
            "name": "get_messaging_tools",
            "alias": null,
            "line": 42
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesSelfBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/hermes_self_bridge.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesSelfBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/hermes_self_bridge.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesSelfBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/hermes_self_bridge.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "HermesSelfBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/hermes_self_bridge.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 140,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 28,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_status",
            "line": 49,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Get the status of a Tekton component.\n\nArgs:\n    component_id: ID of the component to get status for\n    service_registry: Service registry to use (injected)\n    \nReturns:\n    Component status information",
            "args": [
              "component_id",
              "service_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_components",
            "line": 101,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "List all Tekton components.\n\nArgs:\n    filter_type: Optional component type to filter by\n    service_registry: Service registry to use (injected)\n    \nReturns:\n    List of components",
            "args": [
              "filter_type",
              "service_registry"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "query_vector_database",
            "line": 163,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Query the vector database.\n\nArgs:\n    text: Text to search for\n    collection: Optional collection to search in\n    limit: Maximum number of results\n    database_manager: Database manager to use (injected)\n    \nReturns:\n    Search results",
            "args": [
              "text",
              "collection",
              "limit",
              "database_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "store_vector_data",
            "line": 224,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Store data in the vector database.\n\nArgs:\n    text: Text to store\n    metadata: Metadata to store with the text\n    collection: Optional collection to store in\n    database_manager: Database manager to use (injected)\n    \nReturns:\n    Storage result",
            "args": [
              "text",
              "metadata",
              "collection",
              "database_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "publish_message",
            "line": 286,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Publish a message to a channel.\n\nArgs:\n    channel: Channel to publish to\n    message: Message to publish\n    message_bus: Message bus to use (injected)\n    \nReturns:\n    Publish result",
            "args": [
              "channel",
              "message",
              "message_bus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_channel",
            "line": 333,
            "async": true,
            "decorators": [
              "@mcp_capability",
              "@mcp_tool"
            ],
            "docstring": "Create a new message channel.\n\nArgs:\n    channel: Channel name\n    description: Channel description\n    message_bus: Message bus to use (injected)\n    \nReturns:\n    Creation result",
            "args": [
              "channel",
              "description",
              "message_bus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_system_tools",
            "line": 371,
            "async": true,
            "decorators": [],
            "docstring": "Register system tools with the MCP service.",
            "args": [
              "service_registry",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_database_tools",
            "line": 393,
            "async": true,
            "decorators": [],
            "docstring": "Register database tools with the MCP service.",
            "args": [
              "database_manager",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_messaging_tools",
            "line": 415,
            "async": true,
            "decorators": [],
            "docstring": "Register messaging tools with the MCP service.",
            "args": [
              "message_bus",
              "tool_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_system_tools",
            "line": 440,
            "async": false,
            "decorators": [],
            "docstring": "Get system tools for internal use.",
            "args": [
              "service_registry"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_component_status",
            "line": 445,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_list_components",
            "line": 448,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_database_tools",
            "line": 461,
            "async": false,
            "decorators": [],
            "docstring": "Get database tools for internal use.",
            "args": [
              "database_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_query_vector_database",
            "line": 466,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_store_vector_data",
            "line": 469,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_messaging_tools",
            "line": 482,
            "async": false,
            "decorators": [],
            "docstring": "Get messaging tools for internal use.",
            "args": [
              "message_bus"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_publish_message",
            "line": 487,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_channel",
            "line": 490,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [
          {
            "name": "get_component_status",
            "line": 49,
            "decorator": "@mcp_capability"
          },
          {
            "name": "get_component_status",
            "line": 49,
            "decorator": "@mcp_tool"
          },
          {
            "name": "list_components",
            "line": 101,
            "decorator": "@mcp_capability"
          },
          {
            "name": "list_components",
            "line": 101,
            "decorator": "@mcp_tool"
          },
          {
            "name": "query_vector_database",
            "line": 163,
            "decorator": "@mcp_capability"
          },
          {
            "name": "query_vector_database",
            "line": 163,
            "decorator": "@mcp_tool"
          },
          {
            "name": "store_vector_data",
            "line": 224,
            "decorator": "@mcp_capability"
          },
          {
            "name": "store_vector_data",
            "line": 224,
            "decorator": "@mcp_tool"
          },
          {
            "name": "publish_message",
            "line": 286,
            "decorator": "@mcp_capability"
          },
          {
            "name": "publish_message",
            "line": 286,
            "decorator": "@mcp_tool"
          },
          {
            "name": "create_channel",
            "line": 333,
            "decorator": "@mcp_capability"
          },
          {
            "name": "create_channel",
            "line": 333,
            "decorator": "@mcp_tool"
          }
        ],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 22,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 27,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 28,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_component_status",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "list_components",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 101,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "query_vector_database",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 163,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "store_vector_data",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 224,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "publish_message",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 286,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "create_channel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 333,
            "priority": "high",
            "reason": "Async function, MCP tool"
          },
          {
            "type": "function",
            "name": "register_system_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 371,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_database_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 393,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_messaging_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 415,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_system_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 440,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_database_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 461,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_messaging_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tools.py",
            "line": 482,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 500,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "mcp_tool",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_capability",
            "line": 45,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_processor",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_context",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 56,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "tekton.mcp.fastmcp.mcp_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_tool",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_capability",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_capability",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_context",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_context",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_tool",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_processor",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_context",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_context",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.MCPClient",
            "from": "tekton.mcp.fastmcp",
            "name": "MCPClient",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.register_component",
            "from": "tekton.mcp.fastmcp",
            "name": "register_component",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.get_capabilities",
            "from": "tekton.mcp.fastmcp",
            "name": "get_capabilities",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ToolSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ToolSchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ProcessorSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ProcessorSchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.CapabilitySchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "CapabilitySchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ContextSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ContextSchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MessageSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MessageSchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ResponseSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ResponseSchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "tekton.mcp.fastmcp.schema.ContentSchema",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "ContentSchema",
            "alias": null,
            "line": 24
          },
          {
            "module": "hermes.core.mcp.tools.register_system_tools",
            "from": "hermes.core.mcp.tools",
            "name": "register_system_tools",
            "alias": null,
            "line": 61
          },
          {
            "module": "hermes.core.mcp.tools.register_database_tools",
            "from": "hermes.core.mcp.tools",
            "name": "register_database_tools",
            "alias": null,
            "line": 61
          },
          {
            "module": "hermes.core.mcp.tools.register_messaging_tools",
            "from": "hermes.core.mcp.tools",
            "name": "register_messaging_tools",
            "alias": null,
            "line": 61
          },
          {
            "module": "hermes.core.mcp.adapters.adapt_legacy_service",
            "from": "hermes.core.mcp.adapters",
            "name": "adapt_legacy_service",
            "alias": null,
            "line": 68
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "mcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 40,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 41,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_capability",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 45,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 46,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_processor",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 50,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mcp_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 55,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/__init__.py",
            "line": 56,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 90,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tool_executor.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ToolExecutor",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_local_handler",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Register a local tool handler.",
            "args": [
              "self",
              "tool_id",
              "handler"
            ],
            "class": "ToolExecutor",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_dependencies",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Set dependencies for tool execution.",
            "args": [
              "self",
              "service_registry",
              "database_manager",
              "message_bus"
            ],
            "class": "ToolExecutor",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execute_tool",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Execute a tool, either locally or remotely.",
            "args": [
              "self",
              "tool_id",
              "tool_info",
              "parameters"
            ],
            "class": "ToolExecutor",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_execute_local_tool",
            "line": 73,
            "async": true,
            "decorators": [],
            "docstring": "Execute a local tool handler.",
            "args": [
              "self",
              "tool_id",
              "parameters"
            ],
            "class": "ToolExecutor",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ToolExecutor",
            "line": 15,
            "methods": [
              "__init__",
              "register_local_handler",
              "set_dependencies"
            ],
            "decorators": [],
            "docstring": "Executes tools both local and remote.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 9
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ToolExecutor",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tool_executor.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ToolExecutor.register_local_handler",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tool_executor.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ToolExecutor.set_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tool_executor.py",
            "line": 29,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ToolExecutor.execute_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tool_executor.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ToolExecutor._execute_local_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/tool_executor.py",
            "line": 73,
            "priority": "medium",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 120,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/adapters.py",
      "analysis": {
        "functions": [
          {
            "name": "adapt_legacy_service",
            "line": 26,
            "async": true,
            "decorators": [],
            "docstring": "Adapt the legacy MCP service to the new FastMCP approach.\n\nThis function adapts the legacy MCP service to the new FastMCP approach,\ncreating FastMCP tools and processors from the existing implementations.\n\nArgs:\n    mcp_service: Legacy MCP service to adapt\n    \nReturns:\n    Adapted tools and processors",
            "args": [
              "mcp_service"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the adapter.\n\nArgs:\n    legacy_processor: Legacy processor to adapt",
            "args": [
              "self",
              "legacy_processor"
            ],
            "class": "LegacyMCPProcessorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "Process a message.\n\nArgs:\n    message: Message to process\n    \nReturns:\n    Processing result",
            "args": [
              "self",
              "message"
            ],
            "class": "LegacyMCPProcessorAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LegacyMCPProcessorAdapter",
            "line": 78,
            "methods": [
              "__init__"
            ],
            "decorators": [
              "@mcp_processor"
            ],
            "docstring": "Adapter for legacy MCP processor.\n\nThis class adapts a legacy MCP processor to the new FastMCP approach,\nallowing it to be used with the new decorator-based approach.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_tool",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_tool",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_processor",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.adapt_context",
            "from": "tekton.mcp.fastmcp",
            "name": "adapt_context",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.mcp_processor",
            "from": "tekton.mcp.fastmcp",
            "name": "mcp_processor",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "adapt_legacy_service",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/adapters.py",
            "line": 26,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "LegacyMCPProcessorAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/adapters.py",
            "line": 78,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LegacyMCPProcessorAdapter.process",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/mcp/adapters.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 113,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
      "analysis": {
        "functions": [
          {
            "name": "db_type",
            "line": 24,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 29,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Set a key-value pair.\n\nArgs:\n    key: The key\n    value: The value\n    expiration: Optional expiration time in seconds\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "key",
              "value",
              "expiration"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 47,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get a value by key.\n\nArgs:\n    key: The key to retrieve\n    \nReturns:\n    The value if found, None otherwise",
            "args": [
              "self",
              "key"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 60,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete a key-value pair.\n\nArgs:\n    key: The key to delete\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "key"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "exists",
            "line": 73,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Check if a key exists.\n\nArgs:\n    key: The key to check\n    \nReturns:\n    True if the key exists",
            "args": [
              "self",
              "key"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_batch",
            "line": 86,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Set multiple key-value pairs.\n\nArgs:\n    items: Dictionary of key-value pairs\n    expiration: Optional expiration time in seconds\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "items",
              "expiration"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_batch",
            "line": 102,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get multiple values by keys.\n\nArgs:\n    keys: List of keys to retrieve\n    \nReturns:\n    Dictionary of key-value pairs for found keys",
            "args": [
              "self",
              "keys"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_batch",
            "line": 115,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete multiple key-value pairs.\n\nArgs:\n    keys: List of keys to delete\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "keys"
            ],
            "class": "KeyValueDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "KeyValueDatabaseAdapter",
            "line": 15,
            "methods": [
              "db_type"
            ],
            "decorators": [],
            "docstring": "Adapter for key-value databases.\n\nThis class provides methods for storing and retrieving key-value pairs,\nwith support for expiration and batch operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.adapters.base.DatabaseAdapter",
            "from": "hermes.core.database.adapters.base",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "KeyValueDatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 60,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.exists",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 73,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.set_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 86,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.get_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 102,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseAdapter.delete_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/key_value.py",
            "line": 115,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 125,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
      "analysis": {
        "functions": [
          {
            "name": "db_type",
            "line": 24,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "VectorDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 29,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Store a vector in the database.\n\nArgs:\n    id: Unique identifier for the vector\n    vector: The vector embedding\n    metadata: Optional metadata to store with the vector\n    text: Optional text content associated with the vector\n    \nReturns:\n    True if storage successful",
            "args": [
              "self",
              "id",
              "vector",
              "metadata",
              "text"
            ],
            "class": "VectorDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 49,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Search for similar vectors.\n\nArgs:\n    query_vector: The query vector\n    limit: Maximum number of results\n    filter: Optional metadata filter\n    \nReturns:\n    List of matching vectors with metadata and similarity scores",
            "args": [
              "self",
              "query_vector",
              "limit",
              "filter"
            ],
            "class": "VectorDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 67,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete vectors from the database.\n\nArgs:\n    id: Optional specific vector ID to delete\n    filter: Optional metadata filter for bulk deletion\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "id",
              "filter"
            ],
            "class": "VectorDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 83,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get a specific vector by ID.\n\nArgs:\n    id: Vector ID to retrieve\n    \nReturns:\n    Vector with metadata if found, None otherwise",
            "args": [
              "self",
              "id"
            ],
            "class": "VectorDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list",
            "line": 96,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "List vectors in the database.\n\nArgs:\n    limit: Maximum number of results\n    offset: Starting offset for pagination\n    filter: Optional metadata filter\n    \nReturns:\n    List of vectors with metadata",
            "args": [
              "self",
              "limit",
              "offset",
              "filter"
            ],
            "class": "VectorDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "VectorDatabaseAdapter",
            "line": 15,
            "methods": [
              "db_type"
            ],
            "decorators": [],
            "docstring": "Adapter for vector databases.\n\nThis class provides methods for storing and retrieving vector embeddings,\nwith support for similarity search and metadata filtering.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.adapters.base.DatabaseAdapter",
            "from": "hermes.core.database.adapters.base",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VectorDatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorDatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseAdapter.store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseAdapter.search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 49,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseAdapter.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 83,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseAdapter.list",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/vector.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 111,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
      "analysis": {
        "functions": [
          {
            "name": "db_type",
            "line": 24,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_node",
            "line": 29,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Add a node to the graph.\n\nArgs:\n    id: Unique identifier for the node\n    labels: List of labels for the node\n    properties: Optional node properties\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "id",
              "labels",
              "properties"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_relationship",
            "line": 47,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Add a relationship between nodes.\n\nArgs:\n    source_id: Source node ID\n    target_id: Target node ID\n    type: Relationship type\n    properties: Optional relationship properties\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "source_id",
              "target_id",
              "type",
              "properties"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_node",
            "line": 67,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get a node by ID.\n\nArgs:\n    id: Node ID to retrieve\n    \nReturns:\n    Node with properties if found, None otherwise",
            "args": [
              "self",
              "id"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_relationships",
            "line": 80,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get relationships for a node.\n\nArgs:\n    node_id: Node ID to get relationships for\n    types: Optional list of relationship types to filter by\n    direction: Relationship direction (\"incoming\", \"outgoing\", or \"both\")\n    \nReturns:\n    List of relationships",
            "args": [
              "self",
              "node_id",
              "types",
              "direction"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 98,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Execute a graph query.\n\nArgs:\n    query: Query string in the database's query language\n    params: Optional query parameters\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_node",
            "line": 112,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete a node.\n\nArgs:\n    id: Node ID to delete\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "id"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 125,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete a relationship.\n\nArgs:\n    source_id: Source node ID\n    target_id: Target node ID\n    type: Optional relationship type\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "source_id",
              "target_id",
              "type"
            ],
            "class": "GraphDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "GraphDatabaseAdapter",
            "line": 15,
            "methods": [
              "db_type"
            ],
            "decorators": [],
            "docstring": "Adapter for graph databases.\n\nThis class provides methods for storing and retrieving graph data,\nwith support for nodes, relationships, and graph queries.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.adapters.base.DatabaseAdapter",
            "from": "hermes.core.database.adapters.base",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "GraphDatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.add_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.get_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 67,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.get_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 98,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.delete_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 112,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseAdapter.delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/graph.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 140,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
      "analysis": {
        "functions": [
          {
            "name": "db_type",
            "line": 24,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "CacheDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 29,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Set a cached value with expiration.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    expiration: Expiration time in seconds\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "key",
              "value",
              "expiration"
            ],
            "class": "CacheDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 47,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Get a cached value.\n\nArgs:\n    key: Cache key to retrieve\n    \nReturns:\n    Cached value if found and not expired, None otherwise",
            "args": [
              "self",
              "key"
            ],
            "class": "CacheDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 60,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete a cached value.\n\nArgs:\n    key: Cache key to delete\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "key"
            ],
            "class": "CacheDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "flush",
            "line": 73,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Clear all cached values.\n\nReturns:\n    True if operation successful",
            "args": [
              "self"
            ],
            "class": "CacheDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "touch",
            "line": 83,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Update expiration for a cached value.\n\nArgs:\n    key: Cache key\n    expiration: New expiration time in seconds\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "key",
              "expiration"
            ],
            "class": "CacheDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "CacheDatabaseAdapter",
            "line": 15,
            "methods": [
              "db_type"
            ],
            "decorators": [],
            "docstring": "Adapter for cache databases.\n\nThis class provides methods for caching data with expiration,\nsupporting both simple values and structured data.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.adapters.base.DatabaseAdapter",
            "from": "hermes.core.database.adapters.base",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "CacheDatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CacheDatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "CacheDatabaseAdapter.set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CacheDatabaseAdapter.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CacheDatabaseAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 60,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CacheDatabaseAdapter.flush",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 73,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CacheDatabaseAdapter.touch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/cache.py",
            "line": 83,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 96,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
      "analysis": {
        "functions": [
          {
            "name": "db_type",
            "line": 24,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 29,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Execute a SQL query.\n\nArgs:\n    query: SQL query to execute\n    params: Optional query parameters\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_batch",
            "line": 45,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Execute multiple SQL queries.\n\nArgs:\n    queries: List of SQL queries to execute\n    params_list: Optional list of query parameters\n    \nReturns:\n    List of query results",
            "args": [
              "self",
              "queries",
              "params_list"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "begin_transaction",
            "line": 61,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Begin a transaction.\n\nReturns:\n    True if transaction started successfully",
            "args": [
              "self"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "commit_transaction",
            "line": 71,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Commit the current transaction.\n\nReturns:\n    True if commit successful",
            "args": [
              "self"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "rollback_transaction",
            "line": 81,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Rollback the current transaction.\n\nReturns:\n    True if rollback successful",
            "args": [
              "self"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_table",
            "line": 91,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Create a database table.\n\nArgs:\n    table_name: Name of the table to create\n    columns: Dictionary mapping column names to types\n    primary_key: Optional primary key column\n    if_not_exists: Whether to use IF NOT EXISTS\n    \nReturns:\n    True if table created successfully",
            "args": [
              "self",
              "table_name",
              "columns",
              "primary_key",
              "if_not_exists"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "drop_table",
            "line": 111,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Drop a database table.\n\nArgs:\n    table_name: Name of the table to drop\n    if_exists: Whether to use IF EXISTS\n    \nReturns:\n    True if table dropped successfully",
            "args": [
              "self",
              "table_name",
              "if_exists"
            ],
            "class": "RelationalDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RelationalDatabaseAdapter",
            "line": 15,
            "methods": [
              "db_type"
            ],
            "decorators": [],
            "docstring": "Adapter for relational databases.\n\nThis class provides methods for executing SQL queries,\nwith support for transactions and schema management.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.adapters.base.DatabaseAdapter",
            "from": "hermes.core.database.adapters.base",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RelationalDatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.execute",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.execute_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 45,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.begin_transaction",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.commit_transaction",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.rollback_transaction",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.create_table",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseAdapter.drop_table",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/relational.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 124,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
      "analysis": {
        "functions": [
          {
            "name": "db_type",
            "line": 24,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "insert",
            "line": 29,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Insert a document.\n\nArgs:\n    collection: Collection name\n    document: Document to insert\n    id: Optional document ID (generated if not provided)\n    \nReturns:\n    Document ID",
            "args": [
              "self",
              "collection",
              "document",
              "id"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find",
            "line": 47,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Find documents matching a query.\n\nArgs:\n    collection: Collection name\n    query: Query to match documents\n    projection: Optional fields to include or exclude\n    limit: Maximum number of results\n    offset: Starting offset for pagination\n    \nReturns:\n    List of matching documents",
            "args": [
              "self",
              "collection",
              "query",
              "projection",
              "limit",
              "offset"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find_one",
            "line": 69,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Find a single document matching a query.\n\nArgs:\n    collection: Collection name\n    query: Query to match documents\n    projection: Optional fields to include or exclude\n    \nReturns:\n    Matching document if found, None otherwise",
            "args": [
              "self",
              "collection",
              "query",
              "projection"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update",
            "line": 87,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Update documents matching a query.\n\nArgs:\n    collection: Collection name\n    query: Query to match documents\n    update: Update operations\n    upsert: Whether to insert if no matching document exists\n    \nReturns:\n    Number of documents updated",
            "args": [
              "self",
              "collection",
              "query",
              "update",
              "upsert"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 107,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Delete documents matching a query.\n\nArgs:\n    collection: Collection name\n    query: Query to match documents\n    \nReturns:\n    Number of documents deleted",
            "args": [
              "self",
              "collection",
              "query"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "count",
            "line": 123,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Count documents matching a query.\n\nArgs:\n    collection: Collection name\n    query: Query to match documents\n    \nReturns:\n    Number of matching documents",
            "args": [
              "self",
              "collection",
              "query"
            ],
            "class": "DocumentDatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DocumentDatabaseAdapter",
            "line": 15,
            "methods": [
              "db_type"
            ],
            "decorators": [],
            "docstring": "Adapter for document databases.\n\nThis class provides methods for storing and retrieving structured documents,\nwith support for queries and indexing.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.adapters.base.DatabaseAdapter",
            "from": "hermes.core.database.adapters.base",
            "name": "DatabaseAdapter",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DocumentDatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 24,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.insert",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.find",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.find_one",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.update",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 87,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseAdapter.count",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/document.py",
            "line": 123,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 136,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 22,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the database adapter.\n\nArgs:\n    namespace: Namespace for data isolation\n    config: Optional configuration parameters",
            "args": [
              "self",
              "namespace",
              "config"
            ],
            "class": "DatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 37,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Connect to the database.\n\nReturns:\n    True if connection successful",
            "args": [
              "self"
            ],
            "class": "DatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 47,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Disconnect from the database.\n\nReturns:\n    True if disconnection successful",
            "args": [
              "self"
            ],
            "class": "DatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_connected",
            "line": 57,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Check if connected to the database.\n\nReturns:\n    True if connected",
            "args": [
              "self"
            ],
            "class": "DatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "db_type",
            "line": 68,
            "async": false,
            "decorators": [
              "@property",
              "@abstractmethod"
            ],
            "docstring": "Get the database type.",
            "args": [
              "self"
            ],
            "class": "DatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "backend",
            "line": 74,
            "async": false,
            "decorators": [
              "@property",
              "@abstractmethod"
            ],
            "docstring": "Get the database backend.",
            "args": [
              "self"
            ],
            "class": "DatabaseAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DatabaseAdapter",
            "line": 14,
            "methods": [
              "__init__",
              "db_type",
              "backend"
            ],
            "decorators": [],
            "docstring": "Abstract base class for database adapters.\n\nThis class defines the interface that all database adapters must implement,\nproviding a consistent API regardless of the underlying database.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "abc.ABC",
            "from": "abc",
            "name": "ABC",
            "alias": null,
            "line": 8
          },
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DatabaseAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DatabaseAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseAdapter.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
            "line": 47,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseAdapter.is_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
            "line": 57,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DatabaseAdapter.db_type",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
            "line": 68,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DatabaseAdapter.backend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/database/adapters/base.py",
            "line": 74,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 76,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the logger.\n\nArgs:\n    component: Component name for log entries\n    log_manager: Log manager for storing logs\n    client_id: Optional client ID for categorization\n    default_context: Default context for all log entries",
            "args": [
              "self",
              "component",
              "log_manager",
              "client_id",
              "default_context"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_log",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Log a message at the specified level.\n\nArgs:\n    level: Log level\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    effective_timestamp: Optional effective timestamp\n    correlation_id: Optional correlation ID\n    stack_trace: Optional stack trace for errors\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "level",
              "message",
              "code",
              "context",
              "effective_timestamp",
              "correlation_id",
              "stack_trace"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "fatal",
            "line": 95,
            "async": false,
            "decorators": [],
            "docstring": "Log a fatal message.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    stack_trace: Optional stack trace\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id",
              "stack_trace"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "error",
            "line": 123,
            "async": false,
            "decorators": [],
            "docstring": "Log an error message.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    stack_trace: Optional stack trace\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id",
              "stack_trace"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "warn",
            "line": 151,
            "async": false,
            "decorators": [],
            "docstring": "Log a warning message.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "info",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Log an informational message.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "normal",
            "line": 201,
            "async": false,
            "decorators": [],
            "docstring": "Log a normal system event.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "debug",
            "line": 226,
            "async": false,
            "decorators": [],
            "docstring": "Log a debug message.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "trace",
            "line": 251,
            "async": false,
            "decorators": [],
            "docstring": "Log a trace message.\n\nArgs:\n    message: Log message\n    code: Optional event code\n    context: Optional context information\n    correlation_id: Optional correlation ID\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "message",
              "code",
              "context",
              "correlation_id"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "with_context",
            "line": 276,
            "async": false,
            "decorators": [],
            "docstring": "Create a new logger with additional context.\n\nArgs:\n    context: Context to add to default context\n    \nReturns:\n    New logger instance with combined context",
            "args": [
              "self",
              "context"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "with_correlation",
            "line": 298,
            "async": false,
            "decorators": [],
            "docstring": "Create a new logger that uses the specified correlation ID.\n\nArgs:\n    correlation_id: Correlation ID to use for all log entries\n    \nReturns:\n    New logger instance with specified correlation ID",
            "args": [
              "self",
              "correlation_id"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_log_with_correlation",
            "line": 318,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "level",
              "message",
              "code",
              "context",
              "effective_timestamp",
              "correlation_id_override",
              "stack_trace"
            ],
            "class": "Logger",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Logger",
            "line": 21,
            "methods": [
              "__init__",
              "_log",
              "fatal",
              "error",
              "warn",
              "info",
              "normal",
              "debug",
              "trace",
              "with_context",
              "with_correlation"
            ],
            "decorators": [],
            "docstring": "Logger interface for Tekton components.\n\nThis class provides methods for logging messages at different levels,\nwith structured contextual information.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.logging.base.levels.LogLevel",
            "from": "hermes.core.logging.base.levels",
            "name": "LogLevel",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.logging.base.entry.LogEntry",
            "from": "hermes.core.logging.base.entry",
            "name": "LogEntry",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.logging.management.manager.LogManager",
            "from": "hermes.core.logging.management.manager",
            "name": "LogManager",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Logger",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 21,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Logger._log",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 50,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Logger.fatal",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 95,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.error",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 123,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.warn",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 151,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.info",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 176,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.normal",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 201,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.debug",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 226,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.trace",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 251,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Logger.with_context",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 276,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "Logger.with_correlation",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/interface/logger.py",
            "line": 298,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 338,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/management/manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the log manager.\n\nArgs:\n    storage_path: Path to store log files\n    console_output: Whether to output logs to console\n    console_level: Minimum level for console output",
            "args": [
              "self",
              "storage_path",
              "console_output",
              "console_level"
            ],
            "class": "LogManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log",
            "line": 66,
            "async": false,
            "decorators": [],
            "docstring": "Process and store a log entry.\n\nArgs:\n    log_entry: Log entry to process\n    \nReturns:\n    True if logging successful",
            "args": [
              "self",
              "log_entry"
            ],
            "class": "LogManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 99,
            "async": false,
            "decorators": [],
            "docstring": "Query log entries.\n\nArgs:\n    start_time: Start time for query (Unix timestamp)\n    end_time: End time for query (Unix timestamp)\n    components: List of components to include\n    levels: List of log levels to include\n    limit: Maximum number of entries to return\n    \nReturns:\n    List of matching log entries",
            "args": [
              "self",
              "start_time",
              "end_time",
              "components",
              "levels",
              "limit"
            ],
            "class": "LogManager",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LogManager",
            "line": 19,
            "methods": [
              "__init__",
              "log",
              "query"
            ],
            "decorators": [],
            "docstring": "Central manager for the Tekton logging system.\n\nThis class manages log processing, storage, and querying for\nall Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.logging.base.levels.LogLevel",
            "from": "hermes.core.logging.base.levels",
            "name": "LogLevel",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.logging.base.entry.LogEntry",
            "from": "hermes.core.logging.base.entry",
            "name": "LogEntry",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.logging.storage.file_storage.LogStorage",
            "from": "hermes.core.logging.storage.file_storage",
            "name": "LogStorage",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LogManager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/management/manager.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LogManager.log",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/management/manager.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LogManager.query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/management/manager.py",
            "line": 99,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 124,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/utils/helpers.py",
      "analysis": {
        "functions": [
          {
            "name": "init_logging",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the global logging system.\n\nArgs:\n    storage_path: Path to store log files\n    console_output: Whether to output logs to console\n    console_level: Minimum level for console output\n    \nReturns:\n    LogManager instance",
            "args": [
              "storage_path",
              "console_output",
              "console_level"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_logger",
            "line": 51,
            "async": false,
            "decorators": [],
            "docstring": "Get a logger for a component.\n\nArgs:\n    component: Component name\n    client_id: Optional client ID\n    default_context: Default context for all log entries\n    \nReturns:\n    Logger instance",
            "args": [
              "component",
              "client_id",
              "default_context"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes.core.logging.base.levels.LogLevel",
            "from": "hermes.core.logging.base.levels",
            "name": "LogLevel",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.core.logging.management.manager.LogManager",
            "from": "hermes.core.logging.management.manager",
            "name": "LogManager",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.logging.interface.logger.Logger",
            "from": "hermes.core.logging.interface.logger",
            "name": "Logger",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "init_logging",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/utils/helpers.py",
            "line": 19,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_logger",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/utils/helpers.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 79,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/storage/file_storage.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 31,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the log storage.\n\nArgs:\n    storage_path: Path to store log files (defaults to ~/.tekton/logs)",
            "args": [
              "self",
              "storage_path"
            ],
            "class": "LogStorage",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Store a log entry.\n\nArgs:\n    log_entry: Log entry to store\n    \nReturns:\n    True if storage successful",
            "args": [
              "self",
              "log_entry"
            ],
            "class": "LogStorage",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "query",
            "line": 92,
            "async": false,
            "decorators": [],
            "docstring": "Query log entries.\n\nArgs:\n    start_time: Start time for query (Unix timestamp)\n    end_time: End time for query (Unix timestamp)\n    components: List of components to include\n    levels: List of log levels to include\n    limit: Maximum number of entries to return\n    \nReturns:\n    List of matching log entries",
            "args": [
              "self",
              "start_time",
              "end_time",
              "components",
              "levels",
              "limit"
            ],
            "class": "LogStorage",
            "complexity": "high",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "LogStorage",
            "line": 23,
            "methods": [
              "__init__",
              "store",
              "query"
            ],
            "decorators": [],
            "docstring": "Storage interface for log entries.\n\nThis class provides methods for storing and retrieving log entries\nfrom a persistent storage backend.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "threading",
            "alias": null,
            "line": 11
          },
          {
            "module": "datetime",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.logging.base.entry.LogEntry",
            "from": "hermes.core.logging.base.entry",
            "name": "LogEntry",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.core.logging.base.levels.LogLevel",
            "from": "hermes.core.logging.base.levels",
            "name": "LogLevel",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LogStorage",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/storage/file_storage.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LogStorage.store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/storage/file_storage.py",
            "line": 50,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "LogStorage.query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/storage/file_storage.py",
            "line": 92,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          }
        ]
      },
      "line_count": 215,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/entry.py",
      "analysis": {
        "functions": [
          {
            "name": "__post_init__",
            "line": 41,
            "async": false,
            "decorators": [],
            "docstring": "Initialize default values after creation.",
            "args": [
              "self"
            ],
            "class": "LogEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 47,
            "async": false,
            "decorators": [],
            "docstring": "Convert log entry to dictionary.",
            "args": [
              "self"
            ],
            "class": "LogEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_json",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Convert log entry to JSON string.",
            "args": [
              "self"
            ],
            "class": "LogEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_dict",
            "line": 59,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create log entry from dictionary.",
            "args": [
              "cls",
              "data"
            ],
            "class": "LogEntry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_json",
            "line": 69,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create log entry from JSON string.",
            "args": [
              "cls",
              "json_str"
            ],
            "class": "LogEntry",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LogEntry",
            "line": 18,
            "methods": [
              "__post_init__",
              "to_dict",
              "to_json",
              "from_dict",
              "from_json"
            ],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Structured log entry with standardized fields.\n\nThis class represents a single log entry in the Centralized Logging System,\nwith all required metadata and content fields.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 10
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.asdict",
            "from": "dataclasses",
            "name": "asdict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.logging.base.levels.LogLevel",
            "from": "hermes.core.logging.base.levels",
            "name": "LogLevel",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LogEntry",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/entry.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LogEntry.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/entry.py",
            "line": 47,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LogEntry.to_json",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/entry.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LogEntry.from_dict",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/entry.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LogEntry.from_json",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/entry.py",
            "line": 69,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 72,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/levels.py",
      "analysis": {
        "functions": [
          {
            "name": "from_string",
            "line": 23,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert string representation to LogLevel.",
            "args": [
              "cls",
              "level_str"
            ],
            "class": "LogLevel",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_python_level",
            "line": 35,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Convert Tekton log level to Python logging level.",
            "args": [
              "cls",
              "level"
            ],
            "class": "LogLevel",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LogLevel",
            "line": 11,
            "methods": [
              "from_string",
              "to_python_level"
            ],
            "decorators": [],
            "docstring": "Standardized log levels for Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 8
          },
          {
            "module": "enum.auto",
            "from": "enum",
            "name": "auto",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LogLevel",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/levels.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LogLevel.from_string",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/levels.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "LogLevel.to_python_level",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/core/logging/base/levels.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 46,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Neo4j graph adapter.",
            "args": [
              "self",
              "namespace",
              "config"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "backend",
            "line": 51,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database backend.",
            "args": [
              "self"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 55,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the database.",
            "args": [
              "self"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 80,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the database.",
            "args": [
              "self"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_connected",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Check if connected to the database.",
            "args": [
              "self"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_node",
            "line": 109,
            "async": true,
            "decorators": [],
            "docstring": "Add a node to the graph.",
            "args": [
              "self",
              "id",
              "labels",
              "properties"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "add_relationship",
            "line": 160,
            "async": true,
            "decorators": [],
            "docstring": "Add a relationship between nodes.",
            "args": [
              "self",
              "source_id",
              "target_id",
              "type",
              "properties"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_node",
            "line": 211,
            "async": true,
            "decorators": [],
            "docstring": "Get a node by ID.",
            "args": [
              "self",
              "id"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_relationships",
            "line": 264,
            "async": true,
            "decorators": [],
            "docstring": "Get relationships for a node.",
            "args": [
              "self",
              "node_id",
              "types",
              "direction"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 356,
            "async": true,
            "decorators": [],
            "docstring": "Execute a graph query in Cypher.",
            "args": [
              "self",
              "query",
              "params"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_node",
            "line": 398,
            "async": true,
            "decorators": [],
            "docstring": "Delete a node.",
            "args": [
              "self",
              "id"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_relationship",
            "line": 433,
            "async": true,
            "decorators": [],
            "docstring": "Delete a relationship.",
            "args": [
              "self",
              "source_id",
              "target_id",
              "type"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_init_namespace",
            "line": 478,
            "async": true,
            "decorators": [],
            "docstring": "Initialize namespace constraints.",
            "args": [
              "self"
            ],
            "class": "Neo4jGraphAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "Neo4jGraphAdapter",
            "line": 24,
            "methods": [
              "__init__",
              "backend"
            ],
            "decorators": [],
            "docstring": "Neo4j graph database adapter.\n\nThis adapter provides a Neo4j implementation of the GraphDatabaseAdapter\ninterface, supporting nodes, relationships, and Cypher queries.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 13
          },
          {
            "module": "neo4j.GraphDatabase",
            "from": "neo4j",
            "name": "GraphDatabase",
            "alias": null,
            "line": 15
          },
          {
            "module": "neo4j.AsyncGraphDatabase",
            "from": "neo4j",
            "name": "AsyncGraphDatabase",
            "alias": null,
            "line": 15
          },
          {
            "module": "neo4j.basic_auth",
            "from": "neo4j",
            "name": "basic_auth",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database_manager.GraphDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "GraphDatabaseAdapter",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.core.database_manager.DatabaseBackend",
            "from": "hermes.core.database_manager",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "Neo4jGraphAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.backend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 51,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 55,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.is_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.add_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 160,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.get_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 211,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.get_relationships",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 264,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 356,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.delete_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 398,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "Neo4jGraphAdapter.delete_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/graph/neo4j_adapter.py",
            "line": 433,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 495,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Redis key-value adapter.\n\nArgs:\n    namespace: Namespace for data isolation\n    config: Optional configuration parameters",
            "args": [
              "self",
              "namespace",
              "config"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "backend",
            "line": 61,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database backend.",
            "args": [
              "self"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 65,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the database.\n\nReturns:\n    True if connection successful",
            "args": [
              "self"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "disconnect",
            "line": 95,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the database.\n\nReturns:\n    True if disconnection successful",
            "args": [
              "self"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_connected",
            "line": 116,
            "async": true,
            "decorators": [],
            "docstring": "Check if connected to the database.\n\nReturns:\n    True if connected",
            "args": [
              "self"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 134,
            "async": true,
            "decorators": [],
            "docstring": "Set a key-value pair.\n\nArgs:\n    key: The key\n    value: The value\n    expiration: Optional expiration time in seconds\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "key",
              "value",
              "expiration"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 173,
            "async": true,
            "decorators": [],
            "docstring": "Get a value by key.\n\nArgs:\n    key: The key to retrieve\n    \nReturns:\n    The value if found, None otherwise",
            "args": [
              "self",
              "key"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 208,
            "async": true,
            "decorators": [],
            "docstring": "Delete a key-value pair.\n\nArgs:\n    key: The key to delete\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "key"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "exists",
            "line": 240,
            "async": true,
            "decorators": [],
            "docstring": "Check if a key exists.\n\nArgs:\n    key: The key to check\n    \nReturns:\n    True if the key exists",
            "args": [
              "self",
              "key"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_batch",
            "line": 269,
            "async": true,
            "decorators": [],
            "docstring": "Set multiple key-value pairs.\n\nArgs:\n    items: Dictionary of key-value pairs\n    expiration: Optional expiration time in seconds\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "items",
              "expiration"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_batch",
            "line": 315,
            "async": true,
            "decorators": [],
            "docstring": "Get multiple values by keys.\n\nArgs:\n    keys: List of keys to retrieve\n    \nReturns:\n    Dictionary of key-value pairs for found keys",
            "args": [
              "self",
              "keys"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_batch",
            "line": 354,
            "async": true,
            "decorators": [],
            "docstring": "Delete multiple key-value pairs.\n\nArgs:\n    keys: List of keys to delete\n    \nReturns:\n    True if operation successful",
            "args": [
              "self",
              "keys"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "clear_namespace",
            "line": 385,
            "async": true,
            "decorators": [],
            "docstring": "Clear all keys in the namespace.\n\nReturns:\n    True if operation successful",
            "args": [
              "self"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_serialize",
            "line": 425,
            "async": false,
            "decorators": [],
            "docstring": "Serialize a value to bytes.",
            "args": [
              "self",
              "value"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_deserialize",
            "line": 433,
            "async": false,
            "decorators": [],
            "docstring": "Deserialize bytes to a value.",
            "args": [
              "self",
              "serialized"
            ],
            "class": "RedisKeyValueAdapter",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RedisKeyValueAdapter",
            "line": 25,
            "methods": [
              "__init__",
              "backend",
              "_serialize",
              "_deserialize"
            ],
            "decorators": [],
            "docstring": "Redis key-value database adapter.\n\nThis adapter provides fast key-value operations using Redis,\nwith support for expiration and batch operations.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "pickle",
            "alias": null,
            "line": 12
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "redis.asyncio",
            "alias": "redis",
            "line": 16
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.core.database_manager.KeyValueDatabaseAdapter",
            "from": "hermes.core.database_manager",
            "name": "KeyValueDatabaseAdapter",
            "alias": null,
            "line": 19
          },
          {
            "module": "hermes.core.database_manager.DatabaseBackend",
            "from": "hermes.core.database_manager",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RedisKeyValueAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.backend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 61,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 65,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.is_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 134,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 173,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 208,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.exists",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 240,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.set_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 269,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.get_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 315,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.delete_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 354,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "RedisKeyValueAdapter.clear_namespace",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/key_value/redis_adapter.py",
            "line": 385,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          }
        ]
      },
      "line_count": 439,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 33,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the fallback vector adapter.\n\nArgs:\n    namespace: Namespace for data isolation\n    config: Optional configuration parameters",
            "args": [
              "self",
              "namespace",
              "config"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "backend",
            "line": 66,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database backend.",
            "args": [
              "self"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 70,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the database.\n\nReturns:\n    True if connection successful",
            "args": [
              "self"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "disconnect",
            "line": 110,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the database.\n\nReturns:\n    True if disconnection successful",
            "args": [
              "self"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_connected",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Check if connected to the database.\n\nReturns:\n    True if connected",
            "args": [
              "self"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Store a vector in the database.\n\nArgs:\n    id: Unique identifier for the vector\n    vector: The vector embedding\n    metadata: Optional metadata to store with the vector\n    text: Optional text content associated with the vector\n    \nReturns:\n    True if storage successful",
            "args": [
              "self",
              "id",
              "vector",
              "metadata",
              "text"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 193,
            "async": true,
            "decorators": [],
            "docstring": "Search for similar vectors.\n\nArgs:\n    query_vector: The query vector\n    limit: Maximum number of results\n    filter: Optional metadata filter\n    \nReturns:\n    List of matching vectors with metadata and similarity scores",
            "args": [
              "self",
              "query_vector",
              "limit",
              "filter"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 263,
            "async": true,
            "decorators": [],
            "docstring": "Delete vectors from the database.\n\nArgs:\n    id: Optional specific vector ID to delete\n    filter: Optional metadata filter for bulk deletion\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "id",
              "filter"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Get a specific vector by ID.\n\nArgs:\n    id: Vector ID to retrieve\n    \nReturns:\n    Vector with metadata if found, None otherwise",
            "args": [
              "self",
              "id"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "list",
            "line": 370,
            "async": true,
            "decorators": [],
            "docstring": "List vectors in the database.\n\nArgs:\n    limit: Maximum number of results\n    offset: Starting offset for pagination\n    filter: Optional metadata filter\n    \nReturns:\n    List of vectors with metadata",
            "args": [
              "self",
              "limit",
              "offset",
              "filter"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_save",
            "line": 417,
            "async": true,
            "decorators": [],
            "docstring": "Save vectors to disk.",
            "args": [
              "self"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_build_index",
            "line": 437,
            "async": true,
            "decorators": [],
            "docstring": "Build search index.",
            "args": [
              "self"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_matches_filter",
            "line": 471,
            "async": false,
            "decorators": [],
            "docstring": "Check if a vector matches a metadata filter.",
            "args": [
              "self",
              "vector",
              "filter"
            ],
            "class": "FallbackVectorAdapter",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "FallbackVectorAdapter",
            "line": 25,
            "methods": [
              "__init__",
              "backend",
              "_matches_filter"
            ],
            "decorators": [],
            "docstring": "Fallback vector database adapter using simple JSON files.\n\nThis adapter provides basic vector operations using numpy for\nvector similarity and JSON files for persistence.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "time",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 13
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 17
          },
          {
            "module": "hermes.core.database.adapters.VectorDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "VectorDatabaseAdapter",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FallbackVectorAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 25,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.backend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 70,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 110,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.is_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 145,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 193,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 263,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 337,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter.list",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 370,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter._save",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 417,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "FallbackVectorAdapter._matches_filter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/fallback_adapter.py",
            "line": 471,
            "priority": "medium",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 498,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/index.py",
      "analysis": {
        "functions": [
          {
            "name": "create_index",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Create a FAISS search index.\n\nArgs:\n    vectors: Dictionary of vector data\n    vector_dim: Vector dimension\n    use_gpu: Whether to use GPU acceleration\n    id_to_index: Optional existing ID to index mapping\n    index_to_id: Optional existing index to ID mapping\n    \nReturns:\n    Tuple of (index, id_to_index, index_to_id)",
            "args": [
              "vectors",
              "vector_dim",
              "use_gpu",
              "id_to_index",
              "index_to_id"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add_to_index",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Add a vector to the index.\n\nArgs:\n    index: FAISS index\n    vector: Vector to add\n    id_to_index: ID to index mapping\n    index_to_id: Index to ID mapping\n    vector_id: ID of the vector\n    \nReturns:\n    Updated (id_to_index, index_to_id) mappings",
            "args": [
              "index",
              "vector",
              "id_to_index",
              "index_to_id",
              "vector_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_from_index",
            "line": 169,
            "async": true,
            "decorators": [],
            "docstring": "Remove a vector from the index.\n\nArgs:\n    index: FAISS index\n    id_to_index: ID to index mapping\n    index_to_id: Index to ID mapping\n    vector_id: ID of the vector to remove\n    \nReturns:\n    Updated (id_to_index, index_to_id) mappings",
            "args": [
              "index",
              "id_to_index",
              "index_to_id",
              "vector_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "numpy",
            "alias": "np",
            "line": 7
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_index",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/index.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "add_to_index",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/index.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "remove_from_index",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/index.py",
            "line": 169,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 200,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the FAISS vector adapter.\n\nArgs:\n    namespace: Namespace for data isolation\n    config: Optional configuration parameters",
            "args": [
              "self",
              "namespace",
              "config"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "backend",
            "line": 90,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get the database backend.",
            "args": [
              "self"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "connect",
            "line": 94,
            "async": true,
            "decorators": [],
            "docstring": "Connect to the database.\n\nReturns:\n    True if connection successful",
            "args": [
              "self"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "disconnect",
            "line": 150,
            "async": true,
            "decorators": [],
            "docstring": "Disconnect from the database.\n\nReturns:\n    True if disconnection successful",
            "args": [
              "self"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_connected",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Check if connected to the database.\n\nReturns:\n    True if connected",
            "args": [
              "self"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 186,
            "async": true,
            "decorators": [],
            "docstring": "Store a vector in the database.\n\nArgs:\n    id: Unique identifier for the vector\n    vector: The vector embedding\n    metadata: Optional metadata to store with the vector\n    text: Optional text content associated with the vector\n    \nReturns:\n    True if storage successful",
            "args": [
              "self",
              "id",
              "vector",
              "metadata",
              "text"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 227,
            "async": true,
            "decorators": [],
            "docstring": "Search for similar vectors.\n\nArgs:\n    query_vector: The query vector\n    limit: Maximum number of results\n    filter: Optional metadata filter\n    \nReturns:\n    List of matching vectors with metadata and similarity scores",
            "args": [
              "self",
              "query_vector",
              "limit",
              "filter"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 256,
            "async": true,
            "decorators": [],
            "docstring": "Delete vectors from the database.\n\nArgs:\n    id: Optional specific vector ID to delete\n    filter: Optional metadata filter for bulk deletion\n    \nReturns:\n    True if deletion successful",
            "args": [
              "self",
              "id",
              "filter"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 292,
            "async": true,
            "decorators": [],
            "docstring": "Get a specific vector by ID.\n\nArgs:\n    id: Vector ID to retrieve\n    \nReturns:\n    Vector with metadata if found, None otherwise",
            "args": [
              "self",
              "id"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list",
            "line": 311,
            "async": true,
            "decorators": [],
            "docstring": "List vectors in the database.\n\nArgs:\n    limit: Maximum number of results\n    offset: Starting offset for pagination\n    filter: Optional metadata filter\n    \nReturns:\n    List of vectors with metadata",
            "args": [
              "self",
              "limit",
              "offset",
              "filter"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save",
            "line": 337,
            "async": true,
            "decorators": [],
            "docstring": "Save vectors and index to disk.",
            "args": [
              "self"
            ],
            "class": "FAISSVectorAdapter",
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "FAISSVectorAdapter",
            "line": 32,
            "methods": [
              "__init__",
              "backend"
            ],
            "decorators": [],
            "docstring": "FAISS vector database adapter for high-performance similarity search.\n\nThis adapter provides fast vector operations using FAISS for\nhardware-accelerated vector similarity search (CPU or GPU).",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.logging.get_logger",
            "from": "hermes.core.logging",
            "name": "get_logger",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.core.database.adapters.VectorDatabaseAdapter",
            "from": "hermes.core.database.adapters",
            "name": "VectorDatabaseAdapter",
            "alias": null,
            "line": 15
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 16
          },
          {
            "module": "hermes.adapters.vector.faiss.operations.store_vector",
            "from": "hermes.adapters.vector.faiss.operations",
            "name": "store_vector",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.adapters.vector.faiss.operations.search_vectors",
            "from": "hermes.adapters.vector.faiss.operations",
            "name": "search_vectors",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.adapters.vector.faiss.operations.delete_vectors",
            "from": "hermes.adapters.vector.faiss.operations",
            "name": "delete_vectors",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.adapters.vector.faiss.operations.get_vector",
            "from": "hermes.adapters.vector.faiss.operations",
            "name": "get_vector",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.adapters.vector.faiss.operations.list_vectors",
            "from": "hermes.adapters.vector.faiss.operations",
            "name": "list_vectors",
            "alias": null,
            "line": 18
          },
          {
            "module": "hermes.adapters.vector.faiss.index.create_index",
            "from": "hermes.adapters.vector.faiss.index",
            "name": "create_index",
            "alias": null,
            "line": 25
          },
          {
            "module": "hermes.adapters.vector.faiss.utils.rebuild_id_mappings",
            "from": "hermes.adapters.vector.faiss.utils",
            "name": "rebuild_id_mappings",
            "alias": null,
            "line": 26
          },
          {
            "module": "torch",
            "alias": null,
            "line": 81
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 117
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 346
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FAISSVectorAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.backend",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 90,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.connect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.disconnect",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 150,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.is_connected",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 186,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 227,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 256,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 292,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter.list",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 311,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "FAISSVectorAdapter._save",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/adapter.py",
            "line": 337,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 356,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/operations.py",
      "analysis": {
        "functions": [
          {
            "name": "store_vector",
            "line": 20,
            "async": true,
            "decorators": [],
            "docstring": "Store a vector in the database.\n\nArgs:\n    vectors: Dictionary of vector data\n    index: FAISS index\n    id_to_index: ID to index mapping\n    index_to_id: Index to ID mapping\n    id: Unique identifier for the vector\n    vector: The vector embedding\n    metadata: Optional metadata to store with the vector\n    text: Optional text content associated with the vector\n    vector_dim: Vector dimension\n    \nReturns:\n    Tuple of (vectors, id_to_index, index_to_id, success)",
            "args": [
              "vectors",
              "index",
              "id_to_index",
              "index_to_id",
              "id",
              "vector",
              "metadata",
              "text",
              "vector_dim"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "search_vectors",
            "line": 80,
            "async": true,
            "decorators": [],
            "docstring": "Search for similar vectors.\n\nArgs:\n    vectors: Dictionary of vector data\n    index: FAISS index\n    id_to_index: ID to index mapping\n    index_to_id: Index to ID mapping\n    query_vector: The query vector\n    limit: Maximum number of results\n    filter: Optional metadata filter\n    \nReturns:\n    List of matching vectors with metadata and similarity scores",
            "args": [
              "vectors",
              "index",
              "id_to_index",
              "index_to_id",
              "query_vector",
              "limit",
              "filter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "delete_vectors",
            "line": 161,
            "async": true,
            "decorators": [],
            "docstring": "Delete vectors from the database.\n\nArgs:\n    vectors: Dictionary of vector data\n    index: FAISS index\n    id_to_index: ID to index mapping\n    index_to_id: Index to ID mapping\n    id: Optional specific vector ID to delete\n    filter: Optional metadata filter for bulk deletion\n    vector_dim: Vector dimension\n    use_gpu: Whether to use GPU acceleration\n    \nReturns:\n    Tuple of (vectors, id_to_index, index_to_id, success)",
            "args": [
              "vectors",
              "index",
              "id_to_index",
              "index_to_id",
              "id",
              "filter",
              "vector_dim",
              "use_gpu"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_vector",
            "line": 255,
            "async": true,
            "decorators": [],
            "docstring": "Get a specific vector by ID.\n\nArgs:\n    vectors: Dictionary of vector data\n    id: Vector ID to retrieve\n    \nReturns:\n    Vector with metadata if found, None otherwise",
            "args": [
              "vectors",
              "id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_vectors",
            "line": 289,
            "async": true,
            "decorators": [],
            "docstring": "List vectors in the database.\n\nArgs:\n    vectors: Dictionary of vector data\n    limit: Maximum number of results\n    offset: Starting offset for pagination\n    filter: Optional metadata filter\n    \nReturns:\n    List of vectors with metadata",
            "args": [
              "vectors",
              "limit",
              "offset",
              "filter"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 7
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 8
          },
          {
            "module": "faiss",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "hermes.adapters.vector.faiss.utils.matches_filter",
            "from": "hermes.adapters.vector.faiss.utils",
            "name": "matches_filter",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.adapters.vector.faiss.utils.rebuild_id_mappings",
            "from": "hermes.adapters.vector.faiss.utils",
            "name": "rebuild_id_mappings",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.adapters.vector.faiss.index.add_to_index",
            "from": "hermes.adapters.vector.faiss.index",
            "name": "add_to_index",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.adapters.vector.faiss.index.remove_from_index",
            "from": "hermes.adapters.vector.faiss.index",
            "name": "remove_from_index",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.adapters.vector.faiss.index.create_index",
            "from": "hermes.adapters.vector.faiss.index",
            "name": "create_index",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "store_vector",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/operations.py",
            "line": 20,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "search_vectors",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/operations.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "delete_vectors",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/operations.py",
            "line": 161,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_vector",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/operations.py",
            "line": 255,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_vectors",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/operations.py",
            "line": 289,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 333,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/utils.py",
      "analysis": {
        "functions": [
          {
            "name": "matches_filter",
            "line": 10,
            "async": false,
            "decorators": [],
            "docstring": "Check if a vector matches a metadata filter.\n\nArgs:\n    vector: Vector data dictionary\n    filter: Metadata filter dictionary\n    \nReturns:\n    True if the vector matches the filter",
            "args": [
              "vector",
              "filter"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "rebuild_id_mappings",
            "line": 49,
            "async": false,
            "decorators": [],
            "docstring": "Rebuild ID to index mappings.\n\nArgs:\n    vectors: Dictionary of vector data\n    \nReturns:\n    Tuple of (id_to_index, index_to_id) mappings",
            "args": [
              "vectors"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "matches_filter",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/utils.py",
            "line": 10,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "rebuild_id_mappings",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/adapters/vector/faiss/utils.py",
            "line": 49,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 66,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/document_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the document database client.\n\nArgs:\n    request_handler: Base request handler for API communication",
            "args": [
              "self",
              "request_handler"
            ],
            "class": "DocumentDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "insert",
            "line": 28,
            "async": true,
            "decorators": [],
            "docstring": "Insert a document.\n\nArgs:\n    collection: Collection to insert into\n    document: Document to insert\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Result with document ID",
            "args": [
              "self",
              "collection",
              "document",
              "namespace",
              "backend"
            ],
            "class": "DocumentDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "find",
            "line": 60,
            "async": true,
            "decorators": [],
            "docstring": "Find documents matching a query.\n\nArgs:\n    collection: Collection to search in\n    query: Query filter\n    limit: Maximum number of results\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Matching documents",
            "args": [
              "self",
              "collection",
              "query",
              "limit",
              "namespace",
              "backend"
            ],
            "class": "DocumentDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update",
            "line": 95,
            "async": true,
            "decorators": [],
            "docstring": "Update documents matching a query.\n\nArgs:\n    collection: Collection to update in\n    query: Query filter\n    update: Update operations\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the update operation",
            "args": [
              "self",
              "collection",
              "query",
              "update",
              "namespace",
              "backend"
            ],
            "class": "DocumentDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DocumentDatabaseClient",
            "line": 11,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with document database services.\n\nThis class provides methods for document operations like inserting,\nfinding, and updating documents.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DocumentDatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/document_client.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseClient.insert",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/document_client.py",
            "line": 28,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseClient.find",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/document_client.py",
            "line": 60,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "DocumentDatabaseClient.update",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/document_client.py",
            "line": 95,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 129,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/vector_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the vector database client.\n\nArgs:\n    request_handler: Base request handler for API communication",
            "args": [
              "self",
              "request_handler"
            ],
            "class": "VectorDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store",
            "line": 27,
            "async": true,
            "decorators": [],
            "docstring": "Store vectors in the database.\n\nArgs:\n    vectors: List of vector embeddings\n    metadatas: Optional list of metadata for each vector\n    ids: Optional list of IDs for each vector\n    namespace: Namespace for the vectors\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the storage operation",
            "args": [
              "self",
              "vectors",
              "metadatas",
              "ids",
              "namespace",
              "backend"
            ],
            "class": "VectorDatabaseClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "search",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Search for similar vectors.\n\nArgs:\n    query_vector: Vector to search for\n    top_k: Number of results to return\n    namespace: Namespace to search in\n    filter_dict: Optional metadata filter\n    backend: Optional specific backend to use\n    \nReturns:\n    Search results with scores and metadata",
            "args": [
              "self",
              "query_vector",
              "top_k",
              "namespace",
              "filter_dict",
              "backend"
            ],
            "class": "VectorDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 100,
            "async": true,
            "decorators": [],
            "docstring": "Delete vectors from the database.\n\nArgs:\n    ids: List of vector IDs to delete\n    namespace: Namespace containing the vectors\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the delete operation",
            "args": [
              "self",
              "ids",
              "namespace",
              "backend"
            ],
            "class": "VectorDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "VectorDatabaseClient",
            "line": 11,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with vector database services.\n\nThis class provides methods for vector storage, search, and deletion.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "VectorDatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/vector_client.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "VectorDatabaseClient.store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/vector_client.py",
            "line": 27,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseClient.search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/vector_client.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "VectorDatabaseClient.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/vector_client.py",
            "line": 100,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 128,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/client_base.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 24,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the request handler.\n\nArgs:\n    endpoint: API endpoint for database services\n    use_mcp: Whether to use the MCP protocol\n    component_id: Component identifier",
            "args": [
              "self",
              "endpoint",
              "use_mcp",
              "component_id"
            ],
            "class": "BaseRequest",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_invoke",
            "line": 40,
            "async": true,
            "decorators": [],
            "docstring": "Invoke an MCP capability.\n\nArgs:\n    capability: Name of the capability to invoke\n    parameters: Parameters for the capability\n    \nReturns:\n    Response from the capability invocation",
            "args": [
              "self",
              "capability",
              "parameters"
            ],
            "class": "BaseRequest",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "api_request",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Make a direct API request.\n\nArgs:\n    method: HTTP method (GET, POST, PUT, DELETE)\n    path: API path\n    data: Optional request data\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "method",
              "path",
              "data"
            ],
            "class": "BaseRequest",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "execute_request",
            "line": 111,
            "async": true,
            "decorators": [],
            "docstring": "Execute a database request using either MCP or REST API.\n\nArgs:\n    capability: MCP capability name\n    api_path: REST API path\n    method: HTTP method for REST API\n    parameters: Request parameters\n    \nReturns:\n    Response from the request",
            "args": [
              "self",
              "capability",
              "api_path",
              "method",
              "parameters"
            ],
            "class": "BaseRequest",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BaseRequest",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Base request handler for database operations.\n\nThis class handles the communication with the database services,\nsupporting both MCP and REST API protocols.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BaseRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/client_base.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BaseRequest.mcp_invoke",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/client_base.py",
            "line": 40,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BaseRequest.api_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/client_base.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "BaseRequest.execute_request",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/client_base.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 133,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/relation_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the relational database client.\n\nArgs:\n    request_handler: Base request handler for API communication",
            "args": [
              "self",
              "request_handler"
            ],
            "class": "RelationalDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 27,
            "async": true,
            "decorators": [],
            "docstring": "Execute an SQL query.\n\nArgs:\n    query: SQL query\n    parameters: Query parameters\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "query",
              "parameters",
              "namespace",
              "backend"
            ],
            "class": "RelationalDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RelationalDatabaseClient",
            "line": 11,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with relational database services.\n\nThis class provides methods for SQL operations like executing queries.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RelationalDatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/relation_client.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RelationalDatabaseClient.execute",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/relation_client.py",
            "line": 27,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 58,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/graph_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the graph database client.\n\nArgs:\n    request_handler: Base request handler for API communication",
            "args": [
              "self",
              "request_handler"
            ],
            "class": "GraphDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_node",
            "line": 28,
            "async": true,
            "decorators": [],
            "docstring": "Add a node to the graph.\n\nArgs:\n    node_id: ID for the node\n    labels: List of labels/types for the node\n    properties: Node properties\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the node addition",
            "args": [
              "self",
              "node_id",
              "labels",
              "properties",
              "namespace",
              "backend"
            ],
            "class": "GraphDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_relationship",
            "line": 63,
            "async": true,
            "decorators": [],
            "docstring": "Add a relationship between nodes.\n\nArgs:\n    source_id: Source node ID\n    target_id: Target node ID\n    rel_type: Relationship type\n    properties: Optional relationship properties\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the relationship addition",
            "args": [
              "self",
              "source_id",
              "target_id",
              "rel_type",
              "properties",
              "namespace",
              "backend"
            ],
            "class": "GraphDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query",
            "line": 102,
            "async": true,
            "decorators": [],
            "docstring": "Execute a graph query.\n\nArgs:\n    query: Query string (e.g., Cypher for Neo4j)\n    query_params: Optional query parameters\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Query results",
            "args": [
              "self",
              "query",
              "query_params",
              "namespace",
              "backend"
            ],
            "class": "GraphDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "GraphDatabaseClient",
            "line": 11,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with graph database services.\n\nThis class provides methods for graph operations like adding nodes,\ncreating relationships, and executing queries.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "GraphDatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/graph_client.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GraphDatabaseClient.add_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/graph_client.py",
            "line": 28,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseClient.add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/graph_client.py",
            "line": 63,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GraphDatabaseClient.query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/graph_client.py",
            "line": 102,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 133,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/cache_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the cache database client.\n\nArgs:\n    request_handler: Base request handler for API communication",
            "args": [
              "self",
              "request_handler"
            ],
            "class": "CacheDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 28,
            "async": true,
            "decorators": [],
            "docstring": "Set a value in the cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the cache operation",
            "args": [
              "self",
              "key",
              "value",
              "ttl",
              "namespace",
              "backend"
            ],
            "class": "CacheDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Get a value from the cache.\n\nArgs:\n    key: Cache key\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Cached value or None if not found",
            "args": [
              "self",
              "key",
              "namespace",
              "backend"
            ],
            "class": "CacheDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "CacheDatabaseClient",
            "line": 11,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with cache database services.\n\nThis class provides methods for cache operations like setting and\nretrieving values with expiration.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "CacheDatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/cache_client.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "CacheDatabaseClient.set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/cache_client.py",
            "line": 28,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "CacheDatabaseClient.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/cache_client.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 94,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/key_value_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the key-value database client.\n\nArgs:\n    request_handler: Base request handler for API communication",
            "args": [
              "self",
              "request_handler"
            ],
            "class": "KeyValueDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set",
            "line": 27,
            "async": true,
            "decorators": [],
            "docstring": "Set a key-value pair.\n\nArgs:\n    key: Key to set\n    value: Value to store\n    namespace: Namespace for the data\n    ttl: Optional time-to-live in seconds\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the set operation",
            "args": [
              "self",
              "key",
              "value",
              "namespace",
              "ttl",
              "backend"
            ],
            "class": "KeyValueDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Get a value by key.\n\nArgs:\n    key: Key to retrieve\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Retrieved value or None if not found",
            "args": [
              "self",
              "key",
              "namespace",
              "backend"
            ],
            "class": "KeyValueDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Delete a key-value pair.\n\nArgs:\n    key: Key to delete\n    namespace: Namespace for the data\n    backend: Optional specific backend to use\n    \nReturns:\n    Result of the delete operation",
            "args": [
              "self",
              "key",
              "namespace",
              "backend"
            ],
            "class": "KeyValueDatabaseClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "KeyValueDatabaseClient",
            "line": 11,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with key-value database services.\n\nThis class provides methods for key-value operations like set, get, and delete.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 7
          },
          {
            "module": "hermes.api.database.client_base.BaseRequest",
            "from": "hermes.api.database.client_base",
            "name": "BaseRequest",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "KeyValueDatabaseClient",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/key_value_client.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseClient.set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/key_value_client.py",
            "line": 27,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseClient.get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/key_value_client.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "KeyValueDatabaseClient.delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/key_value_client.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 124,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
      "analysis": {
        "functions": [
          {
            "name": "get_database_manager",
            "line": 37,
            "async": true,
            "decorators": [],
            "docstring": "Get a database manager instance.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vector_store",
            "line": 52,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Store vectors in the database.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vector_search",
            "line": 80,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Search for similar vectors.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "vector_delete",
            "line": 108,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete vectors by ID.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "kv_set",
            "line": 134,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Set a key-value pair.",
            "args": [
              "namespace",
              "key",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kv_get",
            "line": 163,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a value by key.",
            "args": [
              "namespace",
              "key",
              "backend",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "kv_delete",
            "line": 188,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a key-value pair.",
            "args": [
              "namespace",
              "key",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "graph_add_node",
            "line": 215,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add a node to the graph.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "graph_add_relationship",
            "line": 243,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Add a relationship between nodes.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "graph_query",
            "line": 272,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a graph query.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "document_insert",
            "line": 301,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Insert a document.",
            "args": [
              "namespace",
              "collection",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "document_find",
            "line": 329,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Find documents matching a query.",
            "args": [
              "namespace",
              "collection",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "document_update",
            "line": 358,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update documents matching a query.",
            "args": [
              "namespace",
              "collection",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "cache_set",
            "line": 389,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Set a cache value.",
            "args": [
              "namespace",
              "key",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cache_get",
            "line": 418,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a cache value.",
            "args": [
              "namespace",
              "key",
              "backend",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sql_execute",
            "line": 445,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute an SQL query.",
            "args": [
              "namespace",
              "request",
              "db_manager"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "vector_store",
            "line": 52,
            "method": "@post",
            "async": true
          },
          {
            "name": "vector_search",
            "line": 80,
            "method": "@post",
            "async": true
          },
          {
            "name": "vector_delete",
            "line": 108,
            "method": "@delete",
            "async": true
          },
          {
            "name": "kv_set",
            "line": 134,
            "method": "@put",
            "async": true
          },
          {
            "name": "kv_get",
            "line": 163,
            "method": "@get",
            "async": true
          },
          {
            "name": "kv_delete",
            "line": 188,
            "method": "@delete",
            "async": true
          },
          {
            "name": "graph_add_node",
            "line": 215,
            "method": "@post",
            "async": true
          },
          {
            "name": "graph_add_relationship",
            "line": 243,
            "method": "@post",
            "async": true
          },
          {
            "name": "graph_query",
            "line": 272,
            "method": "@post",
            "async": true
          },
          {
            "name": "document_insert",
            "line": 301,
            "method": "@post",
            "async": true
          },
          {
            "name": "document_find",
            "line": 329,
            "method": "@post",
            "async": true
          },
          {
            "name": "document_update",
            "line": 358,
            "method": "@put",
            "async": true
          },
          {
            "name": "cache_set",
            "line": 389,
            "method": "@put",
            "async": true
          },
          {
            "name": "cache_get",
            "line": 418,
            "method": "@get",
            "async": true
          },
          {
            "name": "sql_execute",
            "line": 445,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "hermes.core.database.manager.DatabaseManager",
            "from": "hermes.core.database.manager",
            "name": "DatabaseManager",
            "alias": null,
            "line": 12
          },
          {
            "module": "hermes.core.database.database_types.DatabaseType",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseType",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.core.database.database_types.DatabaseBackend",
            "from": "hermes.core.database.database_types",
            "name": "DatabaseBackend",
            "alias": null,
            "line": 13
          },
          {
            "module": "hermes.api.database.models.VectorStoreRequest",
            "from": "hermes.api.database.models",
            "name": "VectorStoreRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.VectorSearchRequest",
            "from": "hermes.api.database.models",
            "name": "VectorSearchRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.VectorDeleteRequest",
            "from": "hermes.api.database.models",
            "name": "VectorDeleteRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.KeyValueSetRequest",
            "from": "hermes.api.database.models",
            "name": "KeyValueSetRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.KeyValueDeleteRequest",
            "from": "hermes.api.database.models",
            "name": "KeyValueDeleteRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.GraphAddNodeRequest",
            "from": "hermes.api.database.models",
            "name": "GraphAddNodeRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.GraphAddRelationshipRequest",
            "from": "hermes.api.database.models",
            "name": "GraphAddRelationshipRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.GraphQueryRequest",
            "from": "hermes.api.database.models",
            "name": "GraphQueryRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.DocumentInsertRequest",
            "from": "hermes.api.database.models",
            "name": "DocumentInsertRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.DocumentFindRequest",
            "from": "hermes.api.database.models",
            "name": "DocumentFindRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.DocumentUpdateRequest",
            "from": "hermes.api.database.models",
            "name": "DocumentUpdateRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.CacheSetRequest",
            "from": "hermes.api.database.models",
            "name": "CacheSetRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.database.models.SqlExecuteRequest",
            "from": "hermes.api.database.models",
            "name": "SqlExecuteRequest",
            "alias": null,
            "line": 14
          },
          {
            "module": "hermes.api.app.app",
            "from": "hermes.api.app",
            "name": "app",
            "alias": null,
            "line": 39
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_database_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 37,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "vector_store",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "vector_search",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 80,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "vector_delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "kv_set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 134,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "kv_get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 163,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "kv_delete",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 188,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "graph_add_node",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 215,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "graph_add_relationship",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 243,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "graph_query",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 272,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "document_insert",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 301,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "document_find",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 329,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "document_update",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 358,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "cache_set",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 389,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cache_get",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 418,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "sql_execute",
            "file": "/Users/cskoons/projects/github/Tekton/Hermes/hermes/api/database/routes.py",
            "line": 445,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 467,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 69,
    "total_functions": 591,
    "total_classes": 77,
    "total_landmarks": 572,
    "patterns": [
      "singleton",
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 57,
    "mcp_tools": 12,
    "websocket_handlers": 2,
    "skipped_files": 33
  }
}