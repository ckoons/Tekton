{
  "component": "Sophia",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Sophia client.\n\nArgs:\n    base_url: Base URL for the Sophia API (defaults to SOPHIA_API_URL env variable or http://localhost:8006)",
            "args": [
              "self",
              "base_url"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "close",
            "line": 64,
            "async": true,
            "decorators": [],
            "docstring": "Close the client session.",
            "args": [
              "self"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_available",
            "line": 72,
            "async": true,
            "decorators": [],
            "docstring": "Check if Sophia is available.\n\nReturns:\n    True if Sophia is available",
            "args": [
              "self"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "submit_metric",
            "line": 94,
            "async": true,
            "decorators": [],
            "docstring": "Submit a metric to Sophia.\n\nArgs:\n    metric_id: Unique identifier for the metric type\n    value: Value of the metric\n    source: Source of the metric (e.g., component ID)\n    timestamp: ISO timestamp (defaults to current time)\n    context: Additional context for the metric\n    tags: Tags for categorizing the metric\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "metric_id",
              "value",
              "source",
              "timestamp",
              "context",
              "tags"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "submit_metrics_batch",
            "line": 130,
            "async": true,
            "decorators": [],
            "docstring": "Submit multiple metrics to Sophia.\n\nArgs:\n    metrics: List of metrics to submit\n    \nReturns:\n    List of responses from the API",
            "args": [
              "self",
              "metrics"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_metrics",
            "line": 148,
            "async": true,
            "decorators": [],
            "docstring": "Query metrics from Sophia.\n\nArgs:\n    metric_id: Filter by metric ID\n    source: Filter by source\n    tags: Filter by tags\n    start_time: Filter by start time (ISO format)\n    end_time: Filter by end time (ISO format)\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    sort: Sort order (e.g., \"timestamp:desc\")\n    \nReturns:\n    List of metrics matching the query",
            "args": [
              "self",
              "metric_id",
              "source",
              "tags",
              "start_time",
              "end_time",
              "limit",
              "offset",
              "sort"
            ],
            "class": "SophiaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "aggregate_metrics",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Aggregate metrics for analysis.\n\nArgs:\n    metric_id: Metric ID to aggregate\n    aggregation: Aggregation function (e.g., \"avg\", \"sum\", \"min\", \"max\")\n    interval: Interval for time-based aggregation (e.g., \"1h\", \"1d\")\n    source: Filter by source\n    tags: Filter by tags\n    start_time: Filter by start time (ISO format)\n    end_time: Filter by end time (ISO format)\n    \nReturns:\n    Aggregation result",
            "args": [
              "self",
              "metric_id",
              "aggregation",
              "interval",
              "source",
              "tags",
              "start_time",
              "end_time"
            ],
            "class": "SophiaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_experiment",
            "line": 251,
            "async": true,
            "decorators": [],
            "docstring": "Create a new experiment.\n\nArgs:\n    name: Name of the experiment\n    description: Description of the experiment\n    experiment_type: Type of experiment\n    target_components: List of components involved in the experiment\n    hypothesis: Hypothesis being tested\n    metrics: List of metrics to be tracked\n    parameters: Parameters for the experiment\n    start_time: Scheduled start time (ISO format)\n    end_time: Scheduled end time (ISO format)\n    sample_size: Target sample size\n    min_confidence: Minimum confidence level required\n    tags: Tags for categorizing the experiment\n    \nReturns:\n    Experiment ID",
            "args": [
              "self",
              "name",
              "description",
              "experiment_type",
              "target_components",
              "hypothesis",
              "metrics",
              "parameters",
              "start_time",
              "end_time",
              "sample_size",
              "min_confidence",
              "tags"
            ],
            "class": "SophiaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_experiment",
            "line": 317,
            "async": true,
            "decorators": [],
            "docstring": "Get details of a specific experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Experiment details",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_experiments",
            "line": 331,
            "async": true,
            "decorators": [],
            "docstring": "Query experiments with filtering.\n\nArgs:\n    status: Filter by status\n    experiment_type: Filter by experiment type\n    target_components: Filter by target components\n    tags: Filter by tags\n    start_after: Filter by start time after (ISO format)\n    start_before: Filter by start time before (ISO format)\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    \nReturns:\n    List of experiments matching the query",
            "args": [
              "self",
              "status",
              "experiment_type",
              "target_components",
              "tags",
              "start_after",
              "start_before",
              "limit",
              "offset"
            ],
            "class": "SophiaClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_experiment",
            "line": 385,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    updates: Updates to apply\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "experiment_id",
              "updates"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_experiment",
            "line": 404,
            "async": true,
            "decorators": [],
            "docstring": "Start an experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop_experiment",
            "line": 418,
            "async": true,
            "decorators": [],
            "docstring": "Stop an experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_experiment",
            "line": 432,
            "async": true,
            "decorators": [],
            "docstring": "Analyze an experiment's results.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_experiment_results",
            "line": 446,
            "async": true,
            "decorators": [],
            "docstring": "Get results of a completed experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Experiment results",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_recommendation",
            "line": 462,
            "async": true,
            "decorators": [],
            "docstring": "Create a new recommendation.\n\nArgs:\n    title: Title of the recommendation\n    description: Detailed description of the recommendation\n    recommendation_type: Type of recommendation\n    target_components: List of components this recommendation applies to\n    priority: Priority level\n    rationale: Rationale behind the recommendation\n    expected_impact: Expected impact of implementing the recommendation\n    implementation_complexity: Estimated complexity of implementation\n    supporting_evidence: Evidence supporting the recommendation\n    experiment_ids: Associated experiment IDs\n    tags: Tags for categorizing the recommendation\n    \nReturns:\n    Recommendation ID",
            "args": [
              "self",
              "title",
              "description",
              "recommendation_type",
              "target_components",
              "priority",
              "rationale",
              "expected_impact",
              "implementation_complexity",
              "supporting_evidence",
              "experiment_ids",
              "tags"
            ],
            "class": "SophiaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_recommendation",
            "line": 521,
            "async": true,
            "decorators": [],
            "docstring": "Get details of a specific recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    \nReturns:\n    Recommendation details",
            "args": [
              "self",
              "recommendation_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_recommendations",
            "line": 535,
            "async": true,
            "decorators": [],
            "docstring": "Query recommendations with filtering.\n\nArgs:\n    status: Filter by status\n    recommendation_type: Filter by recommendation type\n    priority: Filter by priority\n    target_components: Filter by target components\n    experiment_ids: Filter by associated experiment IDs\n    tags: Filter by tags\n    created_after: Filter by creation time after (ISO format)\n    created_before: Filter by creation time before (ISO format)\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    \nReturns:\n    List of recommendations matching the query",
            "args": [
              "self",
              "status",
              "recommendation_type",
              "priority",
              "target_components",
              "experiment_ids",
              "tags",
              "created_after",
              "created_before",
              "limit",
              "offset"
            ],
            "class": "SophiaClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_recommendation",
            "line": 599,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    updates: Updates to apply\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "recommendation_id",
              "updates"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_recommendation_status",
            "line": 618,
            "async": true,
            "decorators": [],
            "docstring": "Update the status of a recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    status: New status for the recommendation\n    notes: Notes on the status update\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "recommendation_id",
              "status",
              "notes"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_recommendation",
            "line": 644,
            "async": true,
            "decorators": [],
            "docstring": "Verify the implementation of a recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    verification_metrics: Metrics used for verification\n    observed_impact: Observed impact after implementation\n    verification_status: Result of verification (success/partial/failure)\n    verification_notes: Notes on the verification process\n    follow_up_actions: Suggested follow-up actions if needed\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "recommendation_id",
              "verification_metrics",
              "observed_impact",
              "verification_status",
              "verification_notes",
              "follow_up_actions"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_intelligence_measurement",
            "line": 686,
            "async": true,
            "decorators": [],
            "docstring": "Record an intelligence measurement.\n\nArgs:\n    component_id: ID of the component being measured\n    dimension: Intelligence dimension being measured\n    measurement_method: Method used for measurement\n    score: Measurement score (0.0-1.0)\n    confidence: Confidence in the measurement (0.0-1.0)\n    context: Context of the measurement\n    evidence: Evidence supporting the measurement\n    evaluator: Entity performing the evaluation\n    timestamp: Timestamp of the measurement (ISO format)\n    tags: Tags for categorizing the measurement\n    \nReturns:\n    Measurement ID",
            "args": [
              "self",
              "component_id",
              "dimension",
              "measurement_method",
              "score",
              "confidence",
              "context",
              "evidence",
              "evaluator",
              "timestamp",
              "tags"
            ],
            "class": "SophiaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "query_intelligence_measurements",
            "line": 742,
            "async": true,
            "decorators": [],
            "docstring": "Query intelligence measurements with filtering.\n\nArgs:\n    component_id: Filter by component ID\n    dimensions: Filter by dimensions\n    measurement_method: Filter by measurement method\n    min_score: Filter by minimum score\n    max_score: Filter by maximum score\n    min_confidence: Filter by minimum confidence\n    evaluator: Filter by evaluator\n    measured_after: Filter by measurement time after (ISO format)\n    measured_before: Filter by measurement time before (ISO format)\n    tags: Filter by tags\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    \nReturns:\n    List of measurements matching the query",
            "args": [
              "self",
              "component_id",
              "dimensions",
              "measurement_method",
              "min_score",
              "max_score",
              "min_confidence",
              "evaluator",
              "measured_after",
              "measured_before",
              "tags",
              "limit",
              "offset"
            ],
            "class": "SophiaClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_component_intelligence_profile",
            "line": 816,
            "async": true,
            "decorators": [],
            "docstring": "Get the intelligence profile of a component.\n\nArgs:\n    component_id: ID of the component\n    timestamp: Timestamp for historical profile (ISO format)\n    \nReturns:\n    Component intelligence profile",
            "args": [
              "self",
              "component_id",
              "timestamp"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compare_intelligence_profiles",
            "line": 840,
            "async": true,
            "decorators": [],
            "docstring": "Compare intelligence between components.\n\nArgs:\n    component_ids: List of component IDs to compare\n    dimensions: Dimensions to compare (all if None)\n    \nReturns:\n    Comparison result",
            "args": [
              "self",
              "component_ids",
              "dimensions"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_dimensions",
            "line": 866,
            "async": true,
            "decorators": [],
            "docstring": "Get information about all intelligence dimensions.\n\nReturns:\n    Dictionary of intelligence dimensions",
            "args": [
              "self"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_dimension",
            "line": 877,
            "async": true,
            "decorators": [],
            "docstring": "Get detailed information about a specific intelligence dimension.\n\nArgs:\n    dimension: Intelligence dimension\n    \nReturns:\n    Dimension information",
            "args": [
              "self",
              "dimension"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_ecosystem_intelligence_profile",
            "line": 891,
            "async": true,
            "decorators": [],
            "docstring": "Get an intelligence profile for the entire Tekton ecosystem.\n\nReturns:\n    Ecosystem intelligence profile",
            "args": [
              "self"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component",
            "line": 904,
            "async": true,
            "decorators": [],
            "docstring": "Register a component with Sophia.\n\nArgs:\n    component_id: Unique identifier for the component\n    name: Human-readable name of the component\n    description: Description of the component's purpose\n    component_type: Type of component\n    version: Version of the component\n    api_endpoints: List of API endpoints provided by the component\n    capabilities: List of capabilities provided by the component\n    dependencies: List of dependencies required by the component\n    metrics_provided: List of metrics provided by the component\n    port: Port on which the component runs\n    tags: Tags for categorizing the component\n    \nReturns:\n    True if registration was successful",
            "args": [
              "self",
              "component_id",
              "name",
              "description",
              "component_type",
              "version",
              "api_endpoints",
              "capabilities",
              "dependencies",
              "metrics_provided",
              "port",
              "tags"
            ],
            "class": "SophiaClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_component",
            "line": 969,
            "async": true,
            "decorators": [],
            "docstring": "Get details of a specific registered component.\n\nArgs:\n    component_id: ID of the component\n    \nReturns:\n    Component details",
            "args": [
              "self",
              "component_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_components",
            "line": 983,
            "async": true,
            "decorators": [],
            "docstring": "Query registered components with filtering.\n\nArgs:\n    component_type: Filter by component type\n    capabilities: Filter by capabilities\n    dependencies: Filter by dependencies\n    metrics_provided: Filter by provided metrics\n    tags: Filter by tags\n    status: Filter by status\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    \nReturns:\n    List of components matching the query",
            "args": [
              "self",
              "component_type",
              "capabilities",
              "dependencies",
              "metrics_provided",
              "tags",
              "status",
              "limit",
              "offset"
            ],
            "class": "SophiaClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_component",
            "line": 1037,
            "async": true,
            "decorators": [],
            "docstring": "Update a registered component.\n\nArgs:\n    component_id: ID of the component\n    updates: Updates to apply\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "component_id",
              "updates"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_component_performance",
            "line": 1056,
            "async": true,
            "decorators": [],
            "docstring": "Analyze the performance of a component.\n\nArgs:\n    component_id: ID of the component\n    start_time: Filter by start time (ISO format)\n    end_time: Filter by end time (ISO format)\n    metrics: List of metrics to include in the analysis\n    \nReturns:\n    Performance analysis",
            "args": [
              "self",
              "component_id",
              "start_time",
              "end_time",
              "metrics"
            ],
            "class": "SophiaClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_component_interaction",
            "line": 1090,
            "async": true,
            "decorators": [],
            "docstring": "Analyze the interaction between components.\n\nArgs:\n    component_ids: List of component IDs to analyze\n    start_time: Filter by start time (ISO format)\n    end_time: Filter by end time (ISO format)\n    \nReturns:\n    Interaction analysis",
            "args": [
              "self",
              "component_ids",
              "start_time",
              "end_time"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_research_project",
            "line": 1125,
            "async": true,
            "decorators": [],
            "docstring": "Create a new research project.\n\nArgs:\n    title: Title of the research project\n    description: Detailed description of the project\n    approach: Primary research approach\n    research_questions: Research questions being investigated\n    hypothesis: Primary hypothesis\n    target_components: Components involved in the research\n    data_requirements: Data required for the research\n    expected_outcomes: Expected outcomes of the research\n    estimated_duration: Estimated duration of the project\n    tags: Tags for categorizing the project\n    \nReturns:\n    Project ID",
            "args": [
              "self",
              "title",
              "description",
              "approach",
              "research_questions",
              "hypothesis",
              "target_components",
              "data_requirements",
              "expected_outcomes",
              "estimated_duration",
              "tags"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_research_project",
            "line": 1179,
            "async": true,
            "decorators": [],
            "docstring": "Get details of a specific research project.\n\nArgs:\n    project_id: ID of the research project\n    \nReturns:\n    Research project details",
            "args": [
              "self",
              "project_id"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_research_projects",
            "line": 1193,
            "async": true,
            "decorators": [],
            "docstring": "Query research projects with filtering.\n\nArgs:\n    status: Filter by status\n    approach: Filter by research approach\n    target_components: Filter by target components\n    tags: Filter by tags\n    created_after: Filter by creation time after (ISO format)\n    created_before: Filter by creation time before (ISO format)\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    \nReturns:\n    List of research projects matching the query",
            "args": [
              "self",
              "status",
              "approach",
              "target_components",
              "tags",
              "created_after",
              "created_before",
              "limit",
              "offset"
            ],
            "class": "SophiaClient",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "update_research_project",
            "line": 1247,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing research project.\n\nArgs:\n    project_id: ID of the research project\n    updates: Updates to apply\n    \nReturns:\n    Response from the API",
            "args": [
              "self",
              "project_id",
              "updates"
            ],
            "class": "SophiaClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SophiaClient",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for interacting with the Sophia API.\n\nThis client provides methods for accessing Sophia's capabilities, including\nmetrics collection, experiment management, recommendation management,\nintelligence measurement, and component analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "httpx",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.utils.tekton_utils.get_config",
            "from": "sophia.utils.tekton_utils",
            "name": "get_config",
            "alias": null,
            "line": 17
          },
          {
            "module": "sophia.utils.tekton_utils.get_logger",
            "from": "sophia.utils.tekton_utils",
            "name": "get_logger",
            "alias": null,
            "line": 17
          },
          {
            "module": "sophia.utils.tekton_utils.create_http_client",
            "from": "sophia.utils.tekton_utils",
            "name": "create_http_client",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SophiaClient",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaClient.close",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.is_available",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 72,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.submit_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 94,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.submit_metrics_batch",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 130,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.query_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 148,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.aggregate_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.create_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 251,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 317,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.query_experiments",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 331,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaClient.update_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 385,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.start_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 404,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.stop_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 418,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.analyze_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 432,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_experiment_results",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 446,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.create_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 462,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 521,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.query_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 535,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaClient.update_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 599,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.update_recommendation_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 618,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.verify_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 644,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.record_intelligence_measurement",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 686,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.query_intelligence_measurements",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 742,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_component_intelligence_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 816,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.compare_intelligence_profiles",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 840,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_intelligence_dimensions",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 866,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_intelligence_dimension",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 877,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_ecosystem_intelligence_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 891,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 904,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 969,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.query_components",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 983,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaClient.update_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1037,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.analyze_component_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1056,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.analyze_component_interaction",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1090,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.create_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.get_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1179,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaClient.query_research_projects",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1193,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaClient.update_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/client.py",
            "line": 1247,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1264,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_model",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Register a model with the registry.\n\nArgs:\n    model_id: Unique identifier for the model\n    model_type: Type of model (embedding, classification, etc.)\n    provider: The provider of the model (local, huggingface, etc.)\n    capabilities: List of capabilities the model provides\n    metadata: Additional model information\n    \nReturns:\n    True if registration was successful",
            "args": [
              "self",
              "model_id",
              "model_type",
              "provider",
              "capabilities",
              "metadata"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_model",
            "line": 69,
            "async": true,
            "decorators": [],
            "docstring": "Load a registered model into memory.\n\nArgs:\n    model_id: ID of the model to load\n    \nReturns:\n    True if the model was loaded successfully",
            "args": [
              "self",
              "model_id"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unload_model",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "Unload a model from memory.\n\nArgs:\n    model_id: ID of the model to unload\n    \nReturns:\n    True if the model was unloaded successfully",
            "args": [
              "self",
              "model_id"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_model_info",
            "line": 122,
            "async": false,
            "decorators": [],
            "docstring": "Get information about a registered model.\n\nArgs:\n    model_id: ID of the model\n    \nReturns:\n    Model information dictionary or None if not found",
            "args": [
              "self",
              "model_id"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_default_model",
            "line": 134,
            "async": false,
            "decorators": [],
            "docstring": "Get the default model ID for a specific type.\n\nArgs:\n    model_type: Type of model to get\n    \nReturns:\n    Model ID or None if no default is set",
            "args": [
              "self",
              "model_type"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_default_model",
            "line": 146,
            "async": false,
            "decorators": [],
            "docstring": "Set the default model for a specific type.\n\nArgs:\n    model_type: Type of model\n    model_id: ID of the model to set as default\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "model_type",
              "model_id"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_models_by_type",
            "line": 169,
            "async": false,
            "decorators": [],
            "docstring": "Get all model IDs of a specific type.\n\nArgs:\n    model_type: Type of models to get\n    \nReturns:\n    List of model IDs",
            "args": [
              "self",
              "model_type"
            ],
            "class": "ModelRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 191,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "MLEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 195,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the ML engine.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MLEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_register_builtin_models",
            "line": 211,
            "async": true,
            "decorators": [],
            "docstring": "Register built-in ML models.",
            "args": [
              "self"
            ],
            "class": "MLEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 238,
            "async": true,
            "decorators": [],
            "docstring": "Start the ML engine and load default models.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MLEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 261,
            "async": true,
            "decorators": [],
            "docstring": "Stop the ML engine and unload all models.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MLEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "embed_text",
            "line": 278,
            "async": true,
            "decorators": [],
            "docstring": "Generate embeddings for a text string.\n\nArgs:\n    text: The text to embed\n    model_id: ID of the embedding model to use (optional)\n    \nReturns:\n    List of embedding values",
            "args": [
              "self",
              "text",
              "model_id"
            ],
            "class": "MLEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "classify_text",
            "line": 304,
            "async": true,
            "decorators": [],
            "docstring": "Classify text into provided categories.\n\nArgs:\n    text: The text to classify\n    categories: List of categories to classify into\n    model_id: ID of the classification model to use (optional)\n    \nReturns:\n    Dictionary mapping categories to confidence scores",
            "args": [
              "self",
              "text",
              "categories",
              "model_id"
            ],
            "class": "MLEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_model_status",
            "line": 334,
            "async": true,
            "decorators": [],
            "docstring": "Get the status of all models.\n\nReturns:\n    Dictionary with model status information",
            "args": [
              "self"
            ],
            "class": "MLEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_ml_engine",
            "line": 351,
            "async": true,
            "decorators": [],
            "docstring": "Get the global ML engine instance.\n\nReturns:\n    MLEngine instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ModelRegistry",
            "line": 16,
            "methods": [
              "__init__",
              "get_model_info",
              "get_default_model",
              "set_default_model",
              "get_models_by_type"
            ],
            "decorators": [],
            "docstring": "Registry for managing ML models in Sophia.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MLEngine",
            "line": 184,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Core machine learning engine for Sophia.\n\nManages ML model registration, loading, and execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "importlib",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ModelRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ModelRegistry.register_model",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ModelRegistry.load_model",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 69,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ModelRegistry.unload_model",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ModelRegistry.get_model_info",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 122,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ModelRegistry.get_default_model",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 134,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ModelRegistry.set_default_model",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 146,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ModelRegistry.get_models_by_type",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 169,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MLEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 184,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MLEngine.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 195,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MLEngine.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 238,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MLEngine.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 261,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MLEngine.embed_text",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 278,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MLEngine.classify_text",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 304,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MLEngine.get_model_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 334,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_ml_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/ml_engine.py",
            "line": 351,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 360,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 27,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the intelligence measurer.\n\nArgs:\n    metrics_engine: Metrics engine instance\n    analysis_engine: Analysis engine instance",
            "args": [
              "self",
              "metrics_engine",
              "analysis_engine"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "measure_language_processing",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Measure language processing capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_reasoning",
            "line": 116,
            "async": true,
            "decorators": [],
            "docstring": "Measure reasoning capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_knowledge",
            "line": 194,
            "async": true,
            "decorators": [],
            "docstring": "Measure knowledge capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_learning",
            "line": 272,
            "async": true,
            "decorators": [],
            "docstring": "Measure learning capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_creativity",
            "line": 350,
            "async": true,
            "decorators": [],
            "docstring": "Measure creativity capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_planning",
            "line": 428,
            "async": true,
            "decorators": [],
            "docstring": "Measure planning capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_problem_solving",
            "line": 506,
            "async": true,
            "decorators": [],
            "docstring": "Measure problem solving capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_adaptation",
            "line": 584,
            "async": true,
            "decorators": [],
            "docstring": "Measure adaptation capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_collaboration",
            "line": 662,
            "async": true,
            "decorators": [],
            "docstring": "Measure collaboration capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_metacognition",
            "line": 740,
            "async": true,
            "decorators": [],
            "docstring": "Measure metacognition capabilities.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_all_dimensions",
            "line": 818,
            "async": true,
            "decorators": [],
            "docstring": "Measure all intelligence dimensions.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Dictionary of dimension measurements",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_start_time",
            "line": 871,
            "async": false,
            "decorators": [],
            "docstring": "Calculate start time based on time window.\n\nArgs:\n    time_window: Time window (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Start time in ISO format",
            "args": [
              "self",
              "time_window"
            ],
            "class": "IntelligenceMeasurer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 913,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the intelligence measurement framework.",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 922,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the intelligence measurement framework.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 948,
            "async": true,
            "decorators": [],
            "docstring": "Start the intelligence measurement framework.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 965,
            "async": true,
            "decorators": [],
            "docstring": "Stop the intelligence measurement framework and clean up resources.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_measurement",
            "line": 980,
            "async": true,
            "decorators": [],
            "docstring": "Record an intelligence measurement.\n\nArgs:\n    component_id: ID of the component being measured\n    dimension: Intelligence dimension being measured\n    measurement_method: Method used for measurement\n    score: Measurement score (0.0-1.0)\n    confidence: Confidence in the measurement (0.0-1.0)\n    context: Context of the measurement\n    evidence: Evidence supporting the measurement\n    evaluator: Entity performing the evaluation\n    timestamp: Timestamp of the measurement (ISO format)\n    tags: Tags for categorizing the measurement\n    \nReturns:\n    Measurement ID",
            "args": [
              "self",
              "component_id",
              "dimension",
              "measurement_method",
              "score",
              "confidence",
              "context",
              "evidence",
              "evaluator",
              "timestamp",
              "tags"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "query_measurements",
            "line": 1065,
            "async": true,
            "decorators": [],
            "docstring": "Query intelligence measurements with filtering.\n\nArgs:\n    query: Query parameters\n    \nReturns:\n    List of matching measurements",
            "args": [
              "self",
              "query"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_component_profile",
            "line": 1152,
            "async": true,
            "decorators": [],
            "docstring": "Get the intelligence profile of a component.\n\nArgs:\n    component_id: ID of the component\n    timestamp: Timestamp for historical profile (ISO format)\n    \nReturns:\n    Component intelligence profile or None if not found",
            "args": [
              "self",
              "component_id",
              "timestamp"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "compare_components",
            "line": 1179,
            "async": true,
            "decorators": [],
            "docstring": "Compare intelligence between components.\n\nArgs:\n    component_ids: List of component IDs to compare\n    dimensions: Dimensions to compare (all if None)\n    \nReturns:\n    Comparison result",
            "args": [
              "self",
              "component_ids",
              "dimensions"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_intelligence_dimensions",
            "line": 1304,
            "async": true,
            "decorators": [],
            "docstring": "Get information about all intelligence dimensions.\n\nReturns:\n    Dictionary of intelligence dimensions",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_intelligence_dimension",
            "line": 1332,
            "async": true,
            "decorators": [],
            "docstring": "Get detailed information about a specific intelligence dimension.\n\nArgs:\n    dimension: Intelligence dimension\n    \nReturns:\n    Dimension information or None if not found",
            "args": [
              "self",
              "dimension"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_ecosystem_profile",
            "line": 1352,
            "async": true,
            "decorators": [],
            "docstring": "Get an intelligence profile for the entire Tekton ecosystem.\n\nReturns:\n    Ecosystem intelligence profile",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "measure_component",
            "line": 1438,
            "async": true,
            "decorators": [],
            "docstring": "Measure all intelligence dimensions for a component.\n\nArgs:\n    component_id: ID of the component to measure\n    time_window: Time window for measurement (e.g., \"7d\" for 7 days)\n    \nReturns:\n    Measurement result",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_update_component_profile",
            "line": 1473,
            "async": true,
            "decorators": [],
            "docstring": "Update a component's intelligence profile with a new measurement.\n\nArgs:\n    component_id: ID of the component\n    measurement: New measurement",
            "args": [
              "self",
              "component_id",
              "measurement"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_load_measurements",
            "line": 1538,
            "async": true,
            "decorators": [],
            "docstring": "Load measurements and profiles from storage.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_save_measurements",
            "line": 1578,
            "async": true,
            "decorators": [],
            "docstring": "Save measurements and profiles to storage.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_create_default_dimensions",
            "line": 1608,
            "async": false,
            "decorators": [],
            "docstring": "Create default intelligence dimensions information.\n\nReturns:\n    Dictionary of intelligence dimensions",
            "args": [
              "self"
            ],
            "class": "IntelligenceMeasurement",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_measurement",
            "line": 1731,
            "async": true,
            "decorators": [],
            "docstring": "Get the global intelligence measurement instance.\n\nReturns:\n    IntelligenceMeasurement instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "IntelligenceMeasurer",
            "line": 24,
            "methods": [
              "__init__",
              "_calculate_start_time"
            ],
            "decorators": [],
            "docstring": "Measures intelligence across various dimensions.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "IntelligenceMeasurement",
            "line": 905,
            "methods": [
              "__init__",
              "_create_default_dimensions"
            ],
            "decorators": [],
            "docstring": "Intelligence Measurement Framework for Sophia.\n\nProvides a framework for measuring AI cognitive capabilities\nacross multiple intelligence dimensions.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 15
          },
          {
            "module": "metrics_engine.get_metrics_engine",
            "from": "metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 17
          },
          {
            "module": "analysis_engine.get_analysis_engine",
            "from": "analysis_engine",
            "name": "get_analysis_engine",
            "alias": null,
            "line": 18
          },
          {
            "module": "sophia.models.intelligence.IntelligenceDimension",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceDimension",
            "alias": null,
            "line": 19
          },
          {
            "module": "sophia.models.intelligence.MeasurementMethod",
            "from": "sophia.models.intelligence",
            "name": "MeasurementMethod",
            "alias": null,
            "line": 19
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "IntelligenceMeasurer",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_language_processing",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_reasoning",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 116,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_knowledge",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 194,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_learning",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 272,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_creativity",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 350,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_planning",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 428,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_problem_solving",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 506,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_adaptation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 584,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_collaboration",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 662,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_metacognition",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 740,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurer.measure_all_dimensions",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 818,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "IntelligenceMeasurement",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 905,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 922,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 948,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 965,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.record_measurement",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 980,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.query_measurements",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1065,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.get_component_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1152,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.compare_components",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1179,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.get_intelligence_dimensions",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1304,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.get_intelligence_dimension",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1332,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.get_ecosystem_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1352,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement.measure_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1438,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement._update_component_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1473,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement._load_measurements",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1538,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurement._save_measurements",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1578,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "get_intelligence_measurement",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/intelligence_measurement.py",
            "line": 1731,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1740,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the metrics store.\n\nArgs:\n    max_memory_records: Maximum number of records to keep in memory",
            "args": [
              "self",
              "max_memory_records"
            ],
            "class": "MetricsStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "store_metric",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Store a metric in the metrics store.\n\nArgs:\n    metric: The metric to store\n    \nReturns:\n    True if storage was successful",
            "args": [
              "self",
              "metric"
            ],
            "class": "MetricsStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "query_metrics",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Query metrics from the store.\n\nArgs:\n    metric_id: Filter by metric ID\n    source: Filter by source\n    tags: Filter by tags (any match)\n    start_time: Filter by start time (ISO format)\n    end_time: Filter by end time (ISO format)\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    sort: Sorting specification (field:direction)\n    \nReturns:\n    List of matching metrics",
            "args": [
              "self",
              "metric_id",
              "source",
              "tags",
              "start_time",
              "end_time",
              "limit",
              "offset",
              "sort"
            ],
            "class": "MetricsStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "aggregate_metrics",
            "line": 132,
            "async": true,
            "decorators": [],
            "docstring": "Aggregate metrics for analysis.\n\nArgs:\n    metric_id: The metric ID to aggregate\n    aggregation: Aggregation function (avg, sum, min, max, count)\n    interval: Time interval for time-series aggregation (e.g., \"1h\", \"1d\")\n    source: Filter by source\n    tags: Filter by tags\n    start_time: Filter by start time\n    end_time: Filter by end time\n    \nReturns:\n    Aggregation results",
            "args": [
              "self",
              "metric_id",
              "aggregation",
              "interval",
              "source",
              "tags",
              "start_time",
              "end_time"
            ],
            "class": "MetricsStore",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_compute_aggregation",
            "line": 227,
            "async": false,
            "decorators": [],
            "docstring": "Compute an aggregation function on metrics.\n\nArgs:\n    metrics: List of metrics to aggregate\n    aggregation: Aggregation function name\n    \nReturns:\n    Aggregation result or None if no metrics",
            "args": [
              "self",
              "metrics",
              "aggregation"
            ],
            "class": "MetricsStore",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_percentile",
            "line": 265,
            "async": false,
            "decorators": [],
            "docstring": "Calculate a percentile value from a list of values.\n\nArgs:\n    values: List of numerical values\n    percentile: Percentile to calculate (0-100)\n    \nReturns:\n    Percentile value",
            "args": [
              "self",
              "values",
              "percentile"
            ],
            "class": "MetricsStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_time_intervals",
            "line": 287,
            "async": false,
            "decorators": [],
            "docstring": "Create time intervals for time-series aggregation.\n\nArgs:\n    start_time: Start time (ISO format)\n    end_time: End time (ISO format)\n    interval: Interval specification (e.g., \"1h\", \"1d\")\n    \nReturns:\n    List of (interval_start, interval_end) tuples",
            "args": [
              "self",
              "start_time",
              "end_time",
              "interval"
            ],
            "class": "MetricsStore",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_update_indices",
            "line": 345,
            "async": false,
            "decorators": [],
            "docstring": "Update indices for a new metric record.",
            "args": [
              "self",
              "record_id",
              "metric"
            ],
            "class": "MetricsStore",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_find_candidate_ids",
            "line": 368,
            "async": true,
            "decorators": [],
            "docstring": "Find candidate record IDs based on indices.",
            "args": [
              "self",
              "metric_id",
              "source",
              "tags"
            ],
            "class": "MetricsStore",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_matches_time_filters",
            "line": 396,
            "async": false,
            "decorators": [],
            "docstring": "Check if a metric matches time filters.",
            "args": [
              "self",
              "metric",
              "start_time",
              "end_time"
            ],
            "class": "MetricsStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_trim_memory_store",
            "line": 417,
            "async": false,
            "decorators": [],
            "docstring": "Trim the memory store to the maximum size.",
            "args": [
              "self"
            ],
            "class": "MetricsStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_rebuild_indices",
            "line": 436,
            "async": false,
            "decorators": [],
            "docstring": "Rebuild indices after trimming memory store.",
            "args": [
              "self"
            ],
            "class": "MetricsStore",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_remove_from_indices",
            "line": 468,
            "async": false,
            "decorators": [],
            "docstring": "Remove a record from all indices.",
            "args": [
              "self",
              "record_id"
            ],
            "class": "MetricsStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_invalidate_cache",
            "line": 491,
            "async": false,
            "decorators": [],
            "docstring": "Invalidate aggregation cache for a metric ID.",
            "args": [
              "self",
              "metric_id"
            ],
            "class": "MetricsStore",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_cache_aggregation",
            "line": 504,
            "async": false,
            "decorators": [],
            "docstring": "Cache an aggregation result.",
            "args": [
              "self",
              "cache_key",
              "result"
            ],
            "class": "MetricsStore",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 518,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the metrics engine.",
            "args": [
              "self"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 526,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the metrics engine.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 545,
            "async": true,
            "decorators": [],
            "docstring": "Start the metrics engine and background tasks.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 566,
            "async": true,
            "decorators": [],
            "docstring": "Stop the metrics engine and clean up resources.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "record_metric",
            "line": 586,
            "async": true,
            "decorators": [],
            "docstring": "Record a metric in the metrics engine.\n\nArgs:\n    metric_id: Unique identifier for the metric type\n    value: Value of the metric\n    source: Source of the metric (e.g., component ID)\n    timestamp: ISO timestamp (defaults to current time)\n    context: Additional context for the metric\n    tags: Tags for categorizing the metric\n    \nReturns:\n    True if the metric was recorded successfully",
            "args": [
              "self",
              "metric_id",
              "value",
              "source",
              "timestamp",
              "context",
              "tags"
            ],
            "class": "MetricsEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "query_metrics",
            "line": 637,
            "async": true,
            "decorators": [],
            "docstring": "Query metrics from the engine.\n\nArgs:\n    metric_id: Filter by metric ID\n    source: Filter by source\n    tags: Filter by tags\n    start_time: Filter by start time (ISO format)\n    end_time: Filter by end time (ISO format)\n    limit: Maximum number of results to return\n    offset: Offset for pagination\n    sort: Sorting specification (field:direction)\n    \nReturns:\n    List of matching metrics",
            "args": [
              "self",
              "metric_id",
              "source",
              "tags",
              "start_time",
              "end_time",
              "limit",
              "offset",
              "sort"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "aggregate_metrics",
            "line": 675,
            "async": true,
            "decorators": [],
            "docstring": "Aggregate metrics for analysis.\n\nArgs:\n    metric_id: The metric ID to aggregate\n    aggregation: Aggregation function (avg, sum, min, max, count, p50, p95, p99)\n    interval: Time interval for time-series aggregation (e.g., \"1h\", \"1d\")\n    source: Filter by source\n    tags: Filter by tags\n    start_time: Filter by start time\n    end_time: Filter by end time\n    \nReturns:\n    Aggregation results",
            "args": [
              "self",
              "metric_id",
              "aggregation",
              "interval",
              "source",
              "tags",
              "start_time",
              "end_time"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_metric_definitions",
            "line": 710,
            "async": true,
            "decorators": [],
            "docstring": "Load metric definitions from configuration.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_validate_metric",
            "line": 833,
            "async": true,
            "decorators": [],
            "docstring": "Validate a metric against its definition.\n\nArgs:\n    metric: The metric to validate\n    \nReturns:\n    True if the metric is valid",
            "args": [
              "self",
              "metric"
            ],
            "class": "MetricsEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_metric_definition",
            "line": 881,
            "async": false,
            "decorators": [],
            "docstring": "Get the definition for a metric type.\n\nArgs:\n    metric_id: The metric ID\n    \nReturns:\n    Metric definition or None if not found",
            "args": [
              "self",
              "metric_id"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_metrics",
            "line": 893,
            "async": false,
            "decorators": [],
            "docstring": "Get all available metric definitions.\n\nReturns:\n    Dictionary of metric definitions",
            "args": [
              "self"
            ],
            "class": "MetricsEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metrics_engine",
            "line": 905,
            "async": true,
            "decorators": [],
            "docstring": "Get the global metrics engine instance.\n\nReturns:\n    MetricsEngine instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MetricsStore",
            "line": 18,
            "methods": [
              "__init__",
              "_compute_aggregation",
              "_percentile",
              "_create_time_intervals",
              "_update_indices",
              "_matches_time_filters",
              "_trim_memory_store",
              "_rebuild_indices",
              "_remove_from_indices",
              "_invalidate_cache",
              "_cache_aggregation"
            ],
            "decorators": [],
            "docstring": "Storage system for metrics with time-series capabilities.\n\nProvides in-memory storage with efficient retrieval and\naggregation capabilities.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MetricsEngine",
            "line": 510,
            "methods": [
              "__init__",
              "get_metric_definition",
              "get_available_metrics"
            ],
            "decorators": [],
            "docstring": "Core metrics engine for collecting, storing, and analyzing metrics.\n\nProvides standardized metrics collection and storage with\nanalysis capabilities for the Tekton ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MetricsStore",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetricsStore.store_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsStore.query_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 79,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsStore.aggregate_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 132,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MetricsStore._compute_aggregation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 227,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MetricsStore._create_time_intervals",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 287,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MetricsStore._update_indices",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 345,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "MetricsStore._find_candidate_ids",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 368,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MetricsStore._rebuild_indices",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 436,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "MetricsEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 510,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetricsEngine.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 526,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsEngine.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 545,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsEngine.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 566,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsEngine.record_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 586,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsEngine.query_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 637,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsEngine.aggregate_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 675,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MetricsEngine._validate_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 833,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "MetricsEngine.get_metric_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 881,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MetricsEngine.get_available_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 893,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_metrics_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/metrics_engine.py",
            "line": 905,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 914,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the analysis engine.",
            "args": [
              "self"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 39,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the analysis engine.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 58,
            "async": true,
            "decorators": [],
            "docstring": "Start the analysis engine and background tasks.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 81,
            "async": true,
            "decorators": [],
            "docstring": "Stop the analysis engine and clean up resources.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_metric_patterns",
            "line": 100,
            "async": true,
            "decorators": [],
            "docstring": "Analyze patterns in a specific metric.\n\nArgs:\n    metric_id: The metric ID to analyze\n    time_window: Time window for analysis (e.g., \"24h\", \"7d\")\n    source: Filter by source\n    tags: Filter by tags\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "metric_id",
              "time_window",
              "source",
              "tags"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "detect_anomalies",
            "line": 224,
            "async": true,
            "decorators": [],
            "docstring": "Detect anomalies in a specific metric.\n\nArgs:\n    metric_id: The metric ID to analyze\n    sensitivity: Sensitivity for anomaly detection (standard deviations)\n    time_window: Time window for analysis\n    source: Filter by source\n    tags: Filter by tags\n    \nReturns:\n    Anomaly detection results",
            "args": [
              "self",
              "metric_id",
              "sensitivity",
              "time_window",
              "source",
              "tags"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_component_performance",
            "line": 355,
            "async": true,
            "decorators": [],
            "docstring": "Analyze overall performance of a component.\n\nArgs:\n    component_id: ID of the component to analyze\n    time_window: Time window for analysis\n    \nReturns:\n    Component performance analysis",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_system_performance",
            "line": 445,
            "async": true,
            "decorators": [],
            "docstring": "Analyze overall system performance across components.\n\nArgs:\n    time_window: Time window for analysis\n    components: List of components to include (all if None)\n    \nReturns:\n    System performance analysis",
            "args": [
              "self",
              "time_window",
              "components"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "analyze_multi_metric_correlations",
            "line": 586,
            "async": true,
            "decorators": [],
            "docstring": "Analyze correlations between multiple metrics.\n\nArgs:\n    metric_ids: List of metric IDs to analyze\n    time_window: Time window for analysis\n    source: Filter by source\n    \nReturns:\n    Correlation analysis",
            "args": [
              "self",
              "metric_ids",
              "time_window",
              "source"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_analyze_patterns",
            "line": 738,
            "async": true,
            "decorators": [],
            "docstring": "Analyze patterns in time series data.\n\nArgs:\n    values: List of metric values\n    time_points: List of timestamps\n    metric_id: Metric ID\n    \nReturns:\n    Pattern analysis results",
            "args": [
              "self",
              "values",
              "time_points",
              "metric_id"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_calculate_trend",
            "line": 838,
            "async": false,
            "decorators": [],
            "docstring": "Calculate trend strength and direction.\n\nArgs:\n    values: List of metric values\n    \nReturns:\n    Tuple of (trend_strength, trend_direction)",
            "args": [
              "self",
              "values"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_detect_seasonality",
            "line": 890,
            "async": false,
            "decorators": [],
            "docstring": "Detect seasonality in time series.\n\nArgs:\n    values: List of metric values\n    \nReturns:\n    Seasonality information or None if not detected",
            "args": [
              "self",
              "values"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_detect_cycles",
            "line": 927,
            "async": false,
            "decorators": [],
            "docstring": "Detect cyclic patterns in time series.\n\nArgs:\n    values: List of metric values\n    \nReturns:\n    Cycle information or None if not detected",
            "args": [
              "self",
              "values"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_is_steady_state",
            "line": 965,
            "async": false,
            "decorators": [],
            "docstring": "Check if the series is in a steady state (low variance).\n\nArgs:\n    values: List of metric values\n    \nReturns:\n    True if the series is in a steady state",
            "args": [
              "self",
              "values"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_autocorrelation",
            "line": 989,
            "async": false,
            "decorators": [],
            "docstring": "Calculate autocorrelation at a specific lag.\n\nArgs:\n    values: List of metric values\n    lag: Lag value\n    \nReturns:\n    Autocorrelation value",
            "args": [
              "self",
              "values",
              "lag"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_statistics",
            "line": 1017,
            "async": true,
            "decorators": [],
            "docstring": "Calculate statistical measures for a set of metrics.\n\nArgs:\n    metrics: List of metrics\n    \nReturns:\n    Statistical measures",
            "args": [
              "self",
              "metrics"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_detect_anomalies",
            "line": 1098,
            "async": true,
            "decorators": [],
            "docstring": "Detect anomalies in time series data.\n\nArgs:\n    values: List of metric values\n    time_points: List of timestamps\n    metric_id: Metric ID\n    \nReturns:\n    Anomaly detection results",
            "args": [
              "self",
              "values",
              "time_points",
              "metric_id"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_analyze_trends",
            "line": 1157,
            "async": true,
            "decorators": [],
            "docstring": "Analyze trends in time series data.\n\nArgs:\n    values: List of metric values\n    time_points: List of timestamps\n    \nReturns:\n    Trend analysis results",
            "args": [
              "self",
              "values",
              "time_points"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_compare_to_baseline",
            "line": 1252,
            "async": true,
            "decorators": [],
            "docstring": "Compare current metrics to baseline.\n\nArgs:\n    metric_id: Metric ID\n    current_stats: Current statistical measures\n    current_patterns: Current pattern analysis\n    \nReturns:\n    Baseline comparison results",
            "args": [
              "self",
              "metric_id",
              "current_stats",
              "current_patterns"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_health_score",
            "line": 1317,
            "async": true,
            "decorators": [],
            "docstring": "Calculate health score for a component.\n\nArgs:\n    component_id: Component ID\n    metric_analyses: Metric analyses\n    error_analysis: Error analysis\n    \nReturns:\n    Health score data",
            "args": [
              "self",
              "component_id",
              "metric_analyses",
              "error_analysis"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_health_score_to_status",
            "line": 1404,
            "async": false,
            "decorators": [],
            "docstring": "Convert health score to status string.\n\nArgs:\n    score: Health score (0-100)\n    \nReturns:\n    Status string",
            "args": [
              "self",
              "score"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_align_time_series",
            "line": 1425,
            "async": false,
            "decorators": [],
            "docstring": "Align time series data from multiple metrics.\n\nArgs:\n    metric_data: Dictionary mapping metric IDs to data\n    \nReturns:\n    Dictionary of aligned time series",
            "args": [
              "self",
              "metric_data"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_calculate_correlation",
            "line": 1468,
            "async": false,
            "decorators": [],
            "docstring": "Calculate correlation between two series.\n\nArgs:\n    values1: First series\n    values2: Second series\n    \nReturns:\n    Correlation coefficient",
            "args": [
              "self",
              "values1",
              "values2"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_interpret_correlation_strength",
            "line": 1512,
            "async": false,
            "decorators": [],
            "docstring": "Interpret the strength of a correlation coefficient.\n\nArgs:\n    correlation: Absolute correlation value\n    \nReturns:\n    String description of strength",
            "args": [
              "self",
              "correlation"
            ],
            "class": "AnalysisEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_load_baseline_data",
            "line": 1533,
            "async": true,
            "decorators": [],
            "docstring": "Load baseline data for metrics.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "AnalysisEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_periodic_trend_analysis",
            "line": 1545,
            "async": true,
            "decorators": [],
            "docstring": "Run periodic trend analysis as a background task.",
            "args": [
              "self"
            ],
            "class": "AnalysisEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_analysis_engine",
            "line": 1591,
            "async": true,
            "decorators": [],
            "docstring": "Get the global analysis engine instance.\n\nReturns:\n    AnalysisEngine instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AnalysisEngine",
            "line": 22,
            "methods": [
              "__init__",
              "_calculate_trend",
              "_detect_seasonality",
              "_detect_cycles",
              "_is_steady_state",
              "_autocorrelation",
              "_health_score_to_status",
              "_align_time_series",
              "_calculate_correlation",
              "_interpret_correlation_strength"
            ],
            "decorators": [],
            "docstring": "Core analysis engine for processing metrics and generating insights.\n\nProvides a suite of analysis tools including statistical analysis,\npattern recognition, anomaly detection, and trend analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "math",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "metrics_engine.get_metrics_engine",
            "from": "metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AnalysisEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 39,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 58,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 81,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.analyze_metric_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 100,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.detect_anomalies",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 224,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.analyze_component_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 355,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.analyze_system_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 445,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine.analyze_multi_metric_correlations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 586,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine._analyze_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 738,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine._calculate_statistics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 1017,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine._analyze_trends",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 1157,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine._calculate_health_score",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 1317,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "AnalysisEngine._align_time_series",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 1425,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "AnalysisEngine._periodic_trend_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 1545,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_analysis_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/analysis_engine.py",
            "line": 1591,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1600,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Initialize an experiment runner.\n\nArgs:\n    experiment_config: Configuration for the experiment\n    metrics_engine: Metrics engine instance\n    analysis_engine: Analysis engine instance",
            "args": [
              "self",
              "experiment_config",
              "metrics_engine",
              "analysis_engine"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run",
            "line": 43,
            "async": true,
            "decorators": [],
            "docstring": "Execute the experiment based on its type.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_run_ab_test",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Run an A/B test experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_run_multivariate_test",
            "line": 153,
            "async": true,
            "decorators": [],
            "docstring": "Run a multivariate test experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_run_shadow_mode_test",
            "line": 205,
            "async": true,
            "decorators": [],
            "docstring": "Run a shadow mode test experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_run_canary_test",
            "line": 268,
            "async": true,
            "decorators": [],
            "docstring": "Run a canary test experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_run_parameter_tuning",
            "line": 349,
            "async": true,
            "decorators": [],
            "docstring": "Run a parameter tuning experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_run_before_after_test",
            "line": 408,
            "async": true,
            "decorators": [],
            "docstring": "Run a before/after test experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_run_baseline_comparison",
            "line": 474,
            "async": true,
            "decorators": [],
            "docstring": "Run a baseline comparison experiment.\n\nReturns:\n    Experiment results",
            "args": [
              "self"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_collect_metrics",
            "line": 536,
            "async": true,
            "decorators": [],
            "docstring": "Collect metrics for an experiment condition.\n\nArgs:\n    metrics: List of metrics to collect\n    components: Target components\n    condition: Experiment condition\n    sample_size: Number of samples to collect\n    \nReturns:\n    Collected metrics",
            "args": [
              "self",
              "metrics",
              "components",
              "condition",
              "sample_size"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_collect_metrics_for_duration",
            "line": 568,
            "async": true,
            "decorators": [],
            "docstring": "Collect metrics for a specific duration.\n\nArgs:\n    metrics: List of metrics to collect\n    components: Target components\n    condition: Experiment condition\n    duration_seconds: Duration in seconds\n    \nReturns:\n    Collected metrics",
            "args": [
              "self",
              "metrics",
              "components",
              "condition",
              "duration_seconds"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_collect_metrics_with_traffic_split",
            "line": 607,
            "async": true,
            "decorators": [],
            "docstring": "Collect metrics with traffic split.\n\nArgs:\n    metrics: List of metrics to collect\n    components: Target components\n    condition: Experiment condition\n    traffic_percentage: Percentage of traffic to collect\n    \nReturns:\n    Collected metrics",
            "args": [
              "self",
              "metrics",
              "components",
              "condition",
              "traffic_percentage"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_compare_metrics",
            "line": 642,
            "async": true,
            "decorators": [],
            "docstring": "Compare two sets of metrics.\n\nArgs:\n    baseline_metrics: Baseline metrics\n    comparison_metrics: Comparison metrics\n    \nReturns:\n    Comparison results",
            "args": [
              "self",
              "baseline_metrics",
              "comparison_metrics"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_compare_multivariate_metrics",
            "line": 672,
            "async": true,
            "decorators": [],
            "docstring": "Compare metrics from multiple combinations.\n\nArgs:\n    combination_metrics: Metrics for each combination\n    \nReturns:\n    Comparison results",
            "args": [
              "self",
              "combination_metrics"
            ],
            "class": "ExperimentRunner",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_calculate_confidence_level",
            "line": 718,
            "async": true,
            "decorators": [],
            "docstring": "Calculate the confidence level for experiment results.\n\nArgs:\n    comparison: Comparison results\n    \nReturns:\n    Confidence level (0-1)",
            "args": [
              "self",
              "comparison"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_determine_outcome",
            "line": 745,
            "async": true,
            "decorators": [],
            "docstring": "Determine the outcome of an experiment.\n\nArgs:\n    comparison: Comparison results\n    confidence_level: Confidence level\n    \nReturns:\n    Conclusion and recommended action",
            "args": [
              "self",
              "comparison",
              "confidence_level"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_identify_best_combination",
            "line": 786,
            "async": true,
            "decorators": [],
            "docstring": "Identify the best combination from multivariate testing.\n\nArgs:\n    comparison: Comparison results\n    \nReturns:\n    Best combination and confidence levels",
            "args": [
              "self",
              "comparison"
            ],
            "class": "ExperimentRunner",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_determine_multivariate_outcome",
            "line": 844,
            "async": true,
            "decorators": [],
            "docstring": "Determine the outcome of a multivariate experiment.\n\nArgs:\n    best_combination: Best combination\n    confidence_levels: Confidence levels for each combination\n    \nReturns:\n    Conclusion and recommended action",
            "args": [
              "self",
              "best_combination",
              "confidence_levels"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_analyze_shadow_differences",
            "line": 878,
            "async": true,
            "decorators": [],
            "docstring": "Analyze differences between production and shadow systems.\n\nArgs:\n    comparison: Comparison results\n    \nReturns:\n    Analysis of differences",
            "args": [
              "self",
              "comparison"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_identify_shadow_risks_benefits",
            "line": 907,
            "async": true,
            "decorators": [],
            "docstring": "Identify risks and benefits from shadow testing.\n\nArgs:\n    differences: Analysis of differences\n    \nReturns:\n    Risks and benefits",
            "args": [
              "self",
              "differences"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_determine_shadow_readiness",
            "line": 942,
            "async": true,
            "decorators": [],
            "docstring": "Determine readiness for production from shadow testing.\n\nArgs:\n    differences: Analysis of differences\n    risks: Identified risks\n    \nReturns:\n    Readiness status and confidence level",
            "args": [
              "self",
              "differences",
              "risks"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_canary_health",
            "line": 977,
            "async": true,
            "decorators": [],
            "docstring": "Check the health of a canary deployment.\n\nArgs:\n    canary_metrics: Metrics from canary\n    comparison: Comparison results\n    \nReturns:\n    Error and degradation flags",
            "args": [
              "self",
              "canary_metrics",
              "comparison"
            ],
            "class": "ExperimentRunner",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_parameter_combinations",
            "line": 1015,
            "async": true,
            "decorators": [],
            "docstring": "Generate parameter combinations for tuning.\n\nArgs:\n    parameters_to_tune: Parameters to tune with possible values\n    \nReturns:\n    List of parameter combinations",
            "args": [
              "self",
              "parameters_to_tune"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_find_optimal_parameters",
            "line": 1060,
            "async": true,
            "decorators": [],
            "docstring": "Find optimal parameters from tuning results.\n\nArgs:\n    results_by_combination: Results for each combination\n    metrics: Metrics used for evaluation\n    \nReturns:\n    Optimal combination and performance by metric",
            "args": [
              "self",
              "results_by_combination",
              "metrics"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_apply_change",
            "line": 1105,
            "async": true,
            "decorators": [],
            "docstring": "Apply a change for before/after testing.\n\nArgs:\n    after_condition: Condition to apply\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "after_condition"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_calculate_improvements_degradations",
            "line": 1124,
            "async": true,
            "decorators": [],
            "docstring": "Calculate improvements and degradations from comparison.\n\nArgs:\n    comparison: Comparison results\n    \nReturns:\n    Improvements and degradations",
            "args": [
              "self",
              "comparison"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_impact_score",
            "line": 1161,
            "async": true,
            "decorators": [],
            "docstring": "Calculate overall impact score from improvements and degradations.\n\nArgs:\n    improvements: Identified improvements\n    degradations: Identified degradations\n    \nReturns:\n    Impact score (-1 to 1)",
            "args": [
              "self",
              "improvements",
              "degradations"
            ],
            "class": "ExperimentRunner",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_rank_candidates",
            "line": 1201,
            "async": true,
            "decorators": [],
            "docstring": "Rank candidates based on comparisons to baseline.\n\nArgs:\n    comparisons: Comparison results for each candidate\n    \nReturns:\n    Ranked list of candidates",
            "args": [
              "self",
              "comparisons"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_parse_duration",
            "line": 1243,
            "async": false,
            "decorators": [],
            "docstring": "Parse duration string to seconds.\n\nArgs:\n    duration_str: Duration string (e.g., \"24h\", \"30m\", \"60s\")\n    \nReturns:\n    Duration in seconds",
            "args": [
              "self",
              "duration_str"
            ],
            "class": "ExperimentRunner",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 1278,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the experiment framework.",
            "args": [
              "self"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 1286,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the experiment framework.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 1306,
            "async": true,
            "decorators": [],
            "docstring": "Start the experiment framework.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 1340,
            "async": true,
            "decorators": [],
            "docstring": "Stop the experiment framework and clean up resources.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_experiment",
            "line": 1365,
            "async": true,
            "decorators": [],
            "docstring": "Create a new experiment.\n\nArgs:\n    name: Name of the experiment\n    description: Description of the experiment\n    experiment_type: Type of experiment\n    target_components: List of components involved in the experiment\n    hypothesis: Hypothesis being tested\n    metrics: List of metrics to be tracked\n    parameters: Parameters for the experiment\n    start_time: Scheduled start time (ISO format)\n    end_time: Scheduled end time (ISO format)\n    sample_size: Target sample size\n    min_confidence: Minimum confidence level required\n    tags: Tags for categorizing the experiment\n    \nReturns:\n    Experiment ID",
            "args": [
              "self",
              "name",
              "description",
              "experiment_type",
              "target_components",
              "hypothesis",
              "metrics",
              "parameters",
              "start_time",
              "end_time",
              "sample_size",
              "min_confidence",
              "tags"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_experiments",
            "line": 1443,
            "async": true,
            "decorators": [],
            "docstring": "Query experiments with filtering.\n\nArgs:\n    query: Query parameters\n    \nReturns:\n    List of matching experiments",
            "args": [
              "self",
              "query"
            ],
            "class": "ExperimentFramework",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_experiment",
            "line": 1510,
            "async": true,
            "decorators": [],
            "docstring": "Get details of a specific experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Experiment data or None if not found",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_experiment",
            "line": 1525,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    updates: Updates to apply\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "experiment_id",
              "updates"
            ],
            "class": "ExperimentFramework",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "start_experiment",
            "line": 1571,
            "async": true,
            "decorators": [],
            "docstring": "Start an experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "stop_experiment",
            "line": 1613,
            "async": true,
            "decorators": [],
            "docstring": "Stop an experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_experiment",
            "line": 1651,
            "async": true,
            "decorators": [],
            "docstring": "Analyze an experiment's results.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_experiment_results",
            "line": 1686,
            "async": true,
            "decorators": [],
            "docstring": "Get results of a completed experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    Experiment results or None if not available",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "delete_experiment",
            "line": 1715,
            "async": true,
            "decorators": [],
            "docstring": "Delete an experiment.\n\nArgs:\n    experiment_id: ID of the experiment\n    \nReturns:\n    True if successful",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_run_experiment",
            "line": 1746,
            "async": true,
            "decorators": [],
            "docstring": "Run an experiment in the background.\n\nArgs:\n    experiment_id: ID of the experiment\n    runner: Experiment runner",
            "args": [
              "self",
              "experiment_id",
              "runner"
            ],
            "class": "ExperimentFramework",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_analyze_experiment_results",
            "line": 1788,
            "async": true,
            "decorators": [],
            "docstring": "Analyze experiment results in the background.\n\nArgs:\n    experiment_id: ID of the experiment",
            "args": [
              "self",
              "experiment_id"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_experiments",
            "line": 1829,
            "async": true,
            "decorators": [],
            "docstring": "Load experiments from storage.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_save_experiments",
            "line": 1858,
            "async": true,
            "decorators": [],
            "docstring": "Save experiments to storage.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_is_valid_status_transition",
            "line": 1881,
            "async": false,
            "decorators": [],
            "docstring": "Check if a status transition is valid.\n\nArgs:\n    current_status: Current status\n    new_status: New status\n    \nReturns:\n    True if the transition is valid",
            "args": [
              "self",
              "current_status",
              "new_status"
            ],
            "class": "ExperimentFramework",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_experiment_framework",
            "line": 1911,
            "async": true,
            "decorators": [],
            "docstring": "Get the global experiment framework instance.\n\nReturns:\n    ExperimentFramework instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ExperimentRunner",
            "line": 23,
            "methods": [
              "__init__",
              "_parse_duration"
            ],
            "decorators": [],
            "docstring": "Handles the execution of experiments.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ExperimentFramework",
            "line": 1270,
            "methods": [
              "__init__",
              "_is_valid_status_transition"
            ],
            "decorators": [],
            "docstring": "Experiment Framework for Sophia.\n\nProvides a framework for designing, running, and analyzing experiments to\nvalidate hypotheses and drive continuous improvement.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 13
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 14
          },
          {
            "module": "metrics_engine.get_metrics_engine",
            "from": "metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 16
          },
          {
            "module": "analysis_engine.get_analysis_engine",
            "from": "analysis_engine",
            "name": "get_analysis_engine",
            "alias": null,
            "line": 17
          },
          {
            "module": "sophia.models.experiment.ExperimentStatus",
            "from": "sophia.models.experiment",
            "name": "ExperimentStatus",
            "alias": null,
            "line": 18
          },
          {
            "module": "sophia.models.experiment.ExperimentType",
            "from": "sophia.models.experiment",
            "name": "ExperimentType",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ExperimentRunner",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExperimentRunner.run",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ExperimentRunner._compare_multivariate_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 672,
            "priority": "medium",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ExperimentRunner._identify_best_combination",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 786,
            "priority": "medium",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "ExperimentRunner._check_canary_health",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 977,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "class_definition",
            "name": "ExperimentFramework",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1270,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1286,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1306,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1340,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.create_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1365,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.query_experiments",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1443,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.get_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1510,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.update_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1525,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.start_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1571,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.stop_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1613,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.analyze_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1651,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.get_experiment_results",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1686,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework.delete_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1715,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ExperimentFramework._load_experiments",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1829,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "ExperimentFramework._save_experiments",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1858,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "get_experiment_framework",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/experiment_framework.py",
            "line": 1911,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1920,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 62,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the pattern detection engine.",
            "args": [
              "self"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 71,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the pattern detection engine.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 88,
            "async": true,
            "decorators": [],
            "docstring": "Start the pattern detection engine and background tasks.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 111,
            "async": true,
            "decorators": [],
            "docstring": "Stop the pattern detection engine and clean up resources.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "detect_patterns",
            "line": 130,
            "async": true,
            "decorators": [],
            "docstring": "Detect patterns in a specific metric.\n\nArgs:\n    metric_id: The metric ID to analyze\n    time_window: Time window for analysis (e.g., \"24h\", \"7d\")\n    source: Filter by source\n    tags: Filter by tags\n    pattern_types: Types of patterns to detect (defaults to all)\n    min_confidence: Minimum confidence level for reported patterns\n    \nReturns:\n    Pattern detection results",
            "args": [
              "self",
              "metric_id",
              "time_window",
              "source",
              "tags",
              "pattern_types",
              "min_confidence"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "detect_correlated_patterns",
            "line": 300,
            "async": true,
            "decorators": [],
            "docstring": "Detect correlated patterns across multiple metrics.\n\nArgs:\n    metric_ids: List of metric IDs to analyze\n    time_window: Time window for analysis\n    source: Filter by source\n    min_correlation: Minimum correlation threshold\n    \nReturns:\n    Correlation pattern detection results",
            "args": [
              "self",
              "metric_ids",
              "time_window",
              "source",
              "min_correlation"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "detect_sequence_patterns",
            "line": 395,
            "async": true,
            "decorators": [],
            "docstring": "Detect sequential patterns in a series of events.\n\nArgs:\n    event_series: List of event dictionaries\n    max_sequence_length: Maximum sequence length to detect\n    min_support: Minimum support (frequency) threshold\n    time_field: Field containing timestamp\n    event_field: Field containing event name/type\n    \nReturns:\n    Sequence pattern detection results",
            "args": [
              "self",
              "event_series",
              "max_sequence_length",
              "min_support",
              "time_field",
              "event_field"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "detect_component_behavior_patterns",
            "line": 491,
            "async": true,
            "decorators": [],
            "docstring": "Detect patterns in component behavior.\n\nArgs:\n    component_id: ID of the component\n    time_window: Time window for analysis\n    \nReturns:\n    Component behavior pattern detection results",
            "args": [
              "self",
              "component_id",
              "time_window"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_detect_trend_pattern",
            "line": 567,
            "async": true,
            "decorators": [],
            "docstring": "Detect trend patterns in time series data.\n\nArgs:\n    values: List of metric values\n    timestamps: List of timestamps\n    \nReturns:\n    Trend pattern information",
            "args": [
              "self",
              "values",
              "timestamps"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_detect_seasonal_pattern",
            "line": 650,
            "async": true,
            "decorators": [],
            "docstring": "Detect seasonal patterns in time series data.\n\nArgs:\n    values: List of metric values\n    timestamps: List of timestamps\n    \nReturns:\n    Seasonal pattern information or None if not detected",
            "args": [
              "self",
              "values",
              "timestamps"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_detect_cyclic_pattern",
            "line": 698,
            "async": true,
            "decorators": [],
            "docstring": "Detect cyclic patterns in time series data.\n\nArgs:\n    values: List of metric values\n    timestamps: List of timestamps\n    \nReturns:\n    Cyclic pattern information or None if not detected",
            "args": [
              "self",
              "values",
              "timestamps"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_detect_outliers",
            "line": 755,
            "async": true,
            "decorators": [],
            "docstring": "Detect outliers in time series data.\n\nArgs:\n    values: List of metric values\n    timestamps: List of timestamps\n    \nReturns:\n    Outlier pattern information or None if not detected",
            "args": [
              "self",
              "values",
              "timestamps"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_detect_threshold_breaches",
            "line": 814,
            "async": true,
            "decorators": [],
            "docstring": "Detect threshold breaches in time series data.\n\nArgs:\n    values: List of metric values\n    timestamps: List of timestamps\n    metric_id: Metric ID for determining thresholds\n    \nReturns:\n    Threshold pattern information or None if not detected",
            "args": [
              "self",
              "values",
              "timestamps",
              "metric_id"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_detect_steady_state",
            "line": 885,
            "async": true,
            "decorators": [],
            "docstring": "Detect steady state in time series data.\n\nArgs:\n    values: List of metric values\n    timestamps: List of timestamps\n    \nReturns:\n    Steady state pattern information or None if not detected",
            "args": [
              "self",
              "values",
              "timestamps"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_autocorrelation",
            "line": 934,
            "async": false,
            "decorators": [],
            "docstring": "Calculate autocorrelation at a specific lag.\n\nArgs:\n    values: Time series values\n    lag: Lag value\n    \nReturns:\n    Autocorrelation coefficient",
            "args": [
              "self",
              "values",
              "lag"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_confidence",
            "line": 965,
            "async": false,
            "decorators": [],
            "docstring": "Calculate confidence level from pattern strength.\n\nArgs:\n    strength: Pattern strength value\n    \nReturns:\n    Confidence value (0.0 to 1.0)",
            "args": [
              "self",
              "strength"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_confidence_to_level",
            "line": 978,
            "async": false,
            "decorators": [],
            "docstring": "Convert confidence value to confidence level string.\n\nArgs:\n    confidence: Confidence value (0.0 to 1.0)\n    \nReturns:\n    Confidence level string",
            "args": [
              "self",
              "confidence"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_calculate_sequence_confidence",
            "line": 999,
            "async": false,
            "decorators": [],
            "docstring": "Calculate confidence for a sequence pattern.\n\nArgs:\n    sequence: The sequence pattern\n    event_sequence: Full event sequence\n    \nReturns:\n    Confidence value (0.0 to 1.0)",
            "args": [
              "self",
              "sequence",
              "event_sequence"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_meets_confidence_threshold",
            "line": 1034,
            "async": false,
            "decorators": [],
            "docstring": "Check if pattern meets minimum confidence threshold.\n\nArgs:\n    pattern: Pattern information\n    min_confidence: Minimum confidence level\n    \nReturns:\n    True if pattern meets threshold",
            "args": [
              "self",
              "pattern",
              "min_confidence"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_determine_dominant_pattern",
            "line": 1067,
            "async": false,
            "decorators": [],
            "docstring": "Determine the dominant pattern from a list of detected patterns.\n\nArgs:\n    patterns: List of detected patterns\n    \nReturns:\n    Dominant pattern or None if no patterns",
            "args": [
              "self",
              "patterns"
            ],
            "class": "PatternEngine",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_metric_thresholds",
            "line": 1105,
            "async": true,
            "decorators": [],
            "docstring": "Get thresholds for a specific metric type.\n\nArgs:\n    metric_id: Metric ID\n    \nReturns:\n    Dictionary of threshold types and values",
            "args": [
              "self",
              "metric_id"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_find_common_patterns",
            "line": 1157,
            "async": true,
            "decorators": [],
            "docstring": "Find common patterns across correlated metrics.\n\nArgs:\n    metric_patterns: Dictionary of metric patterns\n    correlations: List of correlation information\n    \nReturns:\n    List of common pattern information",
            "args": [
              "self",
              "metric_patterns",
              "correlations"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_analyze_behavior_patterns",
            "line": 1217,
            "async": true,
            "decorators": [],
            "docstring": "Analyze behavior patterns for a component.\n\nArgs:\n    component_id: Component ID\n    metric_patterns: Dictionary of metric patterns\n    component_analysis: Component performance analysis\n    \nReturns:\n    List of behavior pattern information",
            "args": [
              "self",
              "component_id",
              "metric_patterns",
              "component_analysis"
            ],
            "class": "PatternEngine",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_detect_persistent_patterns",
            "line": 1335,
            "async": true,
            "decorators": [],
            "docstring": "Run persistent pattern detection as a background task.",
            "args": [
              "self"
            ],
            "class": "PatternEngine",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_pattern_engine",
            "line": 1377,
            "async": true,
            "decorators": [],
            "docstring": "Get the global pattern detection engine instance.\n\nReturns:\n    PatternEngine instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "PatternType",
            "line": 24,
            "methods": [],
            "decorators": [],
            "docstring": "Pattern types enumeration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PatternConfidence",
            "line": 37,
            "methods": [],
            "decorators": [],
            "docstring": "Pattern confidence levels.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PatternDirection",
            "line": 45,
            "methods": [],
            "decorators": [],
            "docstring": "Pattern direction enumeration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PatternEngine",
            "line": 53,
            "methods": [
              "__init__",
              "_autocorrelation",
              "_calculate_confidence",
              "_confidence_to_level",
              "_calculate_sequence_confidence",
              "_meets_confidence_threshold",
              "_determine_dominant_pattern"
            ],
            "decorators": [],
            "docstring": "Core pattern detection engine for identifying and analyzing patterns\nin metrics, behavior, and intelligence characteristics.\n\nProvides various detection algorithms and analysis methods to identify\nmeaningful patterns across the Tekton ecosystem.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "math",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "logging",
            "alias": null,
            "line": 12
          },
          {
            "module": "numpy",
            "alias": "np",
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 16
          },
          {
            "module": "metrics_engine.get_metrics_engine",
            "from": "metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 19
          },
          {
            "module": "analysis_engine.get_analysis_engine",
            "from": "analysis_engine",
            "name": "get_analysis_engine",
            "alias": null,
            "line": 20
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "PatternType",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PatternConfidence",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 37,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PatternDirection",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 45,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "PatternEngine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 53,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PatternEngine.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PatternEngine.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PatternEngine.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 111,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PatternEngine.detect_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 130,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine.detect_correlated_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 300,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PatternEngine.detect_sequence_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 395,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine.detect_component_behavior_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 491,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "PatternEngine._detect_trend_pattern",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 567,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine._detect_threshold_breaches",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 814,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine._meets_confidence_threshold",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 1034,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine._get_metric_thresholds",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 1105,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine._find_common_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 1157,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "PatternEngine._analyze_behavior_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 1217,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_pattern_engine",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/pattern_detection.py",
            "line": 1377,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1386,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 13,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 26,
            "async": true,
            "decorators": [],
            "docstring": "Initialize Sophia-specific services.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 79,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup Sophia-specific resources.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 148,
            "async": false,
            "decorators": [],
            "docstring": "Get component capabilities.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 159,
            "async": false,
            "decorators": [],
            "docstring": "Get component metadata.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_status",
            "line": 166,
            "async": false,
            "decorators": [],
            "docstring": "Get detailed component status.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "check_all_engines_initialized",
            "line": 196,
            "async": false,
            "decorators": [],
            "docstring": "Check if all engines are initialized.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize_mcp_bridge",
            "line": 210,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP bridge after component startup.",
            "args": [
              "self"
            ],
            "class": "SophiaComponent",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SophiaComponent",
            "line": 10,
            "methods": [
              "__init__",
              "get_capabilities",
              "get_metadata",
              "get_component_status",
              "check_all_engines_initialized"
            ],
            "decorators": [],
            "docstring": "Sophia machine learning and continuous improvement component.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 2
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "shared.utils.standard_component.StandardComponentBase",
            "from": "shared.utils.standard_component",
            "name": "StandardComponentBase",
            "alias": null,
            "line": 5
          },
          {
            "module": "sophia.core.metrics_engine.get_metrics_engine",
            "from": "sophia.core.metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 29
          },
          {
            "module": "sophia.core.analysis_engine.get_analysis_engine",
            "from": "sophia.core.analysis_engine",
            "name": "get_analysis_engine",
            "alias": null,
            "line": 30
          },
          {
            "module": "sophia.core.experiment_framework.get_experiment_framework",
            "from": "sophia.core.experiment_framework",
            "name": "get_experiment_framework",
            "alias": null,
            "line": 31
          },
          {
            "module": "sophia.core.recommendation_system.get_recommendation_system",
            "from": "sophia.core.recommendation_system",
            "name": "get_recommendation_system",
            "alias": null,
            "line": 32
          },
          {
            "module": "sophia.core.intelligence_measurement.get_intelligence_measurement",
            "from": "sophia.core.intelligence_measurement",
            "name": "get_intelligence_measurement",
            "alias": null,
            "line": 33
          },
          {
            "module": "sophia.core.ml_engine.get_ml_engine",
            "from": "sophia.core.ml_engine",
            "name": "get_ml_engine",
            "alias": null,
            "line": 34
          },
          {
            "module": "sophia.utils.llm_integration.get_llm_integration",
            "from": "sophia.utils.llm_integration",
            "name": "get_llm_integration",
            "alias": null,
            "line": 64
          },
          {
            "module": "sophia.core.mcp.hermes_bridge.SophiaMCPBridge",
            "from": "sophia.core.mcp.hermes_bridge",
            "name": "SophiaMCPBridge",
            "alias": null,
            "line": 213
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SophiaComponent",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 10,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaComponent._component_specific_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 79,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "SophiaComponent.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 148,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaComponent.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 159,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaComponent.get_component_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 166,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaComponent.check_all_engines_initialized",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaComponent.initialize_mcp_bridge",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/sophia_component.py",
            "line": 210,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 219,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 98,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the LLM adapter.",
            "args": [
              "self"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 106,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the LLM adapter and clients.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_create_task_specific_client",
            "line": 136,
            "async": true,
            "decorators": [],
            "docstring": "Create a client configured for a specific task type.\n\nArgs:\n    task_type: Type of task (\"analysis\", \"recommendation\", etc.)\n    \nReturns:\n    Configured Client",
            "args": [
              "self",
              "task_type"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_client",
            "line": 159,
            "async": true,
            "decorators": [],
            "docstring": "Get an LLM client, optionally for a specific task type.\n\nArgs:\n    task_type: Optional task type for specialized client\n    \nReturns:\n    LLM client",
            "args": [
              "self",
              "task_type"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_metrics",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Analyze metrics data using LLM.\n\nArgs:\n    metrics_data: Metrics data to analyze\n    component_id: Optional component identifier\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "metrics_data",
              "component_id"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_recommendations",
            "line": 239,
            "async": true,
            "decorators": [],
            "docstring": "Generate recommendations based on analysis results.\n\nArgs:\n    analysis_results: Analysis data to base recommendations on\n    target_component: Optional target component for recommendations\n    count: Number of recommendations to generate\n    \nReturns:\n    List of recommendation objects",
            "args": [
              "self",
              "analysis_results",
              "target_component",
              "count"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "design_experiment",
            "line": 309,
            "async": true,
            "decorators": [],
            "docstring": "Design an experiment to test a hypothesis.\n\nArgs:\n    hypothesis: The hypothesis to test\n    available_components: List of components available for the experiment\n    metrics_summary: Summary of recent metrics\n    \nReturns:\n    Experiment design",
            "args": [
              "self",
              "hypothesis",
              "available_components",
              "metrics_summary"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "explain_analysis",
            "line": 388,
            "async": true,
            "decorators": [],
            "docstring": "Explain analysis results in human-readable form.\n\nArgs:\n    analysis_data: Analysis data to explain\n    audience: Target audience (\"technical\", \"executive\", \"general\")\n    \nReturns:\n    Human-readable explanation",
            "args": [
              "self",
              "analysis_data",
              "audience"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_natural_language_query",
            "line": 434,
            "async": true,
            "decorators": [],
            "docstring": "Process a natural language query about metrics or analysis.\n\nArgs:\n    query: The natural language query\n    context: Optional context information\n    \nReturns:\n    Response to the query",
            "args": [
              "self",
              "query",
              "context"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stream_explanation",
            "line": 499,
            "async": true,
            "decorators": [],
            "docstring": "Stream an explanation of the analysis, delivering chunks via callback.\n\nArgs:\n    analysis_id: ID of the analysis to explain\n    callback: Function to call with each content chunk",
            "args": [
              "self",
              "analysis_id",
              "callback"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_extract_structured_analysis",
            "line": 544,
            "async": true,
            "decorators": [],
            "docstring": "Extract structured analysis from LLM response.\n\nArgs:\n    content: Raw LLM response\n    \nReturns:\n    Structured analysis data",
            "args": [
              "self",
              "content"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_extract_json_recommendations",
            "line": 579,
            "async": true,
            "decorators": [],
            "docstring": "Extract JSON recommendations from LLM response.\n\nArgs:\n    content: Raw LLM response\n    \nReturns:\n    List of recommendation objects",
            "args": [
              "self",
              "content"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_extract_json_experiment",
            "line": 624,
            "async": true,
            "decorators": [],
            "docstring": "Extract JSON experiment design from LLM response.\n\nArgs:\n    content: Raw LLM response\n    \nReturns:\n    Experiment design object",
            "args": [
              "self",
              "content"
            ],
            "class": "LlmAdapter",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_extract_key_points",
            "line": 666,
            "async": true,
            "decorators": [],
            "docstring": "Extract key points of a specific type from content.\n\nArgs:\n    content: Content to analyze\n    point_type: Type of points to extract (pattern, anomaly, insight)\n    \nReturns:\n    List of extracted points",
            "args": [
              "self",
              "content",
              "point_type"
            ],
            "class": "LlmAdapter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_llm_adapter",
            "line": 702,
            "async": true,
            "decorators": [],
            "docstring": "Get the global LLM adapter instance.\n\nReturns:\n    LlmAdapter instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LlmAdapter",
            "line": 89,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "LLM adapter for Sophia's analysis and recommendation capabilities.\n\nProvides integration with Tekton's LLM services through the tekton-llm-client\nlibrary, supporting both synchronous and streaming interactions, with appropriate\nfallback mechanisms for resilience.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "logging",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.AsyncIterator",
            "from": "typing",
            "name": "AsyncIterator",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 13
          },
          {
            "module": "tekton_llm_client.Client",
            "from": "tekton_llm_client",
            "name": "Client",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.models.ChatMessage",
            "from": "tekton_llm_client.models",
            "name": "ChatMessage",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.models.ChatCompletionOptions",
            "from": "tekton_llm_client.models",
            "name": "ChatCompletionOptions",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton_llm_client.adapters.FallbackAdapter",
            "from": "tekton_llm_client.adapters",
            "name": "FallbackAdapter",
            "alias": null,
            "line": 17
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LlmAdapter",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 89,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "LlmAdapter.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 106,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.get_client",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 159,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.analyze_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.generate_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 239,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.design_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 309,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.explain_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 388,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.process_natural_language_query",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 434,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "LlmAdapter.stream_explanation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 499,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_llm_adapter",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/llm_adapter.py",
            "line": 702,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 711,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 67,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the recommendation system.",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 76,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the recommendation system.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start",
            "line": 97,
            "async": true,
            "decorators": [],
            "docstring": "Start the recommendation system and background tasks.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop",
            "line": 120,
            "async": true,
            "decorators": [],
            "docstring": "Stop the recommendation system and clean up resources.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_recommendation",
            "line": 139,
            "async": true,
            "decorators": [],
            "docstring": "Create a new recommendation.\n\nArgs:\n    title: Recommendation title\n    description: Detailed description\n    component_ids: Affected components\n    impact_areas: Areas of impact (performance, usability, etc.)\n    estimated_impact: Estimated impact (0.0 to 1.0)\n    effort_estimate: Estimated effort (low, medium, high)\n    implementation_plan: Detailed implementation plan\n    supporting_metrics: Metrics supporting the recommendation\n    experiments: Related experiments\n    source: Source of the recommendation\n    priority: Priority level\n    tags: Tags for categorizing the recommendation\n    \nReturns:\n    Created recommendation",
            "args": [
              "self",
              "title",
              "description",
              "component_ids",
              "impact_areas",
              "estimated_impact",
              "effort_estimate",
              "implementation_plan",
              "supporting_metrics",
              "experiments",
              "source",
              "priority",
              "tags"
            ],
            "class": "RecommendationSystem",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_recommendation_status",
            "line": 231,
            "async": true,
            "decorators": [],
            "docstring": "Update the status of a recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    status: New status\n    notes: Optional notes about the status change\n    \nReturns:\n    Updated recommendation",
            "args": [
              "self",
              "recommendation_id",
              "status",
              "notes"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "add_implementation_note",
            "line": 317,
            "async": true,
            "decorators": [],
            "docstring": "Add an implementation note to a recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    note: Implementation note\n    \nReturns:\n    Updated recommendation",
            "args": [
              "self",
              "recommendation_id",
              "note"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_acceptance_criteria",
            "line": 353,
            "async": true,
            "decorators": [],
            "docstring": "Add an acceptance criteria to a recommendation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    criteria: Acceptance criteria\n    \nReturns:\n    Updated recommendation",
            "args": [
              "self",
              "recommendation_id",
              "criteria"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_recommendation",
            "line": 385,
            "async": true,
            "decorators": [],
            "docstring": "Verify a recommendation after implementation.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    verification_results: Results of verification\n    \nReturns:\n    Updated recommendation",
            "args": [
              "self",
              "recommendation_id",
              "verification_results"
            ],
            "class": "RecommendationSystem",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_recommendation",
            "line": 430,
            "async": true,
            "decorators": [],
            "docstring": "Get recommendation data.\n\nArgs:\n    recommendation_id: ID of the recommendation\n    \nReturns:\n    Recommendation data",
            "args": [
              "self",
              "recommendation_id"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_recommendations",
            "line": 445,
            "async": true,
            "decorators": [],
            "docstring": "List recommendations with optional filtering.\n\nArgs:\n    status: Filter by recommendation status\n    component_id: Filter by affected component\n    tag: Filter by tag\n    priority: Filter by priority\n    source: Filter by source\n    impact_threshold: Filter by minimum impact\n    \nReturns:\n    List of matching recommendations",
            "args": [
              "self",
              "status",
              "component_id",
              "tag",
              "priority",
              "source",
              "impact_threshold"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_recommendations_from_analysis",
            "line": 522,
            "async": true,
            "decorators": [],
            "docstring": "Generate recommendations based on analysis of a component's metrics.\n\nArgs:\n    component_id: ID of the component to analyze\n    time_window: Time window for analysis\n    use_llm: Whether to use LLM for enhanced recommendations\n    \nReturns:\n    List of generated recommendations",
            "args": [
              "self",
              "component_id",
              "time_window",
              "use_llm"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_recommendation_from_experiment",
            "line": 692,
            "async": true,
            "decorators": [],
            "docstring": "Generate a recommendation based on experiment results.\n\nArgs:\n    experiment_id: ID of the experiment\n    use_llm: Whether to use LLM for enhanced recommendation generation\n    \nReturns:\n    Generated recommendation or None if unsuccessful",
            "args": [
              "self",
              "experiment_id",
              "use_llm"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_cross_component_recommendations",
            "line": 893,
            "async": true,
            "decorators": [],
            "docstring": "Generate recommendations that span multiple components.\n\nArgs:\n    time_window: Time window for analysis\n    \nReturns:\n    List of generated recommendations",
            "args": [
              "self",
              "time_window"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_analyze_performance_metrics",
            "line": 985,
            "async": true,
            "decorators": [],
            "docstring": "Analyze performance metrics and generate recommendations.\n\nArgs:\n    component_id: Component ID\n    analysis: Component analysis data\n    \nReturns:\n    List of recommendation data",
            "args": [
              "self",
              "component_id",
              "analysis"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_analyze_resource_metrics",
            "line": 1105,
            "async": true,
            "decorators": [],
            "docstring": "Analyze resource metrics and generate recommendations.\n\nArgs:\n    component_id: Component ID\n    analysis: Component analysis data\n    \nReturns:\n    List of recommendation data",
            "args": [
              "self",
              "component_id",
              "analysis"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_analyze_error_metrics",
            "line": 1235,
            "async": true,
            "decorators": [],
            "docstring": "Analyze error metrics and generate recommendations.\n\nArgs:\n    component_id: Component ID\n    analysis: Component analysis data\n    \nReturns:\n    List of recommendation data",
            "args": [
              "self",
              "component_id",
              "analysis"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_analyze_anomalies",
            "line": 1323,
            "async": true,
            "decorators": [],
            "docstring": "Analyze anomalies and generate recommendations.\n\nArgs:\n    component_id: Component ID\n    analysis: Component analysis data\n    \nReturns:\n    List of recommendation data",
            "args": [
              "self",
              "component_id",
              "analysis"
            ],
            "class": "RecommendationSystem",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_generate_correlation_recommendation",
            "line": 1389,
            "async": true,
            "decorators": [],
            "docstring": "Generate a recommendation based on component correlation.\n\nArgs:\n    component1: First component ID\n    component2: Second component ID\n    metric_id: Metric ID\n    correlation: Correlation analysis\n    \nReturns:\n    Recommendation data or None",
            "args": [
              "self",
              "component1",
              "component2",
              "metric_id",
              "correlation"
            ],
            "class": "RecommendationSystem",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_analyze_system_bottlenecks",
            "line": 1471,
            "async": true,
            "decorators": [],
            "docstring": "Analyze system-wide bottlenecks and generate recommendations.\n\nArgs:\n    system_analysis: System performance analysis\n    \nReturns:\n    List of recommendation data",
            "args": [
              "self",
              "system_analysis"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_generate_periodic_recommendations",
            "line": 1564,
            "async": true,
            "decorators": [],
            "docstring": "Run periodic recommendation generation as a background task.",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_load_recommendations",
            "line": 1616,
            "async": true,
            "decorators": [],
            "docstring": "Load recommendations from storage.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_save_recommendations",
            "line": 1628,
            "async": true,
            "decorators": [],
            "docstring": "Save recommendations to storage.\n\nReturns:\n    True if successful",
            "args": [
              "self"
            ],
            "class": "RecommendationSystem",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_recommendation_system",
            "line": 1643,
            "async": true,
            "decorators": [],
            "docstring": "Get the global recommendation system instance.\n\nReturns:\n    RecommendationSystem instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "RecommendationStatus",
            "line": 26,
            "methods": [],
            "decorators": [],
            "docstring": "Recommendation status enumeration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RecommendationPriority",
            "line": 36,
            "methods": [],
            "decorators": [],
            "docstring": "Recommendation priority enumeration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RecommendationImpact",
            "line": 43,
            "methods": [],
            "decorators": [],
            "docstring": "Recommendation impact enumeration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RecommendationSource",
            "line": 49,
            "methods": [],
            "decorators": [],
            "docstring": "Recommendation source enumeration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RecommendationSystem",
            "line": 59,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Core recommendation system for generating and tracking improvement suggestions.\n\nProvides a comprehensive approach to continuous improvement through\ndata-driven recommendations and validation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 14
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 15
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 16
          },
          {
            "module": "metrics_engine.get_metrics_engine",
            "from": "metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 19
          },
          {
            "module": "analysis_engine.get_analysis_engine",
            "from": "analysis_engine",
            "name": "get_analysis_engine",
            "alias": null,
            "line": 20
          },
          {
            "module": "experiment_framework.get_experiment_framework",
            "from": "experiment_framework",
            "name": "get_experiment_framework",
            "alias": null,
            "line": 21
          },
          {
            "module": "llm_adapter.get_llm_adapter",
            "from": "llm_adapter",
            "name": "get_llm_adapter",
            "alias": null,
            "line": 22
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "RecommendationStatus",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 26,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RecommendationPriority",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 36,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RecommendationImpact",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 43,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RecommendationSource",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 49,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RecommendationSystem",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 59,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 76,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.start",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 97,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.stop",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.create_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.update_recommendation_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 231,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.add_implementation_note",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 317,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.add_acceptance_criteria",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 353,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.verify_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 385,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.get_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 430,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.list_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 445,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.generate_recommendations_from_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 522,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.generate_recommendation_from_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 692,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem.generate_cross_component_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 893,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem._analyze_performance_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 985,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem._analyze_resource_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 1105,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem._analyze_error_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 1235,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem._analyze_system_bottlenecks",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 1471,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "RecommendationSystem._generate_periodic_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 1564,
            "priority": "medium",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_recommendation_system",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/recommendation_system.py",
            "line": 1643,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 1652,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
      "analysis": {
        "functions": [
          {
            "name": "import_tekton_utils",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Import all available Tekton utilities.\n\nReturns:\n    Dictionary mapping utility names to imported modules",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "has_util",
            "line": 84,
            "async": false,
            "decorators": [],
            "docstring": "Check if a specific utility is available.\n\nArgs:\n    util_name: Name of the utility to check\n    \nReturns:\n    True if the utility is available",
            "args": [
              "util_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_util",
            "line": 99,
            "async": false,
            "decorators": [],
            "docstring": "Get a specific utility module.\n\nArgs:\n    util_name: Name of the utility to get\n    \nReturns:\n    Utility module or None if not available",
            "args": [
              "util_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_config",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": "Get a configuration value using tekton_config if available.\n\nArgs:\n    key: Config key to retrieve\n    default: Default value if key not found\n    \nReturns:\n    Configuration value or default",
            "args": [
              "key",
              "default"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_sophia_port",
            "line": 134,
            "async": false,
            "decorators": [],
            "docstring": "Get the port for Sophia, following Single Port Architecture.\n\nReturns:\n    Port number",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_sophia_base_url",
            "line": 147,
            "async": false,
            "decorators": [],
            "docstring": "Get the base URL for Sophia.\n\nReturns:\n    Base URL",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "setup_logging",
            "line": 160,
            "async": false,
            "decorators": [],
            "docstring": "Set up logging using tekton_logging if available.\n\nArgs:\n    component_name: Name of the component for logging",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_logger",
            "line": 179,
            "async": false,
            "decorators": [],
            "docstring": "Get a logger using tekton_logging if available.\n\nArgs:\n    name: Logger name\n    \nReturns:\n    Logger instance",
            "args": [
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_http_client",
            "line": 196,
            "async": false,
            "decorators": [],
            "docstring": "Create an HTTP client using tekton_http if available.\n\nArgs:\n    base_url: Base URL for the client\n    timeout: Request timeout in seconds\n    headers: Default headers for requests\n    \nReturns:\n    HTTP client",
            "args": [
              "base_url",
              "timeout",
              "headers"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_error",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": "Create a standardized error using tekton_errors if available.\n\nArgs:\n    error_type: Type of error\n    message: Error message\n    status_code: HTTP status code for the error\n    details: Additional error details\n    \nReturns:\n    Exception instance",
            "args": [
              "error_type",
              "message",
              "status_code",
              "details"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format_error_response",
            "line": 261,
            "async": false,
            "decorators": [],
            "docstring": "Format an error for API response using tekton_errors if available.\n\nArgs:\n    error: Exception to format\n    include_traceback: Whether to include traceback in response\n    \nReturns:\n    Error response dictionary",
            "args": [
              "error",
              "include_traceback"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_websocket_manager",
            "line": 290,
            "async": false,
            "decorators": [],
            "docstring": "Create a WebSocket manager using tekton_websocket if available.\n\nReturns:\n    WebSocket manager or None if not available",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_lifecycle_manager",
            "line": 305,
            "async": false,
            "decorators": [],
            "docstring": "Get a lifecycle manager using tekton_lifecycle if available.\n\nArgs:\n    component_id: ID of the component\n    \nReturns:\n    Lifecycle manager or None if not available",
            "args": [
              "component_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 323,
            "async": false,
            "decorators": [],
            "docstring": "Register Sophia with Hermes using tekton_registration if available.\n\nArgs:\n    component_id: ID of the component\n    component_name: Name of the component\n    component_description: Description of the component\n    component_version: Version of the component\n    component_type: Type of component\n    host: Host for the component\n    port: Port for the component\n    capabilities: List of capabilities provided by the component\n    dependencies: List of dependencies required by the component\n    hermes_url: URL for Hermes registration service\n    \nReturns:\n    True if registration was successful",
            "args": [
              "component_id",
              "component_name",
              "component_description",
              "component_version",
              "component_type",
              "host",
              "port",
              "capabilities",
              "dependencies",
              "hermes_url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "async_decorator",
            "line": 427,
            "async": false,
            "decorators": [],
            "docstring": "A replacement for deprecated asyncio.coroutine decorator.\nThis decorator properly handles async functions in Python 3.12+.\n\nArgs:\n    func: The async function to decorate\n    \nReturns:\n    Decorated function",
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wrapper",
            "line": 440,
            "async": true,
            "decorators": [
              "@wraps"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "create_websocket_manager",
            "line": 290,
            "async": false
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "sys",
            "alias": null,
            "line": 11
          },
          {
            "module": "importlib",
            "alias": null,
            "line": 12
          },
          {
            "module": "logging",
            "alias": null,
            "line": 13
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 14
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 15
          },
          {
            "module": "functools",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Awaitable",
            "from": "typing",
            "name": "Awaitable",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.cast",
            "from": "typing",
            "name": "cast",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 24
          },
          {
            "module": "sophia.scripts.register_with_hermes.register_component",
            "from": "sophia.scripts.register_with_hermes",
            "name": "register_component",
            "alias": null,
            "line": 405
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "import_tekton_utils",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "has_util",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 84,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_util",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 99,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_config",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 116,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_sophia_port",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 134,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_sophia_base_url",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 147,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "setup_logging",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 160,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_logger",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 179,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_http_client",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_error",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 225,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "format_error_response",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 261,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_websocket_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 290,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_lifecycle_manager",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 305,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 323,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "async_decorator",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 427,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/tekton_utils.py",
            "line": 440,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 446,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Sophia LLM integration.\n\nArgs:\n    component_id: Component ID for tracking",
            "args": [
              "self",
              "component_id"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 131,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the LLM clients and load prompt templates.\n\nReturns:\n    True if initialization was successful",
            "args": [
              "self"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_load_templates",
            "line": 187,
            "async": false,
            "decorators": [],
            "docstring": "Load prompt templates from standard locations and register predefined templates.",
            "args": [
              "self"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 251,
            "async": true,
            "decorators": [],
            "docstring": "Shut down all LLM clients.",
            "args": [
              "self"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_client",
            "line": 265,
            "async": true,
            "decorators": [],
            "docstring": "Get an LLM client for a specific task type.\n\nArgs:\n    task_type: Type of task (analysis, recommendation, etc.)\n    \nReturns:\n    TektonLLMClient for the task",
            "args": [
              "self",
              "task_type"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_metrics",
            "line": 318,
            "async": true,
            "decorators": [],
            "docstring": "Analyze metrics data using LLM.\n\nArgs:\n    metrics_data: Metrics data to analyze\n    component_id: Optional component ID for context\n    \nReturns:\n    Analysis results",
            "args": [
              "self",
              "metrics_data",
              "component_id"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_recommendations",
            "line": 375,
            "async": true,
            "decorators": [],
            "docstring": "Generate recommendations based on analysis results.\n\nArgs:\n    analysis_results: Analysis data to base recommendations on\n    target_component: Optional target component for recommendations\n    count: Number of recommendations to generate\n    \nReturns:\n    List of recommendation objects",
            "args": [
              "self",
              "analysis_results",
              "target_component",
              "count"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "design_experiment",
            "line": 437,
            "async": true,
            "decorators": [],
            "docstring": "Design an experiment to test a hypothesis.\n\nArgs:\n    hypothesis: The hypothesis to test\n    available_components: List of components available for the experiment\n    metrics_summary: Summary of recent metrics\n    \nReturns:\n    Experiment design",
            "args": [
              "self",
              "hypothesis",
              "available_components",
              "metrics_summary"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "explain_analysis",
            "line": 508,
            "async": true,
            "decorators": [],
            "docstring": "Explain analysis results in human-readable form.\n\nArgs:\n    analysis_data: Analysis data to explain\n    audience: Target audience (\"technical\", \"executive\", \"general\")\n    \nReturns:\n    Human-readable explanation",
            "args": [
              "self",
              "analysis_data",
              "audience"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_natural_language_query",
            "line": 545,
            "async": true,
            "decorators": [],
            "docstring": "Process a natural language query about metrics or analysis.\n\nArgs:\n    query: The natural language query\n    context: Optional context information\n    \nReturns:\n    Response to the query",
            "args": [
              "self",
              "query",
              "context"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "assess_intelligence",
            "line": 596,
            "async": true,
            "decorators": [],
            "docstring": "Assess the intelligence of a component across dimensions.\n\nArgs:\n    component_id: ID of the component to assess\n    component_data: Data about the component's capabilities\n    dimensions: Specific dimensions to assess (all if None)\n    \nReturns:\n    Intelligence assessment with scores and justifications",
            "args": [
              "self",
              "component_id",
              "component_data",
              "dimensions"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stream_explanation",
            "line": 654,
            "async": true,
            "decorators": [],
            "docstring": "Stream an explanation of the analysis, delivering chunks via callback.\n\nArgs:\n    analysis_id: ID of the analysis to explain\n    callback: Function to call with each content chunk",
            "args": [
              "self",
              "analysis_id",
              "callback"
            ],
            "class": "SophiaLLMIntegration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_llm_integration",
            "line": 696,
            "async": true,
            "decorators": [],
            "docstring": "Get the global LLM integration instance.\n\nReturns:\n    SophiaLLMIntegration instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SophiaLLMIntegration",
            "line": 98,
            "methods": [
              "__init__",
              "_load_templates"
            ],
            "decorators": [],
            "docstring": "LLM integration for Sophia using the enhanced tekton-llm-client.\n\nThis class provides methods for all LLM-related tasks in Sophia,\nensuring standardized access to LLM capabilities with proper\nerror handling, prompt templates, and response parsing.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.AsyncIterator",
            "from": "typing",
            "name": "AsyncIterator",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton_llm_client.TektonLLMClient",
            "from": "tekton_llm_client",
            "name": "TektonLLMClient",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.PromptTemplateRegistry",
            "from": "tekton_llm_client",
            "name": "PromptTemplateRegistry",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.PromptTemplate",
            "from": "tekton_llm_client",
            "name": "PromptTemplate",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.load_template",
            "from": "tekton_llm_client",
            "name": "load_template",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.JSONParser",
            "from": "tekton_llm_client",
            "name": "JSONParser",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.parse_json",
            "from": "tekton_llm_client",
            "name": "parse_json",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.extract_json",
            "from": "tekton_llm_client",
            "name": "extract_json",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.StreamHandler",
            "from": "tekton_llm_client",
            "name": "StreamHandler",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.collect_stream",
            "from": "tekton_llm_client",
            "name": "collect_stream",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.stream_to_string",
            "from": "tekton_llm_client",
            "name": "stream_to_string",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.StructuredOutputParser",
            "from": "tekton_llm_client",
            "name": "StructuredOutputParser",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.OutputFormat",
            "from": "tekton_llm_client",
            "name": "OutputFormat",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.ClientSettings",
            "from": "tekton_llm_client",
            "name": "ClientSettings",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.LLMSettings",
            "from": "tekton_llm_client",
            "name": "LLMSettings",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.load_settings",
            "from": "tekton_llm_client",
            "name": "load_settings",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.get_env",
            "from": "tekton_llm_client",
            "name": "get_env",
            "alias": null,
            "line": 15
          },
          {
            "module": "tekton_llm_client.models.ChatMessage",
            "from": "tekton_llm_client.models",
            "name": "ChatMessage",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton_llm_client.models.ChatCompletionOptions",
            "from": "tekton_llm_client.models",
            "name": "ChatCompletionOptions",
            "alias": null,
            "line": 23
          },
          {
            "module": "tekton_llm_client.models.StreamingChunk",
            "from": "tekton_llm_client.models",
            "name": "StreamingChunk",
            "alias": null,
            "line": 23
          },
          {
            "module": "sophia.utils.tekton_utils.get_config",
            "from": "sophia.utils.tekton_utils",
            "name": "get_config",
            "alias": null,
            "line": 30
          },
          {
            "module": "sophia.utils.tekton_utils.get_logger",
            "from": "sophia.utils.tekton_utils",
            "name": "get_logger",
            "alias": null,
            "line": 30
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SophiaLLMIntegration",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 98,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 131,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 251,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.get_client",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 265,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.analyze_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 318,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.generate_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 375,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.design_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 437,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.explain_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 508,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.process_natural_language_query",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 545,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.assess_intelligence",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 596,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaLLMIntegration.stream_explanation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 654,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_llm_integration",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/utils/llm_integration.py",
            "line": 696,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 705,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_simple.py",
      "analysis": {
        "functions": [
          {
            "name": "root",
            "line": 43,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 52,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 43,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 52,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 4
          },
          {
            "module": "sys",
            "alias": null,
            "line": 5
          },
          {
            "module": "logging",
            "alias": null,
            "line": 6
          },
          {
            "module": "app_enhanced.app",
            "from": "app_enhanced",
            "name": "app",
            "alias": null,
            "line": 15
          },
          {
            "module": "sophia.api.app_enhanced.app",
            "from": "sophia.api.app_enhanced",
            "name": "app",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 25
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 25
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 26
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 60
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 67
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_simple.py",
            "line": 43,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_simple.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 72,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
      "analysis": {
        "functions": [
          {
            "name": "get_component_ports",
            "line": 55,
            "async": false,
            "decorators": [],
            "docstring": "Get component ports from configuration",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_session",
            "line": 165,
            "async": true,
            "decorators": [],
            "docstring": "Get or create aiohttp session",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup_session",
            "line": 173,
            "async": true,
            "decorators": [],
            "docstring": "Close aiohttp session",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_health_data",
            "line": 180,
            "async": true,
            "decorators": [],
            "docstring": "Save component health data before shutdown",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "cancel_background_task",
            "line": 195,
            "async": true,
            "decorators": [],
            "docstring": "Cancel background health update task",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_event",
            "line": 206,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Cleanup on shutdown",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_component_health",
            "line": 229,
            "async": true,
            "decorators": [],
            "docstring": "Check health of a specific component",
            "args": [
              "component",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_component_health",
            "line": 267,
            "async": true,
            "decorators": [],
            "docstring": "Update health status for all components",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "calculate_component_iq",
            "line": 285,
            "async": false,
            "decorators": [],
            "docstring": "Calculate IQ score for a single component based on health",
            "args": [
              "component",
              "health_data"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "calculate_dimension_score",
            "line": 325,
            "async": false,
            "decorators": [],
            "docstring": "Calculate score for a specific intelligence dimension",
            "args": [
              "dimension",
              "dimension_info"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "calculate_system_iq",
            "line": 359,
            "async": false,
            "decorators": [],
            "docstring": "Calculate overall system IQ from component health",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "root",
            "line": 393,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Root endpoint",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_sophia_port",
            "line": 407,
            "async": false,
            "decorators": [],
            "docstring": "Get Sophia port from configuration.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 416,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sophia_status",
            "line": 457,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get Sophia status for MCP",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_metrics",
            "line": 472,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get real-time system intelligence metrics",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "refresh_intelligence_metrics",
            "line": 508,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Force refresh of component health and intelligence metrics",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_intelligence",
            "line": 518,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get detailed intelligence metrics for a specific component",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_dimensions",
            "line": 562,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about all intelligence dimensions",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_improvement_recommendations",
            "line": 580,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get recommendations for improving system intelligence",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "startup_event",
            "line": 639,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": "Initialize on startup",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "periodic_health_update",
            "line": 689,
            "async": true,
            "decorators": [],
            "docstring": "Periodically update component health",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "root",
            "line": 393,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 416,
            "method": "@get",
            "async": true
          },
          {
            "name": "sophia_status",
            "line": 457,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_intelligence_metrics",
            "line": 472,
            "method": "@get",
            "async": true
          },
          {
            "name": "refresh_intelligence_metrics",
            "line": 508,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_component_intelligence",
            "line": 518,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_intelligence_dimensions",
            "line": 562,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_improvement_recommendations",
            "line": 580,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 4
          },
          {
            "module": "sys",
            "alias": null,
            "line": 5
          },
          {
            "module": "json",
            "alias": null,
            "line": 6
          },
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 13
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.utils.graceful_shutdown.GracefulShutdown",
            "from": "shared.utils.graceful_shutdown",
            "name": "GracefulShutdown",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.graceful_shutdown.add_fastapi_shutdown",
            "from": "shared.utils.graceful_shutdown",
            "name": "add_fastapi_shutdown",
            "alias": null,
            "line": 28
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 29
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 30
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 30
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 31
          },
          {
            "module": "os",
            "alias": null,
            "line": 57
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 699
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_component_ports",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 55,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_session",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 165,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cleanup_session",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 173,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "save_health_data",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 180,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "cancel_background_task",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 195,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_event",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 206,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "check_component_health",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 229,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_component_health",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 267,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "calculate_component_iq",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 285,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "calculate_dimension_score",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 325,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "calculate_system_iq",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 359,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "root",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 393,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 416,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "sophia_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 457,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_intelligence_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 472,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "refresh_intelligence_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 508,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_component_intelligence",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 518,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "get_intelligence_dimensions",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 562,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_improvement_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 580,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "startup_event",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 639,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "periodic_health_update",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app_enhanced.py",
            "line": 689,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 703,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/fastmcp_endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "get_ml_status",
            "line": 71,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get overall ML/AI system status.\n\nReturns:\n    Dictionary containing ML system status and capabilities",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_research_workflow",
            "line": 100,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Execute a predefined research workflow.\n\nArgs:\n    workflow_name: Name of the workflow to execute\n    parameters: Parameters for the workflow\n    \nReturns:\n    Dictionary containing workflow execution results",
            "args": [
              "workflow_name",
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_complete_research_analysis_workflow",
            "line": 146,
            "async": true,
            "decorators": [],
            "docstring": "Complete research analysis including data collection, analysis, and recommendations.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_intelligence_assessment_workflow",
            "line": 209,
            "async": true,
            "decorators": [],
            "docstring": "Intelligence assessment workflow for evaluating component capabilities.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_optimization_workflow",
            "line": 268,
            "async": true,
            "decorators": [],
            "docstring": "Component optimization workflow using ML analysis and recommendations.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_trend_analysis_workflow",
            "line": 325,
            "async": true,
            "decorators": [],
            "docstring": "Trend analysis workflow for ecosystem-wide insights.",
            "args": [
              "parameters"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPRequest",
            "line": 32,
            "methods": [],
            "decorators": [],
            "docstring": "Request model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPResponse",
            "line": 38,
            "methods": [],
            "decorators": [],
            "docstring": "Response model for MCP tool execution.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [
          {
            "name": "get_ml_status",
            "line": 71,
            "method": "@get",
            "async": true
          },
          {
            "name": "execute_research_workflow",
            "line": 100,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 10
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 11
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 14
          },
          {
            "module": "tekton.mcp.fastmcp.server.FastMCPServer",
            "from": "tekton.mcp.fastmcp.server",
            "name": "FastMCPServer",
            "alias": null,
            "line": 16
          },
          {
            "module": "tekton.mcp.fastmcp.utils.endpoints.add_mcp_endpoints",
            "from": "tekton.mcp.fastmcp.utils.endpoints",
            "name": "add_mcp_endpoints",
            "alias": null,
            "line": 17
          },
          {
            "module": "tekton.mcp.fastmcp.exceptions.FastMCPError",
            "from": "tekton.mcp.fastmcp.exceptions",
            "name": "FastMCPError",
            "alias": null,
            "line": 18
          },
          {
            "module": "sophia.core.mcp.tools.ml_analysis_tools",
            "from": "sophia.core.mcp.tools",
            "name": "ml_analysis_tools",
            "alias": null,
            "line": 20
          },
          {
            "module": "sophia.core.mcp.tools.research_management_tools",
            "from": "sophia.core.mcp.tools",
            "name": "research_management_tools",
            "alias": null,
            "line": 20
          },
          {
            "module": "sophia.core.mcp.tools.intelligence_measurement_tools",
            "from": "sophia.core.mcp.tools",
            "name": "intelligence_measurement_tools",
            "alias": null,
            "line": 20
          },
          {
            "module": "sophia.core.mcp.capabilities.MLAnalysisCapability",
            "from": "sophia.core.mcp.capabilities",
            "name": "MLAnalysisCapability",
            "alias": null,
            "line": 25
          },
          {
            "module": "sophia.core.mcp.capabilities.ResearchManagementCapability",
            "from": "sophia.core.mcp.capabilities",
            "name": "ResearchManagementCapability",
            "alias": null,
            "line": 25
          },
          {
            "module": "sophia.core.mcp.capabilities.IntelligenceMeasurementCapability",
            "from": "sophia.core.mcp.capabilities",
            "name": "IntelligenceMeasurementCapability",
            "alias": null,
            "line": 25
          },
          {
            "module": "sophia.core.mcp.tools.analyze_component_performance",
            "from": "sophia.core.mcp.tools",
            "name": "analyze_component_performance",
            "alias": null,
            "line": 148
          },
          {
            "module": "sophia.core.mcp.tools.extract_patterns",
            "from": "sophia.core.mcp.tools",
            "name": "extract_patterns",
            "alias": null,
            "line": 148
          },
          {
            "module": "sophia.core.mcp.tools.create_research_project",
            "from": "sophia.core.mcp.tools",
            "name": "create_research_project",
            "alias": null,
            "line": 148
          },
          {
            "module": "sophia.core.mcp.tools.generate_research_recommendations",
            "from": "sophia.core.mcp.tools",
            "name": "generate_research_recommendations",
            "alias": null,
            "line": 148
          },
          {
            "module": "sophia.core.mcp.tools.measure_component_intelligence",
            "from": "sophia.core.mcp.tools",
            "name": "measure_component_intelligence",
            "alias": null,
            "line": 211
          },
          {
            "module": "sophia.core.mcp.tools.compare_intelligence_profiles",
            "from": "sophia.core.mcp.tools",
            "name": "compare_intelligence_profiles",
            "alias": null,
            "line": 211
          },
          {
            "module": "sophia.core.mcp.tools.track_intelligence_evolution",
            "from": "sophia.core.mcp.tools",
            "name": "track_intelligence_evolution",
            "alias": null,
            "line": 211
          },
          {
            "module": "sophia.core.mcp.tools.generate_intelligence_insights",
            "from": "sophia.core.mcp.tools",
            "name": "generate_intelligence_insights",
            "alias": null,
            "line": 211
          },
          {
            "module": "sophia.core.mcp.tools.analyze_component_performance",
            "from": "sophia.core.mcp.tools",
            "name": "analyze_component_performance",
            "alias": null,
            "line": 270
          },
          {
            "module": "sophia.core.mcp.tools.predict_optimization_impact",
            "from": "sophia.core.mcp.tools",
            "name": "predict_optimization_impact",
            "alias": null,
            "line": 270
          },
          {
            "module": "sophia.core.mcp.tools.design_ml_experiment",
            "from": "sophia.core.mcp.tools",
            "name": "design_ml_experiment",
            "alias": null,
            "line": 270
          },
          {
            "module": "sophia.core.mcp.tools.validate_optimization_results",
            "from": "sophia.core.mcp.tools",
            "name": "validate_optimization_results",
            "alias": null,
            "line": 270
          },
          {
            "module": "sophia.core.mcp.tools.analyze_ecosystem_trends",
            "from": "sophia.core.mcp.tools",
            "name": "analyze_ecosystem_trends",
            "alias": null,
            "line": 327
          },
          {
            "module": "sophia.core.mcp.tools.extract_patterns",
            "from": "sophia.core.mcp.tools",
            "name": "extract_patterns",
            "alias": null,
            "line": 327
          },
          {
            "module": "sophia.core.mcp.tools.forecast_system_evolution",
            "from": "sophia.core.mcp.tools",
            "name": "forecast_system_evolution",
            "alias": null,
            "line": 327
          },
          {
            "module": "sophia.core.mcp.tools.generate_strategic_insights",
            "from": "sophia.core.mcp.tools",
            "name": "generate_strategic_insights",
            "alias": null,
            "line": 327
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPRequest",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/fastmcp_endpoints.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "MCPResponse",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/fastmcp_endpoints.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "get_ml_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/fastmcp_endpoints.py",
            "line": 71,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "execute_research_workflow",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/fastmcp_endpoints.py",
            "line": 100,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 385,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app.py",
      "analysis": {
        "functions": [
          {
            "name": "startup_callback",
            "line": 62,
            "async": true,
            "decorators": [],
            "docstring": "Component startup callback.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "ready",
            "line": 104,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Readiness check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery",
            "line": 119,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Service discovery endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health",
            "line": 147,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "websocket_endpoint",
            "line": 172,
            "async": true,
            "decorators": [
              "@websocket"
            ],
            "docstring": "WebSocket endpoint for real-time communication.",
            "args": [
              "websocket"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "ready",
            "line": 104,
            "method": "@get",
            "async": true
          },
          {
            "name": "discovery",
            "line": 119,
            "method": "@get",
            "async": true
          },
          {
            "name": "health",
            "line": 147,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [
          {
            "name": "websocket_endpoint",
            "line": 172,
            "async": true
          }
        ],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 8
          },
          {
            "module": "sys",
            "alias": null,
            "line": 9
          },
          {
            "module": "json",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "time",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 13
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 14
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.WebSocket",
            "from": "fastapi",
            "name": "WebSocket",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.WebSocketDisconnect",
            "from": "fastapi",
            "name": "WebSocketDisconnect",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.Request",
            "from": "fastapi",
            "name": "Request",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.Response",
            "from": "fastapi",
            "name": "Response",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.status",
            "from": "fastapi",
            "name": "status",
            "alias": null,
            "line": 16
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 17
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 18
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 26
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 27
          },
          {
            "module": "shared.api.documentation.get_openapi_configuration",
            "from": "shared.api.documentation",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 30
          },
          {
            "module": "shared.api.endpoints.create_ready_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.api.endpoints.create_discovery_endpoint",
            "from": "shared.api.endpoints",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.api.endpoints.EndpointInfo",
            "from": "shared.api.endpoints",
            "name": "EndpointInfo",
            "alias": null,
            "line": 31
          },
          {
            "module": "shared.api.routers.create_standard_routers",
            "from": "shared.api.routers",
            "name": "create_standard_routers",
            "alias": null,
            "line": 32
          },
          {
            "module": "shared.api.routers.mount_standard_routers",
            "from": "shared.api.routers",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 32
          },
          {
            "module": "sophia.core.sophia_component.SophiaComponent",
            "from": "sophia.core.sophia_component",
            "name": "SophiaComponent",
            "alias": null,
            "line": 35
          },
          {
            "module": "sophia.core.intelligence_measurement.IntelligenceDimension",
            "from": "sophia.core.intelligence_measurement",
            "name": "IntelligenceDimension",
            "alias": null,
            "line": 36
          },
          {
            "module": "sophia.models.metrics.MetricSubmission",
            "from": "sophia.models.metrics",
            "name": "MetricSubmission",
            "alias": null,
            "line": 39
          },
          {
            "module": "sophia.models.metrics.MetricQuery",
            "from": "sophia.models.metrics",
            "name": "MetricQuery",
            "alias": null,
            "line": 39
          },
          {
            "module": "sophia.models.metrics.MetricResponse",
            "from": "sophia.models.metrics",
            "name": "MetricResponse",
            "alias": null,
            "line": 39
          },
          {
            "module": "sophia.models.metrics.MetricAggregationQuery",
            "from": "sophia.models.metrics",
            "name": "MetricAggregationQuery",
            "alias": null,
            "line": 39
          },
          {
            "module": "sophia.models.metrics.MetricDefinition",
            "from": "sophia.models.metrics",
            "name": "MetricDefinition",
            "alias": null,
            "line": 39
          },
          {
            "module": "sophia.models.experiment.ExperimentCreate",
            "from": "sophia.models.experiment",
            "name": "ExperimentCreate",
            "alias": null,
            "line": 40
          },
          {
            "module": "sophia.models.experiment.ExperimentUpdate",
            "from": "sophia.models.experiment",
            "name": "ExperimentUpdate",
            "alias": null,
            "line": 40
          },
          {
            "module": "sophia.models.experiment.ExperimentQuery",
            "from": "sophia.models.experiment",
            "name": "ExperimentQuery",
            "alias": null,
            "line": 40
          },
          {
            "module": "sophia.models.experiment.ExperimentResponse",
            "from": "sophia.models.experiment",
            "name": "ExperimentResponse",
            "alias": null,
            "line": 40
          },
          {
            "module": "sophia.models.experiment.ExperimentResult",
            "from": "sophia.models.experiment",
            "name": "ExperimentResult",
            "alias": null,
            "line": 40
          },
          {
            "module": "sophia.models.recommendation.RecommendationCreate",
            "from": "sophia.models.recommendation",
            "name": "RecommendationCreate",
            "alias": null,
            "line": 41
          },
          {
            "module": "sophia.models.recommendation.RecommendationUpdate",
            "from": "sophia.models.recommendation",
            "name": "RecommendationUpdate",
            "alias": null,
            "line": 41
          },
          {
            "module": "sophia.models.recommendation.RecommendationQuery",
            "from": "sophia.models.recommendation",
            "name": "RecommendationQuery",
            "alias": null,
            "line": 41
          },
          {
            "module": "sophia.models.recommendation.RecommendationResponse",
            "from": "sophia.models.recommendation",
            "name": "RecommendationResponse",
            "alias": null,
            "line": 41
          },
          {
            "module": "sophia.models.intelligence.IntelligenceMeasurementCreate",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceMeasurementCreate",
            "alias": null,
            "line": 42
          },
          {
            "module": "sophia.models.intelligence.IntelligenceMeasurementQuery",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceMeasurementQuery",
            "alias": null,
            "line": 42
          },
          {
            "module": "sophia.models.intelligence.IntelligenceMeasurementResponse",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceMeasurementResponse",
            "alias": null,
            "line": 42
          },
          {
            "module": "sophia.models.intelligence.ComponentIntelligenceProfile",
            "from": "sophia.models.intelligence",
            "name": "ComponentIntelligenceProfile",
            "alias": null,
            "line": 42
          },
          {
            "module": "sophia.models.component.ComponentRegister",
            "from": "sophia.models.component",
            "name": "ComponentRegister",
            "alias": null,
            "line": 43
          },
          {
            "module": "sophia.models.component.ComponentUpdate",
            "from": "sophia.models.component",
            "name": "ComponentUpdate",
            "alias": null,
            "line": 43
          },
          {
            "module": "sophia.models.component.ComponentQuery",
            "from": "sophia.models.component",
            "name": "ComponentQuery",
            "alias": null,
            "line": 43
          },
          {
            "module": "sophia.models.component.ComponentResponse",
            "from": "sophia.models.component",
            "name": "ComponentResponse",
            "alias": null,
            "line": 43
          },
          {
            "module": "sophia.models.research.ResearchProjectCreate",
            "from": "sophia.models.research",
            "name": "ResearchProjectCreate",
            "alias": null,
            "line": 44
          },
          {
            "module": "sophia.models.research.ResearchProjectUpdate",
            "from": "sophia.models.research",
            "name": "ResearchProjectUpdate",
            "alias": null,
            "line": 44
          },
          {
            "module": "sophia.models.research.ResearchProjectQuery",
            "from": "sophia.models.research",
            "name": "ResearchProjectQuery",
            "alias": null,
            "line": 44
          },
          {
            "module": "sophia.models.research.ResearchProjectResponse",
            "from": "sophia.models.research",
            "name": "ResearchProjectResponse",
            "alias": null,
            "line": 44
          },
          {
            "module": "sophia.__version__",
            "from": "sophia",
            "name": "__version__",
            "alias": null,
            "line": 47
          },
          {
            "module": "sophia.api.endpoints.metrics",
            "from": "sophia.api.endpoints",
            "name": "metrics",
            "alias": null,
            "line": 234
          },
          {
            "module": "sophia.api.endpoints.experiments",
            "from": "sophia.api.endpoints",
            "name": "experiments",
            "alias": null,
            "line": 234
          },
          {
            "module": "sophia.api.endpoints.recommendations",
            "from": "sophia.api.endpoints",
            "name": "recommendations",
            "alias": null,
            "line": 234
          },
          {
            "module": "sophia.api.endpoints.intelligence",
            "from": "sophia.api.endpoints",
            "name": "intelligence",
            "alias": null,
            "line": 234
          },
          {
            "module": "sophia.api.endpoints.research",
            "from": "sophia.api.endpoints",
            "name": "research",
            "alias": null,
            "line": 234
          },
          {
            "module": "sophia.api.endpoints.components",
            "from": "sophia.api.endpoints",
            "name": "components",
            "alias": null,
            "line": 234
          },
          {
            "module": "sophia.api.fastmcp_endpoints.mcp_router",
            "from": "sophia.api.fastmcp_endpoints",
            "name": "mcp_router",
            "alias": null,
            "line": 253
          },
          {
            "module": "sophia.core.mcp.hermes_bridge.get_mcp_routes",
            "from": "sophia.core.mcp.hermes_bridge",
            "name": "get_mcp_routes",
            "alias": null,
            "line": 263
          },
          {
            "module": "shared.utils.socket_server.run_component_server",
            "from": "shared.utils.socket_server",
            "name": "run_component_server",
            "alias": null,
            "line": 272
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "startup_callback",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app.py",
            "line": 62,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ready",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "discovery",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app.py",
            "line": 119,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "health",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app.py",
            "line": 147,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "websocket_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/app.py",
            "line": 172,
            "priority": "high",
            "reason": "Async function, High complexity"
          }
        ]
      },
      "line_count": 282,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Sophia MCP Bridge.",
            "args": [
              "self",
              "ml_engine",
              "component_name"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 32,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register with Hermes.",
            "args": [
              "self"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 57,
            "async": true,
            "decorators": [],
            "docstring": "Register standard tools like health check and component info.",
            "args": [
              "self"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tools",
            "line": 72,
            "async": true,
            "decorators": [],
            "docstring": "Register FastMCP tools with Hermes.",
            "args": [
              "self"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_fastmcp_tool",
            "line": 85,
            "async": true,
            "decorators": [],
            "docstring": "Register a single FastMCP tool with Hermes.",
            "args": [
              "self",
              "fastmcp_tool"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "handler",
            "line": 90,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "parameters"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool_with_hermes",
            "line": 120,
            "async": true,
            "decorators": [],
            "docstring": "Register a standard MCP tool with Hermes.",
            "args": [
              "self",
              "tool"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_health_status",
            "line": 141,
            "async": true,
            "decorators": [],
            "docstring": "Get health status from ML engine.",
            "args": [
              "self"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 159,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service and unregister from Hermes.",
            "args": [
              "self"
            ],
            "class": "SophiaMCPBridge",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SophiaMCPBridge",
            "line": 17,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Bridge between Sophia's FastMCP tools and Hermes MCP aggregator.\n\nThis class allows Sophia to register its tools with Hermes while\nmaintaining the existing FastMCP implementation.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.mcp.MCPService",
            "from": "shared.mcp",
            "name": "MCPService",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.MCPConfig",
            "from": "shared.mcp",
            "name": "MCPConfig",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.mcp.client.HermesMCPClient",
            "from": "shared.mcp.client",
            "name": "HermesMCPClient",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.mcp.tools.HealthCheckTool",
            "from": "shared.mcp.tools",
            "name": "HealthCheckTool",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.mcp.tools.ComponentInfoTool",
            "from": "shared.mcp.tools",
            "name": "ComponentInfoTool",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.core.mcp.get_all_tools",
            "from": "sophia.core.mcp",
            "name": "get_all_tools",
            "alias": null,
            "line": 46
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SophiaMCPBridge",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 32,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 57,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.register_fastmcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 72,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.register_fastmcp_tool",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 85,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.handler",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 90,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.register_tool_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 120,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SophiaMCPBridge.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/hermes_bridge.py",
            "line": 159,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 184,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
      "analysis": {
        "functions": [
          {
            "name": "analyze_component_performance",
            "line": 21,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Analyze performance characteristics of a Tekton component.",
            "args": [
              "component_name",
              "metrics_data",
              "analysis_depth"
            ],
            "class": "SophiaMLAnalysisTools",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "extract_patterns",
            "line": 61,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Extract patterns from component behavior and system interactions.",
            "args": [
              "data_source",
              "pattern_types",
              "time_window"
            ],
            "class": "SophiaMLAnalysisTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "predict_optimization_impact",
            "line": 115,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Predict the impact of proposed optimizations using ML models.",
            "args": [
              "optimization_type",
              "target_component",
              "parameters"
            ],
            "class": "SophiaMLAnalysisTools",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "design_ml_experiment",
            "line": 171,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Design ML experiments for component optimization and behavior analysis.",
            "args": [
              "hypothesis",
              "target_metrics",
              "experiment_duration"
            ],
            "class": "SophiaMLAnalysisTools",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_ecosystem_trends",
            "line": 230,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Analyze trends across the entire Tekton ecosystem.",
            "args": [
              "time_range",
              "trend_categories"
            ],
            "class": "SophiaMLAnalysisTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "forecast_system_evolution",
            "line": 295,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Forecast how the Tekton system will evolve over time.",
            "args": [
              "forecast_horizon",
              "evolution_factors"
            ],
            "class": "SophiaMLAnalysisTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "create_research_project",
            "line": 370,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Create and initialize a new research project.",
            "args": [
              "project_title",
              "research_objectives",
              "timeline"
            ],
            "class": "SophiaResearchManagementTools",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "manage_experiment_lifecycle",
            "line": 427,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Manage the complete lifecycle of research experiments.",
            "args": [
              "experiment_id",
              "action",
              "parameters"
            ],
            "class": "SophiaResearchManagementTools",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "validate_optimization_results",
            "line": 499,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Validate the results of optimization implementations.",
            "args": [
              "optimization_id",
              "validation_criteria",
              "comparison_baseline"
            ],
            "class": "SophiaResearchManagementTools",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "generate_research_recommendations",
            "line": 569,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Generate research recommendations based on current findings and analysis.",
            "args": [
              "research_area",
              "current_findings",
              "priority_level"
            ],
            "class": "SophiaResearchManagementTools",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "track_research_progress",
            "line": 648,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Track and monitor progress of ongoing research projects.",
            "args": [
              "project_id",
              "progress_metrics"
            ],
            "class": "SophiaResearchManagementTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "synthesize_research_findings",
            "line": 725,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Synthesize findings across multiple research projects.",
            "args": [
              "research_projects",
              "synthesis_scope"
            ],
            "class": "SophiaResearchManagementTools",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "measure_component_intelligence",
            "line": 817,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Measure intelligence levels across different dimensions for a component.",
            "args": [
              "component_name",
              "intelligence_dimensions",
              "measurement_depth"
            ],
            "class": "SophiaIntelligenceMeasurementTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "compare_intelligence_profiles",
            "line": 912,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Compare intelligence profiles across multiple components.",
            "args": [
              "components",
              "comparison_dimensions"
            ],
            "class": "SophiaIntelligenceMeasurementTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "track_intelligence_evolution",
            "line": 983,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Track how component intelligence evolves over time.",
            "args": [
              "component_name",
              "tracking_period",
              "evolution_metrics"
            ],
            "class": "SophiaIntelligenceMeasurementTools",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_intelligence_insights",
            "line": 1069,
            "async": false,
            "decorators": [
              "@staticmethod"
            ],
            "docstring": "Generate insights about intelligence patterns and optimization opportunities.",
            "args": [
              "analysis_scope",
              "insight_categories"
            ],
            "class": "SophiaIntelligenceMeasurementTools",
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "SophiaMLAnalysisTools",
            "line": 17,
            "methods": [
              "analyze_component_performance",
              "extract_patterns",
              "predict_optimization_impact",
              "design_ml_experiment",
              "analyze_ecosystem_trends",
              "forecast_system_evolution"
            ],
            "decorators": [],
            "docstring": "ML/AI Analysis tools for Sophia (6 tools).",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SophiaResearchManagementTools",
            "line": 366,
            "methods": [
              "create_research_project",
              "manage_experiment_lifecycle",
              "validate_optimization_results",
              "generate_research_recommendations",
              "track_research_progress",
              "synthesize_research_findings"
            ],
            "decorators": [],
            "docstring": "Research Management tools for Sophia (6 tools).",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SophiaIntelligenceMeasurementTools",
            "line": 813,
            "methods": [
              "measure_component_intelligence",
              "compare_intelligence_profiles",
              "track_intelligence_evolution",
              "generate_intelligence_insights"
            ],
            "decorators": [],
            "docstring": "Intelligence Measurement tools for Sophia (4 tools).",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.timedelta",
            "from": "datetime",
            "name": "timedelta",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "random",
            "alias": null,
            "line": 11
          },
          {
            "module": "uuid",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPTool",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPTool",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "SophiaMLAnalysisTools",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaMLAnalysisTools.analyze_component_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaMLAnalysisTools.extract_patterns",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 61,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaMLAnalysisTools.predict_optimization_impact",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 115,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaMLAnalysisTools.design_ml_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 171,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaMLAnalysisTools.analyze_ecosystem_trends",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 230,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaMLAnalysisTools.forecast_system_evolution",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 295,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "class_definition",
            "name": "SophiaResearchManagementTools",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 366,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaResearchManagementTools.create_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 370,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaResearchManagementTools.manage_experiment_lifecycle",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 427,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaResearchManagementTools.validate_optimization_results",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 499,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaResearchManagementTools.generate_research_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 569,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "SophiaResearchManagementTools.track_research_progress",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 648,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaResearchManagementTools.synthesize_research_findings",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 725,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SophiaIntelligenceMeasurementTools",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 813,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaIntelligenceMeasurementTools.measure_component_intelligence",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 817,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaIntelligenceMeasurementTools.compare_intelligence_profiles",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 912,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaIntelligenceMeasurementTools.track_intelligence_evolution",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 983,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "SophiaIntelligenceMeasurementTools.generate_intelligence_insights",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/tools.py",
            "line": 1069,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 1361,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/__init__.py",
      "analysis": {
        "functions": [
          {
            "name": "get_all_capabilities",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Get all Sophia MCP capabilities.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_all_tools",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Get all Sophia MCP tools.",
            "args": [
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "capabilities.MLAnalysisCapability",
            "from": "capabilities",
            "name": "MLAnalysisCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.ResearchManagementCapability",
            "from": "capabilities",
            "name": "ResearchManagementCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "capabilities.IntelligenceMeasurementCapability",
            "from": "capabilities",
            "name": "IntelligenceMeasurementCapability",
            "alias": null,
            "line": 8
          },
          {
            "module": "tools.ml_analysis_tools",
            "from": "tools",
            "name": "ml_analysis_tools",
            "alias": null,
            "line": 14
          },
          {
            "module": "tools.research_management_tools",
            "from": "tools",
            "name": "research_management_tools",
            "alias": null,
            "line": 14
          },
          {
            "module": "tools.intelligence_measurement_tools",
            "from": "tools",
            "name": "intelligence_measurement_tools",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_all_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/__init__.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_all_tools",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/__init__.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 62,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
      "analysis": {
        "functions": [
          {
            "name": "get_supported_operations",
            "line": 20,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "MLAnalysisCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 32,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "MLAnalysisCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 54,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "ResearchManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 66,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "ResearchManagementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_supported_operations",
            "line": 87,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get list of supported operations.",
            "args": [
              "cls"
            ],
            "class": "IntelligenceMeasurementCapability",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capability_metadata",
            "line": 97,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get capability metadata.",
            "args": [
              "cls"
            ],
            "class": "IntelligenceMeasurementCapability",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MLAnalysisCapability",
            "line": 12,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for machine learning and AI analysis.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ResearchManagementCapability",
            "line": 46,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for research project and experiment management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "IntelligenceMeasurementCapability",
            "line": 79,
            "methods": [
              "get_supported_operations",
              "get_capability_metadata"
            ],
            "decorators": [],
            "docstring": "Capability for measuring and tracking component intelligence.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "tekton.mcp.fastmcp.schema.MCPCapability",
            "from": "tekton.mcp.fastmcp.schema",
            "name": "MCPCapability",
            "alias": null,
            "line": 9
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MLAnalysisCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 12,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MLAnalysisCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MLAnalysisCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 32,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ResearchManagementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 46,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ResearchManagementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 54,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ResearchManagementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "IntelligenceMeasurementCapability",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurementCapability.get_supported_operations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 87,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "IntelligenceMeasurementCapability.get_capability_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/core/mcp/capabilities.py",
            "line": 97,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 115,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
      "analysis": {
        "functions": [
          {
            "name": "explain_metrics",
            "line": 29,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Generate natural language explanation of metrics data.\nTranslates technical metrics into clear, accessible explanations.",
            "args": [
              "metrics_data",
              "audience",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "submit_metric",
            "line": 55,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Submit a new metric.",
            "args": [
              "submission",
              "metrics_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_metrics",
            "line": 87,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query metrics with filtering.",
            "args": [
              "metric_id",
              "source",
              "tags",
              "start_time",
              "end_time",
              "limit",
              "offset",
              "sort",
              "metrics_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "aggregate_metrics",
            "line": 125,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Aggregate metrics for analysis.",
            "args": [
              "aggregation_query",
              "metrics_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_available_metrics",
            "line": 140,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get all available metric definitions.",
            "args": [
              "metrics_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metric_definition",
            "line": 153,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get definition for a specific metric.",
            "args": [
              "metric_id",
              "metrics_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_metric_definition",
            "line": 176,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a new metric definition.",
            "args": [
              "definition",
              "metric_id",
              "metrics_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "explain_metrics",
            "line": 29,
            "method": "@post",
            "async": true
          },
          {
            "name": "submit_metric",
            "line": 55,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_metrics",
            "line": 87,
            "method": "@get",
            "async": true
          },
          {
            "name": "aggregate_metrics",
            "line": 125,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_available_metrics",
            "line": 140,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_metric_definition",
            "line": 153,
            "method": "@get",
            "async": true
          },
          {
            "name": "register_metric_definition",
            "line": 176,
            "method": "@post",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "sophia.core.metrics_engine.get_metrics_engine",
            "from": "sophia.core.metrics_engine",
            "name": "get_metrics_engine",
            "alias": null,
            "line": 11
          },
          {
            "module": "sophia.core.llm_adapter.get_llm_adapter",
            "from": "sophia.core.llm_adapter",
            "name": "get_llm_adapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.metrics.MetricSubmission",
            "from": "sophia.models.metrics",
            "name": "MetricSubmission",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.metrics.MetricQuery",
            "from": "sophia.models.metrics",
            "name": "MetricQuery",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.metrics.MetricResponse",
            "from": "sophia.models.metrics",
            "name": "MetricResponse",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.metrics.MetricAggregationQuery",
            "from": "sophia.models.metrics",
            "name": "MetricAggregationQuery",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.metrics.MetricDefinition",
            "from": "sophia.models.metrics",
            "name": "MetricDefinition",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "explain_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "submit_metric",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 55,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 87,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "aggregate_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 125,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_available_metrics",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 140,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_metric_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 153,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_metric_definition",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/metrics.py",
            "line": 176,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 207,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
      "analysis": {
        "functions": [
          {
            "name": "create_research_project",
            "line": 33,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new research project.",
            "args": [
              "project",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_research_projects",
            "line": 64,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query research projects with filtering.",
            "args": [
              "status",
              "approach",
              "target_components",
              "tags",
              "created_after",
              "created_before",
              "limit",
              "offset",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_research_project",
            "line": 103,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get details of a specific research project.",
            "args": [
              "project_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_research_project",
            "line": 127,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing research project.",
            "args": [
              "project_update",
              "project_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_csa_analysis",
            "line": 156,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new Computational Spectral Analysis.",
            "args": [
              "config",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_csa_result",
            "line": 184,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get results of a Computational Spectral Analysis.",
            "args": [
              "analysis_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_catastrophe_theory_analysis",
            "line": 208,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new Catastrophe Theory analysis.",
            "args": [
              "config",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_catastrophe_theory_result",
            "line": 236,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get results of a Catastrophe Theory analysis.",
            "args": [
              "analysis_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_research_approaches",
            "line": 260,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about all research approaches.",
            "args": [
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_research_project",
            "line": 273,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a research project.",
            "args": [
              "project_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "create_research_project",
            "line": 33,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_research_projects",
            "line": 64,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_research_project",
            "line": 103,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_research_project",
            "line": 127,
            "method": "@put",
            "async": true
          },
          {
            "name": "create_csa_analysis",
            "line": 156,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_csa_result",
            "line": 184,
            "method": "@get",
            "async": true
          },
          {
            "name": "create_catastrophe_theory_analysis",
            "line": 208,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_catastrophe_theory_result",
            "line": 236,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_research_approaches",
            "line": 260,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_research_project",
            "line": 273,
            "method": "@delete",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "sophia.core.ml_engine.get_ml_engine",
            "from": "sophia.core.ml_engine",
            "name": "get_ml_engine",
            "alias": null,
            "line": 11
          },
          {
            "module": "sophia.models.research.ResearchProjectCreate",
            "from": "sophia.models.research",
            "name": "ResearchProjectCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.ResearchProjectUpdate",
            "from": "sophia.models.research",
            "name": "ResearchProjectUpdate",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.ResearchProjectQuery",
            "from": "sophia.models.research",
            "name": "ResearchProjectQuery",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.ResearchProjectResponse",
            "from": "sophia.models.research",
            "name": "ResearchProjectResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.CSAConfigCreate",
            "from": "sophia.models.research",
            "name": "CSAConfigCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.CSAResult",
            "from": "sophia.models.research",
            "name": "CSAResult",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.CatastropheTheoryAnalysisCreate",
            "from": "sophia.models.research",
            "name": "CatastropheTheoryAnalysisCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.CatastropheTheoryResult",
            "from": "sophia.models.research",
            "name": "CatastropheTheoryResult",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.ResearchApproach",
            "from": "sophia.models.research",
            "name": "ResearchApproach",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.research.ResearchStatus",
            "from": "sophia.models.research",
            "name": "ResearchStatus",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 33,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_research_projects",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 103,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_csa_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 156,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_csa_result",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 184,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_catastrophe_theory_analysis",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 208,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_catastrophe_theory_result",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 236,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_research_approaches",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 260,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_research_project",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/research.py",
            "line": 273,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 295,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
      "analysis": {
        "functions": [
          {
            "name": "analyze_with_llm",
            "line": 32,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze data with LLM to generate insights.\nUseful for getting deeper understanding of metrics or patterns.",
            "args": [
              "analysis_data",
              "component_id",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_recommendations_with_llm",
            "line": 54,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Generate recommendations using LLM based on analysis results.\nProduces structured, actionable recommendations with implementation steps.",
            "args": [
              "analysis_results",
              "component_id",
              "count",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "generate_component_recommendations",
            "line": 78,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze a component and automatically generate recommendations.\nIntegrates rule-based and LLM-powered recommendation generation.",
            "args": [
              "component_id",
              "time_window",
              "use_llm",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_recommendation",
            "line": 107,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new recommendation.",
            "args": [
              "recommendation",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_recommendations",
            "line": 139,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query recommendations with filtering.",
            "args": [
              "status",
              "recommendation_type",
              "priority",
              "target_components",
              "experiment_ids",
              "tags",
              "created_after",
              "created_before",
              "limit",
              "offset",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_recommendation",
            "line": 183,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get details of a specific recommendation.",
            "args": [
              "recommendation_id",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_recommendation",
            "line": 206,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing recommendation.",
            "args": [
              "recommendation_update",
              "recommendation_id",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_recommendation_status",
            "line": 235,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Update the status of a recommendation.",
            "args": [
              "recommendation_id",
              "status",
              "notes",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_recommendation_implementation",
            "line": 266,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Verify the implementation of a recommendation.",
            "args": [
              "verification",
              "recommendation_id",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_recommendations_for_component",
            "line": 307,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get recommendations for a specific component.",
            "args": [
              "component_id",
              "status",
              "priority",
              "limit",
              "offset",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_recommendation",
            "line": 333,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete a recommendation.",
            "args": [
              "recommendation_id",
              "recommendation_system"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "analyze_with_llm",
            "line": 32,
            "method": "@post",
            "async": true
          },
          {
            "name": "generate_recommendations_with_llm",
            "line": 54,
            "method": "@post",
            "async": true
          },
          {
            "name": "generate_component_recommendations",
            "line": 78,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_recommendation",
            "line": 107,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_recommendations",
            "line": 139,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_recommendation",
            "line": 183,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_recommendation",
            "line": 206,
            "method": "@put",
            "async": true
          },
          {
            "name": "update_recommendation_status",
            "line": 235,
            "method": "@post",
            "async": true
          },
          {
            "name": "verify_recommendation_implementation",
            "line": 266,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_recommendations_for_component",
            "line": 307,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_recommendation",
            "line": 333,
            "method": "@delete",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "sophia.core.recommendation_system.get_recommendation_system",
            "from": "sophia.core.recommendation_system",
            "name": "get_recommendation_system",
            "alias": null,
            "line": 11
          },
          {
            "module": "sophia.core.llm_adapter.get_llm_adapter",
            "from": "sophia.core.llm_adapter",
            "name": "get_llm_adapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.recommendation.RecommendationCreate",
            "from": "sophia.models.recommendation",
            "name": "RecommendationCreate",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationUpdate",
            "from": "sophia.models.recommendation",
            "name": "RecommendationUpdate",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationQuery",
            "from": "sophia.models.recommendation",
            "name": "RecommendationQuery",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationResponse",
            "from": "sophia.models.recommendation",
            "name": "RecommendationResponse",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationVerification",
            "from": "sophia.models.recommendation",
            "name": "RecommendationVerification",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationStatus",
            "from": "sophia.models.recommendation",
            "name": "RecommendationStatus",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationPriority",
            "from": "sophia.models.recommendation",
            "name": "RecommendationPriority",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.recommendation.RecommendationType",
            "from": "sophia.models.recommendation",
            "name": "RecommendationType",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "analyze_with_llm",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 32,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "generate_recommendations_with_llm",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 54,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "generate_component_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 78,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 107,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_recommendations",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 139,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 183,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 206,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_recommendation_status",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 235,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "verify_recommendation_implementation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 266,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_recommendations_for_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 307,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_recommendation",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/recommendations.py",
            "line": 333,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 355,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
      "analysis": {
        "functions": [
          {
            "name": "create_intelligence_measurement",
            "line": 30,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new intelligence measurement.",
            "args": [
              "measurement",
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_intelligence_measurements",
            "line": 61,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query intelligence measurements with filtering.",
            "args": [
              "component_id",
              "dimensions",
              "measurement_method",
              "min_score",
              "max_score",
              "min_confidence",
              "evaluator",
              "measured_after",
              "measured_before",
              "tags",
              "limit",
              "offset",
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_intelligence_profile",
            "line": 108,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get the intelligence profile of a specific component.",
            "args": [
              "component_id",
              "timestamp",
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "compare_component_intelligence",
            "line": 136,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Compare intelligence between components.",
            "args": [
              "component_ids",
              "dimensions",
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_dimensions",
            "line": 170,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get information about all intelligence dimensions.",
            "args": [
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_intelligence_dimension",
            "line": 183,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get detailed information about a specific intelligence dimension.",
            "args": [
              "dimension",
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_ecosystem_intelligence_profile",
            "line": 207,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get an intelligence profile for the entire Tekton ecosystem.",
            "args": [
              "intelligence_measurement"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "create_intelligence_measurement",
            "line": 30,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_intelligence_measurements",
            "line": 61,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_component_intelligence_profile",
            "line": 108,
            "method": "@get",
            "async": true
          },
          {
            "name": "compare_component_intelligence",
            "line": 136,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_intelligence_dimensions",
            "line": 170,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_intelligence_dimension",
            "line": 183,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_ecosystem_intelligence_profile",
            "line": 207,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "sophia.core.intelligence_measurement.get_intelligence_measurement",
            "from": "sophia.core.intelligence_measurement",
            "name": "get_intelligence_measurement",
            "alias": null,
            "line": 11
          },
          {
            "module": "sophia.models.intelligence.IntelligenceMeasurementCreate",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceMeasurementCreate",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.intelligence.IntelligenceMeasurementQuery",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceMeasurementQuery",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.intelligence.IntelligenceMeasurementResponse",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceMeasurementResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.intelligence.ComponentIntelligenceProfile",
            "from": "sophia.models.intelligence",
            "name": "ComponentIntelligenceProfile",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.intelligence.IntelligenceComparison",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceComparison",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.intelligence.IntelligenceDimension",
            "from": "sophia.models.intelligence",
            "name": "IntelligenceDimension",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.intelligence.MeasurementMethod",
            "from": "sophia.models.intelligence",
            "name": "MeasurementMethod",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_intelligence_measurement",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 30,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_intelligence_measurements",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_component_intelligence_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "compare_component_intelligence",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 136,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_intelligence_dimensions",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_intelligence_dimension",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 183,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_ecosystem_intelligence_profile",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/intelligence.py",
            "line": 207,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 227,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
      "analysis": {
        "functions": [
          {
            "name": "design_experiment_with_llm",
            "line": 31,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Design an experiment using LLM to test a specified hypothesis.\nGenerates detailed experiment methodology, variables, and success criteria.",
            "args": [
              "hypothesis",
              "available_components",
              "metrics_summary",
              "llm_adapter"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_experiment",
            "line": 55,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Create a new experiment.",
            "args": [
              "experiment",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_experiments",
            "line": 88,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query experiments with filtering.",
            "args": [
              "status",
              "experiment_type",
              "target_components",
              "tags",
              "start_after",
              "start_before",
              "limit",
              "offset",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_experiment",
            "line": 127,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get details of a specific experiment.",
            "args": [
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_experiment",
            "line": 150,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update an existing experiment.",
            "args": [
              "experiment_update",
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "start_experiment",
            "line": 179,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Start an experiment.",
            "args": [
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "stop_experiment",
            "line": 204,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Stop an experiment.",
            "args": [
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_experiment",
            "line": 229,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze an experiment's results.",
            "args": [
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_experiment_results",
            "line": 254,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get results of a completed experiment.",
            "args": [
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "delete_experiment",
            "line": 278,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Delete an experiment.",
            "args": [
              "experiment_id",
              "experiment_framework"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "design_experiment_with_llm",
            "line": 31,
            "method": "@post",
            "async": true
          },
          {
            "name": "create_experiment",
            "line": 55,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_experiments",
            "line": 88,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_experiment",
            "line": 127,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_experiment",
            "line": 150,
            "method": "@put",
            "async": true
          },
          {
            "name": "start_experiment",
            "line": 179,
            "method": "@post",
            "async": true
          },
          {
            "name": "stop_experiment",
            "line": 204,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_experiment",
            "line": 229,
            "method": "@post",
            "async": true
          },
          {
            "name": "get_experiment_results",
            "line": 254,
            "method": "@get",
            "async": true
          },
          {
            "name": "delete_experiment",
            "line": 278,
            "method": "@delete",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Body",
            "from": "fastapi",
            "name": "Body",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "sophia.core.experiment_framework.get_experiment_framework",
            "from": "sophia.core.experiment_framework",
            "name": "get_experiment_framework",
            "alias": null,
            "line": 11
          },
          {
            "module": "sophia.core.llm_adapter.get_llm_adapter",
            "from": "sophia.core.llm_adapter",
            "name": "get_llm_adapter",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.experiment.ExperimentCreate",
            "from": "sophia.models.experiment",
            "name": "ExperimentCreate",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.experiment.ExperimentUpdate",
            "from": "sophia.models.experiment",
            "name": "ExperimentUpdate",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.experiment.ExperimentQuery",
            "from": "sophia.models.experiment",
            "name": "ExperimentQuery",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.experiment.ExperimentResponse",
            "from": "sophia.models.experiment",
            "name": "ExperimentResponse",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.experiment.ExperimentResult",
            "from": "sophia.models.experiment",
            "name": "ExperimentResult",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.experiment.ExperimentStatus",
            "from": "sophia.models.experiment",
            "name": "ExperimentStatus",
            "alias": null,
            "line": 13
          },
          {
            "module": "sophia.models.experiment.ExperimentType",
            "from": "sophia.models.experiment",
            "name": "ExperimentType",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "design_experiment_with_llm",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 55,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_experiments",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 88,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 127,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 150,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "start_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 179,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "stop_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 204,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 229,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_experiment_results",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 254,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "delete_experiment",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/experiments.py",
            "line": 278,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 300,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
      "analysis": {
        "functions": [
          {
            "name": "register_component",
            "line": 31,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Register a component with Sophia.",
            "args": [
              "component",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "query_components",
            "line": 68,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Query registered components with filtering.",
            "args": [
              "component_type",
              "capabilities",
              "dependencies",
              "metrics_provided",
              "tags",
              "status",
              "limit",
              "offset",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component",
            "line": 109,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get details of a specific registered component.",
            "args": [
              "component_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_component",
            "line": 133,
            "async": true,
            "decorators": [
              "@put"
            ],
            "docstring": "Update a registered component.",
            "args": [
              "component_update",
              "component_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_component_performance",
            "line": 162,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Analyze the performance of a component.",
            "args": [
              "component_id",
              "start_time",
              "end_time",
              "metrics",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "analyze_component_interaction",
            "line": 197,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Analyze the interaction between components.",
            "args": [
              "component_ids",
              "start_time",
              "end_time",
              "ml_engine"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "analyze_component_dependencies",
            "line": 233,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Analyze the dependencies of a component.",
            "args": [
              "component_id",
              "include_indirect",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "unregister_component",
            "line": 261,
            "async": true,
            "decorators": [
              "@delete"
            ],
            "docstring": "Unregister a component from Sophia.",
            "args": [
              "component_id",
              "ml_engine"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "register_component",
            "line": 31,
            "method": "@post",
            "async": true
          },
          {
            "name": "query_components",
            "line": 68,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_component",
            "line": 109,
            "method": "@get",
            "async": true
          },
          {
            "name": "update_component",
            "line": 133,
            "method": "@put",
            "async": true
          },
          {
            "name": "analyze_component_performance",
            "line": 162,
            "method": "@get",
            "async": true
          },
          {
            "name": "analyze_component_interaction",
            "line": 197,
            "method": "@post",
            "async": true
          },
          {
            "name": "analyze_component_dependencies",
            "line": 233,
            "method": "@get",
            "async": true
          },
          {
            "name": "unregister_component",
            "line": 261,
            "method": "@delete",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Depends",
            "from": "fastapi",
            "name": "Depends",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Query",
            "from": "fastapi",
            "name": "Query",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.Path",
            "from": "fastapi",
            "name": "Path",
            "alias": null,
            "line": 8
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 9
          },
          {
            "module": "sophia.core.ml_engine.get_ml_engine",
            "from": "sophia.core.ml_engine",
            "name": "get_ml_engine",
            "alias": null,
            "line": 11
          },
          {
            "module": "sophia.models.component.ComponentRegister",
            "from": "sophia.models.component",
            "name": "ComponentRegister",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.ComponentUpdate",
            "from": "sophia.models.component",
            "name": "ComponentUpdate",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.ComponentQuery",
            "from": "sophia.models.component",
            "name": "ComponentQuery",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.ComponentResponse",
            "from": "sophia.models.component",
            "name": "ComponentResponse",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.ComponentPerformanceAnalysis",
            "from": "sophia.models.component",
            "name": "ComponentPerformanceAnalysis",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.ComponentInteractionAnalysis",
            "from": "sophia.models.component",
            "name": "ComponentInteractionAnalysis",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.ComponentType",
            "from": "sophia.models.component",
            "name": "ComponentType",
            "alias": null,
            "line": 12
          },
          {
            "module": "sophia.models.component.PerformanceCategory",
            "from": "sophia.models.component",
            "name": "PerformanceCategory",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "register_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "query_components",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 109,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "update_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_component_performance",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 162,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_component_interaction",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 197,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "analyze_component_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 233,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "unregister_component",
            "file": "/Users/cskoons/projects/github/Tekton/Sophia/sophia/api/endpoints/components.py",
            "line": 261,
            "priority": "high",
            "reason": "Async function, Has side effects"
          }
        ]
      },
      "line_count": 283,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 26,
    "total_functions": 409,
    "total_classes": 31,
    "total_landmarks": 349,
    "patterns": [
      "singleton",
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 68,
    "mcp_tools": 0,
    "websocket_handlers": 2,
    "skipped_files": 4
  }
}