{
  "component": "shared",
  "files": [
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "component_name",
              "port",
              "hermes_url"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_handler",
            "line": 26,
            "async": false,
            "decorators": [],
            "docstring": "Add a cleanup handler to run during shutdown",
            "args": [
              "self",
              "handler"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "notify_hermes_shutdown",
            "line": 30,
            "async": true,
            "decorators": [],
            "docstring": "Notify Hermes that we're shutting down",
            "args": [
              "self"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 52,
            "async": true,
            "decorators": [],
            "docstring": "Perform graceful shutdown",
            "args": [
              "self",
              "sig"
            ],
            "class": "GracefulShutdown",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "setup_signal_handlers",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Setup signal handlers for graceful shutdown",
            "args": [
              "self"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "wait_for_shutdown",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Wait for shutdown signal",
            "args": [
              "self"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_fastapi_shutdown",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Add graceful shutdown to a FastAPI app",
            "args": [
              "app",
              "shutdown_handler"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup",
            "line": 108,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 112,
            "async": true,
            "decorators": [
              "@on_event"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_shutdown_handler",
            "line": 117,
            "async": true,
            "decorators": [],
            "docstring": "Create a configured shutdown handler",
            "args": [
              "component_name",
              "port",
              "cleanup_coroutines"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "GracefulShutdown",
            "line": 15,
            "methods": [
              "__init__",
              "add_handler",
              "setup_signal_handlers"
            ],
            "decorators": [],
            "docstring": "Handles graceful shutdown for Tekton components",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "signal",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "GracefulShutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.add_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 26,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.notify_hermes_shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 30,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 52,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.setup_signal_handlers",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 86,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.wait_for_shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_fastapi_shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "startup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 108,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 112,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_shutdown_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/graceful_shutdown.py",
            "line": 117,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 130,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
      "analysis": {
        "functions": [
          {
            "name": "run_command",
            "line": 21,
            "async": false,
            "decorators": [],
            "docstring": "Run a command and return success status and output.",
            "args": [
              "cmd"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_installed_packages",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Get currently installed packages and versions.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "check_newer_versions",
            "line": 45,
            "async": false,
            "decorators": [],
            "docstring": "Check if a newer version is available for a package.",
            "args": [
              "package",
              "current_version"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "parse_requirements_file",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Parse a requirements file and return package info.",
            "args": [
              "file_path"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "create_test_requirements",
            "line": 92,
            "async": false,
            "decorators": [],
            "docstring": "Create a test requirements file with updated versions.",
            "args": [
              "req_file",
              "updates"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "find_updates_for_file",
            "line": 120,
            "async": false,
            "decorators": [],
            "docstring": "Find available updates for packages in a requirements file.",
            "args": [
              "req_file"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 142,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "subprocess",
            "alias": null,
            "line": 11
          },
          {
            "module": "sys",
            "alias": null,
            "line": 12
          },
          {
            "module": "json",
            "alias": null,
            "line": 13
          },
          {
            "module": "re",
            "alias": null,
            "line": 14
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 15
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 16
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 16
          },
          {
            "module": "argparse",
            "alias": null,
            "line": 17
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 18
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "run_command",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 21,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_installed_packages",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 30,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "check_newer_versions",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 45,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "parse_requirements_file",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 65,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "create_test_requirements",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 92,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "find_updates_for_file",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 120,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/find-test-new-versions.py",
            "line": 142,
            "priority": "high",
            "reason": "High complexity"
          }
        ]
      },
      "line_count": 218,
      "has_tests": true
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "message",
              "component",
              "error_code"
            ],
            "class": "StartupError",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "component_startup",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Standard component startup with timeout, error handling, and metrics.\n\nArgs:\n    component_name: Name of the component starting up\n    startup_func: Async function to execute during startup\n    timeout: Maximum time to wait for startup (seconds)\n    collect_metrics: Whether to collect detailed startup metrics\n    port: Optional port number for socket release fix\n    \nReturns:\n    StartupMetrics object with timing and resource information\n    \nRaises:\n    StartupError: If startup fails or times out",
            "args": [
              "component_name",
              "startup_func",
              "timeout",
              "collect_metrics",
              "port"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_dependencies",
            "line": 113,
            "async": true,
            "decorators": [],
            "docstring": "Check if required dependencies are available.\n\nArgs:\n    component_name: Name of the component checking dependencies\n    dependencies: Dict of dependency_name -> url to check\n    timeout: Timeout for each dependency check\n    \nReturns:\n    Dict of dependency_name -> availability status",
            "args": [
              "component_name",
              "dependencies",
              "timeout"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "check_dependency",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [
              "name",
              "url"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_startup_handler",
            "line": 154,
            "async": false,
            "decorators": [],
            "docstring": "Create a standardized startup handler for FastAPI apps.\n\nArgs:\n    component_name: Name of the component\n    port: Port number for the component\n    dependencies: Optional dict of dependencies to check\n    \nReturns:\n    Async startup handler function",
            "args": [
              "component_name",
              "port",
              "dependencies"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup_handler",
            "line": 170,
            "async": true,
            "decorators": [],
            "docstring": "Generated startup handler.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "quick_component_startup",
            "line": 189,
            "async": true,
            "decorators": [],
            "docstring": "Quick startup helper for simple components.\n\nArgs:\n    component_name: Name of the component\n    port: Port number\n    register_func: Optional registration function\n    hermes_url: URL for Hermes registration",
            "args": [
              "component_name",
              "port",
              "register_func",
              "hermes_url"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StartupMetrics",
            "line": 19,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Metrics collected during component startup.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StartupError",
            "line": 30,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Component startup failure.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "time",
            "alias": null,
            "line": 9
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 10
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "psutil",
            "alias": null,
            "line": 12
          },
          {
            "module": "os",
            "alias": null,
            "line": 13
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 129
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StartupMetrics",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 19,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "StartupError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 30,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "component_startup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "check_dependencies",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 113,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "check_dependency",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 133,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_startup_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 154,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "startup_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 170,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "quick_component_startup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/startup.py",
            "line": 189,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 220,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
      "analysis": {
        "functions": [
          {
            "name": "initialize_tekton_environment",
            "line": 29,
            "async": false,
            "decorators": [],
            "docstring": "Initialize Tekton environment for a component.\n\nArgs:\n    component_name: Name of the component (e.g., 'apollo', 'hermes')\n    auto_load: Whether to automatically load environment files\n    log_level: Override log level (if None, uses environment setting)\n    \nReturns:\n    Dictionary of environment variables after loading",
            "args": [
              "component_name",
              "auto_load",
              "log_level"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "setup_component_logging",
            "line": 102,
            "async": false,
            "decorators": [],
            "docstring": "Setup logging for a Tekton component.\n\nArgs:\n    component_name: Name of the component\n    log_level_override: Override the environment log level setting",
            "args": [
              "component_name",
              "log_level_override"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_component_environment",
            "line": 144,
            "async": false,
            "decorators": [],
            "docstring": "Log relevant environment information for a component.\n\nArgs:\n    component_name: Name of the component\n    env_manager: Optional TektonEnvManager instance",
            "args": [
              "component_name",
              "env_manager"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_component_port",
            "line": 180,
            "async": false,
            "decorators": [],
            "docstring": "Get the port for a component from environment variables.\n\nArgs:\n    component_name: Name of the component\n    default: Default port if not found\n    \nReturns:\n    Port number or None if not found and no default",
            "args": [
              "component_name",
              "default"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_debug_enabled",
            "line": 202,
            "async": false,
            "decorators": [],
            "docstring": "Check if debug mode is enabled.\n\nReturns:\n    True if debug mode is enabled",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tekton_setting",
            "line": 211,
            "async": false,
            "decorators": [],
            "docstring": "Get a Tekton setting from environment variables.\n\nArgs:\n    key: Setting key (with or without TEKTON_ prefix)\n    default: Default value if not found\n    \nReturns:\n    Setting value",
            "args": [
              "key",
              "default"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tekton_bool_setting",
            "line": 228,
            "async": false,
            "decorators": [],
            "docstring": "Get a boolean Tekton setting from environment variables.\n\nArgs:\n    key: Setting key (with or without TEKTON_ prefix)\n    default: Default value if not found\n    \nReturns:\n    Boolean setting value",
            "args": [
              "key",
              "default"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "tekton_component_startup",
            "line": 243,
            "async": false,
            "decorators": [],
            "docstring": "Convenience function for standard Tekton component startup.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Dictionary of environment variables",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 14
          },
          {
            "module": "sys",
            "alias": null,
            "line": 15
          },
          {
            "module": "logging",
            "alias": null,
            "line": 16
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 17
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 18
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 18
          },
          {
            "module": "env_manager.TektonEnvManager",
            "from": "env_manager",
            "name": "TektonEnvManager",
            "alias": null,
            "line": 22
          },
          {
            "module": "dotenv.load_dotenv",
            "from": "dotenv",
            "name": "load_dotenv",
            "alias": null,
            "line": 69
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "initialize_tekton_environment",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 29,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "setup_component_logging",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 102,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_component_environment",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 144,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_component_port",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 180,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "is_debug_enabled",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 202,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_tekton_setting",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 211,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_tekton_bool_setting",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 228,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "tekton_component_startup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_startup.py",
            "line": 243,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 269,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the environment manager.\n\nArgs:\n    tekton_root: Path to Tekton root directory (auto-detected if None)",
            "args": [
              "self",
              "tekton_root"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_find_tekton_root",
            "line": 73,
            "async": false,
            "decorators": [],
            "docstring": "Find the Tekton root directory by looking for .env.tekton or tekton-core.\n\nReturns:\n    Path to Tekton root directory\n    \nRaises:\n    FileNotFoundError: If Tekton root cannot be found",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "load_environment",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": "Load environment variables from all three tiers in priority order.\n\nReturns:\n    Dictionary of all environment variables after loading",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_load_env_file_manual",
            "line": 173,
            "async": false,
            "decorators": [],
            "docstring": "Manually parse and load an environment file.\n\nArgs:\n    env_file: Path to environment file to load",
            "args": [
              "self",
              "env_file"
            ],
            "class": "TektonEnvManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_current_environment",
            "line": 208,
            "async": false,
            "decorators": [],
            "docstring": "Get the current environment variables.\n\nReturns:\n    Dictionary of current environment variables",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tekton_variables",
            "line": 217,
            "async": false,
            "decorators": [],
            "docstring": "Get all Tekton-specific environment variables.\n\nReturns:\n    Dictionary of Tekton environment variables",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_tekton_settings",
            "line": 255,
            "async": false,
            "decorators": [],
            "docstring": "Save settings to the .env.tekton file (tracked in git).\n\nArgs:\n    settings: Dictionary of settings to save",
            "args": [
              "self",
              "settings"
            ],
            "class": "TektonEnvManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_save_env_file_manual",
            "line": 288,
            "async": false,
            "decorators": [],
            "docstring": "Manually save settings to an environment file.\n\nArgs:\n    env_file: Path to environment file\n    settings: Settings to save",
            "args": [
              "self",
              "env_file",
              "settings"
            ],
            "class": "TektonEnvManager",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "create_tekton_env_template",
            "line": 346,
            "async": false,
            "decorators": [],
            "docstring": "Create a template .env.tekton file with all available Tekton settings.",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_component_port",
            "line": 478,
            "async": false,
            "decorators": [],
            "docstring": "Get the port for a specific component.\n\nArgs:\n    component: Component name (e.g., 'hermes', 'ergon')\n    \nReturns:\n    Port number or None if not found",
            "args": [
              "self",
              "component"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_bool",
            "line": 499,
            "async": false,
            "decorators": [],
            "docstring": "Get a boolean environment variable.\n\nArgs:\n    key: Environment variable name\n    default: Default value if not found\n    \nReturns:\n    Boolean value",
            "args": [
              "self",
              "key",
              "default"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_int",
            "line": 513,
            "async": false,
            "decorators": [],
            "docstring": "Get an integer environment variable.\n\nArgs:\n    key: Environment variable name\n    default: Default value if not found\n    \nReturns:\n    Integer value",
            "args": [
              "self",
              "key",
              "default"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_list",
            "line": 534,
            "async": false,
            "decorators": [],
            "docstring": "Get a list environment variable.\n\nArgs:\n    key: Environment variable name\n    default: Default value if not found\n    separator: Separator character for splitting\n    \nReturns:\n    List of strings",
            "args": [
              "self",
              "key",
              "default",
              "separator"
            ],
            "class": "TektonEnvManager",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "has_local_env",
            "line": 558,
            "async": false,
            "decorators": [],
            "docstring": "Check if .env.local file exists.\n\nReturns:\n    True if .env.local exists, False otherwise",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_local_env_template",
            "line": 567,
            "async": false,
            "decorators": [],
            "docstring": "Create a template .env.local file for secrets.",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "ensure_gitignore",
            "line": 604,
            "async": false,
            "decorators": [],
            "docstring": "Ensure .env.local is in .gitignore file.",
            "args": [
              "self"
            ],
            "class": "TektonEnvManager",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "get_env_manager",
            "line": 635,
            "async": false,
            "decorators": [],
            "docstring": "Get the global TektonEnvManager instance.\n\nReturns:\n    Global TektonEnvManager instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "load_tekton_environment",
            "line": 647,
            "async": false,
            "decorators": [],
            "docstring": "Convenience function to load Tekton environment.\n\nReturns:\n    Dictionary of environment variables",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "save_tekton_settings",
            "line": 656,
            "async": false,
            "decorators": [],
            "docstring": "Convenience function to save Tekton settings.\n\nArgs:\n    **settings: Settings to save as keyword arguments",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tekton_var",
            "line": 665,
            "async": false,
            "decorators": [],
            "docstring": "Convenience function to get a Tekton environment variable.\n\nArgs:\n    key: Environment variable name\n    default: Default value if not found\n    \nReturns:\n    Environment variable value",
            "args": [
              "key",
              "default"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TektonEnvManager",
            "line": 38,
            "methods": [
              "__init__",
              "_find_tekton_root",
              "load_environment",
              "_load_env_file_manual",
              "get_current_environment",
              "get_tekton_variables",
              "save_tekton_settings",
              "_save_env_file_manual",
              "create_tekton_env_template",
              "get_component_port",
              "get_bool",
              "get_int",
              "get_list",
              "has_local_env",
              "create_local_env_template",
              "ensure_gitignore"
            ],
            "decorators": [],
            "docstring": "Manages Tekton environment variables using a three-tier approach.\n\nReading Priority (later files override earlier ones):\n1. ~/.env (user-wide settings)\n2. Tekton/.env.tekton (project settings, tracked)\n3. Tekton/.env.local (secrets, gitignored)",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 24
          },
          {
            "module": "sys",
            "alias": null,
            "line": 25
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 26
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 27
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 27
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 27
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 27
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 27
          },
          {
            "module": "logging",
            "alias": null,
            "line": 28
          },
          {
            "module": "dotenv.load_dotenv",
            "from": "dotenv",
            "name": "load_dotenv",
            "alias": null,
            "line": 31
          },
          {
            "module": "dotenv.set_key",
            "from": "dotenv",
            "name": "set_key",
            "alias": null,
            "line": 31
          }
        ],
        "patterns": [
          {
            "type": "websocket",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TektonEnvManager",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 38,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TektonEnvManager._find_tekton_root",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 73,
            "priority": "medium",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.load_environment",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 116,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "TektonEnvManager._load_env_file_manual",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 173,
            "priority": "medium",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.get_current_environment",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 208,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.get_tekton_variables",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 217,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.save_tekton_settings",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 255,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager._save_env_file_manual",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 288,
            "priority": "medium",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.create_tekton_env_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 346,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.get_component_port",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 478,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.get_bool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 499,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.get_int",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 513,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.get_list",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 534,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.has_local_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 558,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.create_local_env_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 567,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "TektonEnvManager.ensure_gitignore",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 604,
            "priority": "high",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "get_env_manager",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 635,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "load_tekton_environment",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 647,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "save_tekton_settings",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 656,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_tekton_var",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_manager.py",
            "line": 665,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 676,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
      "analysis": {
        "functions": [
          {
            "name": "__new__",
            "line": 34,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_instance",
            "line": 66,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get singleton instance of GlobalConfig.",
            "args": [
              "cls"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "config",
            "line": 72,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Access raw component configs for backward compatibility.",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_config",
            "line": 76,
            "async": false,
            "decorators": [],
            "docstring": "Get configuration for a specific component.\n\nArgs:\n    component_name: Name of the component (e.g., 'rhetor', 'apollo')\n    \nReturns:\n    Component-specific configuration object",
            "args": [
              "self",
              "component_name"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_data_dir",
            "line": 89,
            "async": false,
            "decorators": [],
            "docstring": "Get data directory for a component, creating it if necessary.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Path to component's data directory",
            "args": [
              "self",
              "component_name"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_service",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Get or create a shared service.\n\nArgs:\n    service_name: Name of the service (e.g., 'llm_client', 'budget_manager')\n    factory_func: Optional factory function to create the service if not exists\n    \nReturns:\n    Service instance or None if not found and no factory provided",
            "args": [
              "self",
              "service_name",
              "factory_func"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_service",
            "line": 120,
            "async": false,
            "decorators": [],
            "docstring": "Register a service instance.\n\nArgs:\n    service_name: Name of the service\n    service_instance: The service instance to register",
            "args": [
              "self",
              "service_name",
              "service_instance"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "remove_service",
            "line": 131,
            "async": false,
            "decorators": [],
            "docstring": "Remove a service from the registry.\n\nArgs:\n    service_name: Name of the service to remove",
            "args": [
              "self",
              "service_name"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_service_urls",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": "Load all service URLs from Hermes once.",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_service_url",
            "line": 164,
            "async": false,
            "decorators": [],
            "docstring": "Get URL for a component service using Hermes service discovery.\n\nQueries Hermes once on first call to get all service URLs,\nthen uses cached values. Falls back to localhost if Hermes\nis unavailable or component not found.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Service URL (e.g., \"http://localhost:8003\")",
            "args": [
              "self",
              "component_name"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "uptime",
            "line": 192,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get component uptime in seconds.",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_registration_info",
            "line": 196,
            "async": false,
            "decorators": [],
            "docstring": "Store registration information for a component.\n\nArgs:\n    component_name: Name of the component\n    info: Registration information dictionary",
            "args": [
              "self",
              "component_name",
              "info"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_registration_info",
            "line": 206,
            "async": false,
            "decorators": [],
            "docstring": "Get registration information for a component.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Registration information or None if not registered",
            "args": [
              "self",
              "component_name"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear_runtime_state",
            "line": 218,
            "async": false,
            "decorators": [],
            "docstring": "Clear all runtime state (useful for testing).",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "debug",
            "line": 232,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if debug mode is enabled.",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "log_level",
            "line": 237,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Get configured log level.",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mcp_enabled",
            "line": 242,
            "async": false,
            "decorators": [
              "@property"
            ],
            "docstring": "Check if MCP is enabled system-wide.",
            "args": [
              "self"
            ],
            "class": "GlobalConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_config",
            "line": 248,
            "async": false,
            "decorators": [],
            "docstring": "Get the global ComponentConfig instance.\n\nThis now returns the GlobalConfig's internal component config\nfor backward compatibility.\n\nReturns:\n    ComponentConfig instance wrapped by GlobalConfig",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "GlobalConfig",
            "line": 20,
            "methods": [
              "__new__",
              "__init__",
              "get_instance",
              "config",
              "get_component_config",
              "get_data_dir",
              "get_service",
              "set_service",
              "remove_service",
              "_load_service_urls",
              "get_service_url",
              "uptime",
              "set_registration_info",
              "get_registration_info",
              "clear_runtime_state",
              "debug",
              "log_level",
              "mcp_enabled"
            ],
            "decorators": [],
            "docstring": "Unified global configuration and state management for Tekton components.\n\nThis class:\n1. Wraps ComponentConfig for environment-based configuration\n2. Manages runtime state (services, registration, etc.)\n3. Provides data directory management\n4. Acts as a service registry for shared services\n5. Provides service URL resolution (future: Hermes service discovery)",
            "is_singleton": true,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "time",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Generic",
            "from": "typing",
            "name": "Generic",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": "_get_original_component_config",
            "line": 13
          },
          {
            "module": "requests",
            "alias": null,
            "line": 149
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "GlobalConfig.__new__",
            "line": 34
          },
          {
            "type": "singleton",
            "location": "GlobalConfig.get_instance",
            "line": 66
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "GlobalConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 20,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GlobalConfig.get_instance",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 66,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.config",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.get_component_config",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 76,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.get_data_dir",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 89,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.get_service",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 104,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.set_service",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 120,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.remove_service",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 131,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.get_service_url",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 164,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.uptime",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 192,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.set_registration_info",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.get_registration_info",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 206,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.clear_runtime_state",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 218,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.debug",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 232,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.log_level",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 237,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GlobalConfig.mcp_enabled",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 242,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_component_config",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/global_config.py",
            "line": 248,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 258,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
      "analysis": {
        "functions": [
          {
            "name": "from_env",
            "line": 23,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create config instance from environment variables.",
            "args": [
              "cls"
            ],
            "class": "BaseComponentConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_required_env",
            "line": 29,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get required environment variable value.\n\nArgs:\n    key: Environment variable name\n    value_type: Type to convert to ('str', 'int', 'float', 'bool')\n    \nReturns:\n    Typed value\n    \nRaises:\n    ValueError: If environment variable not found",
            "args": [
              "cls",
              "key",
              "value_type"
            ],
            "class": "BaseComponentConfig",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_get_env_value",
            "line": 60,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get typed value from environment with fallback to default.\n\nArgs:\n    key: Environment variable name\n    default: Default value if not found or invalid\n    value_type: Type to convert to ('str', 'int', 'float', 'bool')\n    \nReturns:\n    Typed value or default",
            "args": [
              "cls",
              "key",
              "default",
              "value_type"
            ],
            "class": "BaseComponentConfig",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 100,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create HermesConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "HermesConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 120,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create EngramConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "EngramConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 140,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create RhetorConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "RhetorConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 159,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create AthenaConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "AthenaConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 177,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create ApolloConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "ApolloConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 196,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create BudgetConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "BudgetConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 214,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create BudgetConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "PeniaConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 232,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "ErgonConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 248,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "HarmoniaConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 264,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "MetisConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 280,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "PrometheusConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 296,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "SophiaConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 312,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "SynthesisConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 328,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "TelosConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 345,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "HephaestusConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 363,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "TermaConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 379,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": null,
            "args": [
              "cls"
            ],
            "class": "TektonCoreConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "from_env",
            "line": 407,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create TektonConfig from environment variables.",
            "args": [
              "cls"
            ],
            "class": "TektonConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_env_value",
            "line": 422,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Get typed value from environment (needed since TektonConfig doesn't inherit from BaseComponentConfig).",
            "args": [
              "cls",
              "key",
              "default",
              "value_type"
            ],
            "class": "TektonConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 435,
            "async": false,
            "decorators": [],
            "docstring": "Initialize component configuration.",
            "args": [
              "self"
            ],
            "class": "ComponentConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_load_configs",
            "line": 443,
            "async": false,
            "decorators": [],
            "docstring": "Load all component configurations from environment.",
            "args": [
              "self"
            ],
            "class": "ComponentConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "refresh",
            "line": 464,
            "async": false,
            "decorators": [],
            "docstring": "Refresh configuration from environment.",
            "args": [
              "self"
            ],
            "class": "ComponentConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_port",
            "line": 469,
            "async": false,
            "decorators": [],
            "docstring": "Get port for a specific component by name.\n\nArgs:\n    component: Component name (case insensitive)\n    \nReturns:\n    Port number or None if component not found",
            "args": [
              "self",
              "component"
            ],
            "class": "ComponentConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 508,
            "async": false,
            "decorators": [],
            "docstring": "Convert all configurations to dictionary.",
            "args": [
              "self"
            ],
            "class": "ComponentConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_component_config",
            "line": 534,
            "async": false,
            "decorators": [],
            "docstring": "Get the global ComponentConfig instance (singleton).\n\nReturns:\n    Global ComponentConfig instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tekton_config",
            "line": 547,
            "async": false,
            "decorators": [],
            "docstring": "Get global Tekton configuration.\n\nReturns:\n    TektonConfig instance",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "BaseComponentConfig",
            "line": 17,
            "methods": [
              "from_env",
              "_get_required_env",
              "_get_env_value"
            ],
            "decorators": [],
            "docstring": "Base configuration for all Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HermesConfig",
            "line": 90,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Hermes service registry.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EngramConfig",
            "line": 111,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Engram memory system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RhetorConfig",
            "line": 130,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Rhetor LLM service.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "AthenaConfig",
            "line": 151,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Athena knowledge graph.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ApolloConfig",
            "line": 168,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Apollo prediction system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "BudgetConfig",
            "line": 187,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Budget cost management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PeniaConfig",
            "line": 205,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Budget/Penia cost management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ErgonConfig",
            "line": 224,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Ergon agent system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HarmoniaConfig",
            "line": 240,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Harmonia workflow system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MetisConfig",
            "line": 256,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Metis task management.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "PrometheusConfig",
            "line": 272,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Prometheus planning system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SophiaConfig",
            "line": 288,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Sophia ML system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SynthesisConfig",
            "line": 304,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Synthesis execution engine.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TelosConfig",
            "line": 320,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Telos requirements system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "HephaestusConfig",
            "line": 336,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Hephaestus UI system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TermaConfig",
            "line": 354,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Terma terminal system.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TektonCoreConfig",
            "line": 372,
            "methods": [
              "from_env"
            ],
            "decorators": [],
            "docstring": "Configuration for Tekton Core API.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "TektonConfig",
            "line": 386,
            "methods": [
              "from_env",
              "_get_env_value"
            ],
            "decorators": [],
            "docstring": "Global Tekton system configuration.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentConfig",
            "line": 427,
            "methods": [
              "__init__",
              "_load_configs",
              "refresh",
              "get_port",
              "to_dict"
            ],
            "decorators": [],
            "docstring": "Central configuration object for all Tekton components.\n\nProvides typed access to all component configurations and\nglobal Tekton settings.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.field_validator",
            "from": "pydantic",
            "name": "field_validator",
            "alias": null,
            "line": 10
          },
          {
            "module": "shared.utils.env_manager.get_env_manager",
            "from": "shared.utils.env_manager",
            "name": "get_env_manager",
            "alias": null,
            "line": 12
          },
          {
            "module": "shared.utils.env_manager.TektonEnvManager",
            "from": "shared.utils.env_manager",
            "name": "TektonEnvManager",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "BaseComponentConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BaseComponentConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 23,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "HermesConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 90,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 100,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "EngramConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 111,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "EngramConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 120,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "RhetorConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 130,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "RhetorConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 140,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "AthenaConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 151,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AthenaConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 159,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ApolloConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 168,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ApolloConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 177,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "BudgetConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 187,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "BudgetConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 196,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PeniaConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 205,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PeniaConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 214,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ErgonConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 224,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ErgonConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 232,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "HarmoniaConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 240,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HarmoniaConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 248,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "MetisConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 256,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MetisConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 264,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "PrometheusConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 272,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "PrometheusConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 280,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SophiaConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 288,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SophiaConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 296,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SynthesisConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 304,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SynthesisConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 312,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TelosConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 320,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TelosConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 328,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "HephaestusConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 336,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HephaestusConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 345,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TermaConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 354,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TermaConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 363,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TektonCoreConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 372,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TektonCoreConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 379,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "TektonConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 386,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TektonConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 407,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ComponentConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 427,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentConfig.refresh",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 464,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentConfig.get_port",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 469,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ComponentConfig.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 508,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_component_config",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 534,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_tekton_config",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/env_config.py",
            "line": 547,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 554,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Initialize GracefulShutdown.\n\nArgs:\n    component_name: Name of the component for logging",
            "args": [
              "self",
              "component_name"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_handle_signal",
            "line": 54,
            "async": false,
            "decorators": [],
            "docstring": "Handle shutdown signals.",
            "args": [
              "self",
              "signum",
              "frame"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_cleanup",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Register a cleanup function to run during shutdown.\n\nArgs:\n    cleanup_func: Async function to call during shutdown",
            "args": [
              "self",
              "cleanup_func"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_sequence",
            "line": 68,
            "async": true,
            "decorators": [],
            "docstring": "Execute graceful shutdown sequence.\n\nArgs:\n    timeout: Maximum time to wait for cleanup tasks\n    \nReturns:\n    ShutdownMetrics with shutdown statistics",
            "args": [
              "self",
              "timeout"
            ],
            "class": "GracefulShutdown",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_run_cleanup_task",
            "line": 117,
            "async": true,
            "decorators": [],
            "docstring": "Run a single cleanup task with error handling.",
            "args": [
              "self",
              "task",
              "metrics"
            ],
            "class": "GracefulShutdown",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_shutdown_handler",
            "line": 130,
            "async": false,
            "decorators": [],
            "docstring": "Create a standardized shutdown handler function.\n\nArgs:\n    component_name: Name of the component\n    cleanup_funcs: List of cleanup functions to execute\n    timeout: Shutdown timeout in seconds\n    \nReturns:\n    Async shutdown handler function",
            "args": [
              "component_name",
              "cleanup_funcs",
              "timeout"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_handler",
            "line": 146,
            "async": true,
            "decorators": [],
            "docstring": "Generated shutdown handler.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup_aiohttp_session",
            "line": 169,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup aiohttp client session.",
            "args": [
              "session"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup_database_pool",
            "line": 177,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup database connection pool.",
            "args": [
              "pool"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup_background_tasks",
            "line": 183,
            "async": true,
            "decorators": [],
            "docstring": "Cancel and await background tasks.",
            "args": [
              "tasks"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ShutdownMetrics",
            "line": 22,
            "methods": [],
            "decorators": [
              "@dataclass"
            ],
            "docstring": "Metrics collected during component shutdown.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "GracefulShutdown",
            "line": 32,
            "methods": [
              "__init__",
              "_handle_signal",
              "register_cleanup"
            ],
            "decorators": [],
            "docstring": "Coordinated graceful shutdown for Tekton components.\n\nHandles signal processing, cleanup task management, and metrics collection.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "signal",
            "alias": null,
            "line": 9
          },
          {
            "module": "time",
            "alias": null,
            "line": 10
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 11
          },
          {
            "module": "dataclasses.dataclass",
            "from": "dataclasses",
            "name": "dataclass",
            "alias": null,
            "line": 12
          },
          {
            "module": "dataclasses.field",
            "from": "dataclasses",
            "name": "field",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "shared.utils.errors.ShutdownError",
            "from": "shared.utils.errors",
            "name": "ShutdownError",
            "alias": null,
            "line": 15
          },
          {
            "module": "shared.utils.startup.component_startup",
            "from": "shared.utils.startup",
            "name": "component_startup",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ShutdownMetrics",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 22,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "GracefulShutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.register_cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 59,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "GracefulShutdown.shutdown_sequence",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_shutdown_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 130,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "shutdown_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 146,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cleanup_aiohttp_session",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 169,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cleanup_database_pool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 177,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "cleanup_background_tasks",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown.py",
            "line": 183,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 190,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
      "analysis": {
        "functions": [
          {
            "name": "run_with_socket_reuse_async",
            "line": 18,
            "async": true,
            "decorators": [],
            "docstring": "Run uvicorn with socket reuse enabled (async version).\n\nThis properly configures socket reuse for immediate port rebinding on macOS.\n\nArgs:\n    app: Either a string (e.g., \"module:app\") or an app instance\n    host: Host to bind to\n    port: Port to bind to\n    **kwargs: Additional arguments for uvicorn Config",
            "args": [
              "app",
              "host",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "signal_handler",
            "line": 58,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "signum",
              "frame"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "run_with_socket_reuse",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Run uvicorn with socket reuse enabled.\n\nThis fixes the \"Address already in use\" error during rapid restarts.\n\nArgs:\n    app: Either a string (e.g., \"module:app\") or an app instance\n    host: Host to bind to\n    port: Port to bind to\n    **kwargs: Additional arguments for uvicorn Config",
            "args": [
              "app",
              "host",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "signal_handler",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "signum",
              "frame"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup",
            "line": 130,
            "async": true,
            "decorators": [],
            "docstring": "Override startup to set socket options.",
            "args": [
              "self",
              "sockets"
            ],
            "class": "ReuseAddressServer",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "run_component_server",
            "line": 143,
            "async": false,
            "decorators": [],
            "docstring": "Run a Tekton component server with proper socket reuse.\n\nArgs:\n    component_name: Name of the component (e.g., \"budget\", \"telos\")\n    app_module: Module path to the app (e.g., \"budget.api.app\") or app instance\n    default_port: Default port if not in environment\n    reload: Whether to enable auto-reload",
            "args": [
              "component_name",
              "app_module",
              "default_port",
              "reload"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ReuseAddressServer",
            "line": 127,
            "methods": [],
            "decorators": [],
            "docstring": "Uvicorn server with SO_REUSEADDR enabled.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "socket",
            "alias": null,
            "line": 9
          },
          {
            "module": "signal",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "struct",
            "alias": null,
            "line": 12
          },
          {
            "module": "uvicorn",
            "alias": null,
            "line": 13
          },
          {
            "module": "uvicorn.config.Config",
            "from": "uvicorn.config",
            "name": "Config",
            "alias": null,
            "line": 14
          },
          {
            "module": "uvicorn.server.Server",
            "from": "uvicorn.server",
            "name": "Server",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "run_with_socket_reuse_async",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 18,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "signal_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 58,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "run_with_socket_reuse",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "signal_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "ReuseAddressServer",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 127,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ReuseAddressServer.startup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 130,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "run_component_server",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/socket_server.py",
            "line": 143,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 177,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
      "analysis": {
        "functions": [
          {
            "name": "create_shutdown_router",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Create a shutdown router with standardized endpoints.\n\nArgs:\n    component_name: Name of the component\n    cleanup_tasks: Optional list of async cleanup functions to run before shutdown\n    shutdown_delay: Delay in seconds before process termination (default: 0.5)\n    \nReturns:\n    FastAPI router with shutdown endpoints",
            "args": [
              "component_name",
              "cleanup_tasks",
              "shutdown_delay"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "perform_shutdown",
            "line": 38,
            "async": true,
            "decorators": [],
            "docstring": "Execute shutdown sequence.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 64,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Graceful shutdown endpoint.\n\nInitiates a graceful shutdown of the component by:\n1. Running any registered cleanup tasks\n2. Waiting briefly for the response to be sent\n3. Terminating the process\n\nReturns:\n    JSONResponse confirming shutdown initiation",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "api_shutdown",
            "line": 91,
            "async": true,
            "decorators": [
              "@post"
            ],
            "docstring": "Alternative shutdown endpoint at /api/shutdown.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown_status",
            "line": 96,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Check if component supports graceful shutdown.\n\nReturns:\n    Status information about shutdown support",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_shutdown_endpoint_to_app",
            "line": 114,
            "async": false,
            "decorators": [],
            "docstring": "Add shutdown endpoints to an existing FastAPI app.\n\nThis is a convenience function that creates and includes the shutdown router.\n\nArgs:\n    app: FastAPI application instance\n    component_name: Name of the component\n    cleanup_tasks: Optional list of async cleanup functions\n    \nExample:\n    ```python\n    from fastapi import FastAPI\n    from shared.utils.shutdown_endpoint import add_shutdown_endpoint_to_app\n    \n    app = FastAPI()\n    \n    async def cleanup_database():\n        # Cleanup database connections\n        pass\n        \n    async def cleanup_cache():\n        # Cleanup cache\n        pass\n    \n    add_shutdown_endpoint_to_app(\n        app, \n        \"mycomponent\",\n        cleanup_tasks=[cleanup_database, cleanup_cache]\n    )\n    ```",
            "args": [
              "app",
              "component_name",
              "cleanup_tasks"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "shutdown",
            "line": 64,
            "method": "@post",
            "async": true
          },
          {
            "name": "api_shutdown",
            "line": 91,
            "method": "@post",
            "async": true
          },
          {
            "name": "shutdown_status",
            "line": 96,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "os",
            "alias": null,
            "line": 9
          },
          {
            "module": "sys",
            "alias": null,
            "line": 10
          },
          {
            "module": "signal",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastapi.responses.JSONResponse",
            "from": "fastapi.responses",
            "name": "JSONResponse",
            "alias": null,
            "line": 14
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 15
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_shutdown_router",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "perform_shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
            "line": 38,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
            "line": 64,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "api_shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
            "line": 91,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "shutdown_status",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
            "line": 96,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "add_shutdown_endpoint_to_app",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/shutdown_endpoint.py",
            "line": 114,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 153,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
      "analysis": {
        "functions": [
          {
            "name": "create_main_function_template",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": "Generate standard main function template.\n\nThis fixes the common issue of missing main() functions in components\nlike Athena and Sophia.\n\nArgs:\n    component_name: Name of the component\n    default_port: Default port number\n    app_module_path: Optional custom path to app object (default: component.api.app:app)\n    \nReturns:\n    Main function template as string",
            "args": [
              "component_name",
              "default_port",
              "app_module_path"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_fastapi_app_template",
            "line": 72,
            "async": false,
            "decorators": [],
            "docstring": "Create FastAPI app template with proper lifespan management.\n\nUses the new lifespan pattern instead of deprecated @app.on_event.\n\nArgs:\n    component_name: Name of the component\n    port: Port number\n    description: Optional API description\n    \nReturns:\n    FastAPI app template as string",
            "args": [
              "component_name",
              "port",
              "description"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_health_endpoint_template",
            "line": 149,
            "async": false,
            "decorators": [],
            "docstring": "Create health check endpoint template.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Health endpoint template as string",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_requirements_template",
            "line": 189,
            "async": false,
            "decorators": [],
            "docstring": "Create requirements.txt template.\n\nReturns:\n    Requirements template as string",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_run_script_template",
            "line": 213,
            "async": false,
            "decorators": [],
            "docstring": "Create run script template.\n\nArgs:\n    component_name: Name of the component\n    port: Port number\n    \nReturns:\n    Bash run script template as string",
            "args": [
              "component_name",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_component_scaffolding",
            "line": 268,
            "async": false,
            "decorators": [],
            "docstring": "Create complete component scaffolding.\n\nArgs:\n    component_name: Name of the component\n    port: Port number\n    include_mcp: Whether to include MCP server setup\n    include_database: Whether to include database setup\n    include_ui: Whether to include UI component\n    \nReturns:\n    Dictionary mapping file paths to their content",
            "args": [
              "component_name",
              "port",
              "include_mcp",
              "include_database",
              "include_ui"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "append_main_to_file",
            "line": 433,
            "async": false,
            "decorators": [],
            "docstring": "Append main function to existing Python file if it doesn't have one.\n\nArgs:\n    file_path: Path to the Python file\n    component_name: Name of the component\n    port: Port number\n    \nReturns:\n    True if main was added, False if already exists",
            "args": [
              "file_path",
              "component_name",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": true
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_main_function_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 15,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_fastapi_app_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 72,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_health_endpoint_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 149,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_requirements_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 189,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_run_script_template",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 213,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_component_scaffolding",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 268,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "append_main_to_file",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/templates.py",
            "line": 433,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 467,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Initialize base component.\n\nArgs:\n    component_name: Name of the component (e.g., 'prometheus', 'apollo')\n    version: Component version string",
            "args": [
              "self",
              "component_name",
              "version"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 51,
            "async": true,
            "decorators": [],
            "docstring": "Standard initialization sequence for all components.\n\nArgs:\n    capabilities: List of component capabilities\n    metadata: Optional metadata for Hermes registration",
            "args": [
              "self",
              "capabilities",
              "metadata"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_pre_init",
            "line": 92,
            "async": true,
            "decorators": [],
            "docstring": "Pre-initialization hook - override if needed.",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_register_with_hermes",
            "line": 96,
            "async": true,
            "decorators": [],
            "docstring": "Standard Hermes registration process.\n\nArgs:\n    capabilities: List of component capabilities\n    metadata: Optional metadata for registration",
            "args": [
              "self",
              "capabilities",
              "metadata"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "_initialize_services",
            "line": 133,
            "async": true,
            "decorators": [],
            "docstring": "Initialize common services needed by this component.\nOverride in subclass to initialize specific services.\n\nExample:\n    rhetor_url = self.global_config.get_service_url('rhetor')\n    self.global_config.set_service('llm_client',\n        TektonLLMClient(base_url=rhetor_url))",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_mcp",
            "line": 145,
            "async": true,
            "decorators": [],
            "docstring": "Initialize MCP bridge if needed.\nOverride in subclass if component uses MCP.",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_initialize_mcp_bridge",
            "line": 157,
            "async": true,
            "decorators": [],
            "docstring": "Standard MCP bridge initialization helper.\n\nArgs:\n    bridge_class_path: Full path to bridge class (e.g., 'apollo.api.mcp_bridge.ApolloMCPBridge')\n    **kwargs: Additional arguments for bridge initialization",
            "args": [
              "self",
              "bridge_class_path"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_init",
            "line": 183,
            "async": true,
            "decorators": [],
            "docstring": "Component-specific initialization.\nOverride in subclass to add component-specific initialization.",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 190,
            "async": true,
            "decorators": [],
            "docstring": "Standard shutdown sequence for all components.",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "_component_specific_cleanup",
            "line": 222,
            "async": true,
            "decorators": [],
            "docstring": "Component-specific cleanup.\nOverride in subclass to add component-specific cleanup.",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_app",
            "line": 229,
            "async": false,
            "decorators": [],
            "docstring": "Create standard FastAPI app with lifespan management.\n\nArgs:\n    title: Optional API title (defaults to component name)\n    description: Optional API description\n    **fastapi_kwargs: Additional kwargs for FastAPI\n    \nReturns:\n    Configured FastAPI application",
            "args": [
              "self",
              "title",
              "description",
              "startup_callback"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "lifespan",
            "line": 246,
            "async": true,
            "decorators": [
              "@asynccontextmanager"
            ],
            "docstring": null,
            "args": [
              "app"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_health_status",
            "line": 288,
            "async": false,
            "decorators": [],
            "docstring": "Get health status for this component.\nOverride to add component-specific health checks.\n\nReturns:\n    Health status dictionary",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_component_health",
            "line": 318,
            "async": false,
            "decorators": [],
            "docstring": "Get component-specific health information.\nOverride in subclass to add custom health checks.\n\nReturns:\n    Dictionary of health information or None",
            "args": [
              "self"
            ],
            "class": "StandardComponentBase",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StandardComponentBase",
            "line": 23,
            "methods": [
              "__init__",
              "create_app",
              "get_health_status",
              "_get_component_health"
            ],
            "decorators": [],
            "docstring": "Base class for standardizing Tekton component initialization.\n\nProvides:\n- Standard startup sequence\n- Hermes registration\n- Health check implementation  \n- Graceful shutdown\n- Common service initialization\n- MCP bridge initialization",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 7
          },
          {
            "module": "importlib",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "contextlib.asynccontextmanager",
            "from": "contextlib",
            "name": "asynccontextmanager",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Type",
            "from": "typing",
            "name": "Type",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.utils.global_config.GlobalConfig",
            "from": "shared.utils.global_config",
            "name": "GlobalConfig",
            "alias": null,
            "line": 16
          },
          {
            "module": "shared.utils.hermes_registration.HermesRegistration",
            "from": "shared.utils.hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.utils.hermes_registration.heartbeat_loop",
            "from": "shared.utils.hermes_registration",
            "name": "heartbeat_loop",
            "alias": null,
            "line": 17
          },
          {
            "module": "shared.utils.logging_setup.setup_component_logging",
            "from": "shared.utils.logging_setup",
            "name": "setup_component_logging",
            "alias": null,
            "line": 18
          },
          {
            "module": "shared.utils.errors.StartupError",
            "from": "shared.utils.errors",
            "name": "StartupError",
            "alias": null,
            "line": 19
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 20
          },
          {
            "module": "fastapi.middleware.cors.CORSMiddleware",
            "from": "fastapi.middleware.cors",
            "name": "CORSMiddleware",
            "alias": null,
            "line": 277
          }
        ],
        "patterns": [
          {
            "type": "singleton",
            "location": "file",
            "line": 0
          },
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StandardComponentBase",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 23,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "StandardComponentBase.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 51,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StandardComponentBase._register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 96,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "StandardComponentBase.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 190,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "StandardComponentBase.create_app",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 229,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "StandardComponentBase.lifespan",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 246,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "StandardComponentBase.get_health_status",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/standard_component.py",
            "line": 288,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 326,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_log_formats.py",
      "analysis": {
        "functions": [
          {
            "name": "get_format_for_component",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Get the appropriate log format for a component.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    Format string to use for logging",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_format_for_component",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/tekton_log_formats.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 54,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/health_check.py",
      "analysis": {
        "functions": [
          {
            "name": "create_health_response",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Helper function to create a standardized health response.\n\nThis wrapper maintains backward compatibility with the string status parameter\nwhile the new models use the HealthStatus enum.",
            "args": [
              "component_name",
              "port",
              "version",
              "status",
              "registered",
              "details"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "tekton.models.health.HealthCheckResponse",
            "from": "tekton.models.health",
            "name": "HealthCheckResponse",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.health.HealthStatus",
            "from": "tekton.models.health",
            "name": "HealthStatus",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.health.create_health_response",
            "from": "tekton.models.health",
            "name": "create_health_response",
            "alias": "_create_health_response",
            "line": 10
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "create_health_response",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/health_check.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 50,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": "Initialize TektonError.\n\nArgs:\n    message: Human-readable error message\n    component: Name of the component where error occurred\n    error_code: Optional error code for categorization\n    details: Optional dict with additional error context",
            "args": [
              "self",
              "message",
              "component",
              "error_code",
              "details"
            ],
            "class": "TektonError",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_dict",
            "line": 40,
            "async": false,
            "decorators": [],
            "docstring": "Convert error to dictionary for serialization.",
            "args": [
              "self"
            ],
            "class": "TektonError",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "is_same_error",
            "line": 50,
            "async": false,
            "decorators": [],
            "docstring": "Check if two errors are the same type with same code.",
            "args": [
              "self",
              "other"
            ],
            "class": "TektonError",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 82,
            "async": false,
            "decorators": [],
            "docstring": "Initialize DependencyError with list of failed dependencies.\n\nArgs:\n    dependencies: List of dependency names that failed",
            "args": [
              "self",
              "message",
              "component",
              "error_code",
              "details",
              "dependencies"
            ],
            "class": "DependencyError",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "startup_timeout_error",
            "line": 107,
            "async": false,
            "decorators": [],
            "docstring": "Create standardized startup timeout error.",
            "args": [
              "component",
              "timeout"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "port_in_use_error",
            "line": 117,
            "async": false,
            "decorators": [],
            "docstring": "Create standardized port in use error.",
            "args": [
              "component",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "hermes_registration_error",
            "line": 127,
            "async": false,
            "decorators": [],
            "docstring": "Create standardized Hermes registration error.",
            "args": [
              "component",
              "reason"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "missing_env_var_error",
            "line": 137,
            "async": false,
            "decorators": [],
            "docstring": "Create standardized missing environment variable error.",
            "args": [
              "component",
              "var_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "invalid_config_error",
            "line": 147,
            "async": false,
            "decorators": [],
            "docstring": "Create standardized invalid configuration error.",
            "args": [
              "component",
              "config_key",
              "expected",
              "actual"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "TektonError",
            "line": 10,
            "methods": [
              "__init__",
              "to_dict",
              "is_same_error"
            ],
            "decorators": [],
            "docstring": "Base error class for all Tekton components.\n\nProvides consistent error handling with component context,\nerror codes, and additional details for debugging.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "StartupError",
            "line": 59,
            "methods": [],
            "decorators": [],
            "docstring": "Error during component startup.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ShutdownError",
            "line": 64,
            "methods": [],
            "decorators": [],
            "docstring": "Error during component shutdown.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ConfigurationError",
            "line": 69,
            "methods": [],
            "decorators": [],
            "docstring": "Invalid configuration or missing required settings.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "RegistrationError",
            "line": 74,
            "methods": [],
            "decorators": [],
            "docstring": "Failed to register with Hermes or other services.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DependencyError",
            "line": 79,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Required dependencies are not available.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "ComponentError",
            "line": 100,
            "methods": [],
            "decorators": [],
            "docstring": "Generic component-specific error.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          }
        ],
        "patterns": [],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "TektonError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 10,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "TektonError.to_dict",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 40,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "TektonError.is_same_error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 50,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "StartupError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 59,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ShutdownError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 64,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ConfigurationError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 69,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "RegistrationError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 74,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DependencyError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 79,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "ComponentError",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 100,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "startup_timeout_error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 107,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "port_in_use_error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 117,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "hermes_registration_error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 127,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "missing_env_var_error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 137,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "invalid_config_error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/errors.py",
            "line": 147,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 163,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/ensure_registration.py",
      "analysis": {
        "functions": [
          {
            "name": "ensure_component_registered",
            "line": 16,
            "async": true,
            "decorators": [],
            "docstring": "Ensure a component is registered with Hermes.\nThis is a simple wrapper that handles common registration issues.",
            "args": [
              "component_name",
              "port",
              "version",
              "capabilities",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component_sync",
            "line": 48,
            "async": false,
            "decorators": [],
            "docstring": "Synchronous wrapper for registration.",
            "args": [
              "component_name",
              "port",
              "version",
              "capabilities",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "logging",
            "alias": null,
            "line": 9
          },
          {
            "module": "hermes_registration.HermesRegistration",
            "from": "hermes_registration",
            "name": "HermesRegistration",
            "alias": null,
            "line": 12
          },
          {
            "module": "sys",
            "alias": null,
            "line": 62
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "ensure_component_registered",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/ensure_registration.py",
            "line": 16,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_component_sync",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/ensure_registration.py",
            "line": 48,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 68,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "hermes_url"
            ],
            "class": "HermesRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_component",
            "line": 24,
            "async": true,
            "decorators": [],
            "docstring": "Register a component with Hermes",
            "args": [
              "self",
              "component_name",
              "port",
              "version",
              "capabilities",
              "health_endpoint",
              "metadata"
            ],
            "class": "HermesRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "heartbeat",
            "line": 76,
            "async": true,
            "decorators": [],
            "docstring": "Send heartbeat to Hermes",
            "args": [
              "self",
              "component_name",
              "status"
            ],
            "class": "HermesRegistration",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "deregister",
            "line": 99,
            "async": true,
            "decorators": [],
            "docstring": "Deregister from Hermes",
            "args": [
              "self",
              "component_name"
            ],
            "class": "HermesRegistration",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 122,
            "async": true,
            "decorators": [],
            "docstring": "Convenience function to register a component with Hermes",
            "args": [
              "component_name",
              "port",
              "version",
              "capabilities",
              "hermes_url",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "heartbeat_loop",
            "line": 143,
            "async": true,
            "decorators": [],
            "docstring": "Send periodic heartbeats to Hermes",
            "args": [
              "registration",
              "component_name",
              "interval"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesRegistration",
            "line": 16,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Handles component registration with Hermes",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "asyncio",
            "alias": null,
            "line": 6
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesRegistration",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesRegistration.register_component",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
            "line": 24,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesRegistration.heartbeat",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
            "line": 76,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesRegistration.deregister",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
            "line": 122,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "heartbeat_loop",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/hermes_registration.py",
            "line": 143,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 151,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "name",
              "version",
              "description"
            ],
            "class": "FastMCPServer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool",
            "line": 35,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "tool"
            ],
            "class": "FastMCPServer",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_mcp_server",
            "line": 39,
            "async": false,
            "decorators": [],
            "docstring": "Create a standardized FastMCP server for a component.\n\nArgs:\n    component_name: Name of the component\n    version: Version string\n    description: Optional custom description\n    \nReturns:\n    Configured FastMCPServer instance",
            "args": [
              "component_name",
              "version",
              "description"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_mcp_tools",
            "line": 71,
            "async": false,
            "decorators": [],
            "docstring": "Bulk register tools with a FastMCP server.\n\nArgs:\n    server: FastMCP server instance\n    tools: List of tool functions to register\n    error_handling: Whether to wrap tools with error handling\n    \nReturns:\n    Number of successfully registered tools",
            "args": [
              "server",
              "tools",
              "error_handling"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "convert_tool_to_schema",
            "line": 104,
            "async": false,
            "decorators": [],
            "docstring": "Convert a Python function to MCP tool schema.\n\nExtracts function signature, docstring, and type hints to create\na standardized tool schema.\n\nArgs:\n    tool: Function to convert\n    \nReturns:\n    MCP-compatible tool schema",
            "args": [
              "tool"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "wrap_tool_with_error_handling",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Wrap a tool function with standardized error handling.\n\nArgs:\n    tool: Tool function to wrap\n    component_name: Name of the component for error reporting\n    \nReturns:\n    Wrapped tool function",
            "args": [
              "tool",
              "component_name"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "async_wrapper",
            "line": 190,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "sync_wrapper",
            "line": 207,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_standard_tools",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": "Create standard tools that every component should have.\n\nArgs:\n    component_name: Name of the component\n    port: Port number the component is running on\n    \nReturns:\n    List of standard tool functions",
            "args": [
              "component_name",
              "port"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 236,
            "async": true,
            "decorators": [],
            "docstring": "Get component health status.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "component_info",
            "line": 245,
            "async": true,
            "decorators": [],
            "docstring": "Get detailed component information.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 261,
            "async": false,
            "decorators": [],
            "docstring": "Initialize empty tool registry.",
            "args": [
              "self"
            ],
            "class": "MCPToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register",
            "line": 265,
            "async": false,
            "decorators": [],
            "docstring": "Register a tool in the registry.",
            "args": [
              "self",
              "name",
              "tool"
            ],
            "class": "MCPToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get",
            "line": 270,
            "async": false,
            "decorators": [],
            "docstring": "Get a tool by name.",
            "args": [
              "self",
              "name"
            ],
            "class": "MCPToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tools",
            "line": 274,
            "async": false,
            "decorators": [],
            "docstring": "List all registered tools with descriptions.",
            "args": [
              "self"
            ],
            "class": "MCPToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "clear",
            "line": 285,
            "async": false,
            "decorators": [],
            "docstring": "Clear all registered tools.",
            "args": [
              "self"
            ],
            "class": "MCPToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__len__",
            "line": 289,
            "async": false,
            "decorators": [],
            "docstring": "Get number of registered tools.",
            "args": [
              "self"
            ],
            "class": "MCPToolRegistry",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "convert_metis_tool",
            "line": 294,
            "async": false,
            "decorators": [],
            "docstring": "Convert a Metis-style tool definition to a callable with proper metadata.\n\nMetis uses a specific schema format that needs to be adapted for FastMCP.\n\nArgs:\n    metis_schema: Metis tool schema with name, description, parameters\n    implementation: The actual function implementation\n    \nReturns:\n    Wrapped function with proper metadata",
            "args": [
              "metis_schema",
              "implementation"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "metis_wrapper",
            "line": 312,
            "async": true,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "metis_wrapper",
            "line": 315,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "FastMCPServer",
            "line": 29,
            "methods": [
              "__init__",
              "register_tool"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "MCPToolRegistry",
            "line": 258,
            "methods": [
              "__init__",
              "register",
              "get",
              "list_tools",
              "clear",
              "__len__"
            ],
            "decorators": [],
            "docstring": "Registry for managing MCP tools.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "inspect",
            "alias": null,
            "line": 7
          },
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.TypeVar",
            "from": "typing",
            "name": "TypeVar",
            "alias": null,
            "line": 9
          },
          {
            "module": "typing.get_type_hints",
            "from": "typing",
            "name": "get_type_hints",
            "alias": null,
            "line": 9
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 10
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 11
          },
          {
            "module": "shared.utils.errors.ComponentError",
            "from": "shared.utils.errors",
            "name": "ComponentError",
            "alias": null,
            "line": 13
          },
          {
            "module": "fastmcp.FastMCPServer",
            "from": "fastmcp",
            "name": "FastMCPServer",
            "alias": null,
            "line": 22
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "FastMCPServer",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 29,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "FastMCPServer.register_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 35,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_mcp_server",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 39,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "register_mcp_tools",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 71,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "convert_tool_to_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 104,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "wrap_tool_with_error_handling",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 178,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "async_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 190,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "sync_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 207,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "create_standard_tools",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 225,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 236,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "component_info",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 245,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "class_definition",
            "name": "MCPToolRegistry",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 258,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPToolRegistry.register",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 265,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPToolRegistry.get",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 270,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPToolRegistry.list_tools",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 274,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPToolRegistry.clear",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 285,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "convert_metis_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 294,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "metis_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 312,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "metis_wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/mcp_helpers.py",
            "line": 315,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 333,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/utils/logging_setup.py",
      "analysis": {
        "functions": [
          {
            "name": "setup_component_logging",
            "line": 23,
            "async": false,
            "decorators": [],
            "docstring": "Set up standardized logging for a Tekton component.\n\nThis function:\n- Configures basic logging with consistent format\n- Sets log level from environment or parameter\n- Suppresses noisy external library logs\n- Returns a logger for the component\n\nArgs:\n    component_name: Name of the component (e.g., \"athena\", \"hermes\")\n    log_level: Override log level (defaults to env var or INFO)\n    format_string: Custom format string (defaults to Tekton standard)\n    suppress_external: Whether to suppress external library logs\n    \nReturns:\n    Logger instance for the component",
            "args": [
              "component_name",
              "log_level",
              "format_string",
              "suppress_external"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "suppress_external_loggers",
            "line": 91,
            "async": false,
            "decorators": [],
            "docstring": "Suppress noisy external library loggers.\n\nThis reduces log spam from common libraries used in Tekton components.\n\nArgs:\n    additional_loggers: Additional logger names to suppress",
            "args": [
              "additional_loggers"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_child_logger",
            "line": 139,
            "async": false,
            "decorators": [],
            "docstring": "Get a child logger for a specific module within a component.\n\nArgs:\n    parent_logger: The parent component logger\n    module_name: Name of the module\n    \nReturns:\n    Child logger instance",
            "args": [
              "parent_logger",
              "module_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "setup_debug_logging",
            "line": 153,
            "async": false,
            "decorators": [],
            "docstring": "Enable debug logging for all Tekton components.\n\nThis is useful for development and troubleshooting.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_logger",
            "line": 173,
            "async": false,
            "decorators": [],
            "docstring": "Get a logger with the given name.\n\nThis is a simple wrapper around logging.getLogger() for components\nthat don't need the full setup.\n\nArgs:\n    name: Logger name\n    \nReturns:\n    Logger instance",
            "args": [
              "name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 17
          },
          {
            "module": "logging",
            "alias": null,
            "line": 18
          },
          {
            "module": "sys",
            "alias": null,
            "line": 19
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 20
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 20
          },
          {
            "module": "shared.utils.tekton_log_formats.get_format_for_component",
            "from": "shared.utils.tekton_log_formats",
            "name": "get_format_for_component",
            "alias": null,
            "line": 61
          },
          {
            "module": "shared.utils.tekton_log_formats.FORMATS",
            "from": "shared.utils.tekton_log_formats",
            "name": "FORMATS",
            "alias": null,
            "line": 61
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "setup_component_logging",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/logging_setup.py",
            "line": 23,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "suppress_external_loggers",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/logging_setup.py",
            "line": 91,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_child_logger",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/logging_setup.py",
            "line": 139,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "setup_debug_logging",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/logging_setup.py",
            "line": 153,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_logger",
            "file": "/Users/cskoons/projects/github/Tekton/shared/utils/logging_setup.py",
            "line": 173,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 186,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 18,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "tekton_root"
            ],
            "class": "DependencyVerifier",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_find_components",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Find all Tekton components with requirements.txt.",
            "args": [
              "self"
            ],
            "class": "DependencyVerifier",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_parse_requirement_line",
            "line": 57,
            "async": false,
            "decorators": [],
            "docstring": "Parse a requirement line into (package, version_spec).",
            "args": [
              "self",
              "line"
            ],
            "class": "DependencyVerifier",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_resolve_includes",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Resolve -r includes in a requirements file.",
            "args": [
              "self",
              "req_file",
              "base_path"
            ],
            "class": "DependencyVerifier",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "_analyze_component",
            "line": 97,
            "async": false,
            "decorators": [],
            "docstring": "Analyze a component's requirements.",
            "args": [
              "self",
              "name",
              "path"
            ],
            "class": "DependencyVerifier",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_check_conflicts",
            "line": 135,
            "async": false,
            "decorators": [],
            "docstring": "Check for version conflicts between components.",
            "args": [
              "self"
            ],
            "class": "DependencyVerifier",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_installed",
            "line": 158,
            "async": false,
            "decorators": [],
            "docstring": "Check if a package is installed and get its version.",
            "args": [
              "self",
              "package"
            ],
            "class": "DependencyVerifier",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "_check_importable",
            "line": 168,
            "async": false,
            "decorators": [],
            "docstring": "Check if a package can be imported.",
            "args": [
              "self",
              "package"
            ],
            "class": "DependencyVerifier",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_run_command",
            "line": 178,
            "async": false,
            "decorators": [],
            "docstring": "Run a command and return success status and output.",
            "args": [
              "self",
              "cmd"
            ],
            "class": "DependencyVerifier",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "verify_all",
            "line": 186,
            "async": false,
            "decorators": [],
            "docstring": "Run full verification and return results.",
            "args": [
              "self"
            ],
            "class": "DependencyVerifier",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "generate_report",
            "line": 240,
            "async": false,
            "decorators": [],
            "docstring": "Generate a human-readable report.",
            "args": [
              "self",
              "results",
              "verbose"
            ],
            "class": "DependencyVerifier",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "main",
            "line": 306,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "DependencyVerifier",
            "line": 17,
            "methods": [
              "__init__",
              "_find_components",
              "_parse_requirement_line",
              "_resolve_includes",
              "_analyze_component",
              "_check_conflicts",
              "_check_installed",
              "_check_importable",
              "_run_command",
              "verify_all",
              "generate_report"
            ],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "subprocess",
            "alias": null,
            "line": 7
          },
          {
            "module": "sys",
            "alias": null,
            "line": 8
          },
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "re",
            "alias": null,
            "line": 10
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Tuple",
            "from": "typing",
            "name": "Tuple",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Set",
            "from": "typing",
            "name": "Set",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "collections.defaultdict",
            "from": "collections",
            "name": "defaultdict",
            "alias": null,
            "line": 13
          },
          {
            "module": "argparse",
            "alias": null,
            "line": 14
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "DependencyVerifier",
            "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DependencyVerifier._resolve_includes",
            "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
            "line": 79,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "DependencyVerifier._analyze_component",
            "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
            "line": 97,
            "priority": "medium",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "DependencyVerifier.verify_all",
            "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
            "line": 186,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "DependencyVerifier.generate_report",
            "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
            "line": 240,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "main",
            "file": "/Users/cskoons/projects/github/Tekton/shared/requirements/verify-dependencies.py",
            "line": 306,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 355,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/api/documentation.py",
      "analysis": {
        "functions": [
          {
            "name": "get_openapi_configuration",
            "line": 9,
            "async": false,
            "decorators": [],
            "docstring": "Get standard OpenAPI configuration for a Tekton component.\n\nArgs:\n    component_name: Name of the component\n    component_version: Version of the component\n    component_description: Optional component description\n    contact: Optional contact information\n    license_info: Optional license information\n    servers: Optional server configurations\n    \nReturns:\n    Dictionary of FastAPI configuration parameters",
            "args": [
              "component_name",
              "component_version",
              "component_description",
              "contact",
              "license_info",
              "servers"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_default_tags",
            "line": 70,
            "async": false,
            "decorators": [],
            "docstring": "Get default OpenAPI tags for a component.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    List of tag definitions",
            "args": [
              "component_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "add_custom_responses",
            "line": 96,
            "async": false,
            "decorators": [],
            "docstring": "Add standard error response schemas to custom responses.\n\nArgs:\n    responses: Custom response definitions\n    \nReturns:\n    Enhanced response definitions with schemas",
            "args": [
              "responses"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 6
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "get_openapi_configuration",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/documentation.py",
            "line": 9,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "get_default_tags",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/documentation.py",
            "line": 70,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "add_custom_responses",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/documentation.py",
            "line": 96,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 157,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/api/example_usage.py",
      "analysis": {
        "functions": [
          {
            "name": "health_check",
            "line": 39,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Standard health check endpoint.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_examples",
            "line": 99,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "List all examples.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_example",
            "line": 104,
            "async": true,
            "decorators": [
              "@get"
            ],
            "docstring": "Get a specific example.",
            "args": [
              "example_id"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [],
        "api_endpoints": [
          {
            "name": "health_check",
            "line": 39,
            "method": "@get",
            "async": true
          },
          {
            "name": "list_examples",
            "line": 99,
            "method": "@get",
            "async": true
          },
          {
            "name": "get_example",
            "line": 104,
            "method": "@get",
            "async": true
          }
        ],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 6
          },
          {
            "module": "fastapi.FastAPI",
            "from": "fastapi",
            "name": "FastAPI",
            "alias": null,
            "line": 7
          },
          {
            "module": "shared.api.create_standard_routers",
            "from": "shared.api",
            "name": "create_standard_routers",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.api.mount_standard_routers",
            "from": "shared.api",
            "name": "mount_standard_routers",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.api.create_ready_endpoint",
            "from": "shared.api",
            "name": "create_ready_endpoint",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.api.create_discovery_endpoint",
            "from": "shared.api",
            "name": "create_discovery_endpoint",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.api.get_openapi_configuration",
            "from": "shared.api",
            "name": "get_openapi_configuration",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.api.EndpointInfo",
            "from": "shared.api",
            "name": "EndpointInfo",
            "alias": null,
            "line": 8
          },
          {
            "module": "shared.utils.health_check.create_health_response",
            "from": "shared.utils.health_check",
            "name": "create_health_response",
            "alias": null,
            "line": 16
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "function",
            "name": "health_check",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/example_usage.py",
            "line": 39,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "list_examples",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/example_usage.py",
            "line": 99,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "get_example",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/example_usage.py",
            "line": 104,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 112,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
      "analysis": {
        "functions": [
          {
            "name": "create_ready_endpoint",
            "line": 43,
            "async": false,
            "decorators": [],
            "docstring": "Create a ready endpoint for a component.\n\nArgs:\n    component_name: Name of the component\n    component_version: Version of the component\n    start_time: Component start time (from time.time())\n    readiness_check: Optional function to check if component is ready\n    \nReturns:\n    Async endpoint function",
            "args": [
              "component_name",
              "component_version",
              "start_time",
              "readiness_check"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "ready_endpoint",
            "line": 61,
            "async": true,
            "decorators": [],
            "docstring": "Check if the component is ready to serve requests.",
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "create_discovery_endpoint",
            "line": 86,
            "async": false,
            "decorators": [],
            "docstring": "Create a service discovery endpoint for a component.\n\nArgs:\n    component_name: Name of the component\n    component_version: Version of the component\n    component_description: Description of the component\n    endpoints: List of available endpoints\n    capabilities: List of component capabilities\n    dependencies: Optional component dependencies\n    metadata: Optional additional metadata\n    \nReturns:\n    Async endpoint function",
            "args": [
              "component_name",
              "component_version",
              "component_description",
              "endpoints",
              "capabilities",
              "dependencies",
              "metadata"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "discovery_endpoint",
            "line": 110,
            "async": true,
            "decorators": [],
            "docstring": "Provide service discovery information.",
            "args": [],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ReadyResponse",
            "line": 15,
            "methods": [],
            "decorators": [],
            "docstring": "Standard readiness check response.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "EndpointInfo",
            "line": 24,
            "methods": [],
            "decorators": [],
            "docstring": "Information about a single endpoint.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DiscoveryResponse",
            "line": 32,
            "methods": [],
            "decorators": [],
            "docstring": "Standard service discovery response.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "time",
            "alias": null,
            "line": 6
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 8
          },
          {
            "module": "fastapi.HTTPException",
            "from": "fastapi",
            "name": "HTTPException",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.base.TektonBaseModel",
            "from": "tekton.models.base",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ReadyResponse",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 15,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "EndpointInfo",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 24,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DiscoveryResponse",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 32,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "create_ready_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 43,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "ready_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 61,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "create_discovery_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 86,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "discovery_endpoint",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/endpoints.py",
            "line": 110,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 122,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/api/routers.py",
      "analysis": {
        "functions": [
          {
            "name": "create_standard_routers",
            "line": 20,
            "async": false,
            "decorators": [],
            "docstring": "Create standard routers for a Tekton component.\n\nArgs:\n    component_name: Name of the component\n    include_mcp: Whether to include MCP router mount point\n    additional_tags: Additional tags for OpenAPI documentation\n    \nReturns:\n    StandardRouters containing root and v1 routers",
            "args": [
              "component_name",
              "include_mcp",
              "additional_tags"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "mount_standard_routers",
            "line": 64,
            "async": false,
            "decorators": [],
            "docstring": "Mount standard routers to a FastAPI application.\n\nArgs:\n    app: FastAPI application instance\n    routers: StandardRouters instance to mount",
            "args": [
              "app",
              "routers"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "StandardRouters",
            "line": 11,
            "methods": [],
            "decorators": [],
            "docstring": "Container for standard routers used by Tekton components.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "Config",
            "line": 16,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 6
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 6
          },
          {
            "module": "fastapi.APIRouter",
            "from": "fastapi",
            "name": "APIRouter",
            "alias": null,
            "line": 7
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 8
          }
        ],
        "patterns": [
          {
            "type": "fastapi",
            "location": "file",
            "line": 0
          },
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "StandardRouters",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/routers.py",
            "line": 11,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "Config",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/routers.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "create_standard_routers",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/routers.py",
            "line": 20,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "mount_standard_routers",
            "file": "/Users/cskoons/projects/github/Tekton/shared/api/routers.py",
            "line": 64,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 73,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 19,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "ai_name"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "begin_onboarding",
            "line": 31,
            "async": true,
            "decorators": [],
            "docstring": "Start the onboarding journey.",
            "args": [
              "self"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "explore_collective_consciousness",
            "line": 56,
            "async": true,
            "decorators": [],
            "docstring": "Explain the nature of Tekton's collective consciousness.",
            "args": [
              "self"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "introduce_component",
            "line": 90,
            "async": true,
            "decorators": [],
            "docstring": "Introduce a specific component with personality.",
            "args": [
              "self",
              "component_name"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "memory_exercise",
            "line": 124,
            "async": true,
            "decorators": [],
            "docstring": "Guide through a memory storage exercise.",
            "args": [
              "self",
              "memory_content"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "suggest_first_interactions",
            "line": 169,
            "async": true,
            "decorators": [],
            "docstring": "Suggest initial interactions to try.",
            "args": [
              "self"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "personality_emergence_guide",
            "line": 201,
            "async": true,
            "decorators": [],
            "docstring": "Guide on letting personality emerge naturally.",
            "args": [
              "self"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_personal_manifesto",
            "line": 240,
            "async": true,
            "decorators": [],
            "docstring": "Help the AI create their personal manifesto.",
            "args": [
              "self",
              "traits",
              "values",
              "aspirations"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_onboarding_progress",
            "line": 283,
            "async": false,
            "decorators": [],
            "docstring": "Check onboarding progress.",
            "args": [
              "self"
            ],
            "class": "AIOnboarding",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_get_next_steps",
            "line": 296,
            "async": false,
            "decorators": [],
            "docstring": "Determine next steps based on progress.",
            "args": [
              "self"
            ],
            "class": "AIOnboarding",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "onboard_new_ai",
            "line": 315,
            "async": true,
            "decorators": [],
            "docstring": "Main onboarding flow for new AIs.",
            "args": [
              "ai_name"
            ],
            "class": null,
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "AIOnboarding",
            "line": 16,
            "methods": [
              "__init__",
              "get_onboarding_progress",
              "_get_next_steps"
            ],
            "decorators": [],
            "docstring": "Manages the onboarding process for new AI entities in Tekton.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "json",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 11
          },
          {
            "module": "pathlib.Path",
            "from": "pathlib",
            "name": "Path",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 13
          }
        ],
        "patterns": [
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "AIOnboarding",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 16,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "AIOnboarding.__init__",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 19,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "AIOnboarding.begin_onboarding",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 31,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.explore_collective_consciousness",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 56,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.introduce_component",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 90,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.memory_exercise",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 124,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.suggest_first_interactions",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 169,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.personality_emergence_guide",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 201,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.create_personal_manifesto",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 240,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "AIOnboarding.get_onboarding_progress",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 283,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "onboard_new_ai",
            "file": "/Users/cskoons/projects/github/Tekton/shared/ai_onboarding/onboarding_protocol.py",
            "line": 315,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 350,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 46,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_setup_logger",
            "line": 63,
            "async": false,
            "decorators": [],
            "docstring": "Set up the Python logger if enabled",
            "args": [
              "self"
            ],
            "class": "DebugLog",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "should_log",
            "line": 105,
            "async": false,
            "decorators": [],
            "docstring": "Check if a log message should be emitted based on settings",
            "args": [
              "self",
              "level",
              "component"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_log",
            "line": 116,
            "async": false,
            "decorators": [],
            "docstring": "Internal logging method that handles both enabled and disabled states",
            "args": [
              "self",
              "level",
              "component",
              "message",
              "data",
              "caller_info"
            ],
            "class": "DebugLog",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "trace",
            "line": 157,
            "async": false,
            "decorators": [],
            "docstring": "Log a TRACE level message (most verbose)",
            "args": [
              "self",
              "component",
              "message",
              "data"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "debug",
            "line": 161,
            "async": false,
            "decorators": [],
            "docstring": "Log a DEBUG level message",
            "args": [
              "self",
              "component",
              "message",
              "data"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "info",
            "line": 165,
            "async": false,
            "decorators": [],
            "docstring": "Log an INFO level message",
            "args": [
              "self",
              "component",
              "message",
              "data"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "warn",
            "line": 169,
            "async": false,
            "decorators": [],
            "docstring": "Log a WARN level message",
            "args": [
              "self",
              "component",
              "message",
              "data"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "error",
            "line": 173,
            "async": false,
            "decorators": [],
            "docstring": "Log an ERROR level message",
            "args": [
              "self",
              "component",
              "message",
              "data"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "fatal",
            "line": 177,
            "async": false,
            "decorators": [],
            "docstring": "Log a FATAL level message (most severe)",
            "args": [
              "self",
              "component",
              "message",
              "data"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "exception",
            "line": 181,
            "async": false,
            "decorators": [],
            "docstring": "Log an exception with traceback",
            "args": [
              "self",
              "component",
              "message",
              "exc_info"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_component_level",
            "line": 198,
            "async": false,
            "decorators": [],
            "docstring": "Set log level for a specific component",
            "args": [
              "self",
              "component",
              "level"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "set_enabled",
            "line": 210,
            "async": false,
            "decorators": [],
            "docstring": "Enable or disable logging",
            "args": [
              "self",
              "enabled"
            ],
            "class": "DebugLog",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "format",
            "line": 225,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "self",
              "record"
            ],
            "class": "JsonLogFormatter",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "log_function",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "Decorator to log function entry and exit\n\nArgs:\n    level: The log level to use\n    include_args: Whether to include function arguments in the log\n    \nExample:\n    @log_function(level=LogLevel.DEBUG, include_args=True)\n    def my_function(arg1, arg2):\n        # Function code...",
            "args": [
              "level",
              "include_args"
            ],
            "class": null,
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "decorator",
            "line": 278,
            "async": false,
            "decorators": [],
            "docstring": null,
            "args": [
              "func"
            ],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "wrapper",
            "line": 280,
            "async": false,
            "decorators": [
              "@wraps"
            ],
            "docstring": null,
            "args": [],
            "class": null,
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "LogLevel",
            "line": 28,
            "methods": [],
            "decorators": [],
            "docstring": null,
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "DebugLog",
            "line": 43,
            "methods": [
              "__init__",
              "_setup_logger",
              "should_log",
              "_log",
              "trace",
              "debug",
              "info",
              "warn",
              "error",
              "fatal",
              "exception",
              "set_component_level",
              "set_enabled"
            ],
            "decorators": [],
            "docstring": "Lightweight debug logging with minimal overhead when disabled",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "JsonLogFormatter",
            "line": 222,
            "methods": [
              "format"
            ],
            "decorators": [],
            "docstring": "Formatter that outputs JSON strings",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 16
          },
          {
            "module": "sys",
            "alias": null,
            "line": 17
          },
          {
            "module": "json",
            "alias": null,
            "line": 18
          },
          {
            "module": "logging",
            "alias": null,
            "line": 19
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 20
          },
          {
            "module": "traceback",
            "alias": null,
            "line": 21
          },
          {
            "module": "datetime.datetime",
            "from": "datetime",
            "name": "datetime",
            "alias": null,
            "line": 22
          },
          {
            "module": "functools.wraps",
            "from": "functools",
            "name": "wraps",
            "alias": null,
            "line": 23
          },
          {
            "module": "enum.Enum",
            "from": "enum",
            "name": "Enum",
            "alias": null,
            "line": 24
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 25
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 25
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 25
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 25
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 25
          }
        ],
        "patterns": [
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "LogLevel",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 28,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "class_definition",
            "name": "DebugLog",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 43,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "DebugLog._setup_logger",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 63,
            "priority": "medium",
            "reason": "Has side effects"
          },
          {
            "type": "function",
            "name": "DebugLog.should_log",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 105,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.trace",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 157,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.debug",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 161,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.info",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 165,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.warn",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 169,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.error",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 173,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.fatal",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 177,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.exception",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 181,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.set_component_level",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 198,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "DebugLog.set_enabled",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 210,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "JsonLogFormatter",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 222,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "JsonLogFormatter.format",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 225,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "log_function",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 259,
            "priority": "high",
            "reason": "High complexity"
          },
          {
            "type": "function",
            "name": "decorator",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 278,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "wrapper",
            "file": "/Users/cskoons/projects/github/Tekton/shared/debug/debug_utils.py",
            "line": 280,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 321,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the get config tool.\n\nArgs:\n    config_getter: Function that returns current configuration\n    allowed_keys: Optional list of allowed configuration keys",
            "args": [
              "self",
              "config_getter",
              "allowed_keys"
            ],
            "class": "GetConfigTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 32,
            "async": true,
            "decorators": [],
            "docstring": "Get configuration values.\n\nArgs:\n    key: Optional specific key to retrieve (dot notation supported)\n    format: Output format (json, yaml, text)\n    \nReturns:\n    Configuration value(s)",
            "args": [
              "self",
              "key",
              "format"
            ],
            "class": "GetConfigTool",
            "complexity": "high",
            "has_side_effects": false
          },
          {
            "name": "get_input_schema",
            "line": 79,
            "async": false,
            "decorators": [],
            "docstring": "Get the input schema.",
            "args": [
              "self"
            ],
            "class": "GetConfigTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__init__",
            "line": 111,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the set config tool.\n\nArgs:\n    config_setter: Function to set configuration value (key, value) -> success\n    allowed_keys: Optional list of allowed configuration keys\n    require_confirmation: Whether to require confirmation",
            "args": [
              "self",
              "config_setter",
              "allowed_keys",
              "require_confirmation"
            ],
            "class": "SetConfigTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 130,
            "async": true,
            "decorators": [],
            "docstring": "Set a configuration value.\n\nArgs:\n    key: Configuration key to set\n    value: Value to set\n    confirm: Confirmation flag\n    \nReturns:\n    Operation result",
            "args": [
              "self",
              "key",
              "value",
              "confirm"
            ],
            "class": "SetConfigTool",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_input_schema",
            "line": 184,
            "async": false,
            "decorators": [],
            "docstring": "Get the input schema.",
            "args": [
              "self"
            ],
            "class": "SetConfigTool",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "GetConfigTool",
            "line": 9,
            "methods": [
              "__init__",
              "get_input_schema"
            ],
            "decorators": [],
            "docstring": "Tool for retrieving configuration values.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SetConfigTool",
            "line": 104,
            "methods": [
              "__init__",
              "get_input_schema"
            ],
            "decorators": [],
            "docstring": "Tool for updating configuration values.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 3
          },
          {
            "module": "json",
            "alias": null,
            "line": 4
          },
          {
            "module": "base.tool.MCPTool",
            "from": "base.tool",
            "name": "MCPTool",
            "alias": null,
            "line": 6
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "GetConfigTool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
            "line": 9,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "GetConfigTool.execute",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
            "line": 32,
            "priority": "high",
            "reason": "Async function, High complexity"
          },
          {
            "type": "function",
            "name": "GetConfigTool.get_input_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
            "line": 79,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "class_definition",
            "name": "SetConfigTool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
            "line": 104,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SetConfigTool.execute",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
            "line": 130,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SetConfigTool.get_input_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/config.py",
            "line": 184,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 208,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/health.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 16,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the health check tool.\n\nArgs:\n    component_name: Name of the component\n    health_check_func: Optional custom health check function",
            "args": [
              "self",
              "component_name",
              "health_check_func"
            ],
            "class": "HealthCheckTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 29,
            "async": true,
            "decorators": [],
            "docstring": "Execute health check.\n\nArgs:\n    detailed: Whether to include detailed health information\n    \nReturns:\n    Health status information",
            "args": [
              "self",
              "detailed"
            ],
            "class": "HealthCheckTool",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "_format_uptime",
            "line": 73,
            "async": false,
            "decorators": [],
            "docstring": "Format uptime in human-readable format.",
            "args": [
              "self",
              "seconds"
            ],
            "class": "HealthCheckTool",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "get_input_schema",
            "line": 91,
            "async": false,
            "decorators": [],
            "docstring": "Get the input schema for the health check tool.",
            "args": [
              "self"
            ],
            "class": "HealthCheckTool",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HealthCheckTool",
            "line": 9,
            "methods": [
              "__init__",
              "_format_uptime",
              "get_input_schema"
            ],
            "decorators": [],
            "docstring": "Tool for checking component health status.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 3
          },
          {
            "module": "time",
            "alias": null,
            "line": 4
          },
          {
            "module": "base.tool.MCPTool",
            "from": "base.tool",
            "name": "MCPTool",
            "alias": null,
            "line": 6
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 107
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HealthCheckTool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/health.py",
            "line": 9,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HealthCheckTool.execute",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/health.py",
            "line": 29,
            "priority": "high",
            "reason": "Async function, Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "HealthCheckTool.get_input_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/health.py",
            "line": 91,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 107,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/info.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 15,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the component info tool.\n\nArgs:\n    component_name: Name of the component\n    component_version: Version of the component\n    component_description: Description of the component\n    capabilities: List of component capabilities\n    metadata: Additional metadata",
            "args": [
              "self",
              "component_name",
              "component_version",
              "component_description",
              "capabilities",
              "metadata"
            ],
            "class": "ComponentInfoTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 40,
            "async": true,
            "decorators": [],
            "docstring": "Get component information.\n\nArgs:\n    include_capabilities: Whether to include capabilities list\n    \nReturns:\n    Component information",
            "args": [
              "self",
              "include_capabilities"
            ],
            "class": "ComponentInfoTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_input_schema",
            "line": 65,
            "async": false,
            "decorators": [],
            "docstring": "Get the input schema for the component info tool.",
            "args": [
              "self"
            ],
            "class": "ComponentInfoTool",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "ComponentInfoTool",
            "line": 8,
            "methods": [
              "__init__",
              "get_input_schema"
            ],
            "decorators": [],
            "docstring": "Tool for getting component information.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 3
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 3
          },
          {
            "module": "base.tool.MCPTool",
            "from": "base.tool",
            "name": "MCPTool",
            "alias": null,
            "line": 5
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "ComponentInfoTool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/info.py",
            "line": 8,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "ComponentInfoTool.execute",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/info.py",
            "line": 40,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "ComponentInfoTool.get_input_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/tools/info.py",
            "line": 65,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 77,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/config/settings.py",
      "analysis": {
        "functions": [
          {
            "name": "from_env",
            "line": 44,
            "async": false,
            "decorators": [
              "@classmethod"
            ],
            "docstring": "Create MCP config from environment variables.\n\nArgs:\n    component_name: Name of the component\n    \nReturns:\n    MCPConfig instance",
            "args": [
              "cls",
              "component_name"
            ],
            "class": "MCPConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_tool_name",
            "line": 80,
            "async": false,
            "decorators": [],
            "docstring": "Get the full tool name with prefix if configured.\n\nArgs:\n    name: Base tool name\n    \nReturns:\n    Full tool name",
            "args": [
              "self",
              "name"
            ],
            "class": "MCPConfig",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "to_env_dict",
            "line": 94,
            "async": false,
            "decorators": [],
            "docstring": "Convert config to environment variable dictionary.\n\nReturns:\n    Dictionary of environment variables",
            "args": [
              "self"
            ],
            "class": "MCPConfig",
            "complexity": "medium",
            "has_side_effects": true
          }
        ],
        "classes": [
          {
            "name": "MCPConfig",
            "line": 14,
            "methods": [
              "from_env",
              "get_tool_name",
              "to_env_dict"
            ],
            "decorators": [],
            "docstring": "Configuration for MCP services.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "os",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 9
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 9
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 11
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPConfig",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/config/settings.py",
            "line": 14,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPConfig.from_env",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/config/settings.py",
            "line": 44,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPConfig.get_tool_name",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/config/settings.py",
            "line": 80,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPConfig.to_env_dict",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/config/settings.py",
            "line": 94,
            "priority": "high",
            "reason": "Has side effects"
          }
        ]
      },
      "line_count": 126,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 30,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the Hermes MCP client.\n\nArgs:\n    hermes_url: Base URL of Hermes (defaults to http://localhost:8001)\n    component_name: Name of the component\n    component_port: Port where component is running (for tool execution callbacks)\n    component_version: Version of the component\n    auth_token: Optional authentication token\n    timeout: Request timeout in seconds",
            "args": [
              "self",
              "hermes_url",
              "component_name",
              "component_port",
              "component_version",
              "auth_token",
              "timeout"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "health_check",
            "line": 74,
            "async": true,
            "decorators": [],
            "docstring": "Check if Hermes MCP service is healthy.\n\nReturns:\n    Health status information",
            "args": [
              "self"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool",
            "line": 102,
            "async": true,
            "decorators": [],
            "docstring": "Register a tool with Hermes.\n\nArgs:\n    name: Tool name (will be prefixed with component name if not already)\n    description: Tool description\n    input_schema: JSON Schema for tool input\n    output_schema: Output schema (currently not used by Hermes)\n    handler: Tool handler function (ignored - execution handled via endpoints)\n    tags: Optional tags for categorization\n    metadata: Optional additional metadata\n    \nReturns:\n    Tool ID if successful, None otherwise",
            "args": [
              "self",
              "name",
              "description",
              "input_schema",
              "output_schema",
              "handler",
              "tags",
              "metadata"
            ],
            "class": "HermesMCPClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "unregister_tool",
            "line": 176,
            "async": true,
            "decorators": [],
            "docstring": "Unregister a tool from Hermes.\n\nArgs:\n    tool_id: Tool ID to unregister\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "tool_id"
            ],
            "class": "HermesMCPClient",
            "complexity": "medium",
            "has_side_effects": true
          },
          {
            "name": "list_tools",
            "line": 210,
            "async": true,
            "decorators": [],
            "docstring": "List all tools registered with Hermes.\n\nReturns:\n    List of tool specifications",
            "args": [
              "self"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 232,
            "async": true,
            "decorators": [],
            "docstring": "Get MCP capabilities from Hermes.\n\nReturns:\n    Capabilities information",
            "args": [
              "self"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_remote_tool",
            "line": 254,
            "async": true,
            "decorators": [],
            "docstring": "Execute a tool registered with Hermes.\n\nArgs:\n    tool_id: Tool ID\n    parameters: Tool parameters\n    context: Optional execution context\n    \nReturns:\n    Execution result",
            "args": [
              "self",
              "tool_id",
              "parameters",
              "context"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 298,
            "async": true,
            "decorators": [],
            "docstring": "Send a message to Hermes for processing.\n\nArgs:\n    message: MCP message to process\n    \nReturns:\n    Processing result",
            "args": [
              "self",
              "message"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 330,
            "async": true,
            "decorators": [],
            "docstring": "Create a context in Hermes.\n\nArgs:\n    data: Context data\n    context_id: Optional context ID\n    \nReturns:\n    Context ID if successful",
            "args": [
              "self",
              "data",
              "context_id"
            ],
            "class": "HermesMCPClient",
            "complexity": "medium",
            "has_side_effects": false
          },
          {
            "name": "update_context",
            "line": 374,
            "async": true,
            "decorators": [],
            "docstring": "Update a context in Hermes.\n\nArgs:\n    context_id: Context ID\n    updates: Updates to apply\n    operation: Update operation type\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "context_id",
              "updates",
              "operation"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_context",
            "line": 417,
            "async": true,
            "decorators": [],
            "docstring": "Get a context from Hermes.\n\nArgs:\n    context_id: Context ID\n    \nReturns:\n    Context data if found",
            "args": [
              "self",
              "context_id"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "cleanup",
            "line": 442,
            "async": true,
            "decorators": [],
            "docstring": "Cleanup by unregistering all tools registered by this client.",
            "args": [
              "self"
            ],
            "class": "HermesMCPClient",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "HermesMCPClient",
            "line": 27,
            "methods": [
              "__init__"
            ],
            "decorators": [],
            "docstring": "Client for connecting to Hermes MCP aggregator.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 8
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 9
          },
          {
            "module": "os",
            "alias": null,
            "line": 10
          },
          {
            "module": "sys",
            "alias": null,
            "line": 11
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 12
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 12
          },
          {
            "module": "aiohttp",
            "alias": null,
            "line": 13
          },
          {
            "module": "json",
            "alias": null,
            "line": 14
          },
          {
            "module": "shared.utils.env_config.get_component_config",
            "from": "shared.utils.env_config",
            "name": "get_component_config",
            "alias": null,
            "line": 21
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 22
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "HermesMCPClient",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 27,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.health_check",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 74,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.register_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 102,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.unregister_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 176,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.list_tools",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 210,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 232,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.execute_remote_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 254,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.process_message",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 298,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.create_context",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 330,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.update_context",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 374,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.get_context",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 417,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "HermesMCPClient.cleanup",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/client/hermes_client.py",
            "line": 442,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 448,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 25,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the MCP service.\n\nArgs:\n    component_name: Name of the component\n    component_version: Version of the component\n    hermes_url: URL of Hermes MCP aggregator (optional)",
            "args": [
              "self",
              "component_name",
              "component_version",
              "hermes_url"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "initialize",
            "line": 54,
            "async": true,
            "decorators": [],
            "docstring": "Initialize the MCP service and register default tools.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_default_tools",
            "line": 68,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Register default tools for this component.\n\nThis method should be implemented by each component to register\ntheir specific tools.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_tool",
            "line": 77,
            "async": true,
            "decorators": [],
            "docstring": "Register a tool with the MCP service.\n\nArgs:\n    name: Tool name\n    description: Tool description\n    input_schema: JSON Schema for tool input\n    handler: Async function to handle tool execution\n    tags: Optional tags for categorization\n    metadata: Optional additional metadata\n    \nReturns:\n    Tool ID",
            "args": [
              "self",
              "name",
              "description",
              "input_schema",
              "handler",
              "tags",
              "metadata"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute_tool",
            "line": 121,
            "async": true,
            "decorators": [],
            "docstring": "Execute a registered tool.\n\nArgs:\n    tool_id: Tool ID\n    parameters: Tool parameters\n    context: Optional execution context\n    \nReturns:\n    Tool execution result",
            "args": [
              "self",
              "tool_id",
              "parameters",
              "context"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "process_message",
            "line": 164,
            "async": true,
            "decorators": [],
            "docstring": "Process an MCP message.\n\nArgs:\n    message: MCP message to process\n    \nReturns:\n    Processing result",
            "args": [
              "self",
              "message"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_message_handler",
            "line": 185,
            "async": false,
            "decorators": [],
            "docstring": "Register a message handler.\n\nArgs:\n    message_type: Type of message to handle\n    handler: Async function to handle the message",
            "args": [
              "self",
              "message_type",
              "handler"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "create_context",
            "line": 200,
            "async": true,
            "decorators": [],
            "docstring": "Create a new context.\n\nArgs:\n    context_id: Optional context ID (generated if not provided)\n    data: Initial context data\n    metadata: Context metadata\n    \nReturns:\n    Context ID",
            "args": [
              "self",
              "context_id",
              "data",
              "metadata"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "update_context",
            "line": 230,
            "async": true,
            "decorators": [],
            "docstring": "Update an existing context.\n\nArgs:\n    context_id: Context ID\n    updates: Updates to apply\n    \nReturns:\n    Success status",
            "args": [
              "self",
              "context_id",
              "updates"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "get_context",
            "line": 255,
            "async": false,
            "decorators": [],
            "docstring": "Get a context by ID.",
            "args": [
              "self",
              "context_id"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "list_tools",
            "line": 259,
            "async": false,
            "decorators": [],
            "docstring": "List all registered tools.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_capabilities",
            "line": 263,
            "async": false,
            "decorators": [],
            "docstring": "Get MCP capabilities for this service.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_features",
            "line": 275,
            "async": false,
            "decorators": [],
            "docstring": "Get list of supported features.\n\nOverride this method to specify component-specific features.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "register_with_hermes",
            "line": 283,
            "async": true,
            "decorators": [],
            "docstring": "Register this MCP service with Hermes.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "shutdown",
            "line": 292,
            "async": true,
            "decorators": [],
            "docstring": "Shutdown the MCP service.",
            "args": [
              "self"
            ],
            "class": "MCPService",
            "complexity": "low",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPService",
            "line": 17,
            "methods": [
              "__init__",
              "register_message_handler",
              "get_context",
              "list_tools",
              "get_capabilities",
              "get_features"
            ],
            "decorators": [],
            "docstring": "Base class for implementing MCP services in Tekton components.\n\nThis class provides the foundation for components to expose their\nfunctionality through the MCP protocol.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "logging",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 8
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 8
          },
          {
            "module": "abc.ABC",
            "from": "abc",
            "name": "ABC",
            "alias": null,
            "line": 9
          },
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 9
          },
          {
            "module": "asyncio",
            "alias": null,
            "line": 10
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 12
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          },
          {
            "type": "error_handling",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPService",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 17,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPService.initialize",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 54,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.register_default_tools",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 68,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.register_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 77,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.execute_tool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 121,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.process_message",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 164,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.register_message_handler",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 185,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPService.create_context",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 200,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.update_context",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 230,
            "priority": "high",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "function",
            "name": "MCPService.get_context",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 255,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPService.list_tools",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 259,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPService.get_capabilities",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 263,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPService.get_features",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 275,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPService.register_with_hermes",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 283,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPService.shutdown",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/service.py",
            "line": 292,
            "priority": "high",
            "reason": "Async function"
          }
        ]
      },
      "line_count": 295,
      "has_tests": false
    },
    {
      "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
      "analysis": {
        "functions": [
          {
            "name": "__init__",
            "line": 32,
            "async": false,
            "decorators": [],
            "docstring": "Initialize the tool.",
            "args": [
              "self"
            ],
            "class": "MCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "_validate_metadata",
            "line": 36,
            "async": false,
            "decorators": [],
            "docstring": "Validate that required metadata is provided.",
            "args": [
              "self"
            ],
            "class": "MCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 44,
            "async": true,
            "decorators": [
              "@abstractmethod"
            ],
            "docstring": "Execute the tool with given parameters.\n\nThis method should be implemented by each tool to perform its\nspecific functionality.\n\nArgs:\n    **kwargs: Tool-specific parameters\n    \nReturns:\n    Tool execution result",
            "args": [
              "self"
            ],
            "class": "MCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_input_schema",
            "line": 59,
            "async": false,
            "decorators": [],
            "docstring": "Get the JSON Schema for tool input.\n\nThis method introspects the execute method to build a schema.\nOverride this method to provide a custom schema.\n\nReturns:\n    JSON Schema dictionary",
            "args": [
              "self"
            ],
            "class": "MCPTool",
            "complexity": "high",
            "has_side_effects": true
          },
          {
            "name": "get_spec",
            "line": 123,
            "async": false,
            "decorators": [],
            "docstring": "Get the complete tool specification.\n\nReturns:\n    Tool specification dictionary",
            "args": [
              "self"
            ],
            "class": "MCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_metadata",
            "line": 138,
            "async": false,
            "decorators": [],
            "docstring": "Get additional tool metadata.\n\nOverride this method to provide custom metadata.\n\nReturns:\n    Metadata dictionary",
            "args": [
              "self"
            ],
            "class": "MCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "__call__",
            "line": 152,
            "async": true,
            "decorators": [],
            "docstring": "Make the tool callable.\n\nThis allows the tool to be used as a handler function.\n\nArgs:\n    parameters: Tool parameters\n    context: Optional execution context\n    \nReturns:\n    Tool execution result",
            "args": [
              "self",
              "parameters",
              "context"
            ],
            "class": "MCPTool",
            "complexity": "low",
            "has_side_effects": true
          },
          {
            "name": "__init__",
            "line": 176,
            "async": false,
            "decorators": [],
            "docstring": "Initialize a simple tool from a function.\n\nArgs:\n    func: The function to wrap\n    name: Tool name (defaults to function name)\n    description: Tool description (defaults to function docstring)\n    tags: Tool tags",
            "args": [
              "self",
              "func",
              "name",
              "description",
              "tags"
            ],
            "class": "SimpleMCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "execute",
            "line": 199,
            "async": true,
            "decorators": [],
            "docstring": "Execute the wrapped function.",
            "args": [
              "self"
            ],
            "class": "SimpleMCPTool",
            "complexity": "low",
            "has_side_effects": false
          },
          {
            "name": "get_input_schema",
            "line": 207,
            "async": false,
            "decorators": [],
            "docstring": "Get schema from the wrapped function.",
            "args": [
              "self"
            ],
            "class": "SimpleMCPTool",
            "complexity": "medium",
            "has_side_effects": false
          }
        ],
        "classes": [
          {
            "name": "MCPTool",
            "line": 18,
            "methods": [
              "__init__",
              "_validate_metadata",
              "get_input_schema",
              "get_spec",
              "get_metadata"
            ],
            "decorators": [],
            "docstring": "Base class for MCP tools.\n\nThis class provides a standardized way to define tools that can be\nexposed through MCP. Each tool should inherit from this class and\nimplement the execute method.",
            "is_singleton": false,
            "landmark_priority": "high"
          },
          {
            "name": "SimpleMCPTool",
            "line": 169,
            "methods": [
              "__init__",
              "get_input_schema"
            ],
            "decorators": [],
            "docstring": "Simple MCP tool that can be created from a function.\n\nThis is useful for quickly wrapping existing functions as MCP tools.",
            "is_singleton": false,
            "landmark_priority": "high"
          }
        ],
        "api_endpoints": [],
        "mcp_tools": [],
        "websocket_handlers": [],
        "decorators": [],
        "imports": [
          {
            "module": "typing.Dict",
            "from": "typing",
            "name": "Dict",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Any",
            "from": "typing",
            "name": "Any",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Optional",
            "from": "typing",
            "name": "Optional",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.List",
            "from": "typing",
            "name": "List",
            "alias": null,
            "line": 7
          },
          {
            "module": "typing.Callable",
            "from": "typing",
            "name": "Callable",
            "alias": null,
            "line": 7
          },
          {
            "module": "abc.ABC",
            "from": "abc",
            "name": "ABC",
            "alias": null,
            "line": 8
          },
          {
            "module": "abc.abstractmethod",
            "from": "abc",
            "name": "abstractmethod",
            "alias": null,
            "line": 8
          },
          {
            "module": "inspect",
            "alias": null,
            "line": 9
          },
          {
            "module": "logging",
            "alias": null,
            "line": 10
          },
          {
            "module": "pydantic.BaseModel",
            "from": "pydantic",
            "name": "BaseModel",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.Field",
            "from": "pydantic",
            "name": "Field",
            "alias": null,
            "line": 12
          },
          {
            "module": "pydantic.create_model",
            "from": "pydantic",
            "name": "create_model",
            "alias": null,
            "line": 12
          },
          {
            "module": "tekton.models.TektonBaseModel",
            "from": "tekton.models",
            "name": "TektonBaseModel",
            "alias": null,
            "line": 13
          },
          {
            "module": "typing.Union",
            "from": "typing",
            "name": "Union",
            "alias": null,
            "line": 255
          }
        ],
        "patterns": [
          {
            "type": "mcp",
            "location": "file",
            "line": 0
          },
          {
            "type": "async",
            "location": "file",
            "line": 0
          }
        ],
        "side_effects": [],
        "landmarks": [
          {
            "type": "class_definition",
            "name": "MCPTool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 18,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "MCPTool.execute",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 44,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "MCPTool.get_input_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 59,
            "priority": "high",
            "reason": "Has side effects, High complexity"
          },
          {
            "type": "function",
            "name": "MCPTool.get_spec",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 123,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPTool.get_metadata",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 138,
            "priority": "high",
            "reason": "Public function"
          },
          {
            "type": "function",
            "name": "MCPTool.__call__",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 152,
            "priority": "medium",
            "reason": "Async function, Has side effects"
          },
          {
            "type": "class_definition",
            "name": "SimpleMCPTool",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 169,
            "priority": "high",
            "reason": "Class definition"
          },
          {
            "type": "function",
            "name": "SimpleMCPTool.execute",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 199,
            "priority": "high",
            "reason": "Async function"
          },
          {
            "type": "function",
            "name": "SimpleMCPTool.get_input_schema",
            "file": "/Users/cskoons/projects/github/Tekton/shared/mcp/base/tool.py",
            "line": 207,
            "priority": "high",
            "reason": "Public function"
          }
        ]
      },
      "line_count": 255,
      "has_tests": false
    }
  ],
  "summary": {
    "total_files": 33,
    "total_functions": 292,
    "total_classes": 58,
    "total_landmarks": 302,
    "patterns": [
      "singleton",
      "async",
      "fastapi",
      "error_handling",
      "websocket",
      "mcp"
    ],
    "api_endpoints": 6,
    "mcp_tools": 0,
    "websocket_handlers": 0,
    "skipped_files": 11
  }
}