{
  "name": "LLM Integration Example",
  "description": "Example execution plan demonstrating Synthesis LLM integration capabilities",
  "steps": [
    {
      "id": "step1",
      "type": "variable",
      "parameters": {
        "operation": "set",
        "name": "task_description",
        "value": "Analyze a log file for error patterns"
      }
    },
    {
      "id": "step2",
      "type": "command",
      "parameters": {
        "command": "echo 'Simulating log data generation...'; echo '[ERROR] Connection timeout at 2025-05-01 14:22:13' > sample_log.txt; echo '[INFO] Retry attempt 1 initiated' >> sample_log.txt; echo '[ERROR] Database query failed: invalid SQL syntax' >> sample_log.txt; echo '[WARN] Connection unstable, may affect performance' >> sample_log.txt; echo '[ERROR] Authentication failed for user admin' >> sample_log.txt; cat sample_log.txt"
      }
    },
    {
      "id": "step3",
      "type": "command",
      "parameters": {
        "command": "cat sample_log.txt",
        "store_variable": "log_content"
      }
    },
    {
      "id": "step4",
      "type": "llm",
      "parameters": {
        "prompt": "Analyze the following log file for error patterns and provide recommendations:\n\n$log_content",
        "system_prompt": "You are a log analysis assistant. Identify patterns in log files, categorize errors by type, and provide actionable recommendations to address issues.",
        "store_variable": "log_analysis",
        "temperature": 0.2,
        "max_tokens": 1000
      }
    },
    {
      "id": "step5",
      "type": "variable",
      "parameters": {
        "operation": "set",
        "name": "error_categories",
        "value": ["connectivity", "database", "authentication"]
      }
    },
    {
      "id": "step6",
      "type": "llm",
      "parameters": {
        "prompt": "Categorize the errors in the log file into these categories: $error_categories\n\nLog content:\n$log_content",
        "system_prompt": "You are an error categorization assistant. Categorize errors into the specified categories and return a JSON object with counts for each category.",
        "store_variable": "categorized_errors",
        "mode": "chat"
      }
    },
    {
      "id": "step7",
      "type": "llm",
      "parameters": {
        "mode": "generate_command",
        "instruction": "Create a shell command that will count the occurrences of each error type in the log file",
        "store_variable": "error_count_command"
      }
    },
    {
      "id": "step8",
      "type": "command",
      "parameters": {
        "command": "$error_count_command"
      }
    },
    {
      "id": "step9",
      "type": "llm",
      "parameters": {
        "mode": "enhance_plan",
        "plan": {
          "name": "Log Monitoring",
          "steps": [
            {
              "id": "monitor1",
              "type": "command",
              "parameters": {
                "command": "tail -f /var/log/system.log"
              }
            },
            {
              "id": "monitor2",
              "type": "notify",
              "parameters": {
                "message": "Log monitoring started"
              }
            }
          ]
        },
        "store_variable": "enhanced_monitoring_plan"
      }
    },
    {
      "id": "step10",
      "type": "variable",
      "parameters": {
        "operation": "print",
        "name": "log_analysis"
      }
    },
    {
      "id": "step11",
      "type": "variable",
      "parameters": {
        "operation": "print",
        "name": "categorized_errors"
      }
    },
    {
      "id": "step12",
      "type": "variable",
      "parameters": {
        "operation": "print",
        "name": "enhanced_monitoring_plan"
      }
    },
    {
      "id": "step13",
      "type": "command",
      "parameters": {
        "command": "rm sample_log.txt"
      }
    }
  ]
}