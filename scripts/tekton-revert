#!/usr/bin/env python3
"""
Tekton Git Revert Tool - Single Repository Version

A safety-first tool for reverting uncommitted changes in the Tekton project.
Now handles Tekton as a single, flattened repository.

Usage:
    tekton-revert              # Show files that would be reverted, then exit
    tekton-revert -s           # Show files and prompt for confirmation
    tekton-revert -i           # Interactive mode - choose each file
    tekton-revert -c COMPONENT # Only revert changes in specific component
    tekton-revert --nuclear-destruction  # Revert all changes without confirmation
"""

import os
import sys
import json
import subprocess
import argparse
from pathlib import Path
from typing import List, Dict, Tuple, Optional
from collections import defaultdict


class TektonReverter:
    """Manages reverting uncommitted changes in Tekton repository."""
    
    def __init__(self):
        self.tekton_root = self._find_tekton_root()
        
        # Add tekton root to path and check environment
        sys.path.insert(0, str(self.tekton_root))
        from shared.env import TektonEnviron
        if not TektonEnviron.is_loaded():
            print("Please run 'tekton revert'")
            sys.exit(1)
        
        # Use frozen environment
        os.environ = TektonEnviron.all()
        
        self.structure = self._load_structure()
        self.changes = defaultdict(list)
        
    def _find_tekton_root(self) -> Path:
        """Find the Tekton root directory."""
        # Start from current working directory
        current = Path.cwd()
        
        # Search upward for Tekton indicators
        for path in [current] + list(current.parents):
            # Look for .env.tekton file (most reliable indicator)
            if (path / ".env.tekton").exists():
                return path
            
            # Look for the scripts directory with tekton scripts
            if (path / "scripts" / "enhanced_tekton_launcher.py").exists():
                return path
                
        # Check TEKTON_ROOT environment variable
        if 'TEKTON_ROOT' in os.environ:
            tekton_root = Path(os.environ['TEKTON_ROOT'])
            if tekton_root.exists():
                return tekton_root
                
        raise RuntimeError("Could not find Tekton root directory")
        
    def _load_structure(self) -> Dict:
        """Load Tekton structure configuration."""
        structure_file = self.tekton_root / "config" / "tekton_structure.json"
        if not structure_file.exists():
            # Fallback to hardcoded structure
            return {
                "components": [
                    "Apollo", "Athena", "Engram", "Ergon", "Harmonia",
                    "Hephaestus", "Hermes", "Metis", "Penia",
                    "Prometheus", "Rhetor", "Sophia", "Synthesis", "Telos",
                    "Terma", "tekton-core"
                ],
                "core_directories": [
                    "shared", "scripts", "config", "MetaData", "tests", "examples"
                ]
            }
        
        with open(structure_file, 'r') as f:
            return json.load(f)
            
    def get_all_components(self) -> List[str]:
        """Get list of all Tekton components."""
        return self.structure.get("components", [])
        
    def get_file_type(self, file_path: str) -> str:
        """Determine the type of file."""
        path = Path(file_path)
        ext = path.suffix.lower()
        
        if ext in ['.py']:
            return "Python source"
        elif ext in ['.yaml', '.yml', '.json', '.toml']:
            return "Configuration"
        elif ext in ['.md', '.rst', '.txt']:
            return "Documentation"
        elif ext in ['.sh', '.bash']:
            return "Shell script"
        elif ext in ['.js', '.ts', '.jsx', '.tsx']:
            return "JavaScript/TypeScript"
        elif ext in ['.html', '.css']:
            return "Web asset"
        else:
            return "Other"
            
    def get_component_for_path(self, file_path: str) -> Optional[str]:
        """Determine which component a file belongs to."""
        path_parts = Path(file_path).parts
        if not path_parts:
            return None
            
        # Check if first directory is a component
        first_dir = path_parts[0]
        for component in self.get_all_components():
            if first_dir.lower() == component.lower():
                return component
        
        # Check core directories
        if first_dir in self.structure.get("core_directories", []):
            return "core"
            
        return None
        
    def collect_changes(self, components: Optional[List[str]] = None) -> Dict[str, List[Tuple[str, str]]]:
        """Collect all uncommitted changes in the repository."""
        changes_by_component = defaultdict(list)
        
        try:
            # Get both staged and unstaged changes
            result = subprocess.run(
                ["git", "status", "--porcelain"],
                cwd=self.tekton_root,
                capture_output=True,
                text=True,
                check=True
            )
            
            for line in result.stdout.strip().split('\n'):
                if not line or len(line) < 3:
                    continue
                    
                # Git status --porcelain format: XY filename
                status = line[:2]
                file_path = line[2:].strip()
                
                if not file_path:
                    continue
                
                # Determine which component this file belongs to
                component = self.get_component_for_path(file_path)
                
                # Apply component filter if specified
                if components:
                    if component is None:
                        continue
                    if component == "core" and "core" not in components:
                        continue
                    if component not in ["core", None] and component.lower() not in [c.lower() for c in components]:
                        continue
                
                # Group by component
                if component:
                    changes_by_component[component].append((status, file_path))
                else:
                    changes_by_component["root"].append((status, file_path))
                    
        except subprocess.CalledProcessError as e:
            print(f"Error getting git status: {e}")
            sys.exit(1)
            
        return dict(changes_by_component)
        
    def display_changes(self, changes: Dict[str, List[Tuple[str, str]]]) -> int:
        """Display changes in a formatted way. Returns total file count."""
        if not changes:
            print("No uncommitted changes found.")
            return 0
            
        total_files = 0
        print("Uncommitted changes in Tekton repository:\n")
        
        # Define status mapping
        status_map = {
            'M ': 'Modified (staged)',
            ' M': 'Modified',
            'MM': 'Modified (staged+unstaged)',
            'A ': 'Added (staged)',
            'AM': 'Added (staged+modified)',
            ' A': 'Added (unstaged)',
            'D ': 'Deleted (staged)',
            ' D': 'Deleted',
            'R ': 'Renamed',
            'C ': 'Copied',
            'U ': 'Updated but unmerged',
            '??': 'Untracked'
        }
        
        # Sort components: core first, then alphabetically, then root
        sorted_components = []
        if "core" in changes:
            sorted_components.append("core")
        for comp in sorted(changes.keys()):
            if comp not in ["core", "root"]:
                sorted_components.append(comp)
        if "root" in changes:
            sorted_components.append("root")
        
        # Display changes by component
        for component in sorted_components:
            files = changes[component]
            if not files:
                continue
                
            # Format component name
            if component == "core":
                print(f"Core directories (shared, scripts, config, etc.):")
            elif component == "root":
                print(f"Root level files:")
            else:
                print(f"{component} component:")
            
            # Group by file type
            file_types = defaultdict(list)
            for status, file_path in sorted(files):
                file_type = self.get_file_type(file_path)
                status_text = status_map.get(status, f"Status: {status}")
                file_types[file_type].append((status_text, file_path))
                total_files += 1
            
            # Display by file type
            for file_type, type_files in sorted(file_types.items()):
                print(f"  {file_type} ({len(type_files)} file{'s' if len(type_files) != 1 else ''}):")
                for status_text, file_path in type_files:
                    print(f"    {status_text:25} {file_path}")
            print()
            
        print(f"Total: {total_files} file{'s' if total_files != 1 else ''}")
        return total_files
        
    def revert_changes(self, changes: Dict[str, List[Tuple[str, str]]], interactive: bool = False):
        """Revert uncommitted changes."""
        reverted = 0
        skipped = 0
        
        # Flatten changes for processing
        all_changes = []
        for component, files in sorted(changes.items()):
            for status, file_path in files:
                all_changes.append((component, status, file_path))
        
        for i, (component, status, file_path) in enumerate(all_changes):
            if interactive:
                # Interactive mode
                while True:
                    prompt = f"Revert {file_path} [{component}]? [y/n/Y/N]: "
                    response = input(prompt).strip()
                    
                    if response == 'Y':
                        # Revert this and all remaining
                        interactive = False
                        break
                    elif response == 'N':
                        # Skip this and all remaining
                        print("Skipping remaining files.")
                        return reverted, skipped + len(all_changes) - i
                    elif response == 'y':
                        break
                    elif response == 'n':
                        skipped += 1
                        break
                
                if response == 'n':
                    continue
                    
            # Revert the file based on its status
            try:
                if status == '??':
                    # Untracked file - remove it
                    file_to_remove = self.tekton_root / file_path
                    if file_to_remove.exists():
                        if file_to_remove.is_dir():
                            import shutil
                            shutil.rmtree(file_to_remove)
                        else:
                            file_to_remove.unlink()
                        reverted += 1
                else:
                    # Tracked file - use git checkout/restore
                    # First, unstage if needed
                    if status[0] != ' ':  # File is staged
                        subprocess.run(
                            ["git", "reset", "HEAD", file_path],
                            cwd=self.tekton_root,
                            check=True,
                            capture_output=True
                        )
                    
                    # Then restore to HEAD version
                    subprocess.run(
                        ["git", "checkout", "HEAD", "--", file_path],
                        cwd=self.tekton_root,
                        check=True,
                        capture_output=True
                    )
                    reverted += 1
            except (subprocess.CalledProcessError, OSError) as e:
                print(f"Error reverting {file_path}: {e}")
                    
        return reverted, skipped
        
    def run(self, args):
        """Main execution logic."""
        # Parse component argument
        components = None
        if args.component:
            # Split by comma and validate
            components = [c.strip() for c in args.component.split(',')]
            
            # Special handling for "core"
            valid_components = [c.lower() for c in self.get_all_components()] + ["core"]
            
            invalid = [c for c in components if c.lower() not in valid_components]
            if invalid:
                print(f"Error: Unknown component(s): {', '.join(invalid)}")
                print(f"Valid components: {', '.join(self.get_all_components() + ['core'])}")
                sys.exit(1)
        
        # Collect changes
        changes = self.collect_changes(components)
        
        # Display changes
        total_files = self.display_changes(changes)
        
        if total_files == 0:
            return
            
        # Handle different modes
        if args.nuclear_destruction:
            # No confirmation needed
            print("\nInitiating nuclear destruction...")
            reverted, skipped = self.revert_changes(changes)
            print(f"\nReverted {reverted} file{'s' if reverted != 1 else ''}.")
            
        elif args.show or args.interactive:
            # Prompt for confirmation
            if args.interactive:
                print("\nInteractive mode:")
                print("  y = revert this file")
                print("  n = skip this file")
                print("  Y = revert all remaining files")
                print("  N = skip all remaining files\n")
                response = 'y'  # Proceed to interactive
            else:
                response = input(f"\nRevert {total_files} file{'s' if total_files != 1 else ''} [y/n]? ").strip()
            
            if response.lower() == 'y':
                reverted, skipped = self.revert_changes(changes, interactive=args.interactive)
                if skipped > 0:
                    print(f"\nReverted {reverted} file{'s' if reverted != 1 else ''}, skipped {skipped} file{'s' if skipped != 1 else ''}.")
                else:
                    print(f"\nReverted {reverted} file{'s' if reverted != 1 else ''}.")
            else:
                print("No changes made.")
        else:
            # Default mode - just show and exit
            print("\nNo changes made. Use -s to confirm reverting or -i for interactive mode.")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Safely revert uncommitted changes in Tekton repository",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  tekton-revert                    # Show what would be reverted
  tekton-revert -s                 # Show and confirm before reverting
  tekton-revert -i                 # Interactive mode
  tekton-revert -c rhetor          # Only show Rhetor changes
  tekton-revert -c apollo,hermes   # Only show Apollo and Hermes changes
  tekton-revert -c core            # Only show core directory changes
  tekton-revert --nuclear-destruction  # Revert without confirmation
        """
    )
    
    parser.add_argument('-s', '--show', action='store_true',
                       help='Show files and prompt for confirmation')
    parser.add_argument('-i', '--interactive', action='store_true',
                       help='Interactive mode - choose each file')
    parser.add_argument('-c', '--component', type=str,
                       help='Only revert changes in specific component(s), comma-separated')
    parser.add_argument('--nuclear-destruction', action='store_true',
                       help='Revert all changes without confirmation')
    
    args = parser.parse_args()
    
    try:
        reverter = TektonReverter()
        reverter.run(args)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
