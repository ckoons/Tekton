#!/usr/bin/env python3
"""
Simple Message Queue - Casey's Design

Precise flow:
1. append_request(ai, id, request) → dispatch_queue
2. next_request(ai, dispatch_queue) → get next request for AI
3. send_ai_request(ai, id, request) → send to AI
4. get_chunk(ai, id, response) → collect until finished
5. store_response(id, request, response) → store for pickup
"""

import asyncio
import json
import time
import uuid
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from collections import defaultdict


@dataclass
class Request:
    """Request in dispatch queue"""
    ai_id: str
    msg_id: str
    content: str
    timestamp: float = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = time.time()


@dataclass
class Response:
    """Stored response"""
    msg_id: str
    request: str
    response: str
    ai_id: str
    success: bool
    elapsed_time: float


class SimpleMessageQueue:
    """Simple queue - no background tasks, just data structures"""
    
    def __init__(self, debug: bool = False):
        self.debug = debug
        self.dispatch_queue: List[Request] = []
        self.responses: Dict[str, Response] = {}
        
    def append_request(self, ai_id: str, request: str) -> str:
        """Append request to dispatch queue, return msg_id"""
        msg_id = str(uuid.uuid4())
        req = Request(ai_id, msg_id, request)
        self.dispatch_queue.append(req)
        
        if self.debug:
            print(f"Queued {msg_id} for {ai_id}")
            
        return msg_id
        
    def next_request(self, ai_id: str) -> Optional[Request]:
        """Get next request for specific AI from dispatch queue"""
        for i, req in enumerate(self.dispatch_queue):
            if req.ai_id == ai_id:
                return self.dispatch_queue.pop(i)
        return None
        
    async def send_ai_request(self, ai_id: str, host: str, port: int, 
                             msg_id: str, request: str) -> bool:
        """Send request to AI and collect response"""
        start_time = time.time()
        
        try:
            # Connect to AI
            reader, writer = await asyncio.open_connection(host, port)
            
            # Send request
            message = {
                "type": "chat",
                "content": request,
                "message_id": msg_id
            }
            
            writer.write(json.dumps(message).encode('utf-8') + b'\n')
            await writer.drain()
            
            # Get chunks until complete response
            response_data = await self.get_chunks(reader)
            
            # Store response
            self.store_response(
                msg_id=msg_id,
                request=request,
                response=response_data,
                ai_id=ai_id,
                success=True,
                elapsed_time=time.time() - start_time
            )
            
            # Clean up
            writer.close()
            await writer.wait_closed()
            
            return True
            
        except Exception as e:
            # Store error response
            self.store_response(
                msg_id=msg_id,
                request=request,
                response=f"Error: {str(e)}",
                ai_id=ai_id,
                success=False,
                elapsed_time=time.time() - start_time
            )
            
            if self.debug:
                print(f"Failed to send to {ai_id}: {e}")
                
            return False
            
    async def get_chunks(self, reader: asyncio.StreamReader, 
                        timeout: float = 10.0) -> str:
        """Collect response chunks until complete"""
        try:
            # For now, just read one line (AI responses are line-delimited)
            response_data = await asyncio.wait_for(
                reader.readline(),
                timeout=timeout
            )
            
            if response_data:
                response = json.loads(response_data.decode('utf-8').strip())
                # Extract the actual response content
                return response.get('response', response.get('content', str(response)))
            else:
                return "No response received"
                
        except asyncio.TimeoutError:
            return "Timeout waiting for response"
        except Exception as e:
            return f"Error reading response: {e}"
            
    def store_response(self, msg_id: str, request: str, response: str,
                      ai_id: str, success: bool, elapsed_time: float):
        """Store response for later pickup"""
        self.responses[msg_id] = Response(
            msg_id=msg_id,
            request=request,
            response=response,
            ai_id=ai_id,
            success=success,
            elapsed_time=elapsed_time
        )
        
    def get_response(self, msg_id: str) -> Optional[Response]:
        """Get response by message ID"""
        return self.responses.get(msg_id)
        
    async def dispatch_all(self, ai_configs: Dict[str, Tuple[str, int]]):
        """
        Dispatch all queued requests to their AIs.
        ai_configs: {ai_id: (host, port)}
        """
        # Group requests by AI
        ai_requests = defaultdict(list)
        while self.dispatch_queue:
            req = self.dispatch_queue.pop(0)
            ai_requests[req.ai_id].append(req)
            
        # Dispatch each AI's requests concurrently
        tasks = []
        for ai_id, requests in ai_requests.items():
            if ai_id in ai_configs:
                host, port = ai_configs[ai_id]
                for req in requests:
                    task = self.send_ai_request(
                        ai_id, host, port, req.msg_id, req.content
                    )
                    tasks.append(task)
                    
        # Wait for all to complete
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
            
    def collect_responses(self, msg_ids: List[str], 
                         timeout: float = 5.0) -> Dict[str, Response]:
        """
        Collect responses for given message IDs.
        Simple synchronous check - responses are already stored.
        """
        collected = {}
        start_time = time.time()
        
        # Keep checking until timeout or all collected
        while time.time() - start_time < timeout:
            remaining = []
            
            for msg_id in msg_ids:
                if msg_id in self.responses:
                    collected[msg_id] = self.responses[msg_id]
                else:
                    remaining.append(msg_id)
                    
            if not remaining:
                break  # Got all responses
                
            time.sleep(0.1)  # Small delay between checks
            
        return collected