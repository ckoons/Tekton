#!/usr/bin/env python3
"""
aish-proxy - AI-enhanced shell using safe shell hooks

This provides CI capabilities through shell functions/aliases
without any dangerous terminal manipulation.

Usage:
  ./aish-proxy              # Interactive mode
  ./aish-proxy -c "cmd"     # Single command (not supported yet)
"""

import sys
import os
from pathlib import Path
import logging
from datetime import datetime

# Try to import landmarks if available
try:
    from landmarks import architecture_decision, integration_point, api_contract, state_checkpoint, performance_boundary
except ImportError:
    # Landmarks not available, create no-op decorators
    def architecture_decision(name, description, rationale=""):
        def decorator(func):
            return func
        return decorator
    
    def integration_point(name, description, rationale=""):
        def decorator(func):
            return func
        return decorator
    
    def api_contract(name, description, rationale=""):
        def decorator(func):
            return func
        return decorator
    
    def state_checkpoint(name, description, rationale=""):
        def decorator(func):
            return func
        return decorator
    
    def performance_boundary(name, description, sla, rationale=""):
        def decorator(func):
            return func
        return decorator

# Get module logger using standard pattern
import logging
logger = logging.getLogger('aish-proxy')

def configure_terminal_logging():
    """Configure logging for terminal instance to append to terma.log with proper format."""
    # Get terminal info
    terminal_name = TektonEnviron.get('TEKTON_NAME', 'unknown')
    pid = os.getpid()
    
    # Set up terma.log path
    tekton_root = TektonEnviron.get('TEKTON_ROOT', '/Users/cskoons/projects/github/Tekton')
    log_file = os.path.join(tekton_root, '.tekton', 'logs', 'terma.log')
    
    # Create custom formatter with [terminal-name:pid] prefix
    formatter = logging.Formatter(f'[%(asctime)s] [{terminal_name}:{pid}] %(message)s', 
                                  datefmt='%Y-%m-%d %H:%M:%S')
    
    # Add file handler for terma.log
    file_handler = logging.FileHandler(log_file, mode='a')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    logger.setLevel(logging.INFO)

# Get the directory containing this script
script_dir = Path(__file__).resolve().parent
src_path = script_dir / 'src'

# Add src to Python path
sys.path.insert(0, str(src_path))

# Add parent paths to find shared module (we're in $TEKTON_ROOT/shared/aish)
tekton_root_for_import = script_dir.parent.parent  # Go up to $TEKTON_ROOT
if tekton_root_for_import.exists() and (tekton_root_for_import / 'shared').exists():
    sys.path.insert(0, str(tekton_root_for_import))

# Import TektonEnviron and tekton_url
from shared.env import TektonEnvironLock, TektonEnviron
from shared.urls import tekton_url

# Load environment if not already loaded
if not TektonEnviron.is_loaded():
    TektonEnvironLock.load()

import subprocess
import tempfile
import threading
import time
import json
import urllib.request
import urllib.error
from collections import deque
from datetime import datetime

# Global in-memory message storage
message_inbox = {
    'prompt': deque(maxlen=50),   # Last 50 prompt messages (high priority)
    'new': deque(maxlen=100),     # Last 100 new messages
    'keep': deque(maxlen=50)      # Last 50 kept messages
}

def write_inbox_snapshot():
    """Write inbox state to file for inbox command access."""
    try:
        # Create snapshot directory
        tekton_root = TektonEnviron.get('TEKTON_ROOT', '/Users/cskoons/projects/github/Tekton')
        snapshot_dir = os.path.join(tekton_root, ".tekton", "terma")
        os.makedirs(snapshot_dir, exist_ok=True)
        
        # Write current inbox state
        snapshot_file = os.path.join(snapshot_dir, ".inbox_snapshot")
        snapshot_data = {
            'prompt': list(message_inbox['prompt']),
            'new': list(message_inbox['new']),
            'keep': list(message_inbox['keep']),
            'session_id': TektonEnviron.get('TERMA_SESSION_ID', 'unknown'),
            'timestamp': datetime.now().isoformat()
        }
        
        # Write atomically
        temp_file = snapshot_file + '.tmp'
        with open(temp_file, 'w') as f:
            json.dump(snapshot_data, f, indent=2)
        os.rename(temp_file, snapshot_file)
        
    except Exception:
        # Don't let snapshot errors crash anything
        pass

def load_inbox_snapshot():
    """Load existing inbox snapshot into memory."""
    try:
        tekton_root = TektonEnviron.get('TEKTON_ROOT', '/Users/cskoons/projects/github/Tekton')
        snapshot_file = os.path.join(tekton_root, ".tekton", "terma", ".inbox_snapshot")
        
        if os.path.exists(snapshot_file):
            with open(snapshot_file, 'r') as f:
                data = json.load(f)
            
            # Load into deques
            message_inbox['prompt'] = deque(data.get('prompt', []), maxlen=50)
            message_inbox['new'] = deque(data.get('new', []), maxlen=100)
            message_inbox['keep'] = deque(data.get('keep', []), maxlen=50)
    except Exception:
        pass

def cleanup_terminal_inbox():
    """Remove this terminal's inbox data when terminating."""
    try:
        session_id = TektonEnviron.get('TERMA_SESSION_ID')
        if not session_id:
            return
            
        tekton_root = TektonEnviron.get('TEKTON_ROOT', '/Users/cskoons/projects/github/Tekton')
        
        logger.info(f"Starting inbox cleanup for session {session_id}")
        
        # Clear the shared snapshot if it belongs to this terminal
        snapshot_file = os.path.join(tekton_root, ".tekton", "terma", ".inbox_snapshot")
        if os.path.exists(snapshot_file):
            try:
                with open(snapshot_file, 'r') as f:
                    data = json.load(f)
                file_session = data.get('session_id')
                
                logger.info(f"Found inbox with session {file_session}, ours is {session_id}")
                
                # Only remove if this is our session's inbox
                if file_session == session_id:
                    os.remove(snapshot_file)
                    logger.info(f"Removed inbox snapshot file for session {session_id[:8]}")
                else:
                    logger.info(f"Inbox belongs to session {file_session[:8]}, not ours ({session_id[:8]}), skipping")
            except Exception as e:
                # File might be corrupted or in use, best effort
                logger.warning(f"Error reading inbox during cleanup: {e}")
        
        # Also clean up any command files we might have created
        cmd_dir = os.path.join(tekton_root, ".tekton", "terma", "commands")
        if os.path.exists(cmd_dir):
            # Remove any pending commands from this session
            cleaned_count = 0
            for cmd_file in os.listdir(cmd_dir):
                if session_id[:8] in cmd_file:
                    try:
                        os.remove(os.path.join(cmd_dir, cmd_file))
                        cleaned_count += 1
                    except:
                        pass
            if cleaned_count > 0:
                logger.info(f"Cleaned up {cleaned_count} command files")
                        
    except Exception as e:
        # Best effort cleanup - don't crash on exit
        logger.error(f"Error during terminal inbox cleanup: {e}")

def process_inbox_commands():
    """Process any pending inbox commands from terma."""
    try:
        tekton_root = TektonEnviron.get('TEKTON_ROOT', '/Users/cskoons/projects/github/Tekton')
        cmd_dir = os.path.join(tekton_root, ".tekton", "terma", "commands")
        if not os.path.exists(cmd_dir):
            return
        
        # Process all command files
        for cmd_file in sorted(os.listdir(cmd_dir)):
            if not cmd_file.endswith('.json'):
                continue
                
            cmd_path = os.path.join(cmd_dir, cmd_file)
            try:
                with open(cmd_path, 'r') as f:
                    command = json.load(f)
                
                action = command.get('action')
                
                if action == 'pop' and message_inbox['new']:
                    # Remove first message from new
                    message_inbox['new'].popleft()
                    write_inbox_snapshot()
                    
                elif action == 'prompt_pop' and message_inbox['prompt']:
                    # Remove first message from prompt
                    message_inbox['prompt'].popleft()
                    write_inbox_snapshot()
                    
                elif action == 'keep_push':
                    # Add to front of keep
                    msg = {
                        'timestamp': datetime.now().isoformat(),
                        'message': command.get('message', '')
                    }
                    message_inbox['keep'].appendleft(msg)
                    write_inbox_snapshot()
                    
                elif action == 'keep_write':
                    # Add to end of keep
                    msg = {
                        'timestamp': datetime.now().isoformat(),
                        'message': command.get('message', '')
                    }
                    message_inbox['keep'].append(msg)
                    write_inbox_snapshot()
                    
                elif action == 'keep_remove_last' and message_inbox['keep']:
                    # Remove last from keep
                    message_inbox['keep'].pop()
                    write_inbox_snapshot()
                
                # Remove processed command file
                os.remove(cmd_path)
                
            except Exception:
                # Remove bad command files
                try:
                    os.remove(cmd_path)
                except:
                    pass
                    
    except Exception:
        # Don't let command processing errors crash anything
        pass

def start_heartbeat_daemon():
    """Start background thread to send heartbeats to Terma."""
    terma_session_id = TektonEnviron.get('TERMA_SESSION_ID')
    # Use tekton_url to get the correct Terma endpoint
    terma_endpoint = tekton_url('terma', '')
    
    if not terma_session_id:
        # Not launched by Terma, no heartbeats needed
        return None, None
    
    # Load existing inbox snapshot before starting
    load_inbox_snapshot()
    
    # Import queue for thread-safe command handling
    import queue
    
    # Flag to stop heartbeat thread
    stop_heartbeat = threading.Event()
    
    # Queue for pending command results
    pending_results = []
    result_lock = threading.Lock()
    
    def send_heartbeat(status="active", immediate=False):
        """Send a single heartbeat."""
        try:
            heartbeat_data = {
                "terma_id": terma_session_id,
                "pid": os.getpid(),
                "name": TektonEnviron.get('TEKTON_NAME', 'aish Terminal'),
                "working_dir": os.getcwd(),
                "terminal_app": TektonEnviron.get('TERM_PROGRAM', 'unknown'),
                "aish_version": "3.0.0",
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
                "status": status
            }
            
            # Include any pending command results
            with result_lock:
                if pending_results:
                    heartbeat_data["command_results"] = pending_results[:]
                    pending_results.clear()
            
            # Send heartbeat
            url = f"{terma_endpoint}/api/mcp/v2/terminals/heartbeat"
            data = json.dumps(heartbeat_data).encode('utf-8')
            req = urllib.request.Request(url, data=data, 
                                       headers={'Content-Type': 'application/json'})
            
            try:
                with urllib.request.urlopen(req, timeout=5) as response:
                    response_data = response.read()
                    if response_data:
                        result = json.loads(response_data)
                        # Check for commands and messages
                        if "commands" in result and result["commands"]:
                            for item in result["commands"]:
                                if item.get("type") == "terminal_message":
                                    # Display inter-terminal message
                                    display_terminal_message(item)
                                else:
                                    # Execute command
                                    execute_command(item)
            except urllib.error.URLError:
                # Terma might be down, that's ok
                pass
                
        except Exception:
            # Don't let heartbeat errors crash the shell
            pass
    
    # Landmark: Message Priority Classification - Routes to prompt/new/keep inboxes
    def display_terminal_message(msg_info):
        """Display an inter-terminal message."""
        from_name = msg_info.get("from", "unknown")
        message = msg_info.get("message", "")
        routing = msg_info.get("routing", "direct")
        
        # Format based on routing type
        if routing == "broadcast":
            prefix = f"[TERMA: broadcast from {from_name}]"
        elif routing.startswith("@"):
            prefix = f"[TERMA: to {routing} from {from_name}]"
        else:
            prefix = f"[TERMA: from {from_name}]"
        
        # Write to terminal directly to avoid prompt interference
        try:
            with open('/dev/tty', 'w') as tty:
                tty.write(f"\n{prefix} {message}\n")
                tty.flush()
        except:
            # Fallback to print if /dev/tty not available
            print(f"\n{prefix} {message}")
        
        # Add to appropriate inbox based on message type
        if message.startswith('[PROMPT]') or message.startswith('[autoprompt]'):
            # High priority prompt messages
            message_inbox['prompt'].append({
                'id': len(message_inbox['prompt']) + 1,
                'timestamp': datetime.now().isoformat(),
                'from': from_name,
                'message': message,
                'routing': routing
            })
        else:
            # Regular messages
            message_inbox['new'].append({
                'id': len(message_inbox['new']) + 1,
                'timestamp': datetime.now().isoformat(),
                'from': from_name,
                'message': message,
                'routing': routing
            })
        
        # Write snapshot for inbox command
        write_inbox_snapshot()
    
    def execute_command(cmd_info):
        """Execute a command and queue the result."""
        try:
            command = cmd_info.get("command", "")
            cmd_id = cmd_info.get("id", "unknown")
            
            logger.info(f"Processing command {cmd_id}: {command[:50]}...")  # Log first 50 chars
            
            # Execute command in subprocess
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=10,
                cwd=os.getcwd()
            )
            
            cmd_result = {
                "id": cmd_id,
                "output": result.stdout or result.stderr,
                "error": result.stderr if result.returncode != 0 else None,
                "exit_code": result.returncode
            }
            
            logger.info(f"Command {cmd_id} completed with exit code {result.returncode}")
            
            # Queue result and trigger immediate heartbeat
            with result_lock:
                pending_results.append(cmd_result)
            
            # Send immediate heartbeat with result
            send_heartbeat("active", immediate=True)
            
        except subprocess.TimeoutExpired:
            logger.warning(f"Command {cmd_info.get('id', 'unknown')} timed out after 10 seconds")
            with result_lock:
                pending_results.append({
                    "id": cmd_info.get("id", "unknown"),
                    "output": "",
                    "error": "Command timed out after 10 seconds",
                    "exit_code": -1
                })
            send_heartbeat("active", immediate=True)
        except Exception as e:
            with result_lock:
                pending_results.append({
                    "id": cmd_info["id"],
                    "output": "",
                    "error": str(e),
                    "exit_code": -1
                })
            send_heartbeat("active", immediate=True)
    
    # Landmark: Heartbeat Loop - 0.5s sleep, 2s command check, 30s heartbeat
    def send_heartbeats():
        """Send heartbeat every 30 seconds, check for commands every 0.5 seconds."""
        last_heartbeat = time.time()
        last_command_check = time.time()
        
        while not stop_heartbeat.is_set():
            # Process any inbox commands
            process_inbox_commands()
            
            # Check for commands frequently (every 2 seconds)
            if time.time() - last_command_check >= 2:
                # Send a heartbeat to check for commands
                send_heartbeat("active")
                last_command_check = time.time()
                last_heartbeat = time.time()  # This counts as a heartbeat too
            # Send regular heartbeat if time
            elif time.time() - last_heartbeat >= 30:
                send_heartbeat("active")
                last_heartbeat = time.time()
            
            # Short sleep to be responsive
            time.sleep(0.5)
    
    # Start heartbeat thread as daemon so it exits when main process exits
    heartbeat_thread = threading.Thread(target=send_heartbeats, daemon=True)
    heartbeat_thread.start()
    print(f"aish heartbeat started (session: {terma_session_id[:8]}...)")
    
    # Return the send_heartbeat function and stop event for exit handler
    return send_heartbeat, stop_heartbeat


def create_shell_init(shell_name, aish_dir, rhetor_endpoint=None, debug=False):
    """Create shell initialization for CI commands."""
    rhetor = rhetor_endpoint or "http://localhost:8003"
    
    # Base functions that work in both bash and zsh
    common_functions = f'''
# aish proxy initialization
export AISH_ACTIVE=1
export AISH_VERSION="3.0.0"
export RHETOR_ENDPOINT="{rhetor}"

# Ensure aish command is in PATH
export PATH="{aish_dir}:$PATH"

# That's it! The 'aish' command will handle all CI routing
# Usage:
#   aish apollo "query"
#   echo "data" | aish athena
#   aish team-chat "message"
'''
    
    # No shell-specific code needed anymore - just use aish command
    init_content = common_functions
    
    # Handle working directory change after shell init
    working_dir = TektonEnviron.get('TERMA_WORKING_DIR')
    if working_dir:
        init_content += f'''
# Change to requested working directory
cd "{working_dir}"
'''
    
    # Handle startup command if provided
    startup_cmd = TektonEnviron.get('TERMA_STARTUP_CMD')
    if startup_cmd:
        init_content += f'''
# Execute startup command
{startup_cmd}
'''
    
    if not debug:
        init_content += '''
echo "aish-proxy active (v3.0.0) - Usage: aish <ai-name> [message]"
echo "Examples: aish apollo | aish team-chat 'hello' | echo 'test' | aish athena"
'''
    
    return init_content

def main():
    """Main entry point for aish proxy."""
    import argparse
    import atexit
    import signal
    
    parser = argparse.ArgumentParser(
        description='aish-proxy - Safe AI-enhanced shell',
        epilog='Provides CI capabilities through shell functions'
    )
    
    parser.add_argument(
        '-c', '--command',
        help='Single command mode not supported yet'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Enable debug output'
    )
    
    parser.add_argument(
        '--shell',
        help='Base shell to use (default: $SHELL)',
        default=None
    )
    
    parser.add_argument(
        '--rhetor',
        help='Rhetor endpoint (default: http://localhost:8003)',
        default=None
    )
    
    parser.add_argument(
        '--version',
        action='store_true',
        help='Show version and exit'
    )
    
    args = parser.parse_args()
    
    if args.version:
        print("aish-proxy v3.0.0 - Safe shell hook implementation")
        return 0
    
    if args.command:
        print("Error: Single command mode not implemented yet", file=sys.stderr)
        return 1
    
    # Determine shell
    shell = args.shell or TektonEnviron.get('SHELL', '/bin/bash')
    shell_name = os.path.basename(shell)
    
    # Get aish directory
    aish_dir = str(Path(__file__).resolve().parent)
    
    # Create initialization
    init_content = create_shell_init(shell_name, aish_dir, args.rhetor, args.debug)
    
    # Write to temp file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.sh', delete=False) as f:
        f.write(init_content)
        init_file = f.name
    
    try:
        # Configure logging for this terminal
        configure_terminal_logging()
        
        # Log terminal startup
        terminal_name = TektonEnviron.get('TEKTON_NAME', 'unknown')
        session_id = TektonEnviron.get('TERMA_SESSION_ID', 'unknown')
        logger.info(f"Terminal starting - name: {terminal_name}, session: {session_id}, shell: {shell}")
        
        # Start heartbeat daemon if launched by Terma
        send_heartbeat_func, stop_event = start_heartbeat_daemon()
        
        # If we have heartbeat, register exit handler
        if send_heartbeat_func:
            def cleanup_and_exit():
                """Stop heartbeat, send goodbye, and exit cleanly."""
                logger.info("Terminal shutdown initiated")
                
                # Stop the heartbeat thread first
                if stop_event:
                    stop_event.set()
                    
                # Try to send final terminated heartbeat
                try:
                    send_heartbeat_func("terminated")
                    logger.info("Sent termination heartbeat to Terma")
                except:
                    # Terma might be down, that's ok
                    logger.warning("Failed to send termination heartbeat (Terma may be down)")
                    
                # Always clean up our inbox data
                cleanup_terminal_inbox()
                
                # Give it a moment to complete
                time.sleep(0.1)
                
                logger.info("Terminal shutdown complete")
            
            # Register cleanup for normal exit
            atexit.register(cleanup_and_exit)
            
            # Also handle signals
            def signal_handler(signum, frame):
                cleanup_and_exit()
                sys.exit(0)
            
            # Handle various termination signals
            for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP]:
                signal.signal(sig, signal_handler)
        
        if 'zsh' in shell_name:
            # For zsh, source our file then run interactive shell
            cmd = [shell, '-c', f'source {init_file} && exec {shell} -i']
        else:
            # For bash, use --rcfile
            cmd = [shell, '--rcfile', init_file]
        
        # Run the shell
        result = subprocess.run(cmd)
        return result.returncode
        
    finally:
        # Cleanup
        try:
            os.unlink(init_file)
        except:
            pass
    
    return 0


if __name__ == "__main__":
    sys.exit(main())